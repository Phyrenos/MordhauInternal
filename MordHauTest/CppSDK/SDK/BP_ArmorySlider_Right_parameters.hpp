#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ArmorySlider_Right

#include "Basic.hpp"

#include "S_MordhauSlider_structs.hpp"


namespace SDK::Params
{

// Function BP_ArmorySlider_Right.BP_ArmorySlider_Right_C.ExecuteUbergraph_BP_ArmorySlider_Right
// 0x0030 (0x0030 - 0x0000)
struct BP_ArmorySlider_Right_C_ExecuteUbergraph_BP_ArmorySlider_Right final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float Value)>                  K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_CustomEvent_Value;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Discretize_Value_Discretized_Value;       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ArmorySlider_Right_C_ExecuteUbergraph_BP_ArmorySlider_Right) == 0x000004, "Wrong alignment on BP_ArmorySlider_Right_C_ExecuteUbergraph_BP_ArmorySlider_Right");
static_assert(sizeof(BP_ArmorySlider_Right_C_ExecuteUbergraph_BP_ArmorySlider_Right) == 0x000030, "Wrong size on BP_ArmorySlider_Right_C_ExecuteUbergraph_BP_ArmorySlider_Right");
static_assert(offsetof(BP_ArmorySlider_Right_C_ExecuteUbergraph_BP_ArmorySlider_Right, EntryPoint) == 0x000000, "Member 'BP_ArmorySlider_Right_C_ExecuteUbergraph_BP_ArmorySlider_Right::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ArmorySlider_Right_C_ExecuteUbergraph_BP_ArmorySlider_Right, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_ArmorySlider_Right_C_ExecuteUbergraph_BP_ArmorySlider_Right::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ArmorySlider_Right_C_ExecuteUbergraph_BP_ArmorySlider_Right, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'BP_ArmorySlider_Right_C_ExecuteUbergraph_BP_ArmorySlider_Right::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_ArmorySlider_Right_C_ExecuteUbergraph_BP_ArmorySlider_Right, K2Node_CustomEvent_Value) == 0x000024, "Member 'BP_ArmorySlider_Right_C_ExecuteUbergraph_BP_ArmorySlider_Right::K2Node_CustomEvent_Value' has a wrong offset!");
static_assert(offsetof(BP_ArmorySlider_Right_C_ExecuteUbergraph_BP_ArmorySlider_Right, CallFunc_Discretize_Value_Discretized_Value) == 0x000028, "Member 'BP_ArmorySlider_Right_C_ExecuteUbergraph_BP_ArmorySlider_Right::CallFunc_Discretize_Value_Discretized_Value' has a wrong offset!");
static_assert(offsetof(BP_ArmorySlider_Right_C_ExecuteUbergraph_BP_ArmorySlider_Right, K2Node_Event_IsDesignTime) == 0x00002C, "Member 'BP_ArmorySlider_Right_C_ExecuteUbergraph_BP_ArmorySlider_Right::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function BP_ArmorySlider_Right.BP_ArmorySlider_Right_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_ArmorySlider_Right_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ArmorySlider_Right_C_PreConstruct) == 0x000001, "Wrong alignment on BP_ArmorySlider_Right_C_PreConstruct");
static_assert(sizeof(BP_ArmorySlider_Right_C_PreConstruct) == 0x000001, "Wrong size on BP_ArmorySlider_Right_C_PreConstruct");
static_assert(offsetof(BP_ArmorySlider_Right_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_ArmorySlider_Right_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_ArmorySlider_Right.BP_ArmorySlider_Right_C.Value Changed
// 0x0004 (0x0004 - 0x0000)
struct BP_ArmorySlider_Right_C_Value_Changed final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ArmorySlider_Right_C_Value_Changed) == 0x000004, "Wrong alignment on BP_ArmorySlider_Right_C_Value_Changed");
static_assert(sizeof(BP_ArmorySlider_Right_C_Value_Changed) == 0x000004, "Wrong size on BP_ArmorySlider_Right_C_Value_Changed");
static_assert(offsetof(BP_ArmorySlider_Right_C_Value_Changed, Value) == 0x000000, "Member 'BP_ArmorySlider_Right_C_Value_Changed::Value' has a wrong offset!");

// Function BP_ArmorySlider_Right.BP_ArmorySlider_Right_C.Initialize
// 0x0018 (0x0018 - 0x0000)
struct BP_ArmorySlider_Right_C_Initialize final
{
public:
	struct FS_MordhauSlider                       Slider_Struct_0;                                   // 0x0000(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Skip_set_value;                                    // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ArmorySlider_Right_C_Initialize) == 0x000004, "Wrong alignment on BP_ArmorySlider_Right_C_Initialize");
static_assert(sizeof(BP_ArmorySlider_Right_C_Initialize) == 0x000018, "Wrong size on BP_ArmorySlider_Right_C_Initialize");
static_assert(offsetof(BP_ArmorySlider_Right_C_Initialize, Slider_Struct_0) == 0x000000, "Member 'BP_ArmorySlider_Right_C_Initialize::Slider_Struct_0' has a wrong offset!");
static_assert(offsetof(BP_ArmorySlider_Right_C_Initialize, Skip_set_value) == 0x000014, "Member 'BP_ArmorySlider_Right_C_Initialize::Skip_set_value' has a wrong offset!");

// Function BP_ArmorySlider_Right.BP_ArmorySlider_Right_C.Set Slider Value Discrete
// 0x0008 (0x0008 - 0x0000)
struct BP_ArmorySlider_Right_C_Set_Slider_Value_Discrete final
{
public:
	int32                                         Discrete_Value;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Continualize_Value_ContinualizedValue;    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ArmorySlider_Right_C_Set_Slider_Value_Discrete) == 0x000004, "Wrong alignment on BP_ArmorySlider_Right_C_Set_Slider_Value_Discrete");
static_assert(sizeof(BP_ArmorySlider_Right_C_Set_Slider_Value_Discrete) == 0x000008, "Wrong size on BP_ArmorySlider_Right_C_Set_Slider_Value_Discrete");
static_assert(offsetof(BP_ArmorySlider_Right_C_Set_Slider_Value_Discrete, Discrete_Value) == 0x000000, "Member 'BP_ArmorySlider_Right_C_Set_Slider_Value_Discrete::Discrete_Value' has a wrong offset!");
static_assert(offsetof(BP_ArmorySlider_Right_C_Set_Slider_Value_Discrete, CallFunc_Continualize_Value_ContinualizedValue) == 0x000004, "Member 'BP_ArmorySlider_Right_C_Set_Slider_Value_Discrete::CallFunc_Continualize_Value_ContinualizedValue' has a wrong offset!");

// Function BP_ArmorySlider_Right.BP_ArmorySlider_Right_C.Set Slider Value
// 0x0004 (0x0004 - 0x0000)
struct BP_ArmorySlider_Right_C_Set_Slider_Value final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ArmorySlider_Right_C_Set_Slider_Value) == 0x000004, "Wrong alignment on BP_ArmorySlider_Right_C_Set_Slider_Value");
static_assert(sizeof(BP_ArmorySlider_Right_C_Set_Slider_Value) == 0x000004, "Wrong size on BP_ArmorySlider_Right_C_Set_Slider_Value");
static_assert(offsetof(BP_ArmorySlider_Right_C_Set_Slider_Value, Value) == 0x000000, "Member 'BP_ArmorySlider_Right_C_Set_Slider_Value::Value' has a wrong offset!");

// Function BP_ArmorySlider_Right.BP_ArmorySlider_Right_C.Get Slider Value
// 0x0010 (0x0010 - 0x0000)
struct BP_ArmorySlider_Right_C_Get_Slider_Value final
{
public:
	int32                                         Discretized_Value;                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Discrete_Slider_Value_Discretized_Value; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Get_Slider_Value_Value;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ArmorySlider_Right_C_Get_Slider_Value) == 0x000004, "Wrong alignment on BP_ArmorySlider_Right_C_Get_Slider_Value");
static_assert(sizeof(BP_ArmorySlider_Right_C_Get_Slider_Value) == 0x000010, "Wrong size on BP_ArmorySlider_Right_C_Get_Slider_Value");
static_assert(offsetof(BP_ArmorySlider_Right_C_Get_Slider_Value, Discretized_Value) == 0x000000, "Member 'BP_ArmorySlider_Right_C_Get_Slider_Value::Discretized_Value' has a wrong offset!");
static_assert(offsetof(BP_ArmorySlider_Right_C_Get_Slider_Value, Value) == 0x000004, "Member 'BP_ArmorySlider_Right_C_Get_Slider_Value::Value' has a wrong offset!");
static_assert(offsetof(BP_ArmorySlider_Right_C_Get_Slider_Value, CallFunc_Get_Discrete_Slider_Value_Discretized_Value) == 0x000008, "Member 'BP_ArmorySlider_Right_C_Get_Slider_Value::CallFunc_Get_Discrete_Slider_Value_Discretized_Value' has a wrong offset!");
static_assert(offsetof(BP_ArmorySlider_Right_C_Get_Slider_Value, CallFunc_Get_Slider_Value_Value) == 0x00000C, "Member 'BP_ArmorySlider_Right_C_Get_Slider_Value::CallFunc_Get_Slider_Value_Value' has a wrong offset!");

}

