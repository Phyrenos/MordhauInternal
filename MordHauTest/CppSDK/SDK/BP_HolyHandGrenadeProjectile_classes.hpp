#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HolyHandGrenadeProjectile

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_MordhauProjectile_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HolyHandGrenadeProjectile.BP_HolyHandGrenadeProjectile_C
// 0x0020 (0x0880 - 0x0860)
class ABP_HolyHandGrenadeProjectile_C final : public ABP_MordhauProjectile_C
{
public:
	uint8                                         Pad_854[0x4];                                      // 0x0854(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_HolyHandGrenadeProjectile_C;     // 0x0858(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class AController*                            Controller;                                        // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartTime;                                         // 0x0868(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BounceCount;                                       // 0x086C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBounce;                                         // 0x0870(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_HolyHandGrenadeProjectile(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ImpactEffectsMulti(const struct FVector& Location);
	void OnProjectileHit(const struct FVector& HitLocation, const struct FVector& HitNormal, float BounceForce, uint8 Surface, bool bHasHitWorld, bool bHasStopped);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HolyHandGrenadeProjectile_C">();
	}
	static class ABP_HolyHandGrenadeProjectile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HolyHandGrenadeProjectile_C>();
	}
};
static_assert(alignof(ABP_HolyHandGrenadeProjectile_C) == 0x000010, "Wrong alignment on ABP_HolyHandGrenadeProjectile_C");
static_assert(sizeof(ABP_HolyHandGrenadeProjectile_C) == 0x000880, "Wrong size on ABP_HolyHandGrenadeProjectile_C");
static_assert(offsetof(ABP_HolyHandGrenadeProjectile_C, UberGraphFrame_BP_HolyHandGrenadeProjectile_C) == 0x000858, "Member 'ABP_HolyHandGrenadeProjectile_C::UberGraphFrame_BP_HolyHandGrenadeProjectile_C' has a wrong offset!");
static_assert(offsetof(ABP_HolyHandGrenadeProjectile_C, Controller) == 0x000860, "Member 'ABP_HolyHandGrenadeProjectile_C::Controller' has a wrong offset!");
static_assert(offsetof(ABP_HolyHandGrenadeProjectile_C, StartTime) == 0x000868, "Member 'ABP_HolyHandGrenadeProjectile_C::StartTime' has a wrong offset!");
static_assert(offsetof(ABP_HolyHandGrenadeProjectile_C, BounceCount) == 0x00086C, "Member 'ABP_HolyHandGrenadeProjectile_C::BounceCount' has a wrong offset!");
static_assert(offsetof(ABP_HolyHandGrenadeProjectile_C, CanBounce) == 0x000870, "Member 'ABP_HolyHandGrenadeProjectile_C::CanBounce' has a wrong offset!");

}

