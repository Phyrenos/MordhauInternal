#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VehicleHorse

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Mordhau_structs.hpp"


namespace SDK::Params
{

// Function BP_VehicleHorse.BP_VehicleHorse_C.ExecuteUbergraph_BP_VehicleHorse
// 0x0030 (0x0030 - 0x0000)
struct BP_VehicleHorse_C_ExecuteUbergraph_BP_VehicleHorse final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Horse_C*                            K2Node_DynamicCast_AsBP_Horse;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue;                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VehicleHorse_C_ExecuteUbergraph_BP_VehicleHorse) == 0x000008, "Wrong alignment on BP_VehicleHorse_C_ExecuteUbergraph_BP_VehicleHorse");
static_assert(sizeof(BP_VehicleHorse_C_ExecuteUbergraph_BP_VehicleHorse) == 0x000030, "Wrong size on BP_VehicleHorse_C_ExecuteUbergraph_BP_VehicleHorse");
static_assert(offsetof(BP_VehicleHorse_C_ExecuteUbergraph_BP_VehicleHorse, EntryPoint) == 0x000000, "Member 'BP_VehicleHorse_C_ExecuteUbergraph_BP_VehicleHorse::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_ExecuteUbergraph_BP_VehicleHorse, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_VehicleHorse_C_ExecuteUbergraph_BP_VehicleHorse::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_ExecuteUbergraph_BP_VehicleHorse, K2Node_DynamicCast_AsBP_Horse) == 0x000010, "Member 'BP_VehicleHorse_C_ExecuteUbergraph_BP_VehicleHorse::K2Node_DynamicCast_AsBP_Horse' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_ExecuteUbergraph_BP_VehicleHorse, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_VehicleHorse_C_ExecuteUbergraph_BP_VehicleHorse::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_ExecuteUbergraph_BP_VehicleHorse, CallFunc_GetDriver_ReturnValue) == 0x000020, "Member 'BP_VehicleHorse_C_ExecuteUbergraph_BP_VehicleHorse::CallFunc_GetDriver_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_ExecuteUbergraph_BP_VehicleHorse, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_VehicleHorse_C_ExecuteUbergraph_BP_VehicleHorse::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_VehicleHorse.BP_VehicleHorse_C.GetVehicleEnterInfo
// 0x0100 (0x0100 - 0x0000)
struct BP_VehicleHorse_C_GetVehicleEnterInfo final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FromTransform;                                     // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FVehicleTransitionInfo                 ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ReturnParm, NoDestructor)
	class USkeletalMeshComponent*                 CallFunc_GetMesh_ReturnValue;                      // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0080(0x0030)(IsPlainOldData, NoDestructor)
	struct FVehicleTransitionInfo                 K2Node_MakeStruct_VehicleTransitionInfo;           // 0x00B0(0x0010)(NoDestructor, UObjectWrapper)
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue;     // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVehicleTransitionInfo                 K2Node_MakeStruct_VehicleTransitionInfo_1;         // 0x00D8(0x0010)(NoDestructor, UObjectWrapper)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleTransitionInfo                 K2Node_MakeStruct_VehicleTransitionInfo_2;         // 0x00F0(0x0010)(NoDestructor, UObjectWrapper)
};
static_assert(alignof(BP_VehicleHorse_C_GetVehicleEnterInfo) == 0x000010, "Wrong alignment on BP_VehicleHorse_C_GetVehicleEnterInfo");
static_assert(sizeof(BP_VehicleHorse_C_GetVehicleEnterInfo) == 0x000100, "Wrong size on BP_VehicleHorse_C_GetVehicleEnterInfo");
static_assert(offsetof(BP_VehicleHorse_C_GetVehicleEnterInfo, Character) == 0x000000, "Member 'BP_VehicleHorse_C_GetVehicleEnterInfo::Character' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_GetVehicleEnterInfo, FromTransform) == 0x000010, "Member 'BP_VehicleHorse_C_GetVehicleEnterInfo::FromTransform' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_GetVehicleEnterInfo, ReturnValue) == 0x000040, "Member 'BP_VehicleHorse_C_GetVehicleEnterInfo::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_GetVehicleEnterInfo, CallFunc_GetMesh_ReturnValue) == 0x000050, "Member 'BP_VehicleHorse_C_GetVehicleEnterInfo::CallFunc_GetMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_GetVehicleEnterInfo, CallFunc_BreakTransform_Location) == 0x000058, "Member 'BP_VehicleHorse_C_GetVehicleEnterInfo::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_GetVehicleEnterInfo, CallFunc_BreakTransform_Rotation) == 0x000064, "Member 'BP_VehicleHorse_C_GetVehicleEnterInfo::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_GetVehicleEnterInfo, CallFunc_BreakTransform_Scale) == 0x000070, "Member 'BP_VehicleHorse_C_GetVehicleEnterInfo::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_GetVehicleEnterInfo, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000080, "Member 'BP_VehicleHorse_C_GetVehicleEnterInfo::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_GetVehicleEnterInfo, K2Node_MakeStruct_VehicleTransitionInfo) == 0x0000B0, "Member 'BP_VehicleHorse_C_GetVehicleEnterInfo::K2Node_MakeStruct_VehicleTransitionInfo' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_GetVehicleEnterInfo, CallFunc_InverseTransformLocation_ReturnValue) == 0x0000C0, "Member 'BP_VehicleHorse_C_GetVehicleEnterInfo::CallFunc_InverseTransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_GetVehicleEnterInfo, CallFunc_BreakVector_X) == 0x0000CC, "Member 'BP_VehicleHorse_C_GetVehicleEnterInfo::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_GetVehicleEnterInfo, CallFunc_BreakVector_Y) == 0x0000D0, "Member 'BP_VehicleHorse_C_GetVehicleEnterInfo::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_GetVehicleEnterInfo, CallFunc_BreakVector_Z) == 0x0000D4, "Member 'BP_VehicleHorse_C_GetVehicleEnterInfo::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_GetVehicleEnterInfo, K2Node_MakeStruct_VehicleTransitionInfo_1) == 0x0000D8, "Member 'BP_VehicleHorse_C_GetVehicleEnterInfo::K2Node_MakeStruct_VehicleTransitionInfo_1' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_GetVehicleEnterInfo, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000E8, "Member 'BP_VehicleHorse_C_GetVehicleEnterInfo::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_GetVehicleEnterInfo, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000E9, "Member 'BP_VehicleHorse_C_GetVehicleEnterInfo::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_GetVehicleEnterInfo, K2Node_MakeStruct_VehicleTransitionInfo_2) == 0x0000F0, "Member 'BP_VehicleHorse_C_GetVehicleEnterInfo::K2Node_MakeStruct_VehicleTransitionInfo_2' has a wrong offset!");

// Function BP_VehicleHorse.BP_VehicleHorse_C.GetVehicleLeaveInfo
// 0x0060 (0x0060 - 0x0000)
struct BP_VehicleHorse_C_GetVehicleLeaveInfo final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FromTransform;                                     // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FVehicleTransitionInfo                 ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ReturnParm, NoDestructor)
	struct FVehicleTransitionInfo                 K2Node_MakeStruct_VehicleTransitionInfo;           // 0x0050(0x0010)(NoDestructor, UObjectWrapper)
};
static_assert(alignof(BP_VehicleHorse_C_GetVehicleLeaveInfo) == 0x000010, "Wrong alignment on BP_VehicleHorse_C_GetVehicleLeaveInfo");
static_assert(sizeof(BP_VehicleHorse_C_GetVehicleLeaveInfo) == 0x000060, "Wrong size on BP_VehicleHorse_C_GetVehicleLeaveInfo");
static_assert(offsetof(BP_VehicleHorse_C_GetVehicleLeaveInfo, Character) == 0x000000, "Member 'BP_VehicleHorse_C_GetVehicleLeaveInfo::Character' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_GetVehicleLeaveInfo, FromTransform) == 0x000010, "Member 'BP_VehicleHorse_C_GetVehicleLeaveInfo::FromTransform' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_GetVehicleLeaveInfo, ReturnValue) == 0x000040, "Member 'BP_VehicleHorse_C_GetVehicleLeaveInfo::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_GetVehicleLeaveInfo, K2Node_MakeStruct_VehicleTransitionInfo) == 0x000050, "Member 'BP_VehicleHorse_C_GetVehicleLeaveInfo::K2Node_MakeStruct_VehicleTransitionInfo' has a wrong offset!");

// Function BP_VehicleHorse.BP_VehicleHorse_C.OverrideAttackAngle
// 0x0038 (0x0038 - 0x0000)
struct BP_VehicleHorse_C_OverrideAttackAngle final
{
public:
	class UAttackMotion*                          Motion;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnglingValue;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Factor;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SignOfFloat_ReturnValue;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLookUpValue_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VehicleHorse_C_OverrideAttackAngle) == 0x000008, "Wrong alignment on BP_VehicleHorse_C_OverrideAttackAngle");
static_assert(sizeof(BP_VehicleHorse_C_OverrideAttackAngle) == 0x000038, "Wrong size on BP_VehicleHorse_C_OverrideAttackAngle");
static_assert(offsetof(BP_VehicleHorse_C_OverrideAttackAngle, Motion) == 0x000000, "Member 'BP_VehicleHorse_C_OverrideAttackAngle::Motion' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_OverrideAttackAngle, ReturnValue) == 0x000008, "Member 'BP_VehicleHorse_C_OverrideAttackAngle::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_OverrideAttackAngle, AnglingValue) == 0x00000C, "Member 'BP_VehicleHorse_C_OverrideAttackAngle::AnglingValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_OverrideAttackAngle, Factor) == 0x000010, "Member 'BP_VehicleHorse_C_OverrideAttackAngle::Factor' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_OverrideAttackAngle, CallFunc_Abs_ReturnValue) == 0x000014, "Member 'BP_VehicleHorse_C_OverrideAttackAngle::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_OverrideAttackAngle, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000018, "Member 'BP_VehicleHorse_C_OverrideAttackAngle::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_OverrideAttackAngle, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000019, "Member 'BP_VehicleHorse_C_OverrideAttackAngle::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_OverrideAttackAngle, CallFunc_BooleanOR_ReturnValue) == 0x00001A, "Member 'BP_VehicleHorse_C_OverrideAttackAngle::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_OverrideAttackAngle, CallFunc_SignOfFloat_ReturnValue) == 0x00001C, "Member 'BP_VehicleHorse_C_OverrideAttackAngle::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_OverrideAttackAngle, CallFunc_GetFloatValue_ReturnValue) == 0x000020, "Member 'BP_VehicleHorse_C_OverrideAttackAngle::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_OverrideAttackAngle, CallFunc_GetLookUpValue_ReturnValue) == 0x000024, "Member 'BP_VehicleHorse_C_OverrideAttackAngle::CallFunc_GetLookUpValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_OverrideAttackAngle, CallFunc_MapRangeClamped_ReturnValue) == 0x000028, "Member 'BP_VehicleHorse_C_OverrideAttackAngle::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_OverrideAttackAngle, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_VehicleHorse_C_OverrideAttackAngle::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_OverrideAttackAngle, CallFunc_Lerp_ReturnValue) == 0x000030, "Member 'BP_VehicleHorse_C_OverrideAttackAngle::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleHorse_C_OverrideAttackAngle, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000034, "Member 'BP_VehicleHorse_C_OverrideAttackAngle::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

}

