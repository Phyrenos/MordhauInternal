#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Longsword_DIH

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_Longsword_classes.hpp"
#include "Mordhau_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Longsword_DIH.BP_Longsword_DIH_C
// 0x0020 (0x1CC0 - 0x1CA0)
class ABP_Longsword_DIH_C final : public ABP_Longsword_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Longsword_DIH_C;                 // 0x1CA0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class ABP_DemonHordeCharacter_C*              OwningCharacter;                                   // 0x1CA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class ABP_BlessingLongswordFloating_C*        FloatingSwords;                                    // 0x1CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Longsword_DIH(int32 EntryPoint);
	void SetupBlessingStats();
	void OnHolsteredOrDropped(class AMordhauCharacter* Character);
	void StabRelease(EAttackMove Direction, float Angle, EAttackType Type);
	void MeleeRelease(EAttackMove Direction, float Angle, EAttackType Type);
	void OnEquipped(class AMordhauCharacter* Character);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Longsword_DIH_C">();
	}
	static class ABP_Longsword_DIH_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Longsword_DIH_C>();
	}
};
static_assert(alignof(ABP_Longsword_DIH_C) == 0x000010, "Wrong alignment on ABP_Longsword_DIH_C");
static_assert(sizeof(ABP_Longsword_DIH_C) == 0x001CC0, "Wrong size on ABP_Longsword_DIH_C");
static_assert(offsetof(ABP_Longsword_DIH_C, UberGraphFrame_BP_Longsword_DIH_C) == 0x001CA0, "Member 'ABP_Longsword_DIH_C::UberGraphFrame_BP_Longsword_DIH_C' has a wrong offset!");
static_assert(offsetof(ABP_Longsword_DIH_C, OwningCharacter) == 0x001CA8, "Member 'ABP_Longsword_DIH_C::OwningCharacter' has a wrong offset!");
static_assert(offsetof(ABP_Longsword_DIH_C, FloatingSwords) == 0x001CB0, "Member 'ABP_Longsword_DIH_C::FloatingSwords' has a wrong offset!");

}

