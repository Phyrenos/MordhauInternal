#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Int64

#include "Basic.hpp"

#include "Int64_structs.hpp"


namespace SDK::Params
{

// Function Int64.Int64FunctionLibrary.Conv_FloatToInt64
// 0x0010 (0x0010 - 0x0000)
struct Int64FunctionLibrary_Conv_FloatToInt64 final
{
public:
	float                                         Float;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInt64                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Int64FunctionLibrary_Conv_FloatToInt64) == 0x000008, "Wrong alignment on Int64FunctionLibrary_Conv_FloatToInt64");
static_assert(sizeof(Int64FunctionLibrary_Conv_FloatToInt64) == 0x000010, "Wrong size on Int64FunctionLibrary_Conv_FloatToInt64");
static_assert(offsetof(Int64FunctionLibrary_Conv_FloatToInt64, Float) == 0x000000, "Member 'Int64FunctionLibrary_Conv_FloatToInt64::Float' has a wrong offset!");
static_assert(offsetof(Int64FunctionLibrary_Conv_FloatToInt64, ReturnValue) == 0x000008, "Member 'Int64FunctionLibrary_Conv_FloatToInt64::ReturnValue' has a wrong offset!");

// Function Int64.Int64FunctionLibrary.Conv_Int32ToInt64
// 0x0010 (0x0010 - 0x0000)
struct Int64FunctionLibrary_Conv_Int32ToInt64 final
{
public:
	int32                                         Int32;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInt64                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Int64FunctionLibrary_Conv_Int32ToInt64) == 0x000008, "Wrong alignment on Int64FunctionLibrary_Conv_Int32ToInt64");
static_assert(sizeof(Int64FunctionLibrary_Conv_Int32ToInt64) == 0x000010, "Wrong size on Int64FunctionLibrary_Conv_Int32ToInt64");
static_assert(offsetof(Int64FunctionLibrary_Conv_Int32ToInt64, Int32) == 0x000000, "Member 'Int64FunctionLibrary_Conv_Int32ToInt64::Int32' has a wrong offset!");
static_assert(offsetof(Int64FunctionLibrary_Conv_Int32ToInt64, ReturnValue) == 0x000008, "Member 'Int64FunctionLibrary_Conv_Int32ToInt64::ReturnValue' has a wrong offset!");

// Function Int64.Int64FunctionLibrary.Conv_Int64ToFloat
// 0x0010 (0x0010 - 0x0000)
struct Int64FunctionLibrary_Conv_Int64ToFloat final
{
public:
	struct FInt64                                 Int64;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Int64FunctionLibrary_Conv_Int64ToFloat) == 0x000008, "Wrong alignment on Int64FunctionLibrary_Conv_Int64ToFloat");
static_assert(sizeof(Int64FunctionLibrary_Conv_Int64ToFloat) == 0x000010, "Wrong size on Int64FunctionLibrary_Conv_Int64ToFloat");
static_assert(offsetof(Int64FunctionLibrary_Conv_Int64ToFloat, Int64) == 0x000000, "Member 'Int64FunctionLibrary_Conv_Int64ToFloat::Int64' has a wrong offset!");
static_assert(offsetof(Int64FunctionLibrary_Conv_Int64ToFloat, ReturnValue) == 0x000008, "Member 'Int64FunctionLibrary_Conv_Int64ToFloat::ReturnValue' has a wrong offset!");

// Function Int64.Int64FunctionLibrary.Conv_Int64ToInt32
// 0x0010 (0x0010 - 0x0000)
struct Int64FunctionLibrary_Conv_Int64ToInt32 final
{
public:
	struct FInt64                                 Int64;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Int64FunctionLibrary_Conv_Int64ToInt32) == 0x000008, "Wrong alignment on Int64FunctionLibrary_Conv_Int64ToInt32");
static_assert(sizeof(Int64FunctionLibrary_Conv_Int64ToInt32) == 0x000010, "Wrong size on Int64FunctionLibrary_Conv_Int64ToInt32");
static_assert(offsetof(Int64FunctionLibrary_Conv_Int64ToInt32, Int64) == 0x000000, "Member 'Int64FunctionLibrary_Conv_Int64ToInt32::Int64' has a wrong offset!");
static_assert(offsetof(Int64FunctionLibrary_Conv_Int64ToInt32, ReturnValue) == 0x000008, "Member 'Int64FunctionLibrary_Conv_Int64ToInt32::ReturnValue' has a wrong offset!");

// Function Int64.Int64FunctionLibrary.Conv_Int64ToString
// 0x0018 (0x0018 - 0x0000)
struct Int64FunctionLibrary_Conv_Int64ToString final
{
public:
	struct FInt64                                 Int64;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Int64FunctionLibrary_Conv_Int64ToString) == 0x000008, "Wrong alignment on Int64FunctionLibrary_Conv_Int64ToString");
static_assert(sizeof(Int64FunctionLibrary_Conv_Int64ToString) == 0x000018, "Wrong size on Int64FunctionLibrary_Conv_Int64ToString");
static_assert(offsetof(Int64FunctionLibrary_Conv_Int64ToString, Int64) == 0x000000, "Member 'Int64FunctionLibrary_Conv_Int64ToString::Int64' has a wrong offset!");
static_assert(offsetof(Int64FunctionLibrary_Conv_Int64ToString, ReturnValue) == 0x000008, "Member 'Int64FunctionLibrary_Conv_Int64ToString::ReturnValue' has a wrong offset!");

// Function Int64.Int64FunctionLibrary.MakeInt64
// 0x0018 (0x0018 - 0x0000)
struct Int64FunctionLibrary_MakeInt64 final
{
public:
	class FString                                 Int64;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Int64FunctionLibrary_MakeInt64) == 0x000008, "Wrong alignment on Int64FunctionLibrary_MakeInt64");
static_assert(sizeof(Int64FunctionLibrary_MakeInt64) == 0x000018, "Wrong size on Int64FunctionLibrary_MakeInt64");
static_assert(offsetof(Int64FunctionLibrary_MakeInt64, Int64) == 0x000000, "Member 'Int64FunctionLibrary_MakeInt64::Int64' has a wrong offset!");
static_assert(offsetof(Int64FunctionLibrary_MakeInt64, ReturnValue) == 0x000010, "Member 'Int64FunctionLibrary_MakeInt64::ReturnValue' has a wrong offset!");

// Function Int64.Int64MathLibrary.Abs_Int
// 0x0010 (0x0010 - 0x0000)
struct Int64MathLibrary_Abs_Int final
{
public:
	struct FInt64                                 A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Int64MathLibrary_Abs_Int) == 0x000008, "Wrong alignment on Int64MathLibrary_Abs_Int");
static_assert(sizeof(Int64MathLibrary_Abs_Int) == 0x000010, "Wrong size on Int64MathLibrary_Abs_Int");
static_assert(offsetof(Int64MathLibrary_Abs_Int, A) == 0x000000, "Member 'Int64MathLibrary_Abs_Int::A' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Abs_Int, ReturnValue) == 0x000008, "Member 'Int64MathLibrary_Abs_Int::ReturnValue' has a wrong offset!");

// Function Int64.Int64MathLibrary.Add_Int64Float
// 0x0010 (0x0010 - 0x0000)
struct Int64MathLibrary_Add_Int64Float final
{
public:
	struct FInt64                                 A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Int64MathLibrary_Add_Int64Float) == 0x000008, "Wrong alignment on Int64MathLibrary_Add_Int64Float");
static_assert(sizeof(Int64MathLibrary_Add_Int64Float) == 0x000010, "Wrong size on Int64MathLibrary_Add_Int64Float");
static_assert(offsetof(Int64MathLibrary_Add_Int64Float, A) == 0x000000, "Member 'Int64MathLibrary_Add_Int64Float::A' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Add_Int64Float, B) == 0x000008, "Member 'Int64MathLibrary_Add_Int64Float::B' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Add_Int64Float, ReturnValue) == 0x00000C, "Member 'Int64MathLibrary_Add_Int64Float::ReturnValue' has a wrong offset!");

// Function Int64.Int64MathLibrary.Add_Int64Int64
// 0x0018 (0x0018 - 0x0000)
struct Int64MathLibrary_Add_Int64Int64 final
{
public:
	struct FInt64                                 A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Int64MathLibrary_Add_Int64Int64) == 0x000008, "Wrong alignment on Int64MathLibrary_Add_Int64Int64");
static_assert(sizeof(Int64MathLibrary_Add_Int64Int64) == 0x000018, "Wrong size on Int64MathLibrary_Add_Int64Int64");
static_assert(offsetof(Int64MathLibrary_Add_Int64Int64, A) == 0x000000, "Member 'Int64MathLibrary_Add_Int64Int64::A' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Add_Int64Int64, B) == 0x000008, "Member 'Int64MathLibrary_Add_Int64Int64::B' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Add_Int64Int64, ReturnValue) == 0x000010, "Member 'Int64MathLibrary_Add_Int64Int64::ReturnValue' has a wrong offset!");

// Function Int64.Int64MathLibrary.Divide_Int64Float
// 0x0010 (0x0010 - 0x0000)
struct Int64MathLibrary_Divide_Int64Float final
{
public:
	struct FInt64                                 A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Int64MathLibrary_Divide_Int64Float) == 0x000008, "Wrong alignment on Int64MathLibrary_Divide_Int64Float");
static_assert(sizeof(Int64MathLibrary_Divide_Int64Float) == 0x000010, "Wrong size on Int64MathLibrary_Divide_Int64Float");
static_assert(offsetof(Int64MathLibrary_Divide_Int64Float, A) == 0x000000, "Member 'Int64MathLibrary_Divide_Int64Float::A' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Divide_Int64Float, B) == 0x000008, "Member 'Int64MathLibrary_Divide_Int64Float::B' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Divide_Int64Float, ReturnValue) == 0x00000C, "Member 'Int64MathLibrary_Divide_Int64Float::ReturnValue' has a wrong offset!");

// Function Int64.Int64MathLibrary.Divide_Int64Int64
// 0x0018 (0x0018 - 0x0000)
struct Int64MathLibrary_Divide_Int64Int64 final
{
public:
	struct FInt64                                 A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Int64MathLibrary_Divide_Int64Int64) == 0x000008, "Wrong alignment on Int64MathLibrary_Divide_Int64Int64");
static_assert(sizeof(Int64MathLibrary_Divide_Int64Int64) == 0x000018, "Wrong size on Int64MathLibrary_Divide_Int64Int64");
static_assert(offsetof(Int64MathLibrary_Divide_Int64Int64, A) == 0x000000, "Member 'Int64MathLibrary_Divide_Int64Int64::A' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Divide_Int64Int64, B) == 0x000008, "Member 'Int64MathLibrary_Divide_Int64Int64::B' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Divide_Int64Int64, ReturnValue) == 0x000010, "Member 'Int64MathLibrary_Divide_Int64Int64::ReturnValue' has a wrong offset!");

// Function Int64.Int64MathLibrary.EqualEqual_Int64Int64
// 0x0018 (0x0018 - 0x0000)
struct Int64MathLibrary_EqualEqual_Int64Int64 final
{
public:
	struct FInt64                                 A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Int64MathLibrary_EqualEqual_Int64Int64) == 0x000008, "Wrong alignment on Int64MathLibrary_EqualEqual_Int64Int64");
static_assert(sizeof(Int64MathLibrary_EqualEqual_Int64Int64) == 0x000018, "Wrong size on Int64MathLibrary_EqualEqual_Int64Int64");
static_assert(offsetof(Int64MathLibrary_EqualEqual_Int64Int64, A) == 0x000000, "Member 'Int64MathLibrary_EqualEqual_Int64Int64::A' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_EqualEqual_Int64Int64, B) == 0x000008, "Member 'Int64MathLibrary_EqualEqual_Int64Int64::B' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_EqualEqual_Int64Int64, ReturnValue) == 0x000010, "Member 'Int64MathLibrary_EqualEqual_Int64Int64::ReturnValue' has a wrong offset!");

// Function Int64.Int64MathLibrary.Greater_Int64Int64
// 0x0018 (0x0018 - 0x0000)
struct Int64MathLibrary_Greater_Int64Int64 final
{
public:
	struct FInt64                                 A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Int64MathLibrary_Greater_Int64Int64) == 0x000008, "Wrong alignment on Int64MathLibrary_Greater_Int64Int64");
static_assert(sizeof(Int64MathLibrary_Greater_Int64Int64) == 0x000018, "Wrong size on Int64MathLibrary_Greater_Int64Int64");
static_assert(offsetof(Int64MathLibrary_Greater_Int64Int64, A) == 0x000000, "Member 'Int64MathLibrary_Greater_Int64Int64::A' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Greater_Int64Int64, B) == 0x000008, "Member 'Int64MathLibrary_Greater_Int64Int64::B' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Greater_Int64Int64, ReturnValue) == 0x000010, "Member 'Int64MathLibrary_Greater_Int64Int64::ReturnValue' has a wrong offset!");

// Function Int64.Int64MathLibrary.GreaterEqual_Int64Int64
// 0x0018 (0x0018 - 0x0000)
struct Int64MathLibrary_GreaterEqual_Int64Int64 final
{
public:
	struct FInt64                                 A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Int64MathLibrary_GreaterEqual_Int64Int64) == 0x000008, "Wrong alignment on Int64MathLibrary_GreaterEqual_Int64Int64");
static_assert(sizeof(Int64MathLibrary_GreaterEqual_Int64Int64) == 0x000018, "Wrong size on Int64MathLibrary_GreaterEqual_Int64Int64");
static_assert(offsetof(Int64MathLibrary_GreaterEqual_Int64Int64, A) == 0x000000, "Member 'Int64MathLibrary_GreaterEqual_Int64Int64::A' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_GreaterEqual_Int64Int64, B) == 0x000008, "Member 'Int64MathLibrary_GreaterEqual_Int64Int64::B' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_GreaterEqual_Int64Int64, ReturnValue) == 0x000010, "Member 'Int64MathLibrary_GreaterEqual_Int64Int64::ReturnValue' has a wrong offset!");

// Function Int64.Int64MathLibrary.Less_Int64Int64
// 0x0018 (0x0018 - 0x0000)
struct Int64MathLibrary_Less_Int64Int64 final
{
public:
	struct FInt64                                 A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Int64MathLibrary_Less_Int64Int64) == 0x000008, "Wrong alignment on Int64MathLibrary_Less_Int64Int64");
static_assert(sizeof(Int64MathLibrary_Less_Int64Int64) == 0x000018, "Wrong size on Int64MathLibrary_Less_Int64Int64");
static_assert(offsetof(Int64MathLibrary_Less_Int64Int64, A) == 0x000000, "Member 'Int64MathLibrary_Less_Int64Int64::A' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Less_Int64Int64, B) == 0x000008, "Member 'Int64MathLibrary_Less_Int64Int64::B' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Less_Int64Int64, ReturnValue) == 0x000010, "Member 'Int64MathLibrary_Less_Int64Int64::ReturnValue' has a wrong offset!");

// Function Int64.Int64MathLibrary.LessEqual_Int64Int64
// 0x0018 (0x0018 - 0x0000)
struct Int64MathLibrary_LessEqual_Int64Int64 final
{
public:
	struct FInt64                                 A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Int64MathLibrary_LessEqual_Int64Int64) == 0x000008, "Wrong alignment on Int64MathLibrary_LessEqual_Int64Int64");
static_assert(sizeof(Int64MathLibrary_LessEqual_Int64Int64) == 0x000018, "Wrong size on Int64MathLibrary_LessEqual_Int64Int64");
static_assert(offsetof(Int64MathLibrary_LessEqual_Int64Int64, A) == 0x000000, "Member 'Int64MathLibrary_LessEqual_Int64Int64::A' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_LessEqual_Int64Int64, B) == 0x000008, "Member 'Int64MathLibrary_LessEqual_Int64Int64::B' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_LessEqual_Int64Int64, ReturnValue) == 0x000010, "Member 'Int64MathLibrary_LessEqual_Int64Int64::ReturnValue' has a wrong offset!");

// Function Int64.Int64MathLibrary.Max
// 0x0018 (0x0018 - 0x0000)
struct Int64MathLibrary_Max final
{
public:
	struct FInt64                                 A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Int64MathLibrary_Max) == 0x000008, "Wrong alignment on Int64MathLibrary_Max");
static_assert(sizeof(Int64MathLibrary_Max) == 0x000018, "Wrong size on Int64MathLibrary_Max");
static_assert(offsetof(Int64MathLibrary_Max, A) == 0x000000, "Member 'Int64MathLibrary_Max::A' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Max, B) == 0x000008, "Member 'Int64MathLibrary_Max::B' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Max, ReturnValue) == 0x000010, "Member 'Int64MathLibrary_Max::ReturnValue' has a wrong offset!");

// Function Int64.Int64MathLibrary.Min
// 0x0018 (0x0018 - 0x0000)
struct Int64MathLibrary_Min final
{
public:
	struct FInt64                                 A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Int64MathLibrary_Min) == 0x000008, "Wrong alignment on Int64MathLibrary_Min");
static_assert(sizeof(Int64MathLibrary_Min) == 0x000018, "Wrong size on Int64MathLibrary_Min");
static_assert(offsetof(Int64MathLibrary_Min, A) == 0x000000, "Member 'Int64MathLibrary_Min::A' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Min, B) == 0x000008, "Member 'Int64MathLibrary_Min::B' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Min, ReturnValue) == 0x000010, "Member 'Int64MathLibrary_Min::ReturnValue' has a wrong offset!");

// Function Int64.Int64MathLibrary.Multiply_Int64Float
// 0x0010 (0x0010 - 0x0000)
struct Int64MathLibrary_Multiply_Int64Float final
{
public:
	struct FInt64                                 A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Int64MathLibrary_Multiply_Int64Float) == 0x000008, "Wrong alignment on Int64MathLibrary_Multiply_Int64Float");
static_assert(sizeof(Int64MathLibrary_Multiply_Int64Float) == 0x000010, "Wrong size on Int64MathLibrary_Multiply_Int64Float");
static_assert(offsetof(Int64MathLibrary_Multiply_Int64Float, A) == 0x000000, "Member 'Int64MathLibrary_Multiply_Int64Float::A' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Multiply_Int64Float, B) == 0x000008, "Member 'Int64MathLibrary_Multiply_Int64Float::B' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Multiply_Int64Float, ReturnValue) == 0x00000C, "Member 'Int64MathLibrary_Multiply_Int64Float::ReturnValue' has a wrong offset!");

// Function Int64.Int64MathLibrary.Multiply_Int64Int64
// 0x0018 (0x0018 - 0x0000)
struct Int64MathLibrary_Multiply_Int64Int64 final
{
public:
	struct FInt64                                 A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Int64MathLibrary_Multiply_Int64Int64) == 0x000008, "Wrong alignment on Int64MathLibrary_Multiply_Int64Int64");
static_assert(sizeof(Int64MathLibrary_Multiply_Int64Int64) == 0x000018, "Wrong size on Int64MathLibrary_Multiply_Int64Int64");
static_assert(offsetof(Int64MathLibrary_Multiply_Int64Int64, A) == 0x000000, "Member 'Int64MathLibrary_Multiply_Int64Int64::A' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Multiply_Int64Int64, B) == 0x000008, "Member 'Int64MathLibrary_Multiply_Int64Int64::B' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Multiply_Int64Int64, ReturnValue) == 0x000010, "Member 'Int64MathLibrary_Multiply_Int64Int64::ReturnValue' has a wrong offset!");

// Function Int64.Int64MathLibrary.NotEqual_Int64Int64
// 0x0018 (0x0018 - 0x0000)
struct Int64MathLibrary_NotEqual_Int64Int64 final
{
public:
	struct FInt64                                 A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Int64MathLibrary_NotEqual_Int64Int64) == 0x000008, "Wrong alignment on Int64MathLibrary_NotEqual_Int64Int64");
static_assert(sizeof(Int64MathLibrary_NotEqual_Int64Int64) == 0x000018, "Wrong size on Int64MathLibrary_NotEqual_Int64Int64");
static_assert(offsetof(Int64MathLibrary_NotEqual_Int64Int64, A) == 0x000000, "Member 'Int64MathLibrary_NotEqual_Int64Int64::A' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_NotEqual_Int64Int64, B) == 0x000008, "Member 'Int64MathLibrary_NotEqual_Int64Int64::B' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_NotEqual_Int64Int64, ReturnValue) == 0x000010, "Member 'Int64MathLibrary_NotEqual_Int64Int64::ReturnValue' has a wrong offset!");

// Function Int64.Int64MathLibrary.Percent_Int64Int64
// 0x0018 (0x0018 - 0x0000)
struct Int64MathLibrary_Percent_Int64Int64 final
{
public:
	struct FInt64                                 A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Int64MathLibrary_Percent_Int64Int64) == 0x000008, "Wrong alignment on Int64MathLibrary_Percent_Int64Int64");
static_assert(sizeof(Int64MathLibrary_Percent_Int64Int64) == 0x000018, "Wrong size on Int64MathLibrary_Percent_Int64Int64");
static_assert(offsetof(Int64MathLibrary_Percent_Int64Int64, A) == 0x000000, "Member 'Int64MathLibrary_Percent_Int64Int64::A' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Percent_Int64Int64, B) == 0x000008, "Member 'Int64MathLibrary_Percent_Int64Int64::B' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Percent_Int64Int64, ReturnValue) == 0x000010, "Member 'Int64MathLibrary_Percent_Int64Int64::ReturnValue' has a wrong offset!");

// Function Int64.Int64MathLibrary.Subtract_Int64Float
// 0x0010 (0x0010 - 0x0000)
struct Int64MathLibrary_Subtract_Int64Float final
{
public:
	struct FInt64                                 A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Int64MathLibrary_Subtract_Int64Float) == 0x000008, "Wrong alignment on Int64MathLibrary_Subtract_Int64Float");
static_assert(sizeof(Int64MathLibrary_Subtract_Int64Float) == 0x000010, "Wrong size on Int64MathLibrary_Subtract_Int64Float");
static_assert(offsetof(Int64MathLibrary_Subtract_Int64Float, A) == 0x000000, "Member 'Int64MathLibrary_Subtract_Int64Float::A' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Subtract_Int64Float, B) == 0x000008, "Member 'Int64MathLibrary_Subtract_Int64Float::B' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Subtract_Int64Float, ReturnValue) == 0x00000C, "Member 'Int64MathLibrary_Subtract_Int64Float::ReturnValue' has a wrong offset!");

// Function Int64.Int64MathLibrary.Subtract_Int64Int64
// 0x0018 (0x0018 - 0x0000)
struct Int64MathLibrary_Subtract_Int64Int64 final
{
public:
	struct FInt64                                 A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Int64MathLibrary_Subtract_Int64Int64) == 0x000008, "Wrong alignment on Int64MathLibrary_Subtract_Int64Int64");
static_assert(sizeof(Int64MathLibrary_Subtract_Int64Int64) == 0x000018, "Wrong size on Int64MathLibrary_Subtract_Int64Int64");
static_assert(offsetof(Int64MathLibrary_Subtract_Int64Int64, A) == 0x000000, "Member 'Int64MathLibrary_Subtract_Int64Int64::A' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Subtract_Int64Int64, B) == 0x000008, "Member 'Int64MathLibrary_Subtract_Int64Int64::B' has a wrong offset!");
static_assert(offsetof(Int64MathLibrary_Subtract_Int64Int64, ReturnValue) == 0x000010, "Member 'Int64MathLibrary_Subtract_Int64Int64::ReturnValue' has a wrong offset!");

}

