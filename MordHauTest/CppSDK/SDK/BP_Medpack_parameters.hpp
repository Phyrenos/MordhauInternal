#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Medpack

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_Medpack.BP_Medpack_C.ExecuteUbergraph_BP_Medpack
// 0x0080 (0x0080 - 0x0000)
struct BP_Medpack_C_ExecuteUbergraph_BP_Medpack final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_Origin;                               // 0x0008(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_Orientation;                          // 0x0014(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class AController*                            K2Node_Event_OwningController;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ExpectedDelay;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      K2Node_Event_Character;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0040(0x0030)(IsPlainOldData, NoDestructor)
	class UMordhauWidgetComponent*                CallFunc_AddComponent_ReturnValue;                 // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Medpack_C_ExecuteUbergraph_BP_Medpack) == 0x000010, "Wrong alignment on BP_Medpack_C_ExecuteUbergraph_BP_Medpack");
static_assert(sizeof(BP_Medpack_C_ExecuteUbergraph_BP_Medpack) == 0x000080, "Wrong size on BP_Medpack_C_ExecuteUbergraph_BP_Medpack");
static_assert(offsetof(BP_Medpack_C_ExecuteUbergraph_BP_Medpack, EntryPoint) == 0x000000, "Member 'BP_Medpack_C_ExecuteUbergraph_BP_Medpack::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ExecuteUbergraph_BP_Medpack, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'BP_Medpack_C_ExecuteUbergraph_BP_Medpack::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ExecuteUbergraph_BP_Medpack, K2Node_Event_Origin) == 0x000008, "Member 'BP_Medpack_C_ExecuteUbergraph_BP_Medpack::K2Node_Event_Origin' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ExecuteUbergraph_BP_Medpack, K2Node_Event_Orientation) == 0x000014, "Member 'BP_Medpack_C_ExecuteUbergraph_BP_Medpack::K2Node_Event_Orientation' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ExecuteUbergraph_BP_Medpack, K2Node_Event_OwningController) == 0x000020, "Member 'BP_Medpack_C_ExecuteUbergraph_BP_Medpack::K2Node_Event_OwningController' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ExecuteUbergraph_BP_Medpack, K2Node_Event_ExpectedDelay) == 0x000028, "Member 'BP_Medpack_C_ExecuteUbergraph_BP_Medpack::K2Node_Event_ExpectedDelay' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ExecuteUbergraph_BP_Medpack, K2Node_Event_Character) == 0x000030, "Member 'BP_Medpack_C_ExecuteUbergraph_BP_Medpack::K2Node_Event_Character' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ExecuteUbergraph_BP_Medpack, CallFunc_MakeTransform_ReturnValue) == 0x000040, "Member 'BP_Medpack_C_ExecuteUbergraph_BP_Medpack::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ExecuteUbergraph_BP_Medpack, CallFunc_AddComponent_ReturnValue) == 0x000070, "Member 'BP_Medpack_C_ExecuteUbergraph_BP_Medpack::CallFunc_AddComponent_ReturnValue' has a wrong offset!");

// Function BP_Medpack.BP_Medpack_C.OnHeldInteractionStart
// 0x0008 (0x0008 - 0x0000)
struct BP_Medpack_C_OnHeldInteractionStart final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Medpack_C_OnHeldInteractionStart) == 0x000008, "Wrong alignment on BP_Medpack_C_OnHeldInteractionStart");
static_assert(sizeof(BP_Medpack_C_OnHeldInteractionStart) == 0x000008, "Wrong size on BP_Medpack_C_OnHeldInteractionStart");
static_assert(offsetof(BP_Medpack_C_OnHeldInteractionStart, Character) == 0x000000, "Member 'BP_Medpack_C_OnHeldInteractionStart::Character' has a wrong offset!");

// Function BP_Medpack.BP_Medpack_C.FireProjectile
// 0x0028 (0x0028 - 0x0000)
struct BP_Medpack_C_FireProjectile final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Orientation;                                       // 0x000C(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	class AController*                            OwningController;                                  // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExpectedDelay;                                     // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Medpack_C_FireProjectile) == 0x000008, "Wrong alignment on BP_Medpack_C_FireProjectile");
static_assert(sizeof(BP_Medpack_C_FireProjectile) == 0x000028, "Wrong size on BP_Medpack_C_FireProjectile");
static_assert(offsetof(BP_Medpack_C_FireProjectile, Origin) == 0x000000, "Member 'BP_Medpack_C_FireProjectile::Origin' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_FireProjectile, Orientation) == 0x00000C, "Member 'BP_Medpack_C_FireProjectile::Orientation' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_FireProjectile, OwningController) == 0x000018, "Member 'BP_Medpack_C_FireProjectile::OwningController' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_FireProjectile, ExpectedDelay) == 0x000020, "Member 'BP_Medpack_C_FireProjectile::ExpectedDelay' has a wrong offset!");

// Function BP_Medpack.BP_Medpack_C.ApplyHeal
// 0x0058 (0x0058 - 0x0000)
struct BP_Medpack_C_ApplyHeal final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ScoreToGive;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ToHeal;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauGameState*                      K2Node_DynamicCast_AsMordhau_Game_State;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauPlayerController*               K2Node_DynamicCast_AsMordhau_Player_Controller;    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Min_ReturnValue;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFriendly_ReturnValue;                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Medpack_C_ApplyHeal) == 0x000008, "Wrong alignment on BP_Medpack_C_ApplyHeal");
static_assert(sizeof(BP_Medpack_C_ApplyHeal) == 0x000058, "Wrong size on BP_Medpack_C_ApplyHeal");
static_assert(offsetof(BP_Medpack_C_ApplyHeal, Character) == 0x000000, "Member 'BP_Medpack_C_ApplyHeal::Character' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ApplyHeal, ScoreToGive) == 0x000008, "Member 'BP_Medpack_C_ApplyHeal::ScoreToGive' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ApplyHeal, ToHeal) == 0x00000C, "Member 'BP_Medpack_C_ApplyHeal::ToHeal' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ApplyHeal, CallFunc_Greater_IntInt_ReturnValue) == 0x000010, "Member 'BP_Medpack_C_ApplyHeal::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ApplyHeal, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000014, "Member 'BP_Medpack_C_ApplyHeal::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ApplyHeal, CallFunc_Subtract_IntInt_ReturnValue) == 0x000018, "Member 'BP_Medpack_C_ApplyHeal::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ApplyHeal, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00001C, "Member 'BP_Medpack_C_ApplyHeal::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ApplyHeal, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00001D, "Member 'BP_Medpack_C_ApplyHeal::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ApplyHeal, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000020, "Member 'BP_Medpack_C_ApplyHeal::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ApplyHeal, CallFunc_FTrunc_ReturnValue) == 0x000024, "Member 'BP_Medpack_C_ApplyHeal::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ApplyHeal, CallFunc_GetGameState_ReturnValue) == 0x000028, "Member 'BP_Medpack_C_ApplyHeal::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ApplyHeal, K2Node_DynamicCast_AsMordhau_Game_State) == 0x000030, "Member 'BP_Medpack_C_ApplyHeal::K2Node_DynamicCast_AsMordhau_Game_State' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ApplyHeal, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_Medpack_C_ApplyHeal::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ApplyHeal, K2Node_DynamicCast_AsMordhau_Player_Controller) == 0x000040, "Member 'BP_Medpack_C_ApplyHeal::K2Node_DynamicCast_AsMordhau_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ApplyHeal, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'BP_Medpack_C_ApplyHeal::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ApplyHeal, CallFunc_Min_ReturnValue) == 0x00004C, "Member 'BP_Medpack_C_ApplyHeal::CallFunc_Min_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ApplyHeal, CallFunc_IsFriendly_ReturnValue) == 0x000050, "Member 'BP_Medpack_C_ApplyHeal::CallFunc_IsFriendly_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ApplyHeal, CallFunc_BooleanAND_ReturnValue) == 0x000051, "Member 'BP_Medpack_C_ApplyHeal::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_ApplyHeal, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000054, "Member 'BP_Medpack_C_ApplyHeal::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_Medpack.BP_Medpack_C.CanInteract
// 0x0010 (0x0010 - 0x0000)
struct BP_Medpack_C_CanInteract final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanInteract_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Medpack_C_CanInteract) == 0x000008, "Wrong alignment on BP_Medpack_C_CanInteract");
static_assert(sizeof(BP_Medpack_C_CanInteract) == 0x000010, "Wrong size on BP_Medpack_C_CanInteract");
static_assert(offsetof(BP_Medpack_C_CanInteract, Character) == 0x000000, "Member 'BP_Medpack_C_CanInteract::Character' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_CanInteract, ReturnValue) == 0x000008, "Member 'BP_Medpack_C_CanInteract::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_CanInteract, CallFunc_CanInteract_ReturnValue) == 0x000009, "Member 'BP_Medpack_C_CanInteract::CallFunc_CanInteract_ReturnValue' has a wrong offset!");

// Function BP_Medpack.BP_Medpack_C.CanHeldInteract
// 0x0010 (0x0010 - 0x0000)
struct BP_Medpack_C_CanHeldInteract final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanHeldInteract_ReturnValue;              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_ByteByte_ReturnValue;                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Medpack_C_CanHeldInteract) == 0x000008, "Wrong alignment on BP_Medpack_C_CanHeldInteract");
static_assert(sizeof(BP_Medpack_C_CanHeldInteract) == 0x000010, "Wrong size on BP_Medpack_C_CanHeldInteract");
static_assert(offsetof(BP_Medpack_C_CanHeldInteract, Character) == 0x000000, "Member 'BP_Medpack_C_CanHeldInteract::Character' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_CanHeldInteract, ReturnValue) == 0x000008, "Member 'BP_Medpack_C_CanHeldInteract::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_CanHeldInteract, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'BP_Medpack_C_CanHeldInteract::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_CanHeldInteract, CallFunc_CanHeldInteract_ReturnValue) == 0x00000A, "Member 'BP_Medpack_C_CanHeldInteract::CallFunc_CanHeldInteract_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_CanHeldInteract, CallFunc_Not_PreBool_ReturnValue) == 0x00000B, "Member 'BP_Medpack_C_CanHeldInteract::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_CanHeldInteract, CallFunc_Less_ByteByte_ReturnValue) == 0x00000C, "Member 'BP_Medpack_C_CanHeldInteract::CallFunc_Less_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Medpack_C_CanHeldInteract, CallFunc_BooleanAND_ReturnValue) == 0x00000D, "Member 'BP_Medpack_C_CanHeldInteract::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

}

