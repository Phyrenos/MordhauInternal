#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HordeEnemy

#include "Basic.hpp"

#include "BP_BattleRoyaleCharacter_classes.hpp"
#include "Engine_structs.hpp"
#include "Mordhau_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HordeEnemy.BP_HordeEnemy_C
// 0x00A0 (0x13B0 - 0x1310)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_HordeEnemy_C : public ABP_BattleRoyaleCharacter_C
{
public:
	uint8                                         Pad_1301[0x7];                                     // 0x1301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_HordeEnemy_C;                    // 0x1308(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UMordhauWidgetComponent*                MordhauWidget;                                     // 0x1310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         KillReward;                                        // 0x1318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WoodDamageForPathClearing;                         // 0x131C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HordeTask_C*                        CurrentTask;                                       // 0x1320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBoss;                                            // 0x1328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsCrippled;                                        // 0x1329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_132A[0x2];                                     // 0x132A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreCrippleMaxWalkSpeed;                            // 0x132C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      RageTarget;                                        // 0x1330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         StunnedBySkillCounter;                             // 0x1338(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1339[0x3];                                     // 0x1339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastClimbTime;                                     // 0x133C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              SpawnSound;                                        // 0x1340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBehaviorTree*                          BehaviorTreeOverride;                              // 0x1348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSet<class FName>                             TaskTags;                                          // 0x1350(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Squad;                                             // 0x13A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_HordeEnemy(int32 EntryPoint);
	void ReceivePossessed(class AController* NewController);
	void OnKilled(class AController* EventInstigator);
	void Enrage(class AMordhauCharacter* Target, float Duration);
	void Cripple(float Duration);
	void Recoil();
	void OnBlockedMelee(const struct FHitResult& HitResult, class AMordhauCharacter* Attacker);
	void LegSweep();
	void ReceiveMordhauDamage(float Damage, const struct FHitResult& HitResult, EMordhauDamageType DamageType, uint8 SubDamageType, class AActor* Source, class AActor* Agent, class AController* EventInstigator);
	void CompleteTask();
	void MoveBlockedBySlow(const struct FHitResult& Impact);
	float ModifyDamage(float DamageAmount, const struct FMordhauDamageInfo& DamageInfo, class AController* EventInstigator);
	bool ModifyParryResult(bool InResult, const struct FHitResult& HitResult, class AMordhauCharacter* Attacker);
	void GetEnragedTarget(class AMordhauCharacter** OutTarget);
	void OnRep_StunnedBySkillCounter();
	void HandleObstructionRemoval(const struct FHitResult& Impact);
	void OnDied(float Angle, EMordhauDamageType Type, uint8 SubType, class FName bone, const struct FVector& Point, class AActor* Source, class AActor* Agent);
	void ReceiveBeginPlay();
	void AttemptClimb(bool* Succeeded);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HordeEnemy_C">();
	}
	static class ABP_HordeEnemy_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HordeEnemy_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_HordeEnemy_C) == 0x000010, "Wrong alignment on ABP_HordeEnemy_C");
static_assert(sizeof(ABP_HordeEnemy_C) == 0x0013B0, "Wrong size on ABP_HordeEnemy_C");
static_assert(offsetof(ABP_HordeEnemy_C, UberGraphFrame_BP_HordeEnemy_C) == 0x001308, "Member 'ABP_HordeEnemy_C::UberGraphFrame_BP_HordeEnemy_C' has a wrong offset!");
static_assert(offsetof(ABP_HordeEnemy_C, MordhauWidget) == 0x001310, "Member 'ABP_HordeEnemy_C::MordhauWidget' has a wrong offset!");
static_assert(offsetof(ABP_HordeEnemy_C, KillReward) == 0x001318, "Member 'ABP_HordeEnemy_C::KillReward' has a wrong offset!");
static_assert(offsetof(ABP_HordeEnemy_C, WoodDamageForPathClearing) == 0x00131C, "Member 'ABP_HordeEnemy_C::WoodDamageForPathClearing' has a wrong offset!");
static_assert(offsetof(ABP_HordeEnemy_C, CurrentTask) == 0x001320, "Member 'ABP_HordeEnemy_C::CurrentTask' has a wrong offset!");
static_assert(offsetof(ABP_HordeEnemy_C, IsBoss) == 0x001328, "Member 'ABP_HordeEnemy_C::IsBoss' has a wrong offset!");
static_assert(offsetof(ABP_HordeEnemy_C, IsCrippled) == 0x001329, "Member 'ABP_HordeEnemy_C::IsCrippled' has a wrong offset!");
static_assert(offsetof(ABP_HordeEnemy_C, PreCrippleMaxWalkSpeed) == 0x00132C, "Member 'ABP_HordeEnemy_C::PreCrippleMaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(ABP_HordeEnemy_C, RageTarget) == 0x001330, "Member 'ABP_HordeEnemy_C::RageTarget' has a wrong offset!");
static_assert(offsetof(ABP_HordeEnemy_C, StunnedBySkillCounter) == 0x001338, "Member 'ABP_HordeEnemy_C::StunnedBySkillCounter' has a wrong offset!");
static_assert(offsetof(ABP_HordeEnemy_C, LastClimbTime) == 0x00133C, "Member 'ABP_HordeEnemy_C::LastClimbTime' has a wrong offset!");
static_assert(offsetof(ABP_HordeEnemy_C, SpawnSound) == 0x001340, "Member 'ABP_HordeEnemy_C::SpawnSound' has a wrong offset!");
static_assert(offsetof(ABP_HordeEnemy_C, BehaviorTreeOverride) == 0x001348, "Member 'ABP_HordeEnemy_C::BehaviorTreeOverride' has a wrong offset!");
static_assert(offsetof(ABP_HordeEnemy_C, TaskTags) == 0x001350, "Member 'ABP_HordeEnemy_C::TaskTags' has a wrong offset!");
static_assert(offsetof(ABP_HordeEnemy_C, Squad) == 0x0013A0, "Member 'ABP_HordeEnemy_C::Squad' has a wrong offset!");

}

