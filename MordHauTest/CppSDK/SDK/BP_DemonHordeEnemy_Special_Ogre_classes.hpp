#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DemonHordeEnemy_Special_Ogre

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_DemonHordeEnemy_Special_classes.hpp"
#include "Mordhau_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DemonHordeEnemy_Special_Ogre.BP_DemonHordeEnemy_Special_Ogre_C
// 0x0060 (0x1590 - 0x1530)
class ABP_DemonHordeEnemy_Special_Ogre_C final : public ABP_DemonHordeEnemy_Special_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_DemonHordeEnemy_Special_Ogre_C;  // 0x1530(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UArrowComponent*                        SwordStrikeEffects;                                // 0x1538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          StrikeBoxExtra;                                    // 0x1540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          StrikeBoxMain;                                     // 0x1548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       StompSphere;                                       // 0x1550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       BuffSphere;                                        // 0x1558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BattleHornHip;                                     // 0x1560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BattleHornHand;                                    // 0x1568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStateCooldown;                                   // 0x1570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1571[0x3];                                     // 0x1571(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StateCooldown;                                     // 0x1574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHornCooldown;                                    // 0x1578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1579[0x3];                                     // 0x1579(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HornCooldown;                                      // 0x157C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StompDamage;                                       // 0x1580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DemonHordeEnemy_Special_Ogre(int32 EntryPoint);
	void SwordImpactMulti();
	void SwordTrailMulti();
	void StompEffectsMulti();
	void ImpactKnockback(class AActor* ImpactTarget);
	void StartHornCooldown();
	void HornActiveMulti(bool Active);
	void StartStateCooldown();
	void BehaviourLoop();
	void ReceiveBeginPlay();
	void OnDied(float Angle, EMordhauDamageType Type, uint8 SubType, class FName bone, const struct FVector& Point, class AActor* Source, class AActor* Agent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DemonHordeEnemy_Special_Ogre_C">();
	}
	static class ABP_DemonHordeEnemy_Special_Ogre_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DemonHordeEnemy_Special_Ogre_C>();
	}
};
static_assert(alignof(ABP_DemonHordeEnemy_Special_Ogre_C) == 0x000010, "Wrong alignment on ABP_DemonHordeEnemy_Special_Ogre_C");
static_assert(sizeof(ABP_DemonHordeEnemy_Special_Ogre_C) == 0x001590, "Wrong size on ABP_DemonHordeEnemy_Special_Ogre_C");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Ogre_C, UberGraphFrame_BP_DemonHordeEnemy_Special_Ogre_C) == 0x001530, "Member 'ABP_DemonHordeEnemy_Special_Ogre_C::UberGraphFrame_BP_DemonHordeEnemy_Special_Ogre_C' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Ogre_C, SwordStrikeEffects) == 0x001538, "Member 'ABP_DemonHordeEnemy_Special_Ogre_C::SwordStrikeEffects' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Ogre_C, StrikeBoxExtra) == 0x001540, "Member 'ABP_DemonHordeEnemy_Special_Ogre_C::StrikeBoxExtra' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Ogre_C, StrikeBoxMain) == 0x001548, "Member 'ABP_DemonHordeEnemy_Special_Ogre_C::StrikeBoxMain' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Ogre_C, StompSphere) == 0x001550, "Member 'ABP_DemonHordeEnemy_Special_Ogre_C::StompSphere' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Ogre_C, BuffSphere) == 0x001558, "Member 'ABP_DemonHordeEnemy_Special_Ogre_C::BuffSphere' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Ogre_C, BattleHornHip) == 0x001560, "Member 'ABP_DemonHordeEnemy_Special_Ogre_C::BattleHornHip' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Ogre_C, BattleHornHand) == 0x001568, "Member 'ABP_DemonHordeEnemy_Special_Ogre_C::BattleHornHand' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Ogre_C, IsStateCooldown) == 0x001570, "Member 'ABP_DemonHordeEnemy_Special_Ogre_C::IsStateCooldown' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Ogre_C, StateCooldown) == 0x001574, "Member 'ABP_DemonHordeEnemy_Special_Ogre_C::StateCooldown' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Ogre_C, IsHornCooldown) == 0x001578, "Member 'ABP_DemonHordeEnemy_Special_Ogre_C::IsHornCooldown' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Ogre_C, HornCooldown) == 0x00157C, "Member 'ABP_DemonHordeEnemy_Special_Ogre_C::HornCooldown' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Ogre_C, StompDamage) == 0x001580, "Member 'ABP_DemonHordeEnemy_Special_Ogre_C::StompDamage' has a wrong offset!");

}

