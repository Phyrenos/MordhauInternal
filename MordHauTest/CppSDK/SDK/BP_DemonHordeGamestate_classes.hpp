#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DemonHordeGamestate

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DemonHordeActorArray_structs.hpp"
#include "BP_HordeGameState_classes.hpp"
#include "DemonHordeEnemyArray_structs.hpp"
#include "MordhauOnlineSubsystem_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DemonHordeGamestate.BP_DemonHordeGamestate_C
// 0x01A0 (0x0AF0 - 0x0950)
class ABP_DemonHordeGamestate_C final : public ABP_HordeGameState_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_DemonHordeGamestate_C;           // 0x0950(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	uint8                                         CurrentStage;                                      // 0x0958(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_959[0x7];                                      // 0x0959(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<uint8, struct FDemonHordeActorArray>     StageSettings;                                     // 0x0960(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              NewStageScriptedEvents;                            // 0x09B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<uint8, struct FDemonHordeEnemyArray>     StageEnemies;                                      // 0x09C0(0x0050)(Edit, BlueprintVisible)
	class ABP_SetupDemonHorde_C*                  DemonHordeSetup;                                   // 0x0A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EPlatform, float>                        PlatformDifficultyMultiplier;                      // 0x0A18(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<int32, float>                            PlayerCountDifficultyMultiplier;                   // 0x0A68(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         MatchElapsedTime;                                  // 0x0AB8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_ABC[0x4];                                      // 0x0ABC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           MatchElapsedTimer;                                 // 0x0AC0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayersAllDead;                                    // 0x0AC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AC9[0x7];                                      // 0x0AC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DifficultyScaling;                                 // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanSpawnEnemies;                                   // 0x0AD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD9[0x3];                                      // 0x0AD9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrestigeTier;                                      // 0x0ADC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         StageActivationDelay;                              // 0x0AE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentStageEnemyCountReplicated;                  // 0x0AE4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HolyGunEasterEgg;                                  // 0x0AE8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_DemonHordeGamestate(int32 EntryPoint);
	void ClearBsaeSoundMix();
	void PushBaseMix();
	void ResetPrestige();
	void ApplyClientPrestige();
	void AllowSpawn();
	void DelayNewWave();
	void NewStageWaveReset();
	void WaveSpawningCurrentStage();
	void StopMatchTimer();
	void BeginMatchTimer();
	void ReceiveBeginPlay();
	void Set_Current_Stage(uint8 CurrentStage_0);
	void OnObjectiveCompleted(class AActor* ObjectiveActor);
	void OnObjectiveFailed(class AActor* ObjectiveActor);
	void OnRep_CurrentStage();
	void CanProgressObjective(class AActor* Objective, bool* CanProgress);
	void HandleStageActors();
	void FailStage();
	void RespawnDeadPlayers();
	void HandlePreviousStageEnemies();
	void HandleCurrentStageEnemies();
	void SelectEnemyToSpawn(const TMap<class FName, float>& Enemy_List, class FName* Enemy_To_Spawn);
	void RegisterEnemy(class AMordhauCharacter* Enemy_Character);
	void RegisteredEnemyDied(class AAdvancedCharacter* Character);
	void FindSpecificEnemySpawnLocation(TArray<class ABP_HordeSpawn_C*>& Spawn_Locations, struct FVector* Location);
	void UnregisterEnemy(class AMordhauCharacter* Enemy_Character);
	void GetDemonHordeSetupActor(class ABP_SetupDemonHorde_C** Demon_Horde_Setup_Actor);
	void FindRandomEnemySpawnLocation(struct FVector* Location);
	void GetDifficultyMultiplier(float* Difficulty_Multiplier);
	void IncrementMatchElapsedTime();
	void NumberOfAlivePlayers(int32* Alive_Count);
	void OnRep_PrestigeTier();
	void DeactivatePreviousStageObjectives();
	void ActivateCurrentStageObjectives();
	void Get_Late_Joiner_Free_Coins(int32* Coins);
	void ModifyScoreByMatchParams();
	void CanDoHolyGunEasterEgg(bool* Return_Value);
	void HolyGunEasterEggTriggered();
	void HandleMatchEndInfo();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DemonHordeGamestate_C">();
	}
	static class ABP_DemonHordeGamestate_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DemonHordeGamestate_C>();
	}
};
static_assert(alignof(ABP_DemonHordeGamestate_C) == 0x000008, "Wrong alignment on ABP_DemonHordeGamestate_C");
static_assert(sizeof(ABP_DemonHordeGamestate_C) == 0x000AF0, "Wrong size on ABP_DemonHordeGamestate_C");
static_assert(offsetof(ABP_DemonHordeGamestate_C, UberGraphFrame_BP_DemonHordeGamestate_C) == 0x000950, "Member 'ABP_DemonHordeGamestate_C::UberGraphFrame_BP_DemonHordeGamestate_C' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeGamestate_C, CurrentStage) == 0x000958, "Member 'ABP_DemonHordeGamestate_C::CurrentStage' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeGamestate_C, StageSettings) == 0x000960, "Member 'ABP_DemonHordeGamestate_C::StageSettings' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeGamestate_C, NewStageScriptedEvents) == 0x0009B0, "Member 'ABP_DemonHordeGamestate_C::NewStageScriptedEvents' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeGamestate_C, StageEnemies) == 0x0009C0, "Member 'ABP_DemonHordeGamestate_C::StageEnemies' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeGamestate_C, DemonHordeSetup) == 0x000A10, "Member 'ABP_DemonHordeGamestate_C::DemonHordeSetup' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeGamestate_C, PlatformDifficultyMultiplier) == 0x000A18, "Member 'ABP_DemonHordeGamestate_C::PlatformDifficultyMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeGamestate_C, PlayerCountDifficultyMultiplier) == 0x000A68, "Member 'ABP_DemonHordeGamestate_C::PlayerCountDifficultyMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeGamestate_C, MatchElapsedTime) == 0x000AB8, "Member 'ABP_DemonHordeGamestate_C::MatchElapsedTime' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeGamestate_C, MatchElapsedTimer) == 0x000AC0, "Member 'ABP_DemonHordeGamestate_C::MatchElapsedTimer' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeGamestate_C, PlayersAllDead) == 0x000AC8, "Member 'ABP_DemonHordeGamestate_C::PlayersAllDead' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeGamestate_C, DifficultyScaling) == 0x000AD0, "Member 'ABP_DemonHordeGamestate_C::DifficultyScaling' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeGamestate_C, CanSpawnEnemies) == 0x000AD8, "Member 'ABP_DemonHordeGamestate_C::CanSpawnEnemies' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeGamestate_C, PrestigeTier) == 0x000ADC, "Member 'ABP_DemonHordeGamestate_C::PrestigeTier' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeGamestate_C, StageActivationDelay) == 0x000AE0, "Member 'ABP_DemonHordeGamestate_C::StageActivationDelay' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeGamestate_C, CurrentStageEnemyCountReplicated) == 0x000AE4, "Member 'ABP_DemonHordeGamestate_C::CurrentStageEnemyCountReplicated' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeGamestate_C, HolyGunEasterEgg) == 0x000AE8, "Member 'ABP_DemonHordeGamestate_C::HolyGunEasterEgg' has a wrong offset!");

}

