#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BlessingArmingSwordLight

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BlessingArmingSwordLight.BP_BlessingArmingSwordLight_C
// 0x0030 (0x0250 - 0x0220)
class ABP_BlessingArmingSwordLight_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UPointLightComponent*                   PointLight;                                        // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         LightIntensity_LightAlpha_D460AB8448AD96B1A47BF79637B5BF14; // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            LightIntensity__Direction_D460AB8448AD96B1A47BF79637B5BF14; // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	uint8                                         Pad_23D[0x3];                                      // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     LightIntensity;                                    // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         LifeTime;                                          // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxLightIntensity;                                 // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BlessingArmingSwordLight(int32 EntryPoint);
	void ReceiveBeginPlay();
	void LightIntensity__UpdateFunc();
	void LightIntensity__FinishedFunc();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BlessingArmingSwordLight_C">();
	}
	static class ABP_BlessingArmingSwordLight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BlessingArmingSwordLight_C>();
	}
};
static_assert(alignof(ABP_BlessingArmingSwordLight_C) == 0x000008, "Wrong alignment on ABP_BlessingArmingSwordLight_C");
static_assert(sizeof(ABP_BlessingArmingSwordLight_C) == 0x000250, "Wrong size on ABP_BlessingArmingSwordLight_C");
static_assert(offsetof(ABP_BlessingArmingSwordLight_C, UberGraphFrame) == 0x000220, "Member 'ABP_BlessingArmingSwordLight_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BlessingArmingSwordLight_C, PointLight) == 0x000228, "Member 'ABP_BlessingArmingSwordLight_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_BlessingArmingSwordLight_C, DefaultSceneRoot) == 0x000230, "Member 'ABP_BlessingArmingSwordLight_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BlessingArmingSwordLight_C, LightIntensity_LightAlpha_D460AB8448AD96B1A47BF79637B5BF14) == 0x000238, "Member 'ABP_BlessingArmingSwordLight_C::LightIntensity_LightAlpha_D460AB8448AD96B1A47BF79637B5BF14' has a wrong offset!");
static_assert(offsetof(ABP_BlessingArmingSwordLight_C, LightIntensity__Direction_D460AB8448AD96B1A47BF79637B5BF14) == 0x00023C, "Member 'ABP_BlessingArmingSwordLight_C::LightIntensity__Direction_D460AB8448AD96B1A47BF79637B5BF14' has a wrong offset!");
static_assert(offsetof(ABP_BlessingArmingSwordLight_C, LightIntensity) == 0x000240, "Member 'ABP_BlessingArmingSwordLight_C::LightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_BlessingArmingSwordLight_C, LifeTime) == 0x000248, "Member 'ABP_BlessingArmingSwordLight_C::LifeTime' has a wrong offset!");
static_assert(offsetof(ABP_BlessingArmingSwordLight_C, MaxLightIntensity) == 0x00024C, "Member 'ABP_BlessingArmingSwordLight_C::MaxLightIntensity' has a wrong offset!");

}

