#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CircleTimer

#include "Basic.hpp"

#include "BP_CircleTimer_classes.hpp"
#include "BP_CircleTimer_parameters.hpp"


namespace SDK
{

// Function BP_CircleTimer.BP_CircleTimer_C.ExecuteUbergraph_BP_CircleTimer
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CircleTimer_C::ExecuteUbergraph_BP_CircleTimer(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CircleTimer_C", "ExecuteUbergraph_BP_CircleTimer");

	Params::BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CircleTimer.BP_CircleTimer_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UBP_CircleTimer_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CircleTimer_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CircleTimer.BP_CircleTimer_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CircleTimer_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CircleTimer_C", "Tick");

	Params::BP_CircleTimer_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CircleTimer.BP_CircleTimer_C.Start Countdown
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Duration_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CircleTimer_C::Start_Countdown(float Duration_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CircleTimer_C", "Start Countdown");

	Params::BP_CircleTimer_C_Start_Countdown Parms{};

	Parms.Duration_0 = Duration_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CircleTimer.BP_CircleTimer_C.GetPercent_0
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBP_CircleTimer_C::GetPercent_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CircleTimer_C", "GetPercent_0");

	Params::BP_CircleTimer_C_GetPercent_0 Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CircleTimer.BP_CircleTimer_C.GetVisibility_0
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ESlateVisibility                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ESlateVisibility UBP_CircleTimer_C::GetVisibility_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CircleTimer_C", "GetVisibility_0");

	Params::BP_CircleTimer_C_GetVisibility_0 Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

