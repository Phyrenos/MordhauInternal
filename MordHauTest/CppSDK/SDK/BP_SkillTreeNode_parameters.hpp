#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkillTreeNode

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "STRUCT_HordeSkillInfo_structs.hpp"


namespace SDK::Params
{

// Function BP_SkillTreeNode.BP_SkillTreeNode_C.ExecuteUbergraph_BP_SkillTreeNode
// 0x00C0 (0x00C0 - 0x0000)
struct BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HordePlayerController_C*            K2Node_DynamicCast_AsBP_Horde_Player_Controller;   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanUpgrade_Result;                        // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_HordeSkillInfo                 CallFunc_Map_Find_Value;                           // 0x0038(0x0068)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HordePlayerController_C*            K2Node_DynamicCast_AsBP_Horde_Player_Controller_1; // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode) == 0x000008, "Wrong alignment on BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode");
static_assert(sizeof(BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode) == 0x0000C0, "Wrong size on BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode");
static_assert(offsetof(BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode, EntryPoint) == 0x000000, "Member 'BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode, CallFunc_PlayAnimation_ReturnValue_1) == 0x000010, "Member 'BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode, CallFunc_PlayAnimation_ReturnValue_2) == 0x000018, "Member 'BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode, CallFunc_GetPlayerController_ReturnValue) == 0x000020, "Member 'BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode, K2Node_DynamicCast_AsBP_Horde_Player_Controller) == 0x000028, "Member 'BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode::K2Node_DynamicCast_AsBP_Horde_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode, CallFunc_CanUpgrade_Result) == 0x000031, "Member 'BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode::CallFunc_CanUpgrade_Result' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode, CallFunc_Map_Find_Value) == 0x000038, "Member 'BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode, CallFunc_Map_Find_ReturnValue) == 0x0000A0, "Member 'BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode, CallFunc_GetPlayerController_ReturnValue_1) == 0x0000A8, "Member 'BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode, K2Node_DynamicCast_AsBP_Horde_Player_Controller_1) == 0x0000B0, "Member 'BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode::K2Node_DynamicCast_AsBP_Horde_Player_Controller_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode, K2Node_DynamicCast_bSuccess_1) == 0x0000B8, "Member 'BP_SkillTreeNode_C_ExecuteUbergraph_BP_SkillTreeNode::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_SkillTreeNode.BP_SkillTreeNode_C.Get_Image_Icon_ColorAndOpacity_0
// 0x002C (0x002C - 0x0000)
struct BP_SkillTreeNode_C_Get_Image_Icon_ColorAndOpacity_0 final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSkillPoints_Result;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTreeNode_C_Get_Image_Icon_ColorAndOpacity_0) == 0x000004, "Wrong alignment on BP_SkillTreeNode_C_Get_Image_Icon_ColorAndOpacity_0");
static_assert(sizeof(BP_SkillTreeNode_C_Get_Image_Icon_ColorAndOpacity_0) == 0x00002C, "Wrong size on BP_SkillTreeNode_C_Get_Image_Icon_ColorAndOpacity_0");
static_assert(offsetof(BP_SkillTreeNode_C_Get_Image_Icon_ColorAndOpacity_0, ReturnValue) == 0x000000, "Member 'BP_SkillTreeNode_C_Get_Image_Icon_ColorAndOpacity_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Get_Image_Icon_ColorAndOpacity_0, Temp_bool_Variable) == 0x000010, "Member 'BP_SkillTreeNode_C_Get_Image_Icon_ColorAndOpacity_0::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Get_Image_Icon_ColorAndOpacity_0, CallFunc_GetSkillPoints_Result) == 0x000014, "Member 'BP_SkillTreeNode_C_Get_Image_Icon_ColorAndOpacity_0::CallFunc_GetSkillPoints_Result' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Get_Image_Icon_ColorAndOpacity_0, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000018, "Member 'BP_SkillTreeNode_C_Get_Image_Icon_ColorAndOpacity_0::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Get_Image_Icon_ColorAndOpacity_0, CallFunc_Greater_IntInt_ReturnValue) == 0x000019, "Member 'BP_SkillTreeNode_C_Get_Image_Icon_ColorAndOpacity_0::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Get_Image_Icon_ColorAndOpacity_0, K2Node_Select_Default) == 0x00001C, "Member 'BP_SkillTreeNode_C_Get_Image_Icon_ColorAndOpacity_0::K2Node_Select_Default' has a wrong offset!");

// Function BP_SkillTreeNode.BP_SkillTreeNode_C.GetText_0
// 0x00C0 (0x00C0 - 0x0000)
struct BP_SkillTreeNode_C_GetText_0 final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0018(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0058(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0098(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00A8(0x0018)()
};
static_assert(alignof(BP_SkillTreeNode_C_GetText_0) == 0x000008, "Wrong alignment on BP_SkillTreeNode_C_GetText_0");
static_assert(sizeof(BP_SkillTreeNode_C_GetText_0) == 0x0000C0, "Wrong size on BP_SkillTreeNode_C_GetText_0");
static_assert(offsetof(BP_SkillTreeNode_C_GetText_0, ReturnValue) == 0x000000, "Member 'BP_SkillTreeNode_C_GetText_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetText_0, K2Node_MakeStruct_FormatArgumentData) == 0x000018, "Member 'BP_SkillTreeNode_C_GetText_0::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetText_0, K2Node_MakeStruct_FormatArgumentData_1) == 0x000058, "Member 'BP_SkillTreeNode_C_GetText_0::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetText_0, K2Node_MakeArray_Array) == 0x000098, "Member 'BP_SkillTreeNode_C_GetText_0::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetText_0, CallFunc_Format_ReturnValue) == 0x0000A8, "Member 'BP_SkillTreeNode_C_GetText_0::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function BP_SkillTreeNode.BP_SkillTreeNode_C.Get_Image_Icon_Brush_0
// 0x0110 (0x0110 - 0x0000)
struct BP_SkillTreeNode_C_Get_Image_Icon_Brush_0 final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm)
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0088(0x0088)()
};
static_assert(alignof(BP_SkillTreeNode_C_Get_Image_Icon_Brush_0) == 0x000008, "Wrong alignment on BP_SkillTreeNode_C_Get_Image_Icon_Brush_0");
static_assert(sizeof(BP_SkillTreeNode_C_Get_Image_Icon_Brush_0) == 0x000110, "Wrong size on BP_SkillTreeNode_C_Get_Image_Icon_Brush_0");
static_assert(offsetof(BP_SkillTreeNode_C_Get_Image_Icon_Brush_0, ReturnValue) == 0x000000, "Member 'BP_SkillTreeNode_C_Get_Image_Icon_Brush_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Get_Image_Icon_Brush_0, K2Node_MakeStruct_SlateBrush) == 0x000088, "Member 'BP_SkillTreeNode_C_Get_Image_Icon_Brush_0::K2Node_MakeStruct_SlateBrush' has a wrong offset!");

// Function BP_SkillTreeNode.BP_SkillTreeNode_C.Update
// 0x0028 (0x0028 - 0x0000)
struct BP_SkillTreeNode_C_Update final
{
public:
	bool                                          Animate;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HordePlayerController_C*            K2Node_DynamicCast_AsBP_Horde_Player_Controller;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasPrerequisite_Result;                   // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetSkillLevel_Level;                      // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SkillTreeNode_C_Update) == 0x000008, "Wrong alignment on BP_SkillTreeNode_C_Update");
static_assert(sizeof(BP_SkillTreeNode_C_Update) == 0x000028, "Wrong size on BP_SkillTreeNode_C_Update");
static_assert(offsetof(BP_SkillTreeNode_C_Update, Animate) == 0x000000, "Member 'BP_SkillTreeNode_C_Update::Animate' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Update, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'BP_SkillTreeNode_C_Update::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Update, K2Node_DynamicCast_AsBP_Horde_Player_Controller) == 0x000010, "Member 'BP_SkillTreeNode_C_Update::K2Node_DynamicCast_AsBP_Horde_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Update, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_SkillTreeNode_C_Update::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Update, CallFunc_Conv_IntToByte_ReturnValue) == 0x000019, "Member 'BP_SkillTreeNode_C_Update::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Update, CallFunc_HasPrerequisite_Result) == 0x00001A, "Member 'BP_SkillTreeNode_C_Update::CallFunc_HasPrerequisite_Result' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Update, CallFunc_Not_PreBool_ReturnValue) == 0x00001B, "Member 'BP_SkillTreeNode_C_Update::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Update, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00001C, "Member 'BP_SkillTreeNode_C_Update::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Update, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x00001D, "Member 'BP_SkillTreeNode_C_Update::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Update, CallFunc_GetSkillLevel_Level) == 0x00001E, "Member 'BP_SkillTreeNode_C_Update::CallFunc_GetSkillLevel_Level' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Update, CallFunc_BooleanAND_ReturnValue) == 0x00001F, "Member 'BP_SkillTreeNode_C_Update::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Update, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000020, "Member 'BP_SkillTreeNode_C_Update::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Update, CallFunc_BooleanAND_ReturnValue_1) == 0x000024, "Member 'BP_SkillTreeNode_C_Update::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Update, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x000025, "Member 'BP_SkillTreeNode_C_Update::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");

// Function BP_SkillTreeNode.BP_SkillTreeNode_C.Get_LockOverlay_Visibility_0
// 0x0020 (0x0020 - 0x0000)
struct BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HordePlayerController_C*            K2Node_DynamicCast_AsBP_Horde_Player_Controller;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0) == 0x000008, "Wrong alignment on BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0");
static_assert(sizeof(BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0) == 0x000020, "Wrong size on BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0");
static_assert(offsetof(BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0, ReturnValue) == 0x000000, "Member 'BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0, Temp_bool_Variable) == 0x000001, "Member 'BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0, Temp_byte_Variable) == 0x000002, "Member 'BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0, Temp_byte_Variable_1) == 0x000003, "Member 'BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0, Temp_bool_Variable_1) == 0x000004, "Member 'BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0, Temp_byte_Variable_2) == 0x000005, "Member 'BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0, Temp_byte_Variable_3) == 0x000006, "Member 'BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0, K2Node_DynamicCast_AsBP_Horde_Player_Controller) == 0x000010, "Member 'BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0::K2Node_DynamicCast_AsBP_Horde_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000019, "Member 'BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0, K2Node_Select_Default) == 0x00001A, "Member 'BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0, K2Node_Select_Default_1) == 0x00001B, "Member 'BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00001C, "Member 'BP_SkillTreeNode_C_Get_LockOverlay_Visibility_0::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_SkillTreeNode.BP_SkillTreeNode_C.CanUpgrade
// 0x0038 (0x0038 - 0x0000)
struct BP_SkillTreeNode_C_CanUpgrade final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HordePlayerController_C*            K2Node_DynamicCast_AsBP_Horde_Player_Controller;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasPrerequisite_Result;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_HordePlayerState_C*                 K2Node_DynamicCast_AsBP_Horde_Player_State;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SkillTreeNode_C_CanUpgrade) == 0x000008, "Wrong alignment on BP_SkillTreeNode_C_CanUpgrade");
static_assert(sizeof(BP_SkillTreeNode_C_CanUpgrade) == 0x000038, "Wrong size on BP_SkillTreeNode_C_CanUpgrade");
static_assert(offsetof(BP_SkillTreeNode_C_CanUpgrade, Result) == 0x000000, "Member 'BP_SkillTreeNode_C_CanUpgrade::Result' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_CanUpgrade, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'BP_SkillTreeNode_C_CanUpgrade::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_CanUpgrade, K2Node_DynamicCast_AsBP_Horde_Player_Controller) == 0x000010, "Member 'BP_SkillTreeNode_C_CanUpgrade::K2Node_DynamicCast_AsBP_Horde_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_CanUpgrade, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_SkillTreeNode_C_CanUpgrade::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_CanUpgrade, CallFunc_Less_IntInt_ReturnValue) == 0x000019, "Member 'BP_SkillTreeNode_C_CanUpgrade::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_CanUpgrade, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00001A, "Member 'BP_SkillTreeNode_C_CanUpgrade::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_CanUpgrade, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x00001B, "Member 'BP_SkillTreeNode_C_CanUpgrade::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_CanUpgrade, CallFunc_HasPrerequisite_Result) == 0x00001C, "Member 'BP_SkillTreeNode_C_CanUpgrade::CallFunc_HasPrerequisite_Result' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_CanUpgrade, CallFunc_BooleanAND_ReturnValue) == 0x00001D, "Member 'BP_SkillTreeNode_C_CanUpgrade::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_CanUpgrade, CallFunc_BooleanAND_ReturnValue_1) == 0x00001E, "Member 'BP_SkillTreeNode_C_CanUpgrade::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_CanUpgrade, K2Node_DynamicCast_AsBP_Horde_Player_State) == 0x000020, "Member 'BP_SkillTreeNode_C_CanUpgrade::K2Node_DynamicCast_AsBP_Horde_Player_State' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_CanUpgrade, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'BP_SkillTreeNode_C_CanUpgrade::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_CanUpgrade, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00002C, "Member 'BP_SkillTreeNode_C_CanUpgrade::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_CanUpgrade, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000030, "Member 'BP_SkillTreeNode_C_CanUpgrade::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_CanUpgrade, CallFunc_BooleanAND_ReturnValue_2) == 0x000031, "Member 'BP_SkillTreeNode_C_CanUpgrade::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function BP_SkillTreeNode.BP_SkillTreeNode_C.GetSkillPoints
// 0x0030 (0x0030 - 0x0000)
struct BP_SkillTreeNode_C_GetSkillPoints final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HordePlayerController_C*            K2Node_DynamicCast_AsBP_Horde_Player_Controller;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_HordePlayerState_C*                 K2Node_DynamicCast_AsBP_Horde_Player_State;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTreeNode_C_GetSkillPoints) == 0x000008, "Wrong alignment on BP_SkillTreeNode_C_GetSkillPoints");
static_assert(sizeof(BP_SkillTreeNode_C_GetSkillPoints) == 0x000030, "Wrong size on BP_SkillTreeNode_C_GetSkillPoints");
static_assert(offsetof(BP_SkillTreeNode_C_GetSkillPoints, Result) == 0x000000, "Member 'BP_SkillTreeNode_C_GetSkillPoints::Result' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetSkillPoints, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'BP_SkillTreeNode_C_GetSkillPoints::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetSkillPoints, K2Node_DynamicCast_AsBP_Horde_Player_Controller) == 0x000010, "Member 'BP_SkillTreeNode_C_GetSkillPoints::K2Node_DynamicCast_AsBP_Horde_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetSkillPoints, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_SkillTreeNode_C_GetSkillPoints::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetSkillPoints, K2Node_DynamicCast_AsBP_Horde_Player_State) == 0x000020, "Member 'BP_SkillTreeNode_C_GetSkillPoints::K2Node_DynamicCast_AsBP_Horde_Player_State' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetSkillPoints, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'BP_SkillTreeNode_C_GetSkillPoints::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetSkillPoints, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00002C, "Member 'BP_SkillTreeNode_C_GetSkillPoints::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");

// Function BP_SkillTreeNode.BP_SkillTreeNode_C.GetColorAndOpacity_0
// 0x0038 (0x0038 - 0x0000)
struct BP_SkillTreeNode_C_GetColorAndOpacity_0 final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HordePlayerController_C*            K2Node_DynamicCast_AsBP_Horde_Player_Controller;   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SkillTreeNode_C_GetColorAndOpacity_0) == 0x000008, "Wrong alignment on BP_SkillTreeNode_C_GetColorAndOpacity_0");
static_assert(sizeof(BP_SkillTreeNode_C_GetColorAndOpacity_0) == 0x000038, "Wrong size on BP_SkillTreeNode_C_GetColorAndOpacity_0");
static_assert(offsetof(BP_SkillTreeNode_C_GetColorAndOpacity_0, ReturnValue) == 0x000000, "Member 'BP_SkillTreeNode_C_GetColorAndOpacity_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetColorAndOpacity_0, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'BP_SkillTreeNode_C_GetColorAndOpacity_0::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetColorAndOpacity_0, K2Node_DynamicCast_AsBP_Horde_Player_Controller) == 0x000018, "Member 'BP_SkillTreeNode_C_GetColorAndOpacity_0::K2Node_DynamicCast_AsBP_Horde_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetColorAndOpacity_0, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_SkillTreeNode_C_GetColorAndOpacity_0::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetColorAndOpacity_0, CallFunc_SelectColor_ReturnValue) == 0x000024, "Member 'BP_SkillTreeNode_C_GetColorAndOpacity_0::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetColorAndOpacity_0, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000034, "Member 'BP_SkillTreeNode_C_GetColorAndOpacity_0::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetColorAndOpacity_0, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000035, "Member 'BP_SkillTreeNode_C_GetColorAndOpacity_0::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_SkillTreeNode.BP_SkillTreeNode_C.GetVisibility_0
// 0x0008 (0x0008 - 0x0000)
struct BP_SkillTreeNode_C_GetVisibility_0 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SkillTreeNode_C_GetVisibility_0) == 0x000001, "Wrong alignment on BP_SkillTreeNode_C_GetVisibility_0");
static_assert(sizeof(BP_SkillTreeNode_C_GetVisibility_0) == 0x000008, "Wrong size on BP_SkillTreeNode_C_GetVisibility_0");
static_assert(offsetof(BP_SkillTreeNode_C_GetVisibility_0, ReturnValue) == 0x000000, "Member 'BP_SkillTreeNode_C_GetVisibility_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetVisibility_0, Temp_bool_Variable) == 0x000001, "Member 'BP_SkillTreeNode_C_GetVisibility_0::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetVisibility_0, Temp_byte_Variable) == 0x000002, "Member 'BP_SkillTreeNode_C_GetVisibility_0::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetVisibility_0, Temp_byte_Variable_1) == 0x000003, "Member 'BP_SkillTreeNode_C_GetVisibility_0::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetVisibility_0, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'BP_SkillTreeNode_C_GetVisibility_0::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetVisibility_0, CallFunc_BooleanAND_ReturnValue) == 0x000005, "Member 'BP_SkillTreeNode_C_GetVisibility_0::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetVisibility_0, CallFunc_BooleanAND_ReturnValue_1) == 0x000006, "Member 'BP_SkillTreeNode_C_GetVisibility_0::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SkillTreeNode_C_GetVisibility_0, K2Node_Select_Default) == 0x000007, "Member 'BP_SkillTreeNode_C_GetVisibility_0::K2Node_Select_Default' has a wrong offset!");

}

