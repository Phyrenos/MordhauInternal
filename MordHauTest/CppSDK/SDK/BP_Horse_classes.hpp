#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Horse

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mordhau_structs.hpp"
#include "Mordhau_classes.hpp"
#include "MordhauOnlineSubsystem_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Horse.BP_Horse_C
// 0x0070 (0x0CE0 - 0x0C70)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_Horse_C : public AHorse
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0C70(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UBP_VehicleHorse_C*                     BP_VehicleHorse;                                   // 0x0C78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UCapsuleComponent*                      BumpCollider;                                      // 0x0C80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class ULODSkeletalMeshComponent*              Hair;                                              // 0x0C88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class ULODSkeletalMeshComponent*              Gear;                                              // 0x0C90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UCurveFloat*                            AttackAngleCurve;                                  // 0x0C98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Color1;                                            // 0x0CA0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Color2;                                            // 0x0CA1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pattern;                                           // 0x0CA2(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA3[0x5];                                      // 0x0CA3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTexture2D*>                     Patterns;                                          // 0x0CA8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 TurdClass;                                         // 0x0CB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          EnterBehindAnim;                                   // 0x0CC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          EnterSideAnim;                                     // 0x0CC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          EnterSideMirroredAnim;                             // 0x0CD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Horse(int32 EntryPoint);
	void OnDriverChanged_1();
	void SpawnTurd();
	void KnockOffDriver(class AMordhauCharacter* Character);
	void ReceiveBeginPlay();
	void OnCosmeticHit(EMordhauDamageType DamageType, uint8 SubType, const struct FHitResult& Hit, class AActor* Agent);
	void OnDied(float Angle, EMordhauDamageType Type, uint8 SubType, class FName bone, const struct FVector& Point, class AActor* Source, class AActor* Agent);
	void InpActEvt_Ranged_Cancel_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_2(const struct FKey& Key);
	void _Reload_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_Holster_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_Drop_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_Equip_Slot_1_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_Equip_Slot_2_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_Equip_Slot_3_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_Equip_Slot_4_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_Equip_Slot_5_K2Node_InputActionEvent_10(const struct FKey& Key);
	void InpActEvt_Equip_Slot_6_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_Equip_Slot_7_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_Equip_Slot_8_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_Equip_Slot_9_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_Next_Equipment_K2Node_InputActionEvent_15(const struct FKey& Key);
	void InpActEvt_Next_Equipment_K2Node_InputActionEvent_16(const struct FKey& Key);
	void InpActEvt_Previous_Equipment_K2Node_InputActionEvent_17(const struct FKey& Key);
	void InpActEvt_Previous_Equipment_K2Node_InputActionEvent_18(const struct FKey& Key);
	void InpActEvt_Strike_K2Node_InputActionEvent_19(const struct FKey& Key);
	void InpActEvt_Strike_K2Node_InputActionEvent_20(const struct FKey& Key);
	void InpActEvt_Feint_K2Node_InputActionEvent_21(const struct FKey& Key);
	void InpActEvt_Stab_K2Node_InputActionEvent_22(const struct FKey& Key);
	void InpActEvt_Stab_K2Node_InputActionEvent_23(const struct FKey& Key);
	void InpActEvt_Parry_K2Node_InputActionEvent_24(const struct FKey& Key);
	void InpActEvt_Parry_K2Node_InputActionEvent_25(const struct FKey& Key);
	void InpActEvt_Left_Lower_Strike_K2Node_InputActionEvent_26(const struct FKey& Key);
	void InpActEvt_Left_Strike_K2Node_InputActionEvent_27(const struct FKey& Key);
	void InpActEvt_Left_Upper_Strike_K2Node_InputActionEvent_28(const struct FKey& Key);
	void InpActEvt_Left_Stab_K2Node_InputActionEvent_29(const struct FKey& Key);
	void InpActEvt_Flip_Attack_Side_K2Node_InputActionEvent_30(const struct FKey& Key);
	void InpActEvt_Flip_Attack_Side_K2Node_InputActionEvent_31(const struct FKey& Key);
	void InpActEvt_Right_Upper_Strike_K2Node_InputActionEvent_32(const struct FKey& Key);
	void InpActEvt_Right_Lower_Strike_K2Node_InputActionEvent_33(const struct FKey& Key);
	void InpActEvt_Right_Strike_K2Node_InputActionEvent_34(const struct FKey& Key);
	void InpActEvt_Right_Stab_K2Node_InputActionEvent_35(const struct FKey& Key);
	void InpActEvt_Feint_Or_Parry_K2Node_InputActionEvent_36(const struct FKey& Key);
	void InpActEvt_Feint_Or_Parry_K2Node_InputActionEvent_37(const struct FKey& Key);
	void InpActEvt_Kick_K2Node_InputActionEvent_38(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_39(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_40(const struct FKey& Key);
	void InpActEvt_Cycle_Camera_K2Node_InputActionEvent_41(const struct FKey& Key);
	void InpActEvt_Cycle_Camera_K2Node_InputActionEvent_42(const struct FKey& Key);
	void UserConstructionScript();
	struct FVehicleTransitionInfo GetVehicleEnterInfo(class AMordhauCharacter* Character, const struct FTransform& FromTransform);
	struct FVehicleTransitionInfo GetVehicleLeaveInfo(class AMordhauCharacter* Character, const struct FTransform& FromTransform);
	float OverrideAttackAngle(class UAttackMotion* Motion);
	void OnRep_Color1();
	void OnRep_Color2();
	void UpdateHorseColors();
	void SetHorseColors(const struct FLinearColor& Color1Color, const struct FLinearColor& Color2Color, class UTexture2D* Pattern_0, class USkeletalMeshComponent* Component);
	void OnRep_Pattern();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Horse_C">();
	}
	static class ABP_Horse_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Horse_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_Horse_C) == 0x000010, "Wrong alignment on ABP_Horse_C");
static_assert(sizeof(ABP_Horse_C) == 0x000CE0, "Wrong size on ABP_Horse_C");
static_assert(offsetof(ABP_Horse_C, UberGraphFrame) == 0x000C70, "Member 'ABP_Horse_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Horse_C, BP_VehicleHorse) == 0x000C78, "Member 'ABP_Horse_C::BP_VehicleHorse' has a wrong offset!");
static_assert(offsetof(ABP_Horse_C, BumpCollider) == 0x000C80, "Member 'ABP_Horse_C::BumpCollider' has a wrong offset!");
static_assert(offsetof(ABP_Horse_C, Hair) == 0x000C88, "Member 'ABP_Horse_C::Hair' has a wrong offset!");
static_assert(offsetof(ABP_Horse_C, Gear) == 0x000C90, "Member 'ABP_Horse_C::Gear' has a wrong offset!");
static_assert(offsetof(ABP_Horse_C, AttackAngleCurve) == 0x000C98, "Member 'ABP_Horse_C::AttackAngleCurve' has a wrong offset!");
static_assert(offsetof(ABP_Horse_C, Color1) == 0x000CA0, "Member 'ABP_Horse_C::Color1' has a wrong offset!");
static_assert(offsetof(ABP_Horse_C, Color2) == 0x000CA1, "Member 'ABP_Horse_C::Color2' has a wrong offset!");
static_assert(offsetof(ABP_Horse_C, Pattern) == 0x000CA2, "Member 'ABP_Horse_C::Pattern' has a wrong offset!");
static_assert(offsetof(ABP_Horse_C, Patterns) == 0x000CA8, "Member 'ABP_Horse_C::Patterns' has a wrong offset!");
static_assert(offsetof(ABP_Horse_C, TurdClass) == 0x000CB8, "Member 'ABP_Horse_C::TurdClass' has a wrong offset!");
static_assert(offsetof(ABP_Horse_C, EnterBehindAnim) == 0x000CC0, "Member 'ABP_Horse_C::EnterBehindAnim' has a wrong offset!");
static_assert(offsetof(ABP_Horse_C, EnterSideAnim) == 0x000CC8, "Member 'ABP_Horse_C::EnterSideAnim' has a wrong offset!");
static_assert(offsetof(ABP_Horse_C, EnterSideMirroredAnim) == 0x000CD0, "Member 'ABP_Horse_C::EnterSideMirroredAnim' has a wrong offset!");

}

