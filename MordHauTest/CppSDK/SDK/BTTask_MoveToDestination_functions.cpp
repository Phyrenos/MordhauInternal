#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTTask_MoveToDestination

#include "Basic.hpp"

#include "BTTask_MoveToDestination_classes.hpp"
#include "BTTask_MoveToDestination_parameters.hpp"


namespace SDK
{

// Function BTTask_MoveToDestination.BTTask_MoveToDestination_C.ExecuteUbergraph_BTTask_MoveToDestination
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTTask_MoveToDestination_C::ExecuteUbergraph_BTTask_MoveToDestination(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_MoveToDestination_C", "ExecuteUbergraph_BTTask_MoveToDestination");

	Params::BTTask_MoveToDestination_C_ExecuteUbergraph_BTTask_MoveToDestination Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTTask_MoveToDestination.BTTask_MoveToDestination_C.ReceiveExecuteAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTTask_MoveToDestination_C::ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_MoveToDestination_C", "ReceiveExecuteAI");

	Params::BTTask_MoveToDestination_C_ReceiveExecuteAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTTask_MoveToDestination.BTTask_MoveToDestination_C.ReceiveAbortAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTTask_MoveToDestination_C::ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_MoveToDestination_C", "ReceiveAbortAI");

	Params::BTTask_MoveToDestination_C_ReceiveAbortAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTTask_MoveToDestination.BTTask_MoveToDestination_C.ReceiveTickAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTTask_MoveToDestination_C::ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_MoveToDestination_C", "ReceiveTickAI");

	Params::BTTask_MoveToDestination_C_ReceiveTickAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTTask_MoveToDestination.BTTask_MoveToDestination_C.SetPath
// (Protected, BlueprintCallable, BlueprintEvent)

void UBTTask_MoveToDestination_C::SetPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_MoveToDestination_C", "SetPath");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTTask_MoveToDestination.BTTask_MoveToDestination_C.Init
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTTask_MoveToDestination_C::Init(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_MoveToDestination_C", "Init");

	Params::BTTask_MoveToDestination_C_Init Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTTask_MoveToDestination.BTTask_MoveToDestination_C.ResetTimeAndDistance
// (Protected, BlueprintCallable, BlueprintEvent)

void UBTTask_MoveToDestination_C::ResetTimeAndDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_MoveToDestination_C", "ResetTimeAndDistance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTTask_MoveToDestination.BTTask_MoveToDestination_C.GetTargetLoc
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          TargetLocation_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTTask_MoveToDestination_C::GetTargetLoc(struct FVector* TargetLocation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_MoveToDestination_C", "GetTargetLoc");

	Params::BTTask_MoveToDestination_C_GetTargetLoc Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetLocation_0 != nullptr)
		*TargetLocation_0 = std::move(Parms.TargetLocation_0);
}


// Function BTTask_MoveToDestination.BTTask_MoveToDestination_C.ClearTarget
// (Public, BlueprintCallable, BlueprintEvent)

void UBTTask_MoveToDestination_C::ClearTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_MoveToDestination_C", "ClearTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTTask_MoveToDestination.BTTask_MoveToDestination_C.KeepMoving
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bKeepMoving                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBTTask_MoveToDestination_C::KeepMoving(bool* bKeepMoving)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_MoveToDestination_C", "KeepMoving");

	Params::BTTask_MoveToDestination_C_KeepMoving Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bKeepMoving != nullptr)
		*bKeepMoving = Parms.bKeepMoving;
}


// Function BTTask_MoveToDestination.BTTask_MoveToDestination_C.GetFilterClass
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           FilterClass                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTTask_MoveToDestination_C::GetFilterClass(class UClass** FilterClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_MoveToDestination_C", "GetFilterClass");

	Params::BTTask_MoveToDestination_C_GetFilterClass Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FilterClass != nullptr)
		*FilterClass = Parms.FilterClass;
}

}

