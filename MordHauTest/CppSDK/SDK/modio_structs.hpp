#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: modio

#include "Basic.hpp"

#include "Int64_structs.hpp"


namespace SDK
{

// Enum modio.EModioBooleanCustomizableType
// NumValues: 0x0004
enum class EModioBooleanCustomizableType : uint8
{
	UNDEFINED                                = 0,
	SET_TO_TRUE                              = 1,
	SET_TO_FALSE                             = 2,
	EModioBooleanCustomizableType_MAX        = 3,
};

// Enum modio.EModioFieldFilterType
// NumValues: 0x000A
enum class EModioFieldFilterType : uint8
{
	FIELD_FILTER_EQUAL                       = 0,
	FIELD_FILTER_NOT_EQUAL                   = 1,
	FIELD_FILTER_LIKE                        = 2,
	FIELD_FILTER_NOT_LIKE                    = 3,
	FIELD_FILTER_IN                          = 4,
	FIELD_FILTER_NOT_IN                      = 5,
	FIELD_FILTER_MIN                         = 6,
	FIELD_FILTER_MAX                         = 7,
	FIELD_FILTER_SMALLER_THAN                = 8,
	FIELD_FILTER_GREATER_THAN                = 9,
};

// Enum modio.EModioMaturityOption
// NumValues: 0x0006
enum class EModioMaturityOption : uint8
{
	ALCOHOL                                  = 0,
	DRUGS                                    = 1,
	VIOLENCE                                 = 2,
	EXPLICIT                                 = 3,
	UNDEFINED                                = 4,
	EModioMaturityOption_MAX                 = 5,
};

// Enum modio.EModioModSortType
// NumValues: 0x000A
enum class EModioModSortType : uint8
{
	SORT_BY_ID                               = 0,
	SORT_BY_DATE_ADDED                       = 1,
	SORT_BY_DATE_UPDATED                     = 2,
	SORT_BY_DATE_LIVE                        = 3,
	SORT_BY_NAME                             = 4,
	SORT_BY_DOWNLOADS                        = 5,
	SORT_BY_POPULAR                          = 6,
	SORT_BY_RATING                           = 7,
	SORT_BY_SUBSCRIBERS                      = 8,
	SORT_BY_MAX                              = 9,
};

// Enum modio.EModioModState
// NumValues: 0x000D
enum class EModioModState : uint8
{
	NOT_DEFINED                              = 0,
	NOT_INSTALLED                            = 1,
	QUEUED                                   = 2,
	STARTING_DOWNLOAD                        = 3,
	DOWNLOADING                              = 4,
	PAUSING                                  = 5,
	PAUSED                                   = 6,
	INSTALLED                                = 7,
	PRIORITIZING_OTHER_DOWNLOAD              = 8,
	STARTING_UPLOAD                          = 9,
	DOWNLOADED                               = 10,
	UPLOADING                                = 11,
	EModioModState_MAX                       = 12,
};

// Enum modio.EModioRatingType
// NumValues: 0x0004
enum class EModioRatingType : uint8
{
	RATING_NOT_DEFINED                       = 0,
	RATING_NEGATIVE                          = 1,
	RATING_POSITIVE                          = 2,
	RATING_MAX                               = 3,
};

// Enum modio.EModioReportType
// NumValues: 0x0003
enum class EModioReportType : uint8
{
	GENERIC                                  = 0,
	DMCA                                     = 1,
	EModioReportType_MAX                     = 2,
};

// Enum modio.EModioResourceType
// NumValues: 0x0004
enum class EModioResourceType : uint8
{
	GAMES                                    = 0,
	Mods                                     = 1,
	USERS                                    = 2,
	EModioResourceType_MAX                   = 3,
};

// Enum modio.ERunInEditorOn
// NumValues: 0x0005
enum class ERunInEditorOn : uint8
{
	FirstServer                              = 0,
	FirstClient                              = 1,
	DedicatedServer                          = 2,
	EditorOnly                               = 3,
	ERunInEditorOn_MAX                       = 4,
};

// ScriptStruct modio.ModioImage
// 0x0030 (0x0030 - 0x0000)
struct FModioImage final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Original;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Thumb320x180;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioImage) == 0x000008, "Wrong alignment on FModioImage");
static_assert(sizeof(FModioImage) == 0x000030, "Wrong size on FModioImage");
static_assert(offsetof(FModioImage, Filename) == 0x000000, "Member 'FModioImage::Filename' has a wrong offset!");
static_assert(offsetof(FModioImage, Original) == 0x000010, "Member 'FModioImage::Original' has a wrong offset!");
static_assert(offsetof(FModioImage, Thumb320x180) == 0x000020, "Member 'FModioImage::Thumb320x180' has a wrong offset!");

// ScriptStruct modio.ModioMedia
// 0x0030 (0x0030 - 0x0000)
struct FModioMedia final
{
public:
	TArray<class FString>                         Youtube;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Sketchfab;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FModioImage>                    Images;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioMedia) == 0x000008, "Wrong alignment on FModioMedia");
static_assert(sizeof(FModioMedia) == 0x000030, "Wrong size on FModioMedia");
static_assert(offsetof(FModioMedia, Youtube) == 0x000000, "Member 'FModioMedia::Youtube' has a wrong offset!");
static_assert(offsetof(FModioMedia, Sketchfab) == 0x000010, "Member 'FModioMedia::Sketchfab' has a wrong offset!");
static_assert(offsetof(FModioMedia, Images) == 0x000020, "Member 'FModioMedia::Images' has a wrong offset!");

// ScriptStruct modio.ModioError
// 0x0028 (0x0028 - 0x0000)
struct FModioError final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Errors;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioError) == 0x000008, "Wrong alignment on FModioError");
static_assert(sizeof(FModioError) == 0x000028, "Wrong size on FModioError");
static_assert(offsetof(FModioError, Code) == 0x000000, "Member 'FModioError::Code' has a wrong offset!");
static_assert(offsetof(FModioError, Message) == 0x000008, "Member 'FModioError::Message' has a wrong offset!");
static_assert(offsetof(FModioError, Errors) == 0x000018, "Member 'FModioError::Errors' has a wrong offset!");

// ScriptStruct modio.ModioResponse
// 0x0040 (0x0040 - 0x0000)
struct FModioResponse final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResultCount;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResultLimit;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResultOffset;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResultTotal;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResultCached;                                      // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioError                            Error;                                             // 0x0018(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioResponse) == 0x000008, "Wrong alignment on FModioResponse");
static_assert(sizeof(FModioResponse) == 0x000040, "Wrong size on FModioResponse");
static_assert(offsetof(FModioResponse, Code) == 0x000000, "Member 'FModioResponse::Code' has a wrong offset!");
static_assert(offsetof(FModioResponse, ResultCount) == 0x000004, "Member 'FModioResponse::ResultCount' has a wrong offset!");
static_assert(offsetof(FModioResponse, ResultLimit) == 0x000008, "Member 'FModioResponse::ResultLimit' has a wrong offset!");
static_assert(offsetof(FModioResponse, ResultOffset) == 0x00000C, "Member 'FModioResponse::ResultOffset' has a wrong offset!");
static_assert(offsetof(FModioResponse, ResultTotal) == 0x000010, "Member 'FModioResponse::ResultTotal' has a wrong offset!");
static_assert(offsetof(FModioResponse, ResultCached) == 0x000014, "Member 'FModioResponse::ResultCached' has a wrong offset!");
static_assert(offsetof(FModioResponse, Error) == 0x000018, "Member 'FModioResponse::Error' has a wrong offset!");

// ScriptStruct modio.ModioSortCreator
// 0x0002 (0x0002 - 0x0000)
struct FModioSortCreator final
{
public:
	EModioModSortType                             ModSortType;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ascending;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioSortCreator) == 0x000001, "Wrong alignment on FModioSortCreator");
static_assert(sizeof(FModioSortCreator) == 0x000002, "Wrong size on FModioSortCreator");
static_assert(offsetof(FModioSortCreator, ModSortType) == 0x000000, "Member 'FModioSortCreator::ModSortType' has a wrong offset!");
static_assert(offsetof(FModioSortCreator, Ascending) == 0x000001, "Member 'FModioSortCreator::Ascending' has a wrong offset!");

// ScriptStruct modio.ModioFieldFilterCreator
// 0x0028 (0x0028 - 0x0000)
struct FModioFieldFilterCreator final
{
public:
	class FString                                 Field;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModioFieldFilterType                         Type;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Value;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioFieldFilterCreator) == 0x000008, "Wrong alignment on FModioFieldFilterCreator");
static_assert(sizeof(FModioFieldFilterCreator) == 0x000028, "Wrong size on FModioFieldFilterCreator");
static_assert(offsetof(FModioFieldFilterCreator, Field) == 0x000000, "Member 'FModioFieldFilterCreator::Field' has a wrong offset!");
static_assert(offsetof(FModioFieldFilterCreator, Type) == 0x000010, "Member 'FModioFieldFilterCreator::Type' has a wrong offset!");
static_assert(offsetof(FModioFieldFilterCreator, Value) == 0x000018, "Member 'FModioFieldFilterCreator::Value' has a wrong offset!");

// ScriptStruct modio.ModioFilterCreator
// 0x0028 (0x0028 - 0x0000)
struct FModioFilterCreator final
{
public:
	struct FModioSortCreator                      Sort;                                              // 0x0000(0x0002)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FullTextSearch;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FModioFieldFilterCreator>       FieldFilters;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioFilterCreator) == 0x000008, "Wrong alignment on FModioFilterCreator");
static_assert(sizeof(FModioFilterCreator) == 0x000028, "Wrong size on FModioFilterCreator");
static_assert(offsetof(FModioFilterCreator, Sort) == 0x000000, "Member 'FModioFilterCreator::Sort' has a wrong offset!");
static_assert(offsetof(FModioFilterCreator, FullTextSearch) == 0x000008, "Member 'FModioFilterCreator::FullTextSearch' has a wrong offset!");
static_assert(offsetof(FModioFilterCreator, FieldFilters) == 0x000018, "Member 'FModioFilterCreator::FieldFilters' has a wrong offset!");

// ScriptStruct modio.ModioLogo
// 0x0050 (0x0050 - 0x0000)
struct FModioLogo final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Original;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Thumb320x180;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Thumb640x360;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Thumb1280x720;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioLogo) == 0x000008, "Wrong alignment on FModioLogo");
static_assert(sizeof(FModioLogo) == 0x000050, "Wrong size on FModioLogo");
static_assert(offsetof(FModioLogo, Filename) == 0x000000, "Member 'FModioLogo::Filename' has a wrong offset!");
static_assert(offsetof(FModioLogo, Original) == 0x000010, "Member 'FModioLogo::Original' has a wrong offset!");
static_assert(offsetof(FModioLogo, Thumb320x180) == 0x000020, "Member 'FModioLogo::Thumb320x180' has a wrong offset!");
static_assert(offsetof(FModioLogo, Thumb640x360) == 0x000030, "Member 'FModioLogo::Thumb640x360' has a wrong offset!");
static_assert(offsetof(FModioLogo, Thumb1280x720) == 0x000040, "Member 'FModioLogo::Thumb1280x720' has a wrong offset!");

// ScriptStruct modio.ModioAvatar
// 0x0040 (0x0040 - 0x0000)
struct FModioAvatar final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Original;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Thumb50x50;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Thumb100x100;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioAvatar) == 0x000008, "Wrong alignment on FModioAvatar");
static_assert(sizeof(FModioAvatar) == 0x000040, "Wrong size on FModioAvatar");
static_assert(offsetof(FModioAvatar, Filename) == 0x000000, "Member 'FModioAvatar::Filename' has a wrong offset!");
static_assert(offsetof(FModioAvatar, Original) == 0x000010, "Member 'FModioAvatar::Original' has a wrong offset!");
static_assert(offsetof(FModioAvatar, Thumb50x50) == 0x000020, "Member 'FModioAvatar::Thumb50x50' has a wrong offset!");
static_assert(offsetof(FModioAvatar, Thumb100x100) == 0x000030, "Member 'FModioAvatar::Thumb100x100' has a wrong offset!");

// ScriptStruct modio.ModioUser
// 0x0098 (0x0098 - 0x0000)
struct FModioUser final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DateOnline;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NameId;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Timezone;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProfileUrl;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioAvatar                           Avatar;                                            // 0x0058(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioUser) == 0x000008, "Wrong alignment on FModioUser");
static_assert(sizeof(FModioUser) == 0x000098, "Wrong size on FModioUser");
static_assert(offsetof(FModioUser, ID) == 0x000000, "Member 'FModioUser::ID' has a wrong offset!");
static_assert(offsetof(FModioUser, DateOnline) == 0x000004, "Member 'FModioUser::DateOnline' has a wrong offset!");
static_assert(offsetof(FModioUser, Username) == 0x000008, "Member 'FModioUser::Username' has a wrong offset!");
static_assert(offsetof(FModioUser, NameId) == 0x000018, "Member 'FModioUser::NameId' has a wrong offset!");
static_assert(offsetof(FModioUser, Timezone) == 0x000028, "Member 'FModioUser::Timezone' has a wrong offset!");
static_assert(offsetof(FModioUser, Language) == 0x000038, "Member 'FModioUser::Language' has a wrong offset!");
static_assert(offsetof(FModioUser, ProfileUrl) == 0x000048, "Member 'FModioUser::ProfileUrl' has a wrong offset!");
static_assert(offsetof(FModioUser, Avatar) == 0x000058, "Member 'FModioUser::Avatar' has a wrong offset!");

// ScriptStruct modio.ModioModTag
// 0x0018 (0x0018 - 0x0000)
struct FModioModTag final
{
public:
	int32                                         DateAdded;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioModTag) == 0x000008, "Wrong alignment on FModioModTag");
static_assert(sizeof(FModioModTag) == 0x000018, "Wrong size on FModioModTag");
static_assert(offsetof(FModioModTag, DateAdded) == 0x000000, "Member 'FModioModTag::DateAdded' has a wrong offset!");
static_assert(offsetof(FModioModTag, Name) == 0x000008, "Member 'FModioModTag::Name' has a wrong offset!");

// ScriptStruct modio.ModioFilehash
// 0x0010 (0x0010 - 0x0000)
struct FModioFilehash final
{
public:
	class FString                                 Md5;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioFilehash) == 0x000008, "Wrong alignment on FModioFilehash");
static_assert(sizeof(FModioFilehash) == 0x000010, "Wrong size on FModioFilehash");
static_assert(offsetof(FModioFilehash, Md5) == 0x000000, "Member 'FModioFilehash::Md5' has a wrong offset!");

// ScriptStruct modio.ModioDownload
// 0x0018 (0x0018 - 0x0000)
struct FModioDownload final
{
public:
	int32                                         DateExpires;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BinaryUrl;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioDownload) == 0x000008, "Wrong alignment on FModioDownload");
static_assert(sizeof(FModioDownload) == 0x000018, "Wrong size on FModioDownload");
static_assert(offsetof(FModioDownload, DateExpires) == 0x000000, "Member 'FModioDownload::DateExpires' has a wrong offset!");
static_assert(offsetof(FModioDownload, BinaryUrl) == 0x000008, "Member 'FModioDownload::BinaryUrl' has a wrong offset!");

// ScriptStruct modio.ModioModfile
// 0x0098 (0x0098 - 0x0000)
struct FModioModfile final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VirusStats;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VirusPositive;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DateAdded;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DateScanned;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 Filesize;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VirustotalHash;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Changelog;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MetadataBlob;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioFilehash                         Filehash;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FModioDownload                         Download;                                          // 0x0080(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioModfile) == 0x000008, "Wrong alignment on FModioModfile");
static_assert(sizeof(FModioModfile) == 0x000098, "Wrong size on FModioModfile");
static_assert(offsetof(FModioModfile, ID) == 0x000000, "Member 'FModioModfile::ID' has a wrong offset!");
static_assert(offsetof(FModioModfile, ModId) == 0x000004, "Member 'FModioModfile::ModId' has a wrong offset!");
static_assert(offsetof(FModioModfile, VirusStats) == 0x000008, "Member 'FModioModfile::VirusStats' has a wrong offset!");
static_assert(offsetof(FModioModfile, VirusPositive) == 0x00000C, "Member 'FModioModfile::VirusPositive' has a wrong offset!");
static_assert(offsetof(FModioModfile, DateAdded) == 0x000010, "Member 'FModioModfile::DateAdded' has a wrong offset!");
static_assert(offsetof(FModioModfile, DateScanned) == 0x000014, "Member 'FModioModfile::DateScanned' has a wrong offset!");
static_assert(offsetof(FModioModfile, Filesize) == 0x000018, "Member 'FModioModfile::Filesize' has a wrong offset!");
static_assert(offsetof(FModioModfile, Filename) == 0x000020, "Member 'FModioModfile::Filename' has a wrong offset!");
static_assert(offsetof(FModioModfile, Version) == 0x000030, "Member 'FModioModfile::Version' has a wrong offset!");
static_assert(offsetof(FModioModfile, VirustotalHash) == 0x000040, "Member 'FModioModfile::VirustotalHash' has a wrong offset!");
static_assert(offsetof(FModioModfile, Changelog) == 0x000050, "Member 'FModioModfile::Changelog' has a wrong offset!");
static_assert(offsetof(FModioModfile, MetadataBlob) == 0x000060, "Member 'FModioModfile::MetadataBlob' has a wrong offset!");
static_assert(offsetof(FModioModfile, Filehash) == 0x000070, "Member 'FModioModfile::Filehash' has a wrong offset!");
static_assert(offsetof(FModioModfile, Download) == 0x000080, "Member 'FModioModfile::Download' has a wrong offset!");

// ScriptStruct modio.ModioStats
// 0x0040 (0x0040 - 0x0000)
struct FModioStats final
{
public:
	int32                                         ModId;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PopularityRankPosition;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PopularityRankTotalMods;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DownloadsTotal;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubscribersTotal;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RatingsTotal;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RatingsPositive;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RatingsNegative;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RatingsPercentagePositive;                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DateExpires;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RatingsWeightedAggregate;                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RatingsDisplayText;                                // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioStats) == 0x000008, "Wrong alignment on FModioStats");
static_assert(sizeof(FModioStats) == 0x000040, "Wrong size on FModioStats");
static_assert(offsetof(FModioStats, ModId) == 0x000000, "Member 'FModioStats::ModId' has a wrong offset!");
static_assert(offsetof(FModioStats, PopularityRankPosition) == 0x000004, "Member 'FModioStats::PopularityRankPosition' has a wrong offset!");
static_assert(offsetof(FModioStats, PopularityRankTotalMods) == 0x000008, "Member 'FModioStats::PopularityRankTotalMods' has a wrong offset!");
static_assert(offsetof(FModioStats, DownloadsTotal) == 0x00000C, "Member 'FModioStats::DownloadsTotal' has a wrong offset!");
static_assert(offsetof(FModioStats, SubscribersTotal) == 0x000010, "Member 'FModioStats::SubscribersTotal' has a wrong offset!");
static_assert(offsetof(FModioStats, RatingsTotal) == 0x000014, "Member 'FModioStats::RatingsTotal' has a wrong offset!");
static_assert(offsetof(FModioStats, RatingsPositive) == 0x000018, "Member 'FModioStats::RatingsPositive' has a wrong offset!");
static_assert(offsetof(FModioStats, RatingsNegative) == 0x00001C, "Member 'FModioStats::RatingsNegative' has a wrong offset!");
static_assert(offsetof(FModioStats, RatingsPercentagePositive) == 0x000020, "Member 'FModioStats::RatingsPercentagePositive' has a wrong offset!");
static_assert(offsetof(FModioStats, DateExpires) == 0x000024, "Member 'FModioStats::DateExpires' has a wrong offset!");
static_assert(offsetof(FModioStats, RatingsWeightedAggregate) == 0x000028, "Member 'FModioStats::RatingsWeightedAggregate' has a wrong offset!");
static_assert(offsetof(FModioStats, RatingsDisplayText) == 0x000030, "Member 'FModioStats::RatingsDisplayText' has a wrong offset!");

// ScriptStruct modio.ModioMetadataKVP
// 0x0020 (0x0020 - 0x0000)
struct FModioMetadataKVP final
{
public:
	class FString                                 Metakey;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Metavalue;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioMetadataKVP) == 0x000008, "Wrong alignment on FModioMetadataKVP");
static_assert(sizeof(FModioMetadataKVP) == 0x000020, "Wrong size on FModioMetadataKVP");
static_assert(offsetof(FModioMetadataKVP, Metakey) == 0x000000, "Member 'FModioMetadataKVP::Metakey' has a wrong offset!");
static_assert(offsetof(FModioMetadataKVP, Metavalue) == 0x000010, "Member 'FModioMetadataKVP::Metavalue' has a wrong offset!");

// ScriptStruct modio.ModioMod
// 0x02B0 (0x02B0 - 0x0000)
struct FModioMod final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameId;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visible;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaturityOption;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DateAdded;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DateUpdated;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DateLive;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HomepageUrl;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NameId;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Summary;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DescriptionPlainText;                              // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MetadataBlob;                                      // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProfileUrl;                                        // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioLogo                             Logo;                                              // 0x00A0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FModioUser                             SubmittedBy;                                       // 0x00F0(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FModioModfile                          ModFile;                                           // 0x0188(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FModioMedia                            Media;                                             // 0x0220(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FModioStats                            Stats;                                             // 0x0250(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FModioModTag>                   Tags;                                              // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FModioMetadataKVP>              MetadataKVP;                                       // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioMod) == 0x000008, "Wrong alignment on FModioMod");
static_assert(sizeof(FModioMod) == 0x0002B0, "Wrong size on FModioMod");
static_assert(offsetof(FModioMod, ID) == 0x000000, "Member 'FModioMod::ID' has a wrong offset!");
static_assert(offsetof(FModioMod, GameId) == 0x000004, "Member 'FModioMod::GameId' has a wrong offset!");
static_assert(offsetof(FModioMod, Status) == 0x000008, "Member 'FModioMod::Status' has a wrong offset!");
static_assert(offsetof(FModioMod, Visible) == 0x00000C, "Member 'FModioMod::Visible' has a wrong offset!");
static_assert(offsetof(FModioMod, MaturityOption) == 0x000010, "Member 'FModioMod::MaturityOption' has a wrong offset!");
static_assert(offsetof(FModioMod, DateAdded) == 0x000014, "Member 'FModioMod::DateAdded' has a wrong offset!");
static_assert(offsetof(FModioMod, DateUpdated) == 0x000018, "Member 'FModioMod::DateUpdated' has a wrong offset!");
static_assert(offsetof(FModioMod, DateLive) == 0x00001C, "Member 'FModioMod::DateLive' has a wrong offset!");
static_assert(offsetof(FModioMod, HomepageUrl) == 0x000020, "Member 'FModioMod::HomepageUrl' has a wrong offset!");
static_assert(offsetof(FModioMod, Name) == 0x000030, "Member 'FModioMod::Name' has a wrong offset!");
static_assert(offsetof(FModioMod, NameId) == 0x000040, "Member 'FModioMod::NameId' has a wrong offset!");
static_assert(offsetof(FModioMod, Summary) == 0x000050, "Member 'FModioMod::Summary' has a wrong offset!");
static_assert(offsetof(FModioMod, Description) == 0x000060, "Member 'FModioMod::Description' has a wrong offset!");
static_assert(offsetof(FModioMod, DescriptionPlainText) == 0x000070, "Member 'FModioMod::DescriptionPlainText' has a wrong offset!");
static_assert(offsetof(FModioMod, MetadataBlob) == 0x000080, "Member 'FModioMod::MetadataBlob' has a wrong offset!");
static_assert(offsetof(FModioMod, ProfileUrl) == 0x000090, "Member 'FModioMod::ProfileUrl' has a wrong offset!");
static_assert(offsetof(FModioMod, Logo) == 0x0000A0, "Member 'FModioMod::Logo' has a wrong offset!");
static_assert(offsetof(FModioMod, SubmittedBy) == 0x0000F0, "Member 'FModioMod::SubmittedBy' has a wrong offset!");
static_assert(offsetof(FModioMod, ModFile) == 0x000188, "Member 'FModioMod::ModFile' has a wrong offset!");
static_assert(offsetof(FModioMod, Media) == 0x000220, "Member 'FModioMod::Media' has a wrong offset!");
static_assert(offsetof(FModioMod, Stats) == 0x000250, "Member 'FModioMod::Stats' has a wrong offset!");
static_assert(offsetof(FModioMod, Tags) == 0x000290, "Member 'FModioMod::Tags' has a wrong offset!");
static_assert(offsetof(FModioMod, MetadataKVP) == 0x0002A0, "Member 'FModioMod::MetadataKVP' has a wrong offset!");

// ScriptStruct modio.ModioQueuedModDownload
// 0x02D0 (0x02D0 - 0x0000)
struct FModioQueuedModDownload final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 CurrentProgress;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64                                 TotalSize;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioMod                              Mod;                                               // 0x0020(0x02B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioQueuedModDownload) == 0x000008, "Wrong alignment on FModioQueuedModDownload");
static_assert(sizeof(FModioQueuedModDownload) == 0x0002D0, "Wrong size on FModioQueuedModDownload");
static_assert(offsetof(FModioQueuedModDownload, Path) == 0x000000, "Member 'FModioQueuedModDownload::Path' has a wrong offset!");
static_assert(offsetof(FModioQueuedModDownload, CurrentProgress) == 0x000010, "Member 'FModioQueuedModDownload::CurrentProgress' has a wrong offset!");
static_assert(offsetof(FModioQueuedModDownload, TotalSize) == 0x000018, "Member 'FModioQueuedModDownload::TotalSize' has a wrong offset!");
static_assert(offsetof(FModioQueuedModDownload, Mod) == 0x000020, "Member 'FModioQueuedModDownload::Mod' has a wrong offset!");

// ScriptStruct modio.ModioInstalledMod
// 0x02C0 (0x02C0 - 0x0000)
struct FModioInstalledMod final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioMod                              Mod;                                               // 0x0010(0x02B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioInstalledMod) == 0x000008, "Wrong alignment on FModioInstalledMod");
static_assert(sizeof(FModioInstalledMod) == 0x0002C0, "Wrong size on FModioInstalledMod");
static_assert(offsetof(FModioInstalledMod, Path) == 0x000000, "Member 'FModioInstalledMod::Path' has a wrong offset!");
static_assert(offsetof(FModioInstalledMod, Mod) == 0x000010, "Member 'FModioInstalledMod::Mod' has a wrong offset!");

// ScriptStruct modio.ModioModDependency
// 0x0008 (0x0008 - 0x0000)
struct FModioModDependency final
{
public:
	int32                                         ModId;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DateAdded;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioModDependency) == 0x000004, "Wrong alignment on FModioModDependency");
static_assert(sizeof(FModioModDependency) == 0x000008, "Wrong size on FModioModDependency");
static_assert(offsetof(FModioModDependency, ModId) == 0x000000, "Member 'FModioModDependency::ModId' has a wrong offset!");
static_assert(offsetof(FModioModDependency, DateAdded) == 0x000004, "Member 'FModioModDependency::DateAdded' has a wrong offset!");

// ScriptStruct modio.ModioHeaderImage
// 0x0020 (0x0020 - 0x0000)
struct FModioHeaderImage final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Original;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioHeaderImage) == 0x000008, "Wrong alignment on FModioHeaderImage");
static_assert(sizeof(FModioHeaderImage) == 0x000020, "Wrong size on FModioHeaderImage");
static_assert(offsetof(FModioHeaderImage, Filename) == 0x000000, "Member 'FModioHeaderImage::Filename' has a wrong offset!");
static_assert(offsetof(FModioHeaderImage, Original) == 0x000010, "Member 'FModioHeaderImage::Original' has a wrong offset!");

// ScriptStruct modio.ModioIcon
// 0x0050 (0x0050 - 0x0000)
struct FModioIcon final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Original;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Thumb64x64;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Thumb128x128;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Thumb256x256;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioIcon) == 0x000008, "Wrong alignment on FModioIcon");
static_assert(sizeof(FModioIcon) == 0x000050, "Wrong size on FModioIcon");
static_assert(offsetof(FModioIcon, Filename) == 0x000000, "Member 'FModioIcon::Filename' has a wrong offset!");
static_assert(offsetof(FModioIcon, Original) == 0x000010, "Member 'FModioIcon::Original' has a wrong offset!");
static_assert(offsetof(FModioIcon, Thumb64x64) == 0x000020, "Member 'FModioIcon::Thumb64x64' has a wrong offset!");
static_assert(offsetof(FModioIcon, Thumb128x128) == 0x000030, "Member 'FModioIcon::Thumb128x128' has a wrong offset!");
static_assert(offsetof(FModioIcon, Thumb256x256) == 0x000040, "Member 'FModioIcon::Thumb256x256' has a wrong offset!");

// ScriptStruct modio.ModioGameTagOption
// 0x0038 (0x0038 - 0x0000)
struct FModioGameTagOption final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Hidden;                                            // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Tags;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioGameTagOption) == 0x000008, "Wrong alignment on FModioGameTagOption");
static_assert(sizeof(FModioGameTagOption) == 0x000038, "Wrong size on FModioGameTagOption");
static_assert(offsetof(FModioGameTagOption, Name) == 0x000000, "Member 'FModioGameTagOption::Name' has a wrong offset!");
static_assert(offsetof(FModioGameTagOption, Type) == 0x000010, "Member 'FModioGameTagOption::Type' has a wrong offset!");
static_assert(offsetof(FModioGameTagOption, Hidden) == 0x000020, "Member 'FModioGameTagOption::Hidden' has a wrong offset!");
static_assert(offsetof(FModioGameTagOption, Tags) == 0x000028, "Member 'FModioGameTagOption::Tags' has a wrong offset!");

// ScriptStruct modio.ModioGame
// 0x0208 (0x0208 - 0x0000)
struct FModioGame final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioUser                             SubmittedBy;                                       // 0x0008(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         DateAdded;                                         // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DateUpdated;                                       // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DateLive;                                          // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PresentationOption;                                // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubmissionOption;                                  // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurationOption;                                    // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommunityOptions;                                  // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RevenueOptions;                                    // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ApiAccessOptions;                                  // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaturityOptions;                                   // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UGCName;                                           // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioIcon                             Icon;                                              // 0x00D8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FModioLogo                             Logo;                                              // 0x0128(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FModioHeaderImage                      Header;                                            // 0x0178(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NameId;                                            // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Summary;                                           // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Instructions;                                      // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InstructionsUrl;                                   // 0x01D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProfileUrl;                                        // 0x01E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FModioGameTagOption>            TagOptions;                                        // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioGame) == 0x000008, "Wrong alignment on FModioGame");
static_assert(sizeof(FModioGame) == 0x000208, "Wrong size on FModioGame");
static_assert(offsetof(FModioGame, ID) == 0x000000, "Member 'FModioGame::ID' has a wrong offset!");
static_assert(offsetof(FModioGame, Status) == 0x000004, "Member 'FModioGame::Status' has a wrong offset!");
static_assert(offsetof(FModioGame, SubmittedBy) == 0x000008, "Member 'FModioGame::SubmittedBy' has a wrong offset!");
static_assert(offsetof(FModioGame, DateAdded) == 0x0000A0, "Member 'FModioGame::DateAdded' has a wrong offset!");
static_assert(offsetof(FModioGame, DateUpdated) == 0x0000A4, "Member 'FModioGame::DateUpdated' has a wrong offset!");
static_assert(offsetof(FModioGame, DateLive) == 0x0000A8, "Member 'FModioGame::DateLive' has a wrong offset!");
static_assert(offsetof(FModioGame, PresentationOption) == 0x0000AC, "Member 'FModioGame::PresentationOption' has a wrong offset!");
static_assert(offsetof(FModioGame, SubmissionOption) == 0x0000B0, "Member 'FModioGame::SubmissionOption' has a wrong offset!");
static_assert(offsetof(FModioGame, CurationOption) == 0x0000B4, "Member 'FModioGame::CurationOption' has a wrong offset!");
static_assert(offsetof(FModioGame, CommunityOptions) == 0x0000B8, "Member 'FModioGame::CommunityOptions' has a wrong offset!");
static_assert(offsetof(FModioGame, RevenueOptions) == 0x0000BC, "Member 'FModioGame::RevenueOptions' has a wrong offset!");
static_assert(offsetof(FModioGame, ApiAccessOptions) == 0x0000C0, "Member 'FModioGame::ApiAccessOptions' has a wrong offset!");
static_assert(offsetof(FModioGame, MaturityOptions) == 0x0000C4, "Member 'FModioGame::MaturityOptions' has a wrong offset!");
static_assert(offsetof(FModioGame, UGCName) == 0x0000C8, "Member 'FModioGame::UGCName' has a wrong offset!");
static_assert(offsetof(FModioGame, Icon) == 0x0000D8, "Member 'FModioGame::Icon' has a wrong offset!");
static_assert(offsetof(FModioGame, Logo) == 0x000128, "Member 'FModioGame::Logo' has a wrong offset!");
static_assert(offsetof(FModioGame, Header) == 0x000178, "Member 'FModioGame::Header' has a wrong offset!");
static_assert(offsetof(FModioGame, Name) == 0x000198, "Member 'FModioGame::Name' has a wrong offset!");
static_assert(offsetof(FModioGame, NameId) == 0x0001A8, "Member 'FModioGame::NameId' has a wrong offset!");
static_assert(offsetof(FModioGame, Summary) == 0x0001B8, "Member 'FModioGame::Summary' has a wrong offset!");
static_assert(offsetof(FModioGame, Instructions) == 0x0001C8, "Member 'FModioGame::Instructions' has a wrong offset!");
static_assert(offsetof(FModioGame, InstructionsUrl) == 0x0001D8, "Member 'FModioGame::InstructionsUrl' has a wrong offset!");
static_assert(offsetof(FModioGame, ProfileUrl) == 0x0001E8, "Member 'FModioGame::ProfileUrl' has a wrong offset!");
static_assert(offsetof(FModioGame, TagOptions) == 0x0001F8, "Member 'FModioGame::TagOptions' has a wrong offset!");

// ScriptStruct modio.ModioUserEvent
// 0x0018 (0x0018 - 0x0000)
struct FModioUserEvent final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameId;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventType;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DateAdded;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioUserEvent) == 0x000004, "Wrong alignment on FModioUserEvent");
static_assert(sizeof(FModioUserEvent) == 0x000018, "Wrong size on FModioUserEvent");
static_assert(offsetof(FModioUserEvent, ID) == 0x000000, "Member 'FModioUserEvent::ID' has a wrong offset!");
static_assert(offsetof(FModioUserEvent, GameId) == 0x000004, "Member 'FModioUserEvent::GameId' has a wrong offset!");
static_assert(offsetof(FModioUserEvent, ModId) == 0x000008, "Member 'FModioUserEvent::ModId' has a wrong offset!");
static_assert(offsetof(FModioUserEvent, UserId) == 0x00000C, "Member 'FModioUserEvent::UserId' has a wrong offset!");
static_assert(offsetof(FModioUserEvent, EventType) == 0x000010, "Member 'FModioUserEvent::EventType' has a wrong offset!");
static_assert(offsetof(FModioUserEvent, DateAdded) == 0x000014, "Member 'FModioUserEvent::DateAdded' has a wrong offset!");

// ScriptStruct modio.ModioRating
// 0x0010 (0x0010 - 0x0000)
struct FModioRating final
{
public:
	int32                                         GameId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rating;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DateAdded;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioRating) == 0x000004, "Wrong alignment on FModioRating");
static_assert(sizeof(FModioRating) == 0x000010, "Wrong size on FModioRating");
static_assert(offsetof(FModioRating, GameId) == 0x000000, "Member 'FModioRating::GameId' has a wrong offset!");
static_assert(offsetof(FModioRating, ModId) == 0x000004, "Member 'FModioRating::ModId' has a wrong offset!");
static_assert(offsetof(FModioRating, Rating) == 0x000008, "Member 'FModioRating::Rating' has a wrong offset!");
static_assert(offsetof(FModioRating, DateAdded) == 0x00000C, "Member 'FModioRating::DateAdded' has a wrong offset!");

// ScriptStruct modio.ModioModEvent
// 0x0014 (0x0014 - 0x0000)
struct FModioModEvent final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventType;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DateAdded;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioModEvent) == 0x000004, "Wrong alignment on FModioModEvent");
static_assert(sizeof(FModioModEvent) == 0x000014, "Wrong size on FModioModEvent");
static_assert(offsetof(FModioModEvent, ID) == 0x000000, "Member 'FModioModEvent::ID' has a wrong offset!");
static_assert(offsetof(FModioModEvent, ModId) == 0x000004, "Member 'FModioModEvent::ModId' has a wrong offset!");
static_assert(offsetof(FModioModEvent, UserId) == 0x000008, "Member 'FModioModEvent::UserId' has a wrong offset!");
static_assert(offsetof(FModioModEvent, EventType) == 0x00000C, "Member 'FModioModEvent::EventType' has a wrong offset!");
static_assert(offsetof(FModioModEvent, DateAdded) == 0x000010, "Member 'FModioModEvent::DateAdded' has a wrong offset!");

// ScriptStruct modio.ModioModCreator
// 0x0088 (0x0088 - 0x0000)
struct FModioModCreator final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LogoPath;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Summary;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NameId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HomepageUrl;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MetadataBlob;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EModioBooleanCustomizableType                 Visible;                                           // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaturityOption;                                    // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioModCreator) == 0x000008, "Wrong alignment on FModioModCreator");
static_assert(sizeof(FModioModCreator) == 0x000088, "Wrong size on FModioModCreator");
static_assert(offsetof(FModioModCreator, Name) == 0x000000, "Member 'FModioModCreator::Name' has a wrong offset!");
static_assert(offsetof(FModioModCreator, LogoPath) == 0x000010, "Member 'FModioModCreator::LogoPath' has a wrong offset!");
static_assert(offsetof(FModioModCreator, Summary) == 0x000020, "Member 'FModioModCreator::Summary' has a wrong offset!");
static_assert(offsetof(FModioModCreator, NameId) == 0x000030, "Member 'FModioModCreator::NameId' has a wrong offset!");
static_assert(offsetof(FModioModCreator, Description) == 0x000040, "Member 'FModioModCreator::Description' has a wrong offset!");
static_assert(offsetof(FModioModCreator, HomepageUrl) == 0x000050, "Member 'FModioModCreator::HomepageUrl' has a wrong offset!");
static_assert(offsetof(FModioModCreator, MetadataBlob) == 0x000060, "Member 'FModioModCreator::MetadataBlob' has a wrong offset!");
static_assert(offsetof(FModioModCreator, Tags) == 0x000070, "Member 'FModioModCreator::Tags' has a wrong offset!");
static_assert(offsetof(FModioModCreator, Visible) == 0x000080, "Member 'FModioModCreator::Visible' has a wrong offset!");
static_assert(offsetof(FModioModCreator, MaturityOption) == 0x000084, "Member 'FModioModCreator::MaturityOption' has a wrong offset!");

// ScriptStruct modio.ModioModEditor
// 0x0068 (0x0068 - 0x0000)
struct FModioModEditor final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Summary;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NameId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HomepageUrl;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MetadataBlob;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModioBooleanCustomizableType                 Visible;                                           // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaturityOption;                                    // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioModEditor) == 0x000008, "Wrong alignment on FModioModEditor");
static_assert(sizeof(FModioModEditor) == 0x000068, "Wrong size on FModioModEditor");
static_assert(offsetof(FModioModEditor, Name) == 0x000000, "Member 'FModioModEditor::Name' has a wrong offset!");
static_assert(offsetof(FModioModEditor, Summary) == 0x000010, "Member 'FModioModEditor::Summary' has a wrong offset!");
static_assert(offsetof(FModioModEditor, NameId) == 0x000020, "Member 'FModioModEditor::NameId' has a wrong offset!");
static_assert(offsetof(FModioModEditor, Description) == 0x000030, "Member 'FModioModEditor::Description' has a wrong offset!");
static_assert(offsetof(FModioModEditor, HomepageUrl) == 0x000040, "Member 'FModioModEditor::HomepageUrl' has a wrong offset!");
static_assert(offsetof(FModioModEditor, MetadataBlob) == 0x000050, "Member 'FModioModEditor::MetadataBlob' has a wrong offset!");
static_assert(offsetof(FModioModEditor, Visible) == 0x000060, "Member 'FModioModEditor::Visible' has a wrong offset!");
static_assert(offsetof(FModioModEditor, MaturityOption) == 0x000064, "Member 'FModioModEditor::MaturityOption' has a wrong offset!");

// ScriptStruct modio.ModioModfileCreator
// 0x0048 (0x0048 - 0x0000)
struct FModioModfileCreator final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Changelog;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModioBooleanCustomizableType                 Active;                                            // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Filehash;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioModfileCreator) == 0x000008, "Wrong alignment on FModioModfileCreator");
static_assert(sizeof(FModioModfileCreator) == 0x000048, "Wrong size on FModioModfileCreator");
static_assert(offsetof(FModioModfileCreator, Path) == 0x000000, "Member 'FModioModfileCreator::Path' has a wrong offset!");
static_assert(offsetof(FModioModfileCreator, Version) == 0x000010, "Member 'FModioModfileCreator::Version' has a wrong offset!");
static_assert(offsetof(FModioModfileCreator, Changelog) == 0x000020, "Member 'FModioModfileCreator::Changelog' has a wrong offset!");
static_assert(offsetof(FModioModfileCreator, Active) == 0x000030, "Member 'FModioModfileCreator::Active' has a wrong offset!");
static_assert(offsetof(FModioModfileCreator, Filehash) == 0x000038, "Member 'FModioModfileCreator::Filehash' has a wrong offset!");

// ScriptStruct modio.ModioQueuedModfileUpload
// 0x0020 (0x0020 - 0x0000)
struct FModioQueuedModfileUpload final
{
public:
	int32                                         State;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentProgress;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSize;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModioQueuedModfileUpload) == 0x000008, "Wrong alignment on FModioQueuedModfileUpload");
static_assert(sizeof(FModioQueuedModfileUpload) == 0x000020, "Wrong size on FModioQueuedModfileUpload");
static_assert(offsetof(FModioQueuedModfileUpload, State) == 0x000000, "Member 'FModioQueuedModfileUpload::State' has a wrong offset!");
static_assert(offsetof(FModioQueuedModfileUpload, ModId) == 0x000004, "Member 'FModioQueuedModfileUpload::ModId' has a wrong offset!");
static_assert(offsetof(FModioQueuedModfileUpload, CurrentProgress) == 0x000008, "Member 'FModioQueuedModfileUpload::CurrentProgress' has a wrong offset!");
static_assert(offsetof(FModioQueuedModfileUpload, TotalSize) == 0x00000C, "Member 'FModioQueuedModfileUpload::TotalSize' has a wrong offset!");
static_assert(offsetof(FModioQueuedModfileUpload, Path) == 0x000010, "Member 'FModioQueuedModfileUpload::Path' has a wrong offset!");

}

