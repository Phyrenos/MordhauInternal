#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Int64

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// Class Int64.Int64FunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UInt64FunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FInt64 Conv_FloatToInt64(float Float);
	static struct FInt64 Conv_Int32ToInt64(int32 Int32);
	static float Conv_Int64ToFloat(const struct FInt64& Int64);
	static int32 Conv_Int64ToInt32(const struct FInt64& Int64);
	static class FString Conv_Int64ToString(const struct FInt64& Int64);
	static struct FInt64 MakeInt64(const class FString& Int64);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Int64FunctionLibrary">();
	}
	static class UInt64FunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInt64FunctionLibrary>();
	}
};
static_assert(alignof(UInt64FunctionLibrary) == 0x000008, "Wrong alignment on UInt64FunctionLibrary");
static_assert(sizeof(UInt64FunctionLibrary) == 0x000028, "Wrong size on UInt64FunctionLibrary");

// Class Int64.Int64MathLibrary
// 0x0000 (0x0028 - 0x0028)
class UInt64MathLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FInt64 Abs_Int(const struct FInt64& A);
	static float Add_Int64Float(const struct FInt64& A, float B);
	static struct FInt64 Add_Int64Int64(const struct FInt64& A, const struct FInt64& B);
	static float Divide_Int64Float(const struct FInt64& A, float B);
	static struct FInt64 Divide_Int64Int64(const struct FInt64& A, const struct FInt64& B);
	static bool EqualEqual_Int64Int64(const struct FInt64& A, const struct FInt64& B);
	static bool Greater_Int64Int64(const struct FInt64& A, const struct FInt64& B);
	static bool GreaterEqual_Int64Int64(const struct FInt64& A, const struct FInt64& B);
	static bool Less_Int64Int64(const struct FInt64& A, const struct FInt64& B);
	static bool LessEqual_Int64Int64(const struct FInt64& A, const struct FInt64& B);
	static struct FInt64 Max(const struct FInt64& A, const struct FInt64& B);
	static struct FInt64 Min(const struct FInt64& A, const struct FInt64& B);
	static float Multiply_Int64Float(const struct FInt64& A, float B);
	static struct FInt64 Multiply_Int64Int64(const struct FInt64& A, const struct FInt64& B);
	static bool NotEqual_Int64Int64(const struct FInt64& A, const struct FInt64& B);
	static struct FInt64 Percent_Int64Int64(const struct FInt64& A, const struct FInt64& B);
	static float Subtract_Int64Float(const struct FInt64& A, float B);
	static struct FInt64 Subtract_Int64Int64(const struct FInt64& A, const struct FInt64& B);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Int64MathLibrary">();
	}
	static class UInt64MathLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInt64MathLibrary>();
	}
};
static_assert(alignof(UInt64MathLibrary) == 0x000008, "Wrong alignment on UInt64MathLibrary");
static_assert(sizeof(UInt64MathLibrary) == 0x000028, "Wrong size on UInt64MathLibrary");

}

