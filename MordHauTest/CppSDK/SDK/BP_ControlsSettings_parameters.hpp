#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ControlsSettings

#include "Basic.hpp"

#include "E_MainMenuAction_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "S_MordhauSlider_structs.hpp"


namespace SDK::Params
{

// Function BP_ControlsSettings.BP_ControlsSettings_C.ExecuteUbergraph_BP_ControlsSettings
// 0x0110 (0x0110 - 0x0000)
struct BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	class FText                                   K2Node_ComponentBoundEvent_SelectedItem;           // 0x0020(0x0018)()
	ESelectInfo                                   K2Node_ComponentBoundEvent_SelectionType;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ChoiceDialog_C*                     CallFunc_CreateChoiceDialog_ChoiceDialog;          // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauHUD*                            CallFunc_GetMordhauHUD_ReturnValue;                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSelectedIndex_SelectedIndex;           // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0058(0x0010)(ZeroConstructor, NoDestructor)
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue_1;            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetOptionAtIndex_ReturnValue;             // 0x0070(0x0018)()
	TArray<class UBP_KeyBindingsSettings_C*>      CallFunc_GetAllWidgetsOfClass_FoundWidgets;        // 0x0088(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_GetOptionCount_ReturnValue;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_KeyBindingsSettings_C*              CallFunc_Array_Get_Item;                           // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AE[0x2];                                       // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSelectedIndex_SelectedIndex_1;         // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x00B8(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_ChoiceDialog_C*                     CallFunc_CreateChoiceDialog_ChoiceDialog_1;        // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUD*                                   CallFunc_GetHUD_ReturnValue;                       // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MordhauHUD_C*                       K2Node_DynamicCast_AsBP_Mordhau_HUD;               // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0100(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings");
static_assert(sizeof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings) == 0x000110, "Wrong size on BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, EntryPoint) == 0x000000, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_GetMordhauInput_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, K2Node_ComponentBoundEvent_SelectedItem) == 0x000020, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::K2Node_ComponentBoundEvent_SelectedItem' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, K2Node_ComponentBoundEvent_SelectionType) == 0x000038, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::K2Node_ComponentBoundEvent_SelectionType' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_CreateChoiceDialog_ChoiceDialog) == 0x000040, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_CreateChoiceDialog_ChoiceDialog' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_GetMordhauHUD_ReturnValue) == 0x000048, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_GetMordhauHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_GetSelectedIndex_SelectedIndex) == 0x000054, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_GetSelectedIndex_SelectedIndex' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, K2Node_CreateDelegate_OutputDelegate_1) == 0x000058, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_GetMordhauInput_ReturnValue_1) == 0x000068, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_GetMordhauInput_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_GetOptionAtIndex_ReturnValue) == 0x000070, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_GetOptionAtIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_GetAllWidgetsOfClass_FoundWidgets) == 0x000088, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_GetAllWidgetsOfClass_FoundWidgets' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_GetOptionCount_ReturnValue) == 0x000098, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_GetOptionCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000A8, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000AC, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000AD, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_GetSelectedIndex_SelectedIndex_1) == 0x0000B0, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_GetSelectedIndex_SelectedIndex_1' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0000B4, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x0000B5, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, K2Node_CreateDelegate_OutputDelegate_2) == 0x0000B8, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x0000C8, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x0000C9, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_BooleanOR_ReturnValue) == 0x0000CA, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_BooleanOR_ReturnValue_1) == 0x0000CB, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_BooleanOR_ReturnValue_2) == 0x0000CC, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_GetPlayerController_ReturnValue) == 0x0000D0, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_CreateChoiceDialog_ChoiceDialog_1) == 0x0000D8, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_CreateChoiceDialog_ChoiceDialog_1' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_GetHUD_ReturnValue) == 0x0000E0, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_GetHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, K2Node_DynamicCast_AsBP_Mordhau_HUD) == 0x0000E8, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::K2Node_DynamicCast_AsBP_Mordhau_HUD' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, K2Node_DynamicCast_bSuccess) == 0x0000F0, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x0000F8, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings, K2Node_CreateDelegate_OutputDelegate_3) == 0x000100, "Member 'BP_ControlsSettings_C_ExecuteUbergraph_BP_ControlsSettings::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.BndEvt__ControlSchemeDropdown_K2Node_ComponentBoundEvent_5_OnSelectionChanged__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_ControlsSettings_C_BndEvt__ControlSchemeDropdown_K2Node_ComponentBoundEvent_5_OnSelectionChanged__DelegateSignature final
{
public:
	class FText                                   SelectedItem;                                      // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	ESelectInfo                                   SelectionType;                                     // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_BndEvt__ControlSchemeDropdown_K2Node_ComponentBoundEvent_5_OnSelectionChanged__DelegateSignature) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_BndEvt__ControlSchemeDropdown_K2Node_ComponentBoundEvent_5_OnSelectionChanged__DelegateSignature");
static_assert(sizeof(BP_ControlsSettings_C_BndEvt__ControlSchemeDropdown_K2Node_ComponentBoundEvent_5_OnSelectionChanged__DelegateSignature) == 0x000020, "Wrong size on BP_ControlsSettings_C_BndEvt__ControlSchemeDropdown_K2Node_ComponentBoundEvent_5_OnSelectionChanged__DelegateSignature");
static_assert(offsetof(BP_ControlsSettings_C_BndEvt__ControlSchemeDropdown_K2Node_ComponentBoundEvent_5_OnSelectionChanged__DelegateSignature, SelectedItem) == 0x000000, "Member 'BP_ControlsSettings_C_BndEvt__ControlSchemeDropdown_K2Node_ComponentBoundEvent_5_OnSelectionChanged__DelegateSignature::SelectedItem' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_BndEvt__ControlSchemeDropdown_K2Node_ComponentBoundEvent_5_OnSelectionChanged__DelegateSignature, SelectionType) == 0x000018, "Member 'BP_ControlsSettings_C_BndEvt__ControlSchemeDropdown_K2Node_ComponentBoundEvent_5_OnSelectionChanged__DelegateSignature::SelectionType' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateInvertMouseXCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_ControlsSettings_C_UpdateInvertMouseXCheckbox final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMouseXInverted_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateInvertMouseXCheckbox) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateInvertMouseXCheckbox");
static_assert(sizeof(BP_ControlsSettings_C_UpdateInvertMouseXCheckbox) == 0x000010, "Wrong size on BP_ControlsSettings_C_UpdateInvertMouseXCheckbox");
static_assert(offsetof(BP_ControlsSettings_C_UpdateInvertMouseXCheckbox, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateInvertMouseXCheckbox::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateInvertMouseXCheckbox, CallFunc_GetMouseXInverted_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateInvertMouseXCheckbox::CallFunc_GetMouseXInverted_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyInvertMouseX
// 0x0010 (0x0010 - 0x0000)
struct BP_ControlsSettings_C_ApplyInvertMouseX final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyInvertMouseX) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyInvertMouseX");
static_assert(sizeof(BP_ControlsSettings_C_ApplyInvertMouseX) == 0x000010, "Wrong size on BP_ControlsSettings_C_ApplyInvertMouseX");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInvertMouseX, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyInvertMouseX::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInvertMouseX, CallFunc_IsChecked_Value) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyInvertMouseX::CallFunc_IsChecked_Value' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateInvertMouseYCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_ControlsSettings_C_UpdateInvertMouseYCheckbox final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMouseYInverted_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateInvertMouseYCheckbox) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateInvertMouseYCheckbox");
static_assert(sizeof(BP_ControlsSettings_C_UpdateInvertMouseYCheckbox) == 0x000010, "Wrong size on BP_ControlsSettings_C_UpdateInvertMouseYCheckbox");
static_assert(offsetof(BP_ControlsSettings_C_UpdateInvertMouseYCheckbox, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateInvertMouseYCheckbox::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateInvertMouseYCheckbox, CallFunc_GetMouseYInverted_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateInvertMouseYCheckbox::CallFunc_GetMouseYInverted_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyInvertMouseY
// 0x0010 (0x0010 - 0x0000)
struct BP_ControlsSettings_C_ApplyInvertMouseY final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyInvertMouseY) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyInvertMouseY");
static_assert(sizeof(BP_ControlsSettings_C_ApplyInvertMouseY) == 0x000010, "Wrong size on BP_ControlsSettings_C_ApplyInvertMouseY");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInvertMouseY, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyInvertMouseY::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInvertMouseY, CallFunc_IsChecked_Value) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyInvertMouseY::CallFunc_IsChecked_Value' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateInvertGamepadLeftXCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_ControlsSettings_C_UpdateInvertGamepadLeftXCheckbox final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetGamepadLeftXInverted_ReturnValue;      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateInvertGamepadLeftXCheckbox) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateInvertGamepadLeftXCheckbox");
static_assert(sizeof(BP_ControlsSettings_C_UpdateInvertGamepadLeftXCheckbox) == 0x000010, "Wrong size on BP_ControlsSettings_C_UpdateInvertGamepadLeftXCheckbox");
static_assert(offsetof(BP_ControlsSettings_C_UpdateInvertGamepadLeftXCheckbox, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateInvertGamepadLeftXCheckbox::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateInvertGamepadLeftXCheckbox, CallFunc_GetGamepadLeftXInverted_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateInvertGamepadLeftXCheckbox::CallFunc_GetGamepadLeftXInverted_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateInvertGamepadLeftYCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_ControlsSettings_C_UpdateInvertGamepadLeftYCheckbox final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetGamepadLeftYInverted_ReturnValue;      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateInvertGamepadLeftYCheckbox) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateInvertGamepadLeftYCheckbox");
static_assert(sizeof(BP_ControlsSettings_C_UpdateInvertGamepadLeftYCheckbox) == 0x000010, "Wrong size on BP_ControlsSettings_C_UpdateInvertGamepadLeftYCheckbox");
static_assert(offsetof(BP_ControlsSettings_C_UpdateInvertGamepadLeftYCheckbox, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateInvertGamepadLeftYCheckbox::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateInvertGamepadLeftYCheckbox, CallFunc_GetGamepadLeftYInverted_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateInvertGamepadLeftYCheckbox::CallFunc_GetGamepadLeftYInverted_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyInvertGamepadLeftX
// 0x0010 (0x0010 - 0x0000)
struct BP_ControlsSettings_C_ApplyInvertGamepadLeftX final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyInvertGamepadLeftX) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyInvertGamepadLeftX");
static_assert(sizeof(BP_ControlsSettings_C_ApplyInvertGamepadLeftX) == 0x000010, "Wrong size on BP_ControlsSettings_C_ApplyInvertGamepadLeftX");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInvertGamepadLeftX, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyInvertGamepadLeftX::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInvertGamepadLeftX, CallFunc_IsChecked_Value) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyInvertGamepadLeftX::CallFunc_IsChecked_Value' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyInvertGamepadLeftY
// 0x0010 (0x0010 - 0x0000)
struct BP_ControlsSettings_C_ApplyInvertGamepadLeftY final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyInvertGamepadLeftY) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyInvertGamepadLeftY");
static_assert(sizeof(BP_ControlsSettings_C_ApplyInvertGamepadLeftY) == 0x000010, "Wrong size on BP_ControlsSettings_C_ApplyInvertGamepadLeftY");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInvertGamepadLeftY, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyInvertGamepadLeftY::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInvertGamepadLeftY, CallFunc_IsChecked_Value) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyInvertGamepadLeftY::CallFunc_IsChecked_Value' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateFlipAttackSideCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_ControlsSettings_C_UpdateFlipAttackSideCheckbox final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMouseXIsFlipAttackSide_ReturnValue;    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateFlipAttackSideCheckbox) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateFlipAttackSideCheckbox");
static_assert(sizeof(BP_ControlsSettings_C_UpdateFlipAttackSideCheckbox) == 0x000010, "Wrong size on BP_ControlsSettings_C_UpdateFlipAttackSideCheckbox");
static_assert(offsetof(BP_ControlsSettings_C_UpdateFlipAttackSideCheckbox, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateFlipAttackSideCheckbox::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateFlipAttackSideCheckbox, CallFunc_GetMouseXIsFlipAttackSide_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateFlipAttackSideCheckbox::CallFunc_GetMouseXIsFlipAttackSide_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateFlipAttackSideCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_ControlsSettings_C_UpdateFlipAttackSideCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyFlipAttackSide
// 0x0020 (0x0020 - 0x0000)
struct BP_ControlsSettings_C_ApplyFlipAttackSide final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyFlipAttackSide) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyFlipAttackSide");
static_assert(sizeof(BP_ControlsSettings_C_ApplyFlipAttackSide) == 0x000020, "Wrong size on BP_ControlsSettings_C_ApplyFlipAttackSide");
static_assert(offsetof(BP_ControlsSettings_C_ApplyFlipAttackSide, Temp_bool_Variable) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyFlipAttackSide::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyFlipAttackSide, Temp_int_Variable) == 0x000004, "Member 'BP_ControlsSettings_C_ApplyFlipAttackSide::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyFlipAttackSide, Temp_int_Variable_1) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyFlipAttackSide::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyFlipAttackSide, CallFunc_GetMordhauInput_ReturnValue) == 0x000010, "Member 'BP_ControlsSettings_C_ApplyFlipAttackSide::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyFlipAttackSide, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_ControlsSettings_C_ApplyFlipAttackSide::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyFlipAttackSide, K2Node_Select_Default) == 0x00001C, "Member 'BP_ControlsSettings_C_ApplyFlipAttackSide::K2Node_Select_Default' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateMouseXSensitivitySlider
// 0x0020 (0x0020 - 0x0000)
struct BP_ControlsSettings_C_UpdateMouseXSensitivitySlider final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetMouseSensitivityLimits_ReturnValue;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMouseXSensitivity_ReturnValue;         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateMouseXSensitivitySlider) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateMouseXSensitivitySlider");
static_assert(sizeof(BP_ControlsSettings_C_UpdateMouseXSensitivitySlider) == 0x000020, "Wrong size on BP_ControlsSettings_C_UpdateMouseXSensitivitySlider");
static_assert(offsetof(BP_ControlsSettings_C_UpdateMouseXSensitivitySlider, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateMouseXSensitivitySlider::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateMouseXSensitivitySlider, CallFunc_GetMouseSensitivityLimits_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateMouseXSensitivitySlider::CallFunc_GetMouseSensitivityLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateMouseXSensitivitySlider, CallFunc_GetMouseXSensitivity_ReturnValue) == 0x000010, "Member 'BP_ControlsSettings_C_UpdateMouseXSensitivitySlider::CallFunc_GetMouseXSensitivity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateMouseXSensitivitySlider, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000014, "Member 'BP_ControlsSettings_C_UpdateMouseXSensitivitySlider::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateMouseXSensitivitySlider, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_ControlsSettings_C_UpdateMouseXSensitivitySlider::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateMouseYSensitivitySlider
// 0x0020 (0x0020 - 0x0000)
struct BP_ControlsSettings_C_UpdateMouseYSensitivitySlider final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetMouseSensitivityLimits_ReturnValue;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMouseYSensitivity_ReturnValue;         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateMouseYSensitivitySlider) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateMouseYSensitivitySlider");
static_assert(sizeof(BP_ControlsSettings_C_UpdateMouseYSensitivitySlider) == 0x000020, "Wrong size on BP_ControlsSettings_C_UpdateMouseYSensitivitySlider");
static_assert(offsetof(BP_ControlsSettings_C_UpdateMouseYSensitivitySlider, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateMouseYSensitivitySlider::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateMouseYSensitivitySlider, CallFunc_GetMouseSensitivityLimits_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateMouseYSensitivitySlider::CallFunc_GetMouseSensitivityLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateMouseYSensitivitySlider, CallFunc_GetMouseYSensitivity_ReturnValue) == 0x000010, "Member 'BP_ControlsSettings_C_UpdateMouseYSensitivitySlider::CallFunc_GetMouseYSensitivity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateMouseYSensitivitySlider, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000014, "Member 'BP_ControlsSettings_C_UpdateMouseYSensitivitySlider::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateMouseYSensitivitySlider, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_ControlsSettings_C_UpdateMouseYSensitivitySlider::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateGamepadLeftXSensitivitySlider
// 0x0018 (0x0018 - 0x0000)
struct BP_ControlsSettings_C_UpdateGamepadLeftXSensitivitySlider final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGamepadLeftXSensitivity_ReturnValue;   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetGamepadSensitivityLimits_ReturnValue;  // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateGamepadLeftXSensitivitySlider) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateGamepadLeftXSensitivitySlider");
static_assert(sizeof(BP_ControlsSettings_C_UpdateGamepadLeftXSensitivitySlider) == 0x000018, "Wrong size on BP_ControlsSettings_C_UpdateGamepadLeftXSensitivitySlider");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadLeftXSensitivitySlider, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateGamepadLeftXSensitivitySlider::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadLeftXSensitivitySlider, CallFunc_GetGamepadLeftXSensitivity_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateGamepadLeftXSensitivitySlider::CallFunc_GetGamepadLeftXSensitivity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadLeftXSensitivitySlider, CallFunc_GetGamepadSensitivityLimits_ReturnValue) == 0x00000C, "Member 'BP_ControlsSettings_C_UpdateGamepadLeftXSensitivitySlider::CallFunc_GetGamepadSensitivityLimits_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateGamepadLeftYSensitivitySlider
// 0x0018 (0x0018 - 0x0000)
struct BP_ControlsSettings_C_UpdateGamepadLeftYSensitivitySlider final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetGamepadSensitivityLimits_ReturnValue;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGamepadLeftYSensitivity_ReturnValue;   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateGamepadLeftYSensitivitySlider) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateGamepadLeftYSensitivitySlider");
static_assert(sizeof(BP_ControlsSettings_C_UpdateGamepadLeftYSensitivitySlider) == 0x000018, "Wrong size on BP_ControlsSettings_C_UpdateGamepadLeftYSensitivitySlider");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadLeftYSensitivitySlider, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateGamepadLeftYSensitivitySlider::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadLeftYSensitivitySlider, CallFunc_GetGamepadSensitivityLimits_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateGamepadLeftYSensitivitySlider::CallFunc_GetGamepadSensitivityLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadLeftYSensitivitySlider, CallFunc_GetGamepadLeftYSensitivity_ReturnValue) == 0x000010, "Member 'BP_ControlsSettings_C_UpdateGamepadLeftYSensitivitySlider::CallFunc_GetGamepadLeftYSensitivity_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateGamepadRightXSensitivitySlider
// 0x0018 (0x0018 - 0x0000)
struct BP_ControlsSettings_C_UpdateGamepadRightXSensitivitySlider final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetGamepadSensitivityLimits_ReturnValue;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGamepadRightXSensitivity_ReturnValue;  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateGamepadRightXSensitivitySlider) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateGamepadRightXSensitivitySlider");
static_assert(sizeof(BP_ControlsSettings_C_UpdateGamepadRightXSensitivitySlider) == 0x000018, "Wrong size on BP_ControlsSettings_C_UpdateGamepadRightXSensitivitySlider");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadRightXSensitivitySlider, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateGamepadRightXSensitivitySlider::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadRightXSensitivitySlider, CallFunc_GetGamepadSensitivityLimits_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateGamepadRightXSensitivitySlider::CallFunc_GetGamepadSensitivityLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadRightXSensitivitySlider, CallFunc_GetGamepadRightXSensitivity_ReturnValue) == 0x000010, "Member 'BP_ControlsSettings_C_UpdateGamepadRightXSensitivitySlider::CallFunc_GetGamepadRightXSensitivity_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateGamepadRightYSensitivitySlider
// 0x0018 (0x0018 - 0x0000)
struct BP_ControlsSettings_C_UpdateGamepadRightYSensitivitySlider final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetGamepadSensitivityLimits_ReturnValue;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGamepadRightYSensitivity_ReturnValue;  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateGamepadRightYSensitivitySlider) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateGamepadRightYSensitivitySlider");
static_assert(sizeof(BP_ControlsSettings_C_UpdateGamepadRightYSensitivitySlider) == 0x000018, "Wrong size on BP_ControlsSettings_C_UpdateGamepadRightYSensitivitySlider");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadRightYSensitivitySlider, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateGamepadRightYSensitivitySlider::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadRightYSensitivitySlider, CallFunc_GetGamepadSensitivityLimits_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateGamepadRightYSensitivitySlider::CallFunc_GetGamepadSensitivityLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadRightYSensitivitySlider, CallFunc_GetGamepadRightYSensitivity_ReturnValue) == 0x000010, "Member 'BP_ControlsSettings_C_UpdateGamepadRightYSensitivitySlider::CallFunc_GetGamepadRightYSensitivity_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyMouseXSensitivity
// 0x0018 (0x0018 - 0x0000)
struct BP_ControlsSettings_C_ApplyMouseXSensitivity final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetMouseSensitivityLimits_ReturnValue;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSliderValue_Value;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyMouseXSensitivity) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyMouseXSensitivity");
static_assert(sizeof(BP_ControlsSettings_C_ApplyMouseXSensitivity) == 0x000018, "Wrong size on BP_ControlsSettings_C_ApplyMouseXSensitivity");
static_assert(offsetof(BP_ControlsSettings_C_ApplyMouseXSensitivity, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyMouseXSensitivity::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyMouseXSensitivity, CallFunc_GetMouseSensitivityLimits_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyMouseXSensitivity::CallFunc_GetMouseSensitivityLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyMouseXSensitivity, CallFunc_GetSliderValue_Value) == 0x000010, "Member 'BP_ControlsSettings_C_ApplyMouseXSensitivity::CallFunc_GetSliderValue_Value' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyMouseYSensitivity
// 0x0018 (0x0018 - 0x0000)
struct BP_ControlsSettings_C_ApplyMouseYSensitivity final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetMouseSensitivityLimits_ReturnValue;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSliderValue_Value;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyMouseYSensitivity) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyMouseYSensitivity");
static_assert(sizeof(BP_ControlsSettings_C_ApplyMouseYSensitivity) == 0x000018, "Wrong size on BP_ControlsSettings_C_ApplyMouseYSensitivity");
static_assert(offsetof(BP_ControlsSettings_C_ApplyMouseYSensitivity, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyMouseYSensitivity::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyMouseYSensitivity, CallFunc_GetMouseSensitivityLimits_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyMouseYSensitivity::CallFunc_GetMouseSensitivityLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyMouseYSensitivity, CallFunc_GetSliderValue_Value) == 0x000010, "Member 'BP_ControlsSettings_C_ApplyMouseYSensitivity::CallFunc_GetSliderValue_Value' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyGamepadLeftXSensitivity
// 0x0018 (0x0018 - 0x0000)
struct BP_ControlsSettings_C_ApplyGamepadLeftXSensitivity final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetGamepadSensitivityLimits_ReturnValue;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSliderValue_Value;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyGamepadLeftXSensitivity) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyGamepadLeftXSensitivity");
static_assert(sizeof(BP_ControlsSettings_C_ApplyGamepadLeftXSensitivity) == 0x000018, "Wrong size on BP_ControlsSettings_C_ApplyGamepadLeftXSensitivity");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadLeftXSensitivity, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyGamepadLeftXSensitivity::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadLeftXSensitivity, CallFunc_GetGamepadSensitivityLimits_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyGamepadLeftXSensitivity::CallFunc_GetGamepadSensitivityLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadLeftXSensitivity, CallFunc_GetSliderValue_Value) == 0x000010, "Member 'BP_ControlsSettings_C_ApplyGamepadLeftXSensitivity::CallFunc_GetSliderValue_Value' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyGamepadLeftYSensitivity
// 0x0018 (0x0018 - 0x0000)
struct BP_ControlsSettings_C_ApplyGamepadLeftYSensitivity final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetGamepadSensitivityLimits_ReturnValue;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSliderValue_Value;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyGamepadLeftYSensitivity) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyGamepadLeftYSensitivity");
static_assert(sizeof(BP_ControlsSettings_C_ApplyGamepadLeftYSensitivity) == 0x000018, "Wrong size on BP_ControlsSettings_C_ApplyGamepadLeftYSensitivity");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadLeftYSensitivity, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyGamepadLeftYSensitivity::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadLeftYSensitivity, CallFunc_GetGamepadSensitivityLimits_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyGamepadLeftYSensitivity::CallFunc_GetGamepadSensitivityLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadLeftYSensitivity, CallFunc_GetSliderValue_Value) == 0x000010, "Member 'BP_ControlsSettings_C_ApplyGamepadLeftYSensitivity::CallFunc_GetSliderValue_Value' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyGamepadRightXSensitivity
// 0x0018 (0x0018 - 0x0000)
struct BP_ControlsSettings_C_ApplyGamepadRightXSensitivity final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetGamepadSensitivityLimits_ReturnValue;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSliderValue_Value;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyGamepadRightXSensitivity) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyGamepadRightXSensitivity");
static_assert(sizeof(BP_ControlsSettings_C_ApplyGamepadRightXSensitivity) == 0x000018, "Wrong size on BP_ControlsSettings_C_ApplyGamepadRightXSensitivity");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadRightXSensitivity, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyGamepadRightXSensitivity::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadRightXSensitivity, CallFunc_GetGamepadSensitivityLimits_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyGamepadRightXSensitivity::CallFunc_GetGamepadSensitivityLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadRightXSensitivity, CallFunc_GetSliderValue_Value) == 0x000010, "Member 'BP_ControlsSettings_C_ApplyGamepadRightXSensitivity::CallFunc_GetSliderValue_Value' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyGamepadRightYSensitivity
// 0x0018 (0x0018 - 0x0000)
struct BP_ControlsSettings_C_ApplyGamepadRightYSensitivity final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetGamepadSensitivityLimits_ReturnValue;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSliderValue_Value;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyGamepadRightYSensitivity) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyGamepadRightYSensitivity");
static_assert(sizeof(BP_ControlsSettings_C_ApplyGamepadRightYSensitivity) == 0x000018, "Wrong size on BP_ControlsSettings_C_ApplyGamepadRightYSensitivity");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadRightYSensitivity, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyGamepadRightYSensitivity::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadRightYSensitivity, CallFunc_GetGamepadSensitivityLimits_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyGamepadRightYSensitivity::CallFunc_GetGamepadSensitivityLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadRightYSensitivity, CallFunc_GetSliderValue_Value) == 0x000010, "Member 'BP_ControlsSettings_C_ApplyGamepadRightYSensitivity::CallFunc_GetSliderValue_Value' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateGamepadLeftXDeadzoneSlider
// 0x0018 (0x0018 - 0x0000)
struct BP_ControlsSettings_C_UpdateGamepadLeftXDeadzoneSlider final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGamepadLeftXDeadzone_ReturnValue;      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetGamepadDeadzoneLimits_ReturnValue;     // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateGamepadLeftXDeadzoneSlider) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateGamepadLeftXDeadzoneSlider");
static_assert(sizeof(BP_ControlsSettings_C_UpdateGamepadLeftXDeadzoneSlider) == 0x000018, "Wrong size on BP_ControlsSettings_C_UpdateGamepadLeftXDeadzoneSlider");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadLeftXDeadzoneSlider, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateGamepadLeftXDeadzoneSlider::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadLeftXDeadzoneSlider, CallFunc_GetGamepadLeftXDeadzone_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateGamepadLeftXDeadzoneSlider::CallFunc_GetGamepadLeftXDeadzone_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadLeftXDeadzoneSlider, CallFunc_GetGamepadDeadzoneLimits_ReturnValue) == 0x00000C, "Member 'BP_ControlsSettings_C_UpdateGamepadLeftXDeadzoneSlider::CallFunc_GetGamepadDeadzoneLimits_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateGamepadLeftYDeadzoneSlider
// 0x0018 (0x0018 - 0x0000)
struct BP_ControlsSettings_C_UpdateGamepadLeftYDeadzoneSlider final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetGamepadDeadzoneLimits_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGamepadLeftYDeadzone_ReturnValue;      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateGamepadLeftYDeadzoneSlider) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateGamepadLeftYDeadzoneSlider");
static_assert(sizeof(BP_ControlsSettings_C_UpdateGamepadLeftYDeadzoneSlider) == 0x000018, "Wrong size on BP_ControlsSettings_C_UpdateGamepadLeftYDeadzoneSlider");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadLeftYDeadzoneSlider, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateGamepadLeftYDeadzoneSlider::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadLeftYDeadzoneSlider, CallFunc_GetGamepadDeadzoneLimits_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateGamepadLeftYDeadzoneSlider::CallFunc_GetGamepadDeadzoneLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadLeftYDeadzoneSlider, CallFunc_GetGamepadLeftYDeadzone_ReturnValue) == 0x000010, "Member 'BP_ControlsSettings_C_UpdateGamepadLeftYDeadzoneSlider::CallFunc_GetGamepadLeftYDeadzone_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateGamepadRightXDeadzoneSlider
// 0x0018 (0x0018 - 0x0000)
struct BP_ControlsSettings_C_UpdateGamepadRightXDeadzoneSlider final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetGamepadDeadzoneLimits_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGamepadRightXDeadzone_ReturnValue;     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateGamepadRightXDeadzoneSlider) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateGamepadRightXDeadzoneSlider");
static_assert(sizeof(BP_ControlsSettings_C_UpdateGamepadRightXDeadzoneSlider) == 0x000018, "Wrong size on BP_ControlsSettings_C_UpdateGamepadRightXDeadzoneSlider");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadRightXDeadzoneSlider, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateGamepadRightXDeadzoneSlider::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadRightXDeadzoneSlider, CallFunc_GetGamepadDeadzoneLimits_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateGamepadRightXDeadzoneSlider::CallFunc_GetGamepadDeadzoneLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadRightXDeadzoneSlider, CallFunc_GetGamepadRightXDeadzone_ReturnValue) == 0x000010, "Member 'BP_ControlsSettings_C_UpdateGamepadRightXDeadzoneSlider::CallFunc_GetGamepadRightXDeadzone_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateGamepadRightYDeadzoneSlider
// 0x0018 (0x0018 - 0x0000)
struct BP_ControlsSettings_C_UpdateGamepadRightYDeadzoneSlider final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetGamepadDeadzoneLimits_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGamepadRightYDeadzone_ReturnValue;     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateGamepadRightYDeadzoneSlider) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateGamepadRightYDeadzoneSlider");
static_assert(sizeof(BP_ControlsSettings_C_UpdateGamepadRightYDeadzoneSlider) == 0x000018, "Wrong size on BP_ControlsSettings_C_UpdateGamepadRightYDeadzoneSlider");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadRightYDeadzoneSlider, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateGamepadRightYDeadzoneSlider::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadRightYDeadzoneSlider, CallFunc_GetGamepadDeadzoneLimits_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateGamepadRightYDeadzoneSlider::CallFunc_GetGamepadDeadzoneLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadRightYDeadzoneSlider, CallFunc_GetGamepadRightYDeadzone_ReturnValue) == 0x000010, "Member 'BP_ControlsSettings_C_UpdateGamepadRightYDeadzoneSlider::CallFunc_GetGamepadRightYDeadzone_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateInvertGamepadRightXCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_ControlsSettings_C_UpdateInvertGamepadRightXCheckbox final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetGamepadRightXInverted_ReturnValue;     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateInvertGamepadRightXCheckbox) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateInvertGamepadRightXCheckbox");
static_assert(sizeof(BP_ControlsSettings_C_UpdateInvertGamepadRightXCheckbox) == 0x000010, "Wrong size on BP_ControlsSettings_C_UpdateInvertGamepadRightXCheckbox");
static_assert(offsetof(BP_ControlsSettings_C_UpdateInvertGamepadRightXCheckbox, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateInvertGamepadRightXCheckbox::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateInvertGamepadRightXCheckbox, CallFunc_GetGamepadRightXInverted_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateInvertGamepadRightXCheckbox::CallFunc_GetGamepadRightXInverted_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateInvertGamepadRightYCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_ControlsSettings_C_UpdateInvertGamepadRightYCheckbox final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetGamepadRightYInverted_ReturnValue;     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateInvertGamepadRightYCheckbox) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateInvertGamepadRightYCheckbox");
static_assert(sizeof(BP_ControlsSettings_C_UpdateInvertGamepadRightYCheckbox) == 0x000010, "Wrong size on BP_ControlsSettings_C_UpdateInvertGamepadRightYCheckbox");
static_assert(offsetof(BP_ControlsSettings_C_UpdateInvertGamepadRightYCheckbox, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateInvertGamepadRightYCheckbox::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateInvertGamepadRightYCheckbox, CallFunc_GetGamepadRightYInverted_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateInvertGamepadRightYCheckbox::CallFunc_GetGamepadRightYInverted_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyInvertGamepadRightX
// 0x0010 (0x0010 - 0x0000)
struct BP_ControlsSettings_C_ApplyInvertGamepadRightX final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyInvertGamepadRightX) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyInvertGamepadRightX");
static_assert(sizeof(BP_ControlsSettings_C_ApplyInvertGamepadRightX) == 0x000010, "Wrong size on BP_ControlsSettings_C_ApplyInvertGamepadRightX");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInvertGamepadRightX, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyInvertGamepadRightX::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInvertGamepadRightX, CallFunc_IsChecked_Value) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyInvertGamepadRightX::CallFunc_IsChecked_Value' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyInvertGamepadRightY
// 0x0010 (0x0010 - 0x0000)
struct BP_ControlsSettings_C_ApplyInvertGamepadRightY final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyInvertGamepadRightY) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyInvertGamepadRightY");
static_assert(sizeof(BP_ControlsSettings_C_ApplyInvertGamepadRightY) == 0x000010, "Wrong size on BP_ControlsSettings_C_ApplyInvertGamepadRightY");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInvertGamepadRightY, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyInvertGamepadRightY::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInvertGamepadRightY, CallFunc_IsChecked_Value) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyInvertGamepadRightY::CallFunc_IsChecked_Value' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyGamepadLeftXDeadzone
// 0x0018 (0x0018 - 0x0000)
struct BP_ControlsSettings_C_ApplyGamepadLeftXDeadzone final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetGamepadDeadzoneLimits_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSliderValue_Value;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyGamepadLeftXDeadzone) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyGamepadLeftXDeadzone");
static_assert(sizeof(BP_ControlsSettings_C_ApplyGamepadLeftXDeadzone) == 0x000018, "Wrong size on BP_ControlsSettings_C_ApplyGamepadLeftXDeadzone");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadLeftXDeadzone, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyGamepadLeftXDeadzone::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadLeftXDeadzone, CallFunc_GetGamepadDeadzoneLimits_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyGamepadLeftXDeadzone::CallFunc_GetGamepadDeadzoneLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadLeftXDeadzone, CallFunc_GetSliderValue_Value) == 0x000010, "Member 'BP_ControlsSettings_C_ApplyGamepadLeftXDeadzone::CallFunc_GetSliderValue_Value' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyGamepadLeftYDeadzone
// 0x0018 (0x0018 - 0x0000)
struct BP_ControlsSettings_C_ApplyGamepadLeftYDeadzone final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetGamepadDeadzoneLimits_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSliderValue_Value;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyGamepadLeftYDeadzone) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyGamepadLeftYDeadzone");
static_assert(sizeof(BP_ControlsSettings_C_ApplyGamepadLeftYDeadzone) == 0x000018, "Wrong size on BP_ControlsSettings_C_ApplyGamepadLeftYDeadzone");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadLeftYDeadzone, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyGamepadLeftYDeadzone::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadLeftYDeadzone, CallFunc_GetGamepadDeadzoneLimits_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyGamepadLeftYDeadzone::CallFunc_GetGamepadDeadzoneLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadLeftYDeadzone, CallFunc_GetSliderValue_Value) == 0x000010, "Member 'BP_ControlsSettings_C_ApplyGamepadLeftYDeadzone::CallFunc_GetSliderValue_Value' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyGamepadRightXDeadzone
// 0x0018 (0x0018 - 0x0000)
struct BP_ControlsSettings_C_ApplyGamepadRightXDeadzone final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetGamepadDeadzoneLimits_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSliderValue_Value;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyGamepadRightXDeadzone) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyGamepadRightXDeadzone");
static_assert(sizeof(BP_ControlsSettings_C_ApplyGamepadRightXDeadzone) == 0x000018, "Wrong size on BP_ControlsSettings_C_ApplyGamepadRightXDeadzone");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadRightXDeadzone, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyGamepadRightXDeadzone::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadRightXDeadzone, CallFunc_GetGamepadDeadzoneLimits_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyGamepadRightXDeadzone::CallFunc_GetGamepadDeadzoneLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadRightXDeadzone, CallFunc_GetSliderValue_Value) == 0x000010, "Member 'BP_ControlsSettings_C_ApplyGamepadRightXDeadzone::CallFunc_GetSliderValue_Value' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyGamepadRightYDeadzone
// 0x0018 (0x0018 - 0x0000)
struct BP_ControlsSettings_C_ApplyGamepadRightYDeadzone final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetGamepadDeadzoneLimits_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSliderValue_Value;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyGamepadRightYDeadzone) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyGamepadRightYDeadzone");
static_assert(sizeof(BP_ControlsSettings_C_ApplyGamepadRightYDeadzone) == 0x000018, "Wrong size on BP_ControlsSettings_C_ApplyGamepadRightYDeadzone");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadRightYDeadzone, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyGamepadRightYDeadzone::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadRightYDeadzone, CallFunc_GetGamepadDeadzoneLimits_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyGamepadRightYDeadzone::CallFunc_GetGamepadDeadzoneLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadRightYDeadzone, CallFunc_GetSliderValue_Value) == 0x000010, "Member 'BP_ControlsSettings_C_ApplyGamepadRightYDeadzone::CallFunc_GetSliderValue_Value' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateSlider
// 0x0040 (0x0040 - 0x0000)
struct BP_ControlsSettings_C_UpdateSlider final
{
public:
	class UBP_SliderEntry_C*                      Slider;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Value;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Limits;                                            // 0x000C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_MordhauSlider                       K2Node_MakeStruct_S_MordhauSlider;                 // 0x0028(0x0014)(IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateSlider) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateSlider");
static_assert(sizeof(BP_ControlsSettings_C_UpdateSlider) == 0x000040, "Wrong size on BP_ControlsSettings_C_UpdateSlider");
static_assert(offsetof(BP_ControlsSettings_C_UpdateSlider, Slider) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateSlider::Slider' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateSlider, Value) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateSlider::Value' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateSlider, Limits) == 0x00000C, "Member 'BP_ControlsSettings_C_UpdateSlider::Limits' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateSlider, CallFunc_BreakVector2D_X) == 0x000014, "Member 'BP_ControlsSettings_C_UpdateSlider::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateSlider, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'BP_ControlsSettings_C_UpdateSlider::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateSlider, CallFunc_MapRangeClamped_ReturnValue) == 0x00001C, "Member 'BP_ControlsSettings_C_UpdateSlider::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateSlider, CallFunc_MakeVector2D_ReturnValue) == 0x000020, "Member 'BP_ControlsSettings_C_UpdateSlider::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateSlider, K2Node_MakeStruct_S_MordhauSlider) == 0x000028, "Member 'BP_ControlsSettings_C_UpdateSlider::K2Node_MakeStruct_S_MordhauSlider' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateToggleSprintCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_ControlsSettings_C_UpdateToggleSprintCheckbox final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetToggleSprint_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateToggleSprintCheckbox) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateToggleSprintCheckbox");
static_assert(sizeof(BP_ControlsSettings_C_UpdateToggleSprintCheckbox) == 0x000010, "Wrong size on BP_ControlsSettings_C_UpdateToggleSprintCheckbox");
static_assert(offsetof(BP_ControlsSettings_C_UpdateToggleSprintCheckbox, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateToggleSprintCheckbox::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateToggleSprintCheckbox, CallFunc_GetToggleSprint_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateToggleSprintCheckbox::CallFunc_GetToggleSprint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateToggleSprintCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_ControlsSettings_C_UpdateToggleSprintCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.GetSliderValue
// 0x0028 (0x0028 - 0x0000)
struct BP_ControlsSettings_C_GetSliderValue final
{
public:
	class UBP_SliderEntry_C*                      Slider;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Limits;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_Value;                           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_GetSliderValue) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_GetSliderValue");
static_assert(sizeof(BP_ControlsSettings_C_GetSliderValue) == 0x000028, "Wrong size on BP_ControlsSettings_C_GetSliderValue");
static_assert(offsetof(BP_ControlsSettings_C_GetSliderValue, Slider) == 0x000000, "Member 'BP_ControlsSettings_C_GetSliderValue::Slider' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_GetSliderValue, Limits) == 0x000008, "Member 'BP_ControlsSettings_C_GetSliderValue::Limits' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_GetSliderValue, Value) == 0x000010, "Member 'BP_ControlsSettings_C_GetSliderValue::Value' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_GetSliderValue, CallFunc_GetValue_Value) == 0x000014, "Member 'BP_ControlsSettings_C_GetSliderValue::CallFunc_GetValue_Value' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_GetSliderValue, CallFunc_BreakVector2D_X) == 0x000018, "Member 'BP_ControlsSettings_C_GetSliderValue::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_GetSliderValue, CallFunc_BreakVector2D_Y) == 0x00001C, "Member 'BP_ControlsSettings_C_GetSliderValue::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_GetSliderValue, CallFunc_MapRangeClamped_ReturnValue) == 0x000020, "Member 'BP_ControlsSettings_C_GetSliderValue::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyToggleSprint
// 0x0020 (0x0020 - 0x0000)
struct BP_ControlsSettings_C_ApplyToggleSprint final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyToggleSprint) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyToggleSprint");
static_assert(sizeof(BP_ControlsSettings_C_ApplyToggleSprint) == 0x000020, "Wrong size on BP_ControlsSettings_C_ApplyToggleSprint");
static_assert(offsetof(BP_ControlsSettings_C_ApplyToggleSprint, Temp_bool_Variable) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyToggleSprint::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyToggleSprint, Temp_int_Variable) == 0x000004, "Member 'BP_ControlsSettings_C_ApplyToggleSprint::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyToggleSprint, Temp_int_Variable_1) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyToggleSprint::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyToggleSprint, CallFunc_GetMordhauInput_ReturnValue) == 0x000010, "Member 'BP_ControlsSettings_C_ApplyToggleSprint::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyToggleSprint, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_ControlsSettings_C_ApplyToggleSprint::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyToggleSprint, K2Node_Select_Default) == 0x00001C, "Member 'BP_ControlsSettings_C_ApplyToggleSprint::K2Node_Select_Default' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateInverseAttackDirectionCheckbox
// 0x0018 (0x0018 - 0x0000)
struct BP_ControlsSettings_C_UpdateInverseAttackDirectionCheckbox final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetInverseAttackDirectionX_ReturnValue;   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetInverseAttackDirectionY_ReturnValue;   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateInverseAttackDirectionCheckbox) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateInverseAttackDirectionCheckbox");
static_assert(sizeof(BP_ControlsSettings_C_UpdateInverseAttackDirectionCheckbox) == 0x000018, "Wrong size on BP_ControlsSettings_C_UpdateInverseAttackDirectionCheckbox");
static_assert(offsetof(BP_ControlsSettings_C_UpdateInverseAttackDirectionCheckbox, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateInverseAttackDirectionCheckbox::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateInverseAttackDirectionCheckbox, CallFunc_GetInverseAttackDirectionX_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateInverseAttackDirectionCheckbox::CallFunc_GetInverseAttackDirectionX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateInverseAttackDirectionCheckbox, CallFunc_GetInverseAttackDirectionY_ReturnValue) == 0x00000C, "Member 'BP_ControlsSettings_C_UpdateInverseAttackDirectionCheckbox::CallFunc_GetInverseAttackDirectionY_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateInverseAttackDirectionCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x000010, "Member 'BP_ControlsSettings_C_UpdateInverseAttackDirectionCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateInverseAttackDirectionCheckbox, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000011, "Member 'BP_ControlsSettings_C_UpdateInverseAttackDirectionCheckbox::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyInverseAttackDirection
// 0x0030 (0x0030 - 0x0000)
struct BP_ControlsSettings_C_ApplyInverseAttackDirection final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsChecked_Value_1;                        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_1;                           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyInverseAttackDirection) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyInverseAttackDirection");
static_assert(sizeof(BP_ControlsSettings_C_ApplyInverseAttackDirection) == 0x000030, "Wrong size on BP_ControlsSettings_C_ApplyInverseAttackDirection");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInverseAttackDirection, Temp_bool_Variable) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyInverseAttackDirection::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInverseAttackDirection, Temp_int_Variable) == 0x000004, "Member 'BP_ControlsSettings_C_ApplyInverseAttackDirection::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInverseAttackDirection, Temp_int_Variable_1) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyInverseAttackDirection::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInverseAttackDirection, Temp_bool_Variable_1) == 0x00000C, "Member 'BP_ControlsSettings_C_ApplyInverseAttackDirection::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInverseAttackDirection, Temp_int_Variable_2) == 0x000010, "Member 'BP_ControlsSettings_C_ApplyInverseAttackDirection::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInverseAttackDirection, Temp_int_Variable_3) == 0x000014, "Member 'BP_ControlsSettings_C_ApplyInverseAttackDirection::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInverseAttackDirection, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_ControlsSettings_C_ApplyInverseAttackDirection::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInverseAttackDirection, CallFunc_IsChecked_Value_1) == 0x000019, "Member 'BP_ControlsSettings_C_ApplyInverseAttackDirection::CallFunc_IsChecked_Value_1' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInverseAttackDirection, K2Node_Select_Default) == 0x00001C, "Member 'BP_ControlsSettings_C_ApplyInverseAttackDirection::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInverseAttackDirection, K2Node_Select_Default_1) == 0x000020, "Member 'BP_ControlsSettings_C_ApplyInverseAttackDirection::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyInverseAttackDirection, CallFunc_GetMordhauInput_ReturnValue) == 0x000028, "Member 'BP_ControlsSettings_C_ApplyInverseAttackDirection::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyAngleAttackAfterPress
// 0x0020 (0x0020 - 0x0000)
struct BP_ControlsSettings_C_ApplyAngleAttackAfterPress final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyAngleAttackAfterPress) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyAngleAttackAfterPress");
static_assert(sizeof(BP_ControlsSettings_C_ApplyAngleAttackAfterPress) == 0x000020, "Wrong size on BP_ControlsSettings_C_ApplyAngleAttackAfterPress");
static_assert(offsetof(BP_ControlsSettings_C_ApplyAngleAttackAfterPress, Temp_bool_Variable) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyAngleAttackAfterPress::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyAngleAttackAfterPress, Temp_int_Variable) == 0x000004, "Member 'BP_ControlsSettings_C_ApplyAngleAttackAfterPress::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyAngleAttackAfterPress, Temp_int_Variable_1) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyAngleAttackAfterPress::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyAngleAttackAfterPress, CallFunc_GetMordhauInput_ReturnValue) == 0x000010, "Member 'BP_ControlsSettings_C_ApplyAngleAttackAfterPress::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyAngleAttackAfterPress, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_ControlsSettings_C_ApplyAngleAttackAfterPress::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyAngleAttackAfterPress, K2Node_Select_Default) == 0x00001C, "Member 'BP_ControlsSettings_C_ApplyAngleAttackAfterPress::K2Node_Select_Default' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateAngleAttackAfterPressCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_ControlsSettings_C_UpdateAngleAttackAfterPressCheckbox final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAngleAttackAfterPress_ReturnValue;     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateAngleAttackAfterPressCheckbox) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateAngleAttackAfterPressCheckbox");
static_assert(sizeof(BP_ControlsSettings_C_UpdateAngleAttackAfterPressCheckbox) == 0x000010, "Wrong size on BP_ControlsSettings_C_UpdateAngleAttackAfterPressCheckbox");
static_assert(offsetof(BP_ControlsSettings_C_UpdateAngleAttackAfterPressCheckbox, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateAngleAttackAfterPressCheckbox::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateAngleAttackAfterPressCheckbox, CallFunc_GetAngleAttackAfterPress_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateAngleAttackAfterPressCheckbox::CallFunc_GetAngleAttackAfterPress_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateAngleAttackAfterPressCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_ControlsSettings_C_UpdateAngleAttackAfterPressCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateAngleAttacksWithMovementCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_ControlsSettings_C_UpdateAngleAttacksWithMovementCheckbox final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAngleAttacksWithMovement_ReturnValue;  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateAngleAttacksWithMovementCheckbox) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateAngleAttacksWithMovementCheckbox");
static_assert(sizeof(BP_ControlsSettings_C_UpdateAngleAttacksWithMovementCheckbox) == 0x000010, "Wrong size on BP_ControlsSettings_C_UpdateAngleAttacksWithMovementCheckbox");
static_assert(offsetof(BP_ControlsSettings_C_UpdateAngleAttacksWithMovementCheckbox, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateAngleAttacksWithMovementCheckbox::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateAngleAttacksWithMovementCheckbox, CallFunc_GetAngleAttacksWithMovement_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateAngleAttacksWithMovementCheckbox::CallFunc_GetAngleAttacksWithMovement_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateAngleAttacksWithMovementCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_ControlsSettings_C_UpdateAngleAttacksWithMovementCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyAngleAttacksWithMovement
// 0x0020 (0x0020 - 0x0000)
struct BP_ControlsSettings_C_ApplyAngleAttacksWithMovement final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyAngleAttacksWithMovement) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyAngleAttacksWithMovement");
static_assert(sizeof(BP_ControlsSettings_C_ApplyAngleAttacksWithMovement) == 0x000020, "Wrong size on BP_ControlsSettings_C_ApplyAngleAttacksWithMovement");
static_assert(offsetof(BP_ControlsSettings_C_ApplyAngleAttacksWithMovement, Temp_bool_Variable) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyAngleAttacksWithMovement::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyAngleAttacksWithMovement, Temp_int_Variable) == 0x000004, "Member 'BP_ControlsSettings_C_ApplyAngleAttacksWithMovement::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyAngleAttacksWithMovement, Temp_int_Variable_1) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyAngleAttacksWithMovement::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyAngleAttacksWithMovement, CallFunc_GetMordhauInput_ReturnValue) == 0x000010, "Member 'BP_ControlsSettings_C_ApplyAngleAttacksWithMovement::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyAngleAttacksWithMovement, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_ControlsSettings_C_ApplyAngleAttacksWithMovement::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyAngleAttacksWithMovement, K2Node_Select_Default) == 0x00001C, "Member 'BP_ControlsSettings_C_ApplyAngleAttacksWithMovement::K2Node_Select_Default' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateControlSchemeDropdown
// 0x0028 (0x0028 - 0x0000)
struct BP_ControlsSettings_C_UpdateControlSchemeDropdown final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetControlScheme_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetOptionAtIndex_ReturnValue;             // 0x0010(0x0018)()
};
static_assert(alignof(BP_ControlsSettings_C_UpdateControlSchemeDropdown) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateControlSchemeDropdown");
static_assert(sizeof(BP_ControlsSettings_C_UpdateControlSchemeDropdown) == 0x000028, "Wrong size on BP_ControlsSettings_C_UpdateControlSchemeDropdown");
static_assert(offsetof(BP_ControlsSettings_C_UpdateControlSchemeDropdown, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateControlSchemeDropdown::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateControlSchemeDropdown, CallFunc_GetControlScheme_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateControlSchemeDropdown::CallFunc_GetControlScheme_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateControlSchemeDropdown, CallFunc_GetOptionAtIndex_ReturnValue) == 0x000010, "Member 'BP_ControlsSettings_C_UpdateControlSchemeDropdown::CallFunc_GetOptionAtIndex_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateGamepadRangedSensititySlider
// 0x0018 (0x0018 - 0x0000)
struct BP_ControlsSettings_C_UpdateGamepadRangedSensititySlider final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetRangedSensitivityLimits_ReturnValue;   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRangedSensitivity_ReturnValue;         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateGamepadRangedSensititySlider) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateGamepadRangedSensititySlider");
static_assert(sizeof(BP_ControlsSettings_C_UpdateGamepadRangedSensititySlider) == 0x000018, "Wrong size on BP_ControlsSettings_C_UpdateGamepadRangedSensititySlider");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadRangedSensititySlider, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateGamepadRangedSensititySlider::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadRangedSensititySlider, CallFunc_GetRangedSensitivityLimits_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateGamepadRangedSensititySlider::CallFunc_GetRangedSensitivityLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateGamepadRangedSensititySlider, CallFunc_GetRangedSensitivity_ReturnValue) == 0x000010, "Member 'BP_ControlsSettings_C_UpdateGamepadRangedSensititySlider::CallFunc_GetRangedSensitivity_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyGamepadRangedSensitivity
// 0x0018 (0x0018 - 0x0000)
struct BP_ControlsSettings_C_ApplyGamepadRangedSensitivity final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetRangedSensitivityLimits_ReturnValue;   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSliderValue_Value;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyGamepadRangedSensitivity) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyGamepadRangedSensitivity");
static_assert(sizeof(BP_ControlsSettings_C_ApplyGamepadRangedSensitivity) == 0x000018, "Wrong size on BP_ControlsSettings_C_ApplyGamepadRangedSensitivity");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadRangedSensitivity, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyGamepadRangedSensitivity::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadRangedSensitivity, CallFunc_GetRangedSensitivityLimits_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyGamepadRangedSensitivity::CallFunc_GetRangedSensitivityLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyGamepadRangedSensitivity, CallFunc_GetSliderValue_Value) == 0x000010, "Member 'BP_ControlsSettings_C_ApplyGamepadRangedSensitivity::CallFunc_GetSliderValue_Value' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.CollapseVisibilityIfConsole
// 0x0006 (0x0006 - 0x0000)
struct BP_ControlsSettings_C_CollapseVisibilityIfConsole final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsConsolePlatform_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_CollapseVisibilityIfConsole) == 0x000001, "Wrong alignment on BP_ControlsSettings_C_CollapseVisibilityIfConsole");
static_assert(sizeof(BP_ControlsSettings_C_CollapseVisibilityIfConsole) == 0x000006, "Wrong size on BP_ControlsSettings_C_CollapseVisibilityIfConsole");
static_assert(offsetof(BP_ControlsSettings_C_CollapseVisibilityIfConsole, ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_CollapseVisibilityIfConsole::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_CollapseVisibilityIfConsole, Temp_bool_Variable) == 0x000001, "Member 'BP_ControlsSettings_C_CollapseVisibilityIfConsole::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_CollapseVisibilityIfConsole, Temp_byte_Variable) == 0x000002, "Member 'BP_ControlsSettings_C_CollapseVisibilityIfConsole::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_CollapseVisibilityIfConsole, Temp_byte_Variable_1) == 0x000003, "Member 'BP_ControlsSettings_C_CollapseVisibilityIfConsole::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_CollapseVisibilityIfConsole, CallFunc_IsConsolePlatform_ReturnValue) == 0x000004, "Member 'BP_ControlsSettings_C_CollapseVisibilityIfConsole::CallFunc_IsConsolePlatform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_CollapseVisibilityIfConsole, K2Node_Select_Default) == 0x000005, "Member 'BP_ControlsSettings_C_CollapseVisibilityIfConsole::K2Node_Select_Default' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.SaveSettings
// 0x0020 (0x0020 - 0x0000)
struct BP_ControlsSettings_C_SaveSettings final
{
public:
	E_MainMenuAction                              Action;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_SaveSettings) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_SaveSettings");
static_assert(sizeof(BP_ControlsSettings_C_SaveSettings) == 0x000020, "Wrong size on BP_ControlsSettings_C_SaveSettings");
static_assert(offsetof(BP_ControlsSettings_C_SaveSettings, Action) == 0x000000, "Member 'BP_ControlsSettings_C_SaveSettings::Action' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_SaveSettings, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_ControlsSettings_C_SaveSettings::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_SaveSettings, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_SaveSettings::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_SaveSettings, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'BP_ControlsSettings_C_SaveSettings::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_SaveSettings, CallFunc_GetMordhauInput_ReturnValue) == 0x000018, "Member 'BP_ControlsSettings_C_SaveSettings::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.UpdateToggleCrouchCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_ControlsSettings_C_UpdateToggleCrouchCheckbox final
{
public:
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetToggleCrouch_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ControlsSettings_C_UpdateToggleCrouchCheckbox) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_UpdateToggleCrouchCheckbox");
static_assert(sizeof(BP_ControlsSettings_C_UpdateToggleCrouchCheckbox) == 0x000010, "Wrong size on BP_ControlsSettings_C_UpdateToggleCrouchCheckbox");
static_assert(offsetof(BP_ControlsSettings_C_UpdateToggleCrouchCheckbox, CallFunc_GetMordhauInput_ReturnValue) == 0x000000, "Member 'BP_ControlsSettings_C_UpdateToggleCrouchCheckbox::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateToggleCrouchCheckbox, CallFunc_GetToggleCrouch_ReturnValue) == 0x000008, "Member 'BP_ControlsSettings_C_UpdateToggleCrouchCheckbox::CallFunc_GetToggleCrouch_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_UpdateToggleCrouchCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_ControlsSettings_C_UpdateToggleCrouchCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_ControlsSettings.BP_ControlsSettings_C.ApplyToggleCrouch
// 0x0020 (0x0020 - 0x0000)
struct BP_ControlsSettings_C_ApplyToggleCrouch final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauInput*                          CallFunc_GetMordhauInput_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ControlsSettings_C_ApplyToggleCrouch) == 0x000008, "Wrong alignment on BP_ControlsSettings_C_ApplyToggleCrouch");
static_assert(sizeof(BP_ControlsSettings_C_ApplyToggleCrouch) == 0x000020, "Wrong size on BP_ControlsSettings_C_ApplyToggleCrouch");
static_assert(offsetof(BP_ControlsSettings_C_ApplyToggleCrouch, Temp_bool_Variable) == 0x000000, "Member 'BP_ControlsSettings_C_ApplyToggleCrouch::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyToggleCrouch, Temp_int_Variable) == 0x000004, "Member 'BP_ControlsSettings_C_ApplyToggleCrouch::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyToggleCrouch, Temp_int_Variable_1) == 0x000008, "Member 'BP_ControlsSettings_C_ApplyToggleCrouch::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyToggleCrouch, CallFunc_GetMordhauInput_ReturnValue) == 0x000010, "Member 'BP_ControlsSettings_C_ApplyToggleCrouch::CallFunc_GetMordhauInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyToggleCrouch, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_ControlsSettings_C_ApplyToggleCrouch::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_ControlsSettings_C_ApplyToggleCrouch, K2Node_Select_Default) == 0x00001C, "Member 'BP_ControlsSettings_C_ApplyToggleCrouch::K2Node_Select_Default' has a wrong offset!");

}

