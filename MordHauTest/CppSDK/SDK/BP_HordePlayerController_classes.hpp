#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HordePlayerController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_HordeSkill_structs.hpp"
#include "STRUCT_HordeSkillInfo_structs.hpp"
#include "BP_MordhauPlayerController_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HordePlayerController.BP_HordePlayerController_C
// 0x0150 (0x0F20 - 0x0DD0)
class ABP_HordePlayerController_C : public ABP_MordhauPlayerController_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_HordePlayerController_C;         // 0x0DD0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	uint8                                         PurchaseTrigger;                                   // 0x0DD8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DD9[0x7];                                      // 0x0DD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_HordeSkill, E_HordeSkill>              SkillPrerequisites;                                // 0x0DE0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<E_HordeSkill, struct FSTRUCT_HordeSkillInfo> SkillInfo;                                         // 0x0E30(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AvoidScattershotRecursion;                         // 0x0E80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         BackstabCounter;                                   // 0x0E81(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         CriticalCounter;                                   // 0x0E82(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E83[0x1];                                      // 0x0E83(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NextSpecialTime;                                   // 0x0E84(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	E_HordeSkill                                  SpecialSkill;                                      // 0x0E88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E89[0x3];                                      // 0x0E89(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpecialTriggeredTime;                              // 0x0E8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewHorde;                                          // 0x0E90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E91[0x7];                                      // 0x0E91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         MerchantEquipment;                                 // 0x0E98(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         MerchantPurchasables;                              // 0x0EA8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	uint8                                         OverpowerCounter;                                  // 0x0EB8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         SweepCounter;                                      // 0x0EB9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         RecoilCounter;                                     // 0x0EBA(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         ScavengerCounter;                                  // 0x0EBB(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         LastChanceCounter;                                 // 0x0EBC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         MiracleCounter;                                    // 0x0EBD(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         CriticalShotCounter;                               // 0x0EBE(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         ScattershotCounter;                                // 0x0EBF(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         SellTrigger;                                       // 0x0EC0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC1[0x7];                                      // 0x0EC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UClass*, class UClass*>            MerchantClassLinkMap;                              // 0x0EC8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         AdminSpawnLimit;                                   // 0x0F18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_HordePlayerController(int32 EntryPoint);
	void ReceivePossess(class APawn* PossessedPawn);
	void AdminSpawnSkillPoint();
	void AdminSpawnHordeGold();
	void AttemptPurchaseBuyMenuEntry(int32 Buy_Menu_Entry);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void RequestUpgradeSkill(E_HordeSkill Skill);
	void InpActEvt_Show_Scoreboard_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Show_Scoreboard_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Use_Horde_Ultimate_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_Show_Horde_Skill_Menu_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_Battlecry_K2Node_InputActionEvent_4(const struct FKey& Key);
	void OnRep_PurchaseTrigger();
	void CustomizeEquipment(class AMordhauEquipment* Equipment);
	void UpgradeSkill(E_HordeSkill Skill, bool* Success);
	void GetSkillLevel(E_HordeSkill Skill, uint8* Level);
	void HasPrerequisite(E_HordeSkill Skill, bool* Result);
	void SkillsUpdated();
	void GetSkillLevelFloat(E_HordeSkill Skill, float* SkillLevel);
	void TryFletcherRestock();
	void TryScatterShot(class AMordhauProjectile* SourceProjectile);
	void AssignFireArrowValues(class AActor* Arrow);
	void GetDiscountedPrice(int32 BasePrice, class UClass* Horde_Purchasable, int32* DiscountedPrice);
	void OnRep_BackstabCounter();
	void OnRep_CriticalCounter();
	void OnRep_NextSpecialTime();
	void GetScaledSkillLevelParams(E_HordeSkill Skill, int32 Bias, float* PercentA, float* PercentB, int32* IntegerA, float* TimeA);
	void OnRep_OverpowerCounter();
	void OnRep_SweepCounter();
	void OnRep_RecoilCounter();
	void OnRep_ScavengerCounter();
	void OnRep_LastChanceCounter();
	void OnRep_MiracleCounter();
	void OnRep_CriticalShotCounter();
	void OnAfterPossess(class APawn* APawn);
	void OnRep_ScattershotCounter();
	void OnRep_SellTrigger();
	void GetMerchantDuplicateChance(class UClass* Purchased_Actor, bool* DispenseBonus);
	void ReassignWearablePickupsToProfile(class UClass* Wearable_Pickups, class AMordhauCharacter* Mordhau_Character);
	void ReceiveBeginPlay();
	void InpActEvt_Battlecry_K2Node_InputActionEvent_5(const struct FKey& Key);
	void OnBuilt(class AActor* Structure);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HordePlayerController_C">();
	}
	static class ABP_HordePlayerController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HordePlayerController_C>();
	}
};
static_assert(alignof(ABP_HordePlayerController_C) == 0x000008, "Wrong alignment on ABP_HordePlayerController_C");
static_assert(sizeof(ABP_HordePlayerController_C) == 0x000F20, "Wrong size on ABP_HordePlayerController_C");
static_assert(offsetof(ABP_HordePlayerController_C, UberGraphFrame_BP_HordePlayerController_C) == 0x000DD0, "Member 'ABP_HordePlayerController_C::UberGraphFrame_BP_HordePlayerController_C' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, PurchaseTrigger) == 0x000DD8, "Member 'ABP_HordePlayerController_C::PurchaseTrigger' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, SkillPrerequisites) == 0x000DE0, "Member 'ABP_HordePlayerController_C::SkillPrerequisites' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, SkillInfo) == 0x000E30, "Member 'ABP_HordePlayerController_C::SkillInfo' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, AvoidScattershotRecursion) == 0x000E80, "Member 'ABP_HordePlayerController_C::AvoidScattershotRecursion' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, BackstabCounter) == 0x000E81, "Member 'ABP_HordePlayerController_C::BackstabCounter' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, CriticalCounter) == 0x000E82, "Member 'ABP_HordePlayerController_C::CriticalCounter' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, NextSpecialTime) == 0x000E84, "Member 'ABP_HordePlayerController_C::NextSpecialTime' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, SpecialSkill) == 0x000E88, "Member 'ABP_HordePlayerController_C::SpecialSkill' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, SpecialTriggeredTime) == 0x000E8C, "Member 'ABP_HordePlayerController_C::SpecialTriggeredTime' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, NewHorde) == 0x000E90, "Member 'ABP_HordePlayerController_C::NewHorde' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, MerchantEquipment) == 0x000E98, "Member 'ABP_HordePlayerController_C::MerchantEquipment' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, MerchantPurchasables) == 0x000EA8, "Member 'ABP_HordePlayerController_C::MerchantPurchasables' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, OverpowerCounter) == 0x000EB8, "Member 'ABP_HordePlayerController_C::OverpowerCounter' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, SweepCounter) == 0x000EB9, "Member 'ABP_HordePlayerController_C::SweepCounter' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, RecoilCounter) == 0x000EBA, "Member 'ABP_HordePlayerController_C::RecoilCounter' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, ScavengerCounter) == 0x000EBB, "Member 'ABP_HordePlayerController_C::ScavengerCounter' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, LastChanceCounter) == 0x000EBC, "Member 'ABP_HordePlayerController_C::LastChanceCounter' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, MiracleCounter) == 0x000EBD, "Member 'ABP_HordePlayerController_C::MiracleCounter' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, CriticalShotCounter) == 0x000EBE, "Member 'ABP_HordePlayerController_C::CriticalShotCounter' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, ScattershotCounter) == 0x000EBF, "Member 'ABP_HordePlayerController_C::ScattershotCounter' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, SellTrigger) == 0x000EC0, "Member 'ABP_HordePlayerController_C::SellTrigger' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, MerchantClassLinkMap) == 0x000EC8, "Member 'ABP_HordePlayerController_C::MerchantClassLinkMap' has a wrong offset!");
static_assert(offsetof(ABP_HordePlayerController_C, AdminSpawnLimit) == 0x000F18, "Member 'ABP_HordePlayerController_C::AdminSpawnLimit' has a wrong offset!");

}

