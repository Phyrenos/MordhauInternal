#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MordhauOnlineSubsystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum MordhauOnlineSubsystem.EUserRelation
// NumValues: 0x0009
enum class EUserRelation : uint8
{
	None                                     = 0,
	Me                                       = 1,
	PendingFriendInvite                      = 2,
	PendingFriendRequest                     = 3,
	Friend                                   = 4,
	FriendNative                             = 5,
	Blocked                                  = 6,
	BlockedNative                            = 7,
	EUserRelation_MAX                        = 8,
};

// Enum MordhauOnlineSubsystem.EPlatform
// NumValues: 0x0006
enum class EPlatform : uint8
{
	None                                     = 0,
	Steam                                    = 1,
	Epic                                     = 2,
	Xbox                                     = 3,
	PSN                                      = 4,
	EPlatform_MAX                            = 5,
};

// Enum MordhauOnlineSubsystem.EEntityType
// NumValues: 0x0006
enum class EEntityType : uint8
{
	None                                     = 0,
	Player                                   = 1,
	CommunityServer                          = 2,
	OfficialServer                           = 3,
	Group                                    = 4,
	EEntityType_MAX                          = 5,
};

// Enum MordhauOnlineSubsystem.EPlayFabTicketStatus
// NumValues: 0x0007
enum class EPlayFabTicketStatus : uint8
{
	Unknown                                  = 0,
	WaitingForPlayers                        = 1,
	WaitingForMatch                          = 2,
	WaitingForServer                         = 3,
	Cancelled                                = 4,
	Matched                                  = 5,
	EPlayFabTicketStatus_MAX                 = 6,
};

// Enum MordhauOnlineSubsystem.EServerRegion
// NumValues: 0x000C
enum class EServerRegion : uint8
{
	East_Asia                                = 0,
	South_Asia                               = 1,
	Europe                                   = 2,
	Oceania                                  = 3,
	Russia                                   = 4,
	South_America                            = 5,
	US_Central                               = 6,
	US_East                                  = 7,
	US_West                                  = 8,
	Worldwide                                = 9,
	Playstation                              = 10,
	EServerRegion_MAX                        = 11,
};

// Enum MordhauOnlineSubsystem.EServerLocation
// NumValues: 0x000C
enum class EServerLocation : uint8
{
	Germany                                  = 0,
	UK                                       = 1,
	Russia                                   = 2,
	US_East                                  = 3,
	US_Central                               = 4,
	US_West                                  = 5,
	Australia                                = 6,
	Brazil                                   = 7,
	Japan                                    = 8,
	Singapore                                = 9,
	Any                                      = 10,
	EServerLocation_MAX                      = 11,
};

// Enum MordhauOnlineSubsystem.EPlayFabMatchStatus
// NumValues: 0x0006
enum class EPlayFabMatchStatus : uint8
{
	Pending                                  = 0,
	WaitingForPlayers                        = 1,
	WaitingForServer                         = 2,
	InProgress                               = 3,
	Cancelled                                = 4,
	EPlayFabMatchStatus_MAX                  = 5,
};

// Enum MordhauOnlineSubsystem.EServerVisibility
// NumValues: 0x0005
enum class EServerVisibility : uint8
{
	Invisible                                = 0,
	Matchmaking                              = 1,
	ServerBrowser                            = 2,
	Both                                     = 3,
	EServerVisibility_MAX                    = 4,
};

// Enum MordhauOnlineSubsystem.EServerState
// NumValues: 0x0003
enum class EServerState : uint8
{
	Open                                     = 0,
	Closed                                   = 1,
	EServerState_MAX                         = 2,
};

// Enum MordhauOnlineSubsystem.EUsernameSearchFilter
// NumValues: 0x0008
enum class EUsernameSearchFilter : uint8
{
	RemoveBlocked                            = 1,
	RemoveFriends                            = 2,
	RemoveSelf                               = 4,
	RemovePending                            = 8,
	None                                     = 16,
	RemoveAllButPending                      = 7,
	RemoveAll                                = 15,
	EUsernameSearchFilter_MAX                = 17,
};

// Enum MordhauOnlineSubsystem.EReportErrorType
// NumValues: 0x0014
enum class EReportErrorType : uint8
{
	ET_CREDENTIALS                           = 0,
	ET_LOGIN_PLATFORM                        = 1,
	ET_LOGIN_PLAYFAB                         = 2,
	ET_SESSION_NATIVE                        = 3,
	ET_SESSION_PLAYFAB                       = 4,
	ET_SESSION_PLAYFAB_MULTIPLAYER           = 5,
	ET_PARTY                                 = 6,
	ET_ENTITLEMENT                           = 7,
	ET_EXTERNALUI                            = 8,
	ET_PLATFORM_SUBSYSTEM                    = 9,
	ET_PLATFORM_STATS                        = 10,
	ET_ACHIEVEMENT                           = 11,
	ET_FRIENDS                               = 12,
	ET_USER                                  = 13,
	ET_NETWORK                               = 14,
	ET_ACTIVITY                              = 15,
	ET_MISC                                  = 16,
	ET_SERVER                                = 17,
	ET_END                                   = 18,
	ET_MAX                                   = 19,
};

// Enum MordhauOnlineSubsystem.EPlayFabRequestPriority
// NumValues: 0x0004
enum class EPlayFabRequestPriority : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	EPlayFabRequestPriority_MAX              = 3,
};

// Enum MordhauOnlineSubsystem.EPlayFabRequestType
// NumValues: 0x0051
enum class EPlayFabRequestType : uint8
{
	None                                     = 0,
	LoginWithSteam                           = 1,
	LoginWithEpic                            = 2,
	LoginWithXbox                            = 3,
	LoginWithPSN                             = 4,
	LoginWithServer                          = 5,
	UpdateTimeDrift                          = 6,
	GetTitleData                             = 7,
	GetTitleInternalData                     = 8,
	GetPlayerData                            = 9,
	GetPlayerInventory                       = 10,
	GetPlayer                                = 11,
	GetPlayerCombinedInfo                    = 12,
	GetPlayerStats                           = 13,
	UpdatePlayerStats                        = 14,
	GetCatalogItems                          = 15,
	GetPlayFabIDsFromSteamIDs                = 16,
	GetPlayFabIDsFromEpicIDs                 = 17,
	GetPlayFabIDsFromXboxLiveIDs             = 18,
	GetPlayFabIDsFromPSNAccountIDs           = 19,
	GetTitlePlayersFromMasterPlayerAccountIds = 20,
	ImportInventory                          = 21,
	UnlockItems                              = 22,
	GrantItems                               = 23,
	GetGameServers                           = 24,
	GetServerInfo                            = 25,
	GetLeaderboard                           = 26,
	GetMatchRewards                          = 27,
	RegisterGameServer                       = 28,
	RefreshGameServer                        = 29,
	UpdateGameServer                         = 30,
	StartMatch                               = 31,
	EndMatch                                 = 32,
	AbortMatch                               = 33,
	ApplyRestriction                         = 34,
	ClearRestriction                         = 35,
	ReportTimeLeft                           = 36,
	ReportMatchEnded                         = 37,
	CreateMatchmakingTicket                  = 38,
	JoinMatchmakingTicket                    = 39,
	GetMatchmakingTicket                     = 40,
	GetMatchmakingMatch                      = 41,
	CancelMatchmakingTicket                  = 42,
	CreateServerBackfillTicket               = 43,
	GetServerBackfillTicket                  = 44,
	CancelServerBackfillTicket               = 45,
	GetServerBackfillTicketForPlayer         = 46,
	CancelServerBackfillTicketForPlayer      = 47,
	GetObjects                               = 48,
	SetObjects                               = 49,
	CreateGroup                              = 50,
	JoinGroup                                = 51,
	LeaveGroup                               = 52,
	GetGroup                                 = 53,
	ListGroupMembership                      = 54,
	ListGroupMembershipOpportunities         = 55,
	ListGroupMembers                         = 56,
	RemoveGroupMembers                       = 57,
	CreateGroupRole                          = 58,
	DeleteGroupRole                          = 59,
	ApplyToGroup                             = 60,
	InviteToGroup                            = 61,
	RemoveGroupInvitation                    = 62,
	ListGroupBlocks                          = 63,
	BlockEntity                              = 64,
	UnblockEntity                            = 65,
	GetEntityProfiles                        = 66,
	UpdateAccountInfo                        = 67,
	UpdateEntitlements                       = 68,
	JoinMatchmakingMatch                     = 69,
	LeaveMatchmakingMatch                    = 70,
	GetFriendsList                           = 71,
	AddFriend                                = 72,
	RemoveFriend                             = 73,
	SearchUsername                           = 74,
	GetPlayerByShortId                       = 75,
	TestFunction                             = 76,
	RefreshEntityToken                       = 77,
	AuthenticatePlayer                       = 78,
	IndexPlayer                              = 79,
	EPlayFabRequestType_MAX                  = 80,
};

// Enum MordhauOnlineSubsystem.ELobbyMemberRemovedReason
// NumValues: 0x0005
enum class ELobbyMemberRemovedReason : uint8
{
	LocalUserLeftLobby                       = 0,
	LocalUserForciblyRemoved                 = 1,
	RemoteUserLeftLobby                      = 2,
	Unknown                                  = 254,
	ELobbyMemberRemovedReason_MAX            = 255,
};

// Enum MordhauOnlineSubsystem.EPlayFabRestriction
// NumValues: 0x0003
enum class EPlayFabRestriction : uint8
{
	Ban                                      = 0,
	Mute                                     = 1,
	EPlayFabRestriction_MAX                  = 2,
};

// Enum MordhauOnlineSubsystem.EIngameEvent
// NumValues: 0x0004
enum class EIngameEvent : uint8
{
	None                                     = 0,
	Christmas                                = 1,
	Halloween                                = 2,
	EIngameEvent_MAX                         = 3,
};

// Enum MordhauOnlineSubsystem.EPlatformSpecific
// NumValues: 0x0008
enum class EPlatformSpecific : uint8
{
	None                                     = 0,
	Steam                                    = 1,
	Epic                                     = 2,
	XboxOne                                  = 3,
	XboxXSX                                  = 4,
	PS4                                      = 5,
	PS5                                      = 6,
	EPlatformSpecific_MAX                    = 7,
};

// Enum MordhauOnlineSubsystem.EPlayerReportType
// NumValues: 0x0007
enum class EPlayerReportType : uint8
{
	None                                     = 0,
	Griefing                                 = 1,
	Cheating                                 = 2,
	OffensiveLanguage                        = 3,
	Harassment                               = 4,
	Last                                     = 5,
	EPlayerReportType_MAX                    = 6,
};

// ScriptStruct MordhauOnlineSubsystem.PlayFabStat
// 0x0020 (0x0020 - 0x0000)
struct FPlayFabStat final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDirty;                                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayFabStat) == 0x000008, "Wrong alignment on FPlayFabStat");
static_assert(sizeof(FPlayFabStat) == 0x000020, "Wrong size on FPlayFabStat");
static_assert(offsetof(FPlayFabStat, Name) == 0x000000, "Member 'FPlayFabStat::Name' has a wrong offset!");
static_assert(offsetof(FPlayFabStat, Value) == 0x000010, "Member 'FPlayFabStat::Value' has a wrong offset!");
static_assert(offsetof(FPlayFabStat, Version) == 0x000014, "Member 'FPlayFabStat::Version' has a wrong offset!");
static_assert(offsetof(FPlayFabStat, bIsDirty) == 0x000018, "Member 'FPlayFabStat::bIsDirty' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.PlayFabEntity
// 0x0020 (0x0020 - 0x0000)
struct FPlayFabEntity
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ID;                                                // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEntityType                                   Type;                                              // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayFabEntity) == 0x000008, "Wrong alignment on FPlayFabEntity");
static_assert(sizeof(FPlayFabEntity) == 0x000020, "Wrong size on FPlayFabEntity");
static_assert(offsetof(FPlayFabEntity, ID) == 0x000008, "Member 'FPlayFabEntity::ID' has a wrong offset!");
static_assert(offsetof(FPlayFabEntity, Type) == 0x000018, "Member 'FPlayFabEntity::Type' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.PlayFabPlayerEntity
// 0x0000 (0x0020 - 0x0020)
struct FPlayFabPlayerEntity final : public FPlayFabEntity
{
};
static_assert(alignof(FPlayFabPlayerEntity) == 0x000008, "Wrong alignment on FPlayFabPlayerEntity");
static_assert(sizeof(FPlayFabPlayerEntity) == 0x000020, "Wrong size on FPlayFabPlayerEntity");

// ScriptStruct MordhauOnlineSubsystem.PlayFabProfile
// 0x0030 (0x0030 - 0x0000)
struct FPlayFabProfile
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlatform                                     Platform;                                          // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformAccountID;                                 // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayFabProfile) == 0x000008, "Wrong alignment on FPlayFabProfile");
static_assert(sizeof(FPlayFabProfile) == 0x000030, "Wrong size on FPlayFabProfile");
static_assert(offsetof(FPlayFabProfile, PlayFabId) == 0x000008, "Member 'FPlayFabProfile::PlayFabId' has a wrong offset!");
static_assert(offsetof(FPlayFabProfile, Platform) == 0x000018, "Member 'FPlayFabProfile::Platform' has a wrong offset!");
static_assert(offsetof(FPlayFabProfile, PlatformAccountID) == 0x000020, "Member 'FPlayFabProfile::PlatformAccountID' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.PlayFabPlayer
// 0x0030 (0x0060 - 0x0030)
struct FPlayFabPlayer final : public FPlayFabProfile
{
public:
	struct FPlayFabPlayerEntity                   Entity;                                            // 0x0030(0x0020)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayFabPlayer) == 0x000008, "Wrong alignment on FPlayFabPlayer");
static_assert(sizeof(FPlayFabPlayer) == 0x000060, "Wrong size on FPlayFabPlayer");
static_assert(offsetof(FPlayFabPlayer, Entity) == 0x000030, "Member 'FPlayFabPlayer::Entity' has a wrong offset!");
static_assert(offsetof(FPlayFabPlayer, Name) == 0x000050, "Member 'FPlayFabPlayer::Name' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.UserSearchResult
// 0x0078 (0x0078 - 0x0000)
struct FUserSearchResult final
{
public:
	struct FPlayFabPlayer                         PlayFabPlayer;                                     // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserRelation                                 Relation;                                          // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OriginalQuery;                                     // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserSearchResult) == 0x000008, "Wrong alignment on FUserSearchResult");
static_assert(sizeof(FUserSearchResult) == 0x000078, "Wrong size on FUserSearchResult");
static_assert(offsetof(FUserSearchResult, PlayFabPlayer) == 0x000000, "Member 'FUserSearchResult::PlayFabPlayer' has a wrong offset!");
static_assert(offsetof(FUserSearchResult, Relation) == 0x000060, "Member 'FUserSearchResult::Relation' has a wrong offset!");
static_assert(offsetof(FUserSearchResult, OriginalQuery) == 0x000068, "Member 'FUserSearchResult::OriginalQuery' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.UserSearchRequestParameters
// 0x0028 (0x0028 - 0x0000)
struct FUserSearchRequestParameters final
{
public:
	class FString                                 Username;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Page;                                              // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserSearchRequestParameters) == 0x000008, "Wrong alignment on FUserSearchRequestParameters");
static_assert(sizeof(FUserSearchRequestParameters) == 0x000028, "Wrong size on FUserSearchRequestParameters");
static_assert(offsetof(FUserSearchRequestParameters, Username) == 0x000000, "Member 'FUserSearchRequestParameters::Username' has a wrong offset!");
static_assert(offsetof(FUserSearchRequestParameters, Platform) == 0x000010, "Member 'FUserSearchRequestParameters::Platform' has a wrong offset!");
static_assert(offsetof(FUserSearchRequestParameters, Limit) == 0x000020, "Member 'FUserSearchRequestParameters::Limit' has a wrong offset!");
static_assert(offsetof(FUserSearchRequestParameters, Page) == 0x000024, "Member 'FUserSearchRequestParameters::Page' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.UsernameSearchResult
// 0x0040 (0x0040 - 0x0000)
struct FUsernameSearchResult final
{
public:
	TArray<struct FUserSearchResult>              UsernameSearchResults;                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FUserSearchRequestParameters           SearchRequestParameters;                           // 0x0010(0x0028)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         StatusCode;                                        // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUsernameSearchResult) == 0x000008, "Wrong alignment on FUsernameSearchResult");
static_assert(sizeof(FUsernameSearchResult) == 0x000040, "Wrong size on FUsernameSearchResult");
static_assert(offsetof(FUsernameSearchResult, UsernameSearchResults) == 0x000000, "Member 'FUsernameSearchResult::UsernameSearchResults' has a wrong offset!");
static_assert(offsetof(FUsernameSearchResult, SearchRequestParameters) == 0x000010, "Member 'FUsernameSearchResult::SearchRequestParameters' has a wrong offset!");
static_assert(offsetof(FUsernameSearchResult, StatusCode) == 0x000038, "Member 'FUsernameSearchResult::StatusCode' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.PlayFabApiError
// 0x0038 (0x0038 - 0x0000)
struct FPlayFabApiError final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HttpStatus;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorName;                                         // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayFabApiError) == 0x000008, "Wrong alignment on FPlayFabApiError");
static_assert(sizeof(FPlayFabApiError) == 0x000038, "Wrong size on FPlayFabApiError");
static_assert(offsetof(FPlayFabApiError, ErrorCode) == 0x000000, "Member 'FPlayFabApiError::ErrorCode' has a wrong offset!");
static_assert(offsetof(FPlayFabApiError, HttpStatus) == 0x000008, "Member 'FPlayFabApiError::HttpStatus' has a wrong offset!");
static_assert(offsetof(FPlayFabApiError, ErrorName) == 0x000018, "Member 'FPlayFabApiError::ErrorName' has a wrong offset!");
static_assert(offsetof(FPlayFabApiError, ErrorMessage) == 0x000028, "Member 'FPlayFabApiError::ErrorMessage' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.ModFile
// 0x0008 (0x0008 - 0x0000)
struct FModFile final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FileSizeInMb;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModFile) == 0x000004, "Wrong alignment on FModFile");
static_assert(sizeof(FModFile) == 0x000008, "Wrong size on FModFile");
static_assert(offsetof(FModFile, ID) == 0x000000, "Member 'FModFile::ID' has a wrong offset!");
static_assert(offsetof(FModFile, FileSizeInMb) == 0x000004, "Member 'FModFile::FileSizeInMb' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.ModInfo
// 0x0050 (0x0050 - 0x0000)
struct FModInfo final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DateUpdated;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Summary;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Thumbnail;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubmittedBy;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModFile                               ModFile;                                           // 0x0048(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModInfo) == 0x000008, "Wrong alignment on FModInfo");
static_assert(sizeof(FModInfo) == 0x000050, "Wrong size on FModInfo");
static_assert(offsetof(FModInfo, ID) == 0x000000, "Member 'FModInfo::ID' has a wrong offset!");
static_assert(offsetof(FModInfo, DateUpdated) == 0x000004, "Member 'FModInfo::DateUpdated' has a wrong offset!");
static_assert(offsetof(FModInfo, Name) == 0x000008, "Member 'FModInfo::Name' has a wrong offset!");
static_assert(offsetof(FModInfo, Summary) == 0x000018, "Member 'FModInfo::Summary' has a wrong offset!");
static_assert(offsetof(FModInfo, Thumbnail) == 0x000028, "Member 'FModInfo::Thumbnail' has a wrong offset!");
static_assert(offsetof(FModInfo, SubmittedBy) == 0x000038, "Member 'FModInfo::SubmittedBy' has a wrong offset!");
static_assert(offsetof(FModInfo, ModFile) == 0x000048, "Member 'FModInfo::ModFile' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.MountedMod
// 0x0060 (0x0060 - 0x0000)
struct FMountedMod final
{
public:
	TArray<class FString>                         PakPaths;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FModInfo                               Mod;                                               // 0x0010(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMountedMod) == 0x000008, "Wrong alignment on FMountedMod");
static_assert(sizeof(FMountedMod) == 0x000060, "Wrong size on FMountedMod");
static_assert(offsetof(FMountedMod, PakPaths) == 0x000000, "Member 'FMountedMod::PakPaths' has a wrong offset!");
static_assert(offsetof(FMountedMod, Mod) == 0x000010, "Member 'FMountedMod::Mod' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.PlayFabRequest
// 0x0020 (0x0020 - 0x0000)
struct FPlayFabRequest
{
public:
	EPlayFabRequestType                           Type;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxRetries;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RetryDelay;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Retries;                                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Timestamp;                                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayFabRequestPriority                       Priority;                                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMultiple;                                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayFabRequest) == 0x000008, "Wrong alignment on FPlayFabRequest");
static_assert(sizeof(FPlayFabRequest) == 0x000020, "Wrong size on FPlayFabRequest");
static_assert(offsetof(FPlayFabRequest, Type) == 0x000000, "Member 'FPlayFabRequest::Type' has a wrong offset!");
static_assert(offsetof(FPlayFabRequest, MaxRetries) == 0x000004, "Member 'FPlayFabRequest::MaxRetries' has a wrong offset!");
static_assert(offsetof(FPlayFabRequest, RetryDelay) == 0x000008, "Member 'FPlayFabRequest::RetryDelay' has a wrong offset!");
static_assert(offsetof(FPlayFabRequest, Retries) == 0x00000C, "Member 'FPlayFabRequest::Retries' has a wrong offset!");
static_assert(offsetof(FPlayFabRequest, Timestamp) == 0x000010, "Member 'FPlayFabRequest::Timestamp' has a wrong offset!");
static_assert(offsetof(FPlayFabRequest, Priority) == 0x000018, "Member 'FPlayFabRequest::Priority' has a wrong offset!");
static_assert(offsetof(FPlayFabRequest, bAllowMultiple) == 0x000019, "Member 'FPlayFabRequest::bAllowMultiple' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.AuthenticatePlayerPlayFabRequest
// 0x0090 (0x00B0 - 0x0020)
struct FAuthenticatePlayerPlayFabRequest final : public FPlayFabRequest
{
public:
	TWeakObjectPtr<class APlayerController>       PlayerController;                                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabPlayer                         PlayFabPlayer;                                     // 0x0028(0x0060)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionTicket;                                     // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerId;                                          // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsConsoleServer;                                   // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAuthenticatePlayerPlayFabRequest) == 0x000008, "Wrong alignment on FAuthenticatePlayerPlayFabRequest");
static_assert(sizeof(FAuthenticatePlayerPlayFabRequest) == 0x0000B0, "Wrong size on FAuthenticatePlayerPlayFabRequest");
static_assert(offsetof(FAuthenticatePlayerPlayFabRequest, PlayerController) == 0x000020, "Member 'FAuthenticatePlayerPlayFabRequest::PlayerController' has a wrong offset!");
static_assert(offsetof(FAuthenticatePlayerPlayFabRequest, PlayFabPlayer) == 0x000028, "Member 'FAuthenticatePlayerPlayFabRequest::PlayFabPlayer' has a wrong offset!");
static_assert(offsetof(FAuthenticatePlayerPlayFabRequest, SessionTicket) == 0x000088, "Member 'FAuthenticatePlayerPlayFabRequest::SessionTicket' has a wrong offset!");
static_assert(offsetof(FAuthenticatePlayerPlayFabRequest, ServerId) == 0x000098, "Member 'FAuthenticatePlayerPlayFabRequest::ServerId' has a wrong offset!");
static_assert(offsetof(FAuthenticatePlayerPlayFabRequest, IsConsoleServer) == 0x0000A8, "Member 'FAuthenticatePlayerPlayFabRequest::IsConsoleServer' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.SearchUsernameRequest
// 0x0020 (0x0040 - 0x0020)
struct FSearchUsernameRequest final : public FPlayFabRequest
{
public:
	class FString                                 Username;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUsernameSearchFilter                         Filter;                                            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlatform                                     PlatformFilter;                                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Limit;                                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Page;                                              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSearchUsernameRequest) == 0x000008, "Wrong alignment on FSearchUsernameRequest");
static_assert(sizeof(FSearchUsernameRequest) == 0x000040, "Wrong size on FSearchUsernameRequest");
static_assert(offsetof(FSearchUsernameRequest, Username) == 0x000020, "Member 'FSearchUsernameRequest::Username' has a wrong offset!");
static_assert(offsetof(FSearchUsernameRequest, Filter) == 0x000030, "Member 'FSearchUsernameRequest::Filter' has a wrong offset!");
static_assert(offsetof(FSearchUsernameRequest, PlatformFilter) == 0x000031, "Member 'FSearchUsernameRequest::PlatformFilter' has a wrong offset!");
static_assert(offsetof(FSearchUsernameRequest, Limit) == 0x000034, "Member 'FSearchUsernameRequest::Limit' has a wrong offset!");
static_assert(offsetof(FSearchUsernameRequest, Page) == 0x000038, "Member 'FSearchUsernameRequest::Page' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetPlayerByShortIdRequestParameters
// 0x0020 (0x0020 - 0x0000)
struct FGetPlayerByShortIdRequestParameters final
{
public:
	TArray<class FString>                         ShortIds;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Platform;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetPlayerByShortIdRequestParameters) == 0x000008, "Wrong alignment on FGetPlayerByShortIdRequestParameters");
static_assert(sizeof(FGetPlayerByShortIdRequestParameters) == 0x000020, "Wrong size on FGetPlayerByShortIdRequestParameters");
static_assert(offsetof(FGetPlayerByShortIdRequestParameters, ShortIds) == 0x000000, "Member 'FGetPlayerByShortIdRequestParameters::ShortIds' has a wrong offset!");
static_assert(offsetof(FGetPlayerByShortIdRequestParameters, Platform) == 0x000010, "Member 'FGetPlayerByShortIdRequestParameters::Platform' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetPlayerByShortIdResult
// 0x0038 (0x0038 - 0x0000)
struct FGetPlayerByShortIdResult final
{
public:
	TArray<struct FUserSearchResult>              SearchResults;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGetPlayerByShortIdRequestParameters   GetPlayerByShortIdRequestParameters;               // 0x0010(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         StatusCode;                                        // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGetPlayerByShortIdResult) == 0x000008, "Wrong alignment on FGetPlayerByShortIdResult");
static_assert(sizeof(FGetPlayerByShortIdResult) == 0x000038, "Wrong size on FGetPlayerByShortIdResult");
static_assert(offsetof(FGetPlayerByShortIdResult, SearchResults) == 0x000000, "Member 'FGetPlayerByShortIdResult::SearchResults' has a wrong offset!");
static_assert(offsetof(FGetPlayerByShortIdResult, GetPlayerByShortIdRequestParameters) == 0x000010, "Member 'FGetPlayerByShortIdResult::GetPlayerByShortIdRequestParameters' has a wrong offset!");
static_assert(offsetof(FGetPlayerByShortIdResult, StatusCode) == 0x000030, "Member 'FGetPlayerByShortIdResult::StatusCode' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.LoginWithXboxPlayFabRequest
// 0x0010 (0x0030 - 0x0020)
struct FLoginWithXboxPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 XboxToken;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoginWithXboxPlayFabRequest) == 0x000008, "Wrong alignment on FLoginWithXboxPlayFabRequest");
static_assert(sizeof(FLoginWithXboxPlayFabRequest) == 0x000030, "Wrong size on FLoginWithXboxPlayFabRequest");
static_assert(offsetof(FLoginWithXboxPlayFabRequest, XboxToken) == 0x000020, "Member 'FLoginWithXboxPlayFabRequest::XboxToken' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.PlayFabPort
// 0x0018 (0x0018 - 0x0000)
struct FPlayFabPort final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayFabPort) == 0x000008, "Wrong alignment on FPlayFabPort");
static_assert(sizeof(FPlayFabPort) == 0x000018, "Wrong size on FPlayFabPort");
static_assert(offsetof(FPlayFabPort, Name) == 0x000000, "Member 'FPlayFabPort::Name' has a wrong offset!");
static_assert(offsetof(FPlayFabPort, Num) == 0x000010, "Member 'FPlayFabPort::Num' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.PlayFabServerDetails
// 0x0038 (0x0038 - 0x0000)
struct FPlayFabServerDetails final
{
public:
	class FString                                 IPV4Address;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPlayFabPort>                   Ports;                                             // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EServerRegion                                 Region;                                            // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IsConsoleServer;                                   // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayFabServerDetails) == 0x000008, "Wrong alignment on FPlayFabServerDetails");
static_assert(sizeof(FPlayFabServerDetails) == 0x000038, "Wrong size on FPlayFabServerDetails");
static_assert(offsetof(FPlayFabServerDetails, IPV4Address) == 0x000000, "Member 'FPlayFabServerDetails::IPV4Address' has a wrong offset!");
static_assert(offsetof(FPlayFabServerDetails, Ports) == 0x000010, "Member 'FPlayFabServerDetails::Ports' has a wrong offset!");
static_assert(offsetof(FPlayFabServerDetails, Region) == 0x000020, "Member 'FPlayFabServerDetails::Region' has a wrong offset!");
static_assert(offsetof(FPlayFabServerDetails, IsConsoleServer) == 0x000028, "Member 'FPlayFabServerDetails::IsConsoleServer' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.PlayFabMatchmakingAttributes
// 0x0068 (0x0068 - 0x0000)
struct FPlayFabMatchmakingAttributes final
{
public:
	EServerRegion                                 Region;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MMR;                                               // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenSlots;                                         // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EServerLocation, int32>                  Pings;                                             // 0x0010(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsConsoleServer;                                   // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayFabMatchmakingAttributes) == 0x000008, "Wrong alignment on FPlayFabMatchmakingAttributes");
static_assert(sizeof(FPlayFabMatchmakingAttributes) == 0x000068, "Wrong size on FPlayFabMatchmakingAttributes");
static_assert(offsetof(FPlayFabMatchmakingAttributes, Region) == 0x000000, "Member 'FPlayFabMatchmakingAttributes::Region' has a wrong offset!");
static_assert(offsetof(FPlayFabMatchmakingAttributes, MMR) == 0x000004, "Member 'FPlayFabMatchmakingAttributes::MMR' has a wrong offset!");
static_assert(offsetof(FPlayFabMatchmakingAttributes, OpenSlots) == 0x000008, "Member 'FPlayFabMatchmakingAttributes::OpenSlots' has a wrong offset!");
static_assert(offsetof(FPlayFabMatchmakingAttributes, Pings) == 0x000010, "Member 'FPlayFabMatchmakingAttributes::Pings' has a wrong offset!");
static_assert(offsetof(FPlayFabMatchmakingAttributes, IsConsoleServer) == 0x000060, "Member 'FPlayFabMatchmakingAttributes::IsConsoleServer' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.PlayFabMatchmakingPlayer
// 0x0098 (0x0098 - 0x0000)
struct FPlayFabMatchmakingPlayer final
{
public:
	struct FPlayFabPlayerEntity                   Entity;                                            // 0x0000(0x0020)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TeamID;                                            // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabMatchmakingAttributes          Attributes;                                        // 0x0030(0x0068)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayFabMatchmakingPlayer) == 0x000008, "Wrong alignment on FPlayFabMatchmakingPlayer");
static_assert(sizeof(FPlayFabMatchmakingPlayer) == 0x000098, "Wrong size on FPlayFabMatchmakingPlayer");
static_assert(offsetof(FPlayFabMatchmakingPlayer, Entity) == 0x000000, "Member 'FPlayFabMatchmakingPlayer::Entity' has a wrong offset!");
static_assert(offsetof(FPlayFabMatchmakingPlayer, TeamID) == 0x000020, "Member 'FPlayFabMatchmakingPlayer::TeamID' has a wrong offset!");
static_assert(offsetof(FPlayFabMatchmakingPlayer, Attributes) == 0x000030, "Member 'FPlayFabMatchmakingPlayer::Attributes' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.CreateServerBackfillTicketPlayFabRequest
// 0x0060 (0x0080 - 0x0020)
struct FCreateServerBackfillTicketPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 QueueName;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabServerDetails                  ServerDetails;                                     // 0x0030(0x0038)(NativeAccessSpecifierPublic)
	TArray<struct FPlayFabMatchmakingPlayer>      Members;                                           // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Timeout;                                           // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCreateServerBackfillTicketPlayFabRequest) == 0x000008, "Wrong alignment on FCreateServerBackfillTicketPlayFabRequest");
static_assert(sizeof(FCreateServerBackfillTicketPlayFabRequest) == 0x000080, "Wrong size on FCreateServerBackfillTicketPlayFabRequest");
static_assert(offsetof(FCreateServerBackfillTicketPlayFabRequest, QueueName) == 0x000020, "Member 'FCreateServerBackfillTicketPlayFabRequest::QueueName' has a wrong offset!");
static_assert(offsetof(FCreateServerBackfillTicketPlayFabRequest, ServerDetails) == 0x000030, "Member 'FCreateServerBackfillTicketPlayFabRequest::ServerDetails' has a wrong offset!");
static_assert(offsetof(FCreateServerBackfillTicketPlayFabRequest, Members) == 0x000068, "Member 'FCreateServerBackfillTicketPlayFabRequest::Members' has a wrong offset!");
static_assert(offsetof(FCreateServerBackfillTicketPlayFabRequest, Timeout) == 0x000078, "Member 'FCreateServerBackfillTicketPlayFabRequest::Timeout' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.PlayFabRewardSettings
// 0x002C (0x002C - 0x0000)
struct FPlayFabRewardSettings final
{
public:
	float                                         XPBaseValue;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         XPPlaytimeFactor;                                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         XPAvgScoreFactor;                                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         XPTopScoreFactor;                                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GoldBaseValue;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GoldPlaytimeFactor;                                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GoldAvgScoreFactor;                                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GoldTopScoreFactor;                                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlacementGoldFirst;                                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlacementGoldSecond;                               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlacementGoldScoreFactor;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayFabRewardSettings) == 0x000004, "Wrong alignment on FPlayFabRewardSettings");
static_assert(sizeof(FPlayFabRewardSettings) == 0x00002C, "Wrong size on FPlayFabRewardSettings");
static_assert(offsetof(FPlayFabRewardSettings, XPBaseValue) == 0x000000, "Member 'FPlayFabRewardSettings::XPBaseValue' has a wrong offset!");
static_assert(offsetof(FPlayFabRewardSettings, XPPlaytimeFactor) == 0x000004, "Member 'FPlayFabRewardSettings::XPPlaytimeFactor' has a wrong offset!");
static_assert(offsetof(FPlayFabRewardSettings, XPAvgScoreFactor) == 0x000008, "Member 'FPlayFabRewardSettings::XPAvgScoreFactor' has a wrong offset!");
static_assert(offsetof(FPlayFabRewardSettings, XPTopScoreFactor) == 0x00000C, "Member 'FPlayFabRewardSettings::XPTopScoreFactor' has a wrong offset!");
static_assert(offsetof(FPlayFabRewardSettings, GoldBaseValue) == 0x000010, "Member 'FPlayFabRewardSettings::GoldBaseValue' has a wrong offset!");
static_assert(offsetof(FPlayFabRewardSettings, GoldPlaytimeFactor) == 0x000014, "Member 'FPlayFabRewardSettings::GoldPlaytimeFactor' has a wrong offset!");
static_assert(offsetof(FPlayFabRewardSettings, GoldAvgScoreFactor) == 0x000018, "Member 'FPlayFabRewardSettings::GoldAvgScoreFactor' has a wrong offset!");
static_assert(offsetof(FPlayFabRewardSettings, GoldTopScoreFactor) == 0x00001C, "Member 'FPlayFabRewardSettings::GoldTopScoreFactor' has a wrong offset!");
static_assert(offsetof(FPlayFabRewardSettings, PlacementGoldFirst) == 0x000020, "Member 'FPlayFabRewardSettings::PlacementGoldFirst' has a wrong offset!");
static_assert(offsetof(FPlayFabRewardSettings, PlacementGoldSecond) == 0x000024, "Member 'FPlayFabRewardSettings::PlacementGoldSecond' has a wrong offset!");
static_assert(offsetof(FPlayFabRewardSettings, PlacementGoldScoreFactor) == 0x000028, "Member 'FPlayFabRewardSettings::PlacementGoldScoreFactor' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.PlayFabTitleData
// 0x0210 (0x0210 - 0x0000)
struct FPlayFabTitleData final
{
public:
	TArray<class FString>                         BlacklistedServers;                                // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ProfaneWords;                                      // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	EIngameEvent                                  IngameEvent;                                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayFabRewardSettings                 RewardSettings;                                    // 0x0024(0x002C)(NoDestructor, NativeAccessSpecifierPublic)
	TMap<class FString, int64>                    GlobalBannedPlayers;                               // 0x0050(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, int64>                    GlobalMutedPlayers;                                // 0x00A0(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, int64>                    OfficialBannedPlayers;                             // 0x00F0(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, int64>                    OfficialMutedPlayers;                              // 0x0140(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Queues;                                            // 0x0190(0x0050)(NativeAccessSpecifierPublic)
	int32                                         NoviceThreshold;                                   // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EServerRegion>                         NoviceServerRegions;                               // 0x01E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         NoviceAdmins;                                      // 0x01F8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsPSNLockEnabled;                                  // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReceivedData;                                      // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A[0x6];                                      // 0x020A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayFabTitleData) == 0x000008, "Wrong alignment on FPlayFabTitleData");
static_assert(sizeof(FPlayFabTitleData) == 0x000210, "Wrong size on FPlayFabTitleData");
static_assert(offsetof(FPlayFabTitleData, BlacklistedServers) == 0x000000, "Member 'FPlayFabTitleData::BlacklistedServers' has a wrong offset!");
static_assert(offsetof(FPlayFabTitleData, ProfaneWords) == 0x000010, "Member 'FPlayFabTitleData::ProfaneWords' has a wrong offset!");
static_assert(offsetof(FPlayFabTitleData, IngameEvent) == 0x000020, "Member 'FPlayFabTitleData::IngameEvent' has a wrong offset!");
static_assert(offsetof(FPlayFabTitleData, RewardSettings) == 0x000024, "Member 'FPlayFabTitleData::RewardSettings' has a wrong offset!");
static_assert(offsetof(FPlayFabTitleData, GlobalBannedPlayers) == 0x000050, "Member 'FPlayFabTitleData::GlobalBannedPlayers' has a wrong offset!");
static_assert(offsetof(FPlayFabTitleData, GlobalMutedPlayers) == 0x0000A0, "Member 'FPlayFabTitleData::GlobalMutedPlayers' has a wrong offset!");
static_assert(offsetof(FPlayFabTitleData, OfficialBannedPlayers) == 0x0000F0, "Member 'FPlayFabTitleData::OfficialBannedPlayers' has a wrong offset!");
static_assert(offsetof(FPlayFabTitleData, OfficialMutedPlayers) == 0x000140, "Member 'FPlayFabTitleData::OfficialMutedPlayers' has a wrong offset!");
static_assert(offsetof(FPlayFabTitleData, Queues) == 0x000190, "Member 'FPlayFabTitleData::Queues' has a wrong offset!");
static_assert(offsetof(FPlayFabTitleData, NoviceThreshold) == 0x0001E0, "Member 'FPlayFabTitleData::NoviceThreshold' has a wrong offset!");
static_assert(offsetof(FPlayFabTitleData, NoviceServerRegions) == 0x0001E8, "Member 'FPlayFabTitleData::NoviceServerRegions' has a wrong offset!");
static_assert(offsetof(FPlayFabTitleData, NoviceAdmins) == 0x0001F8, "Member 'FPlayFabTitleData::NoviceAdmins' has a wrong offset!");
static_assert(offsetof(FPlayFabTitleData, IsPSNLockEnabled) == 0x000208, "Member 'FPlayFabTitleData::IsPSNLockEnabled' has a wrong offset!");
static_assert(offsetof(FPlayFabTitleData, ReceivedData) == 0x000209, "Member 'FPlayFabTitleData::ReceivedData' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.CancelServerBackfillTicketPlayFabRequest
// 0x0020 (0x0040 - 0x0020)
struct FCancelServerBackfillTicketPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 QueueName;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TicketId;                                          // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCancelServerBackfillTicketPlayFabRequest) == 0x000008, "Wrong alignment on FCancelServerBackfillTicketPlayFabRequest");
static_assert(sizeof(FCancelServerBackfillTicketPlayFabRequest) == 0x000040, "Wrong size on FCancelServerBackfillTicketPlayFabRequest");
static_assert(offsetof(FCancelServerBackfillTicketPlayFabRequest, QueueName) == 0x000020, "Member 'FCancelServerBackfillTicketPlayFabRequest::QueueName' has a wrong offset!");
static_assert(offsetof(FCancelServerBackfillTicketPlayFabRequest, TicketId) == 0x000030, "Member 'FCancelServerBackfillTicketPlayFabRequest::TicketId' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.LeaderboardEntry
// 0x0068 (0x0068 - 0x0000)
struct FLeaderboardEntry final
{
public:
	struct FPlayFabPlayer                         Player;                                            // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         position;                                          // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeaderboardEntry) == 0x000008, "Wrong alignment on FLeaderboardEntry");
static_assert(sizeof(FLeaderboardEntry) == 0x000068, "Wrong size on FLeaderboardEntry");
static_assert(offsetof(FLeaderboardEntry, Player) == 0x000000, "Member 'FLeaderboardEntry::Player' has a wrong offset!");
static_assert(offsetof(FLeaderboardEntry, position) == 0x000060, "Member 'FLeaderboardEntry::position' has a wrong offset!");
static_assert(offsetof(FLeaderboardEntry, Value) == 0x000064, "Member 'FLeaderboardEntry::Value' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.LoginWithPSNPlayFabRequest
// 0x0028 (0x0048 - 0x0020)
struct FLoginWithPSNPlayFabRequest final : public FPlayFabRequest
{
public:
	int32                                         IssuerId;                                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AuthCode;                                          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RedirectUri;                                       // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoginWithPSNPlayFabRequest) == 0x000008, "Wrong alignment on FLoginWithPSNPlayFabRequest");
static_assert(sizeof(FLoginWithPSNPlayFabRequest) == 0x000048, "Wrong size on FLoginWithPSNPlayFabRequest");
static_assert(offsetof(FLoginWithPSNPlayFabRequest, IssuerId) == 0x000020, "Member 'FLoginWithPSNPlayFabRequest::IssuerId' has a wrong offset!");
static_assert(offsetof(FLoginWithPSNPlayFabRequest, AuthCode) == 0x000028, "Member 'FLoginWithPSNPlayFabRequest::AuthCode' has a wrong offset!");
static_assert(offsetof(FLoginWithPSNPlayFabRequest, RedirectUri) == 0x000038, "Member 'FLoginWithPSNPlayFabRequest::RedirectUri' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.PlayFabMatchmakingMatch
// 0x00B8 (0x00B8 - 0x0000)
struct FPlayFabMatchmakingMatch final
{
public:
	class FString                                 QueueName;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchId;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OwnerID;                                           // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupID;                                           // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayFabMatchStatus                           Status;                                            // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPlayFabMatchmakingPlayer>      Members;                                           // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         RegisteredMembers;                                 // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FPlayFabServerDetails                  ServerDetails;                                     // 0x0068(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<EServerLocation>                       LocationPreference;                                // 0x00A0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EServerRegion                                 Region;                                            // 0x00B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayFabMatchmakingMatch) == 0x000008, "Wrong alignment on FPlayFabMatchmakingMatch");
static_assert(sizeof(FPlayFabMatchmakingMatch) == 0x0000B8, "Wrong size on FPlayFabMatchmakingMatch");
static_assert(offsetof(FPlayFabMatchmakingMatch, QueueName) == 0x000000, "Member 'FPlayFabMatchmakingMatch::QueueName' has a wrong offset!");
static_assert(offsetof(FPlayFabMatchmakingMatch, MatchId) == 0x000010, "Member 'FPlayFabMatchmakingMatch::MatchId' has a wrong offset!");
static_assert(offsetof(FPlayFabMatchmakingMatch, OwnerID) == 0x000020, "Member 'FPlayFabMatchmakingMatch::OwnerID' has a wrong offset!");
static_assert(offsetof(FPlayFabMatchmakingMatch, GroupID) == 0x000030, "Member 'FPlayFabMatchmakingMatch::GroupID' has a wrong offset!");
static_assert(offsetof(FPlayFabMatchmakingMatch, Status) == 0x000040, "Member 'FPlayFabMatchmakingMatch::Status' has a wrong offset!");
static_assert(offsetof(FPlayFabMatchmakingMatch, Members) == 0x000048, "Member 'FPlayFabMatchmakingMatch::Members' has a wrong offset!");
static_assert(offsetof(FPlayFabMatchmakingMatch, RegisteredMembers) == 0x000058, "Member 'FPlayFabMatchmakingMatch::RegisteredMembers' has a wrong offset!");
static_assert(offsetof(FPlayFabMatchmakingMatch, ServerDetails) == 0x000068, "Member 'FPlayFabMatchmakingMatch::ServerDetails' has a wrong offset!");
static_assert(offsetof(FPlayFabMatchmakingMatch, LocationPreference) == 0x0000A0, "Member 'FPlayFabMatchmakingMatch::LocationPreference' has a wrong offset!");
static_assert(offsetof(FPlayFabMatchmakingMatch, Region) == 0x0000B0, "Member 'FPlayFabMatchmakingMatch::Region' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.JoinGroupPlayFabRequest
// 0x0020 (0x0040 - 0x0020)
struct FJoinGroupPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 GroupID;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJoinGroupPlayFabRequest) == 0x000008, "Wrong alignment on FJoinGroupPlayFabRequest");
static_assert(sizeof(FJoinGroupPlayFabRequest) == 0x000040, "Wrong size on FJoinGroupPlayFabRequest");
static_assert(offsetof(FJoinGroupPlayFabRequest, GroupID) == 0x000020, "Member 'FJoinGroupPlayFabRequest::GroupID' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetServerBackfillTicketForPlayerPlayFabRequest
// 0x0030 (0x0050 - 0x0020)
struct FGetServerBackfillTicketForPlayerPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 QueueName;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabPlayerEntity                   PlayerEntity;                                      // 0x0030(0x0020)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetServerBackfillTicketForPlayerPlayFabRequest) == 0x000008, "Wrong alignment on FGetServerBackfillTicketForPlayerPlayFabRequest");
static_assert(sizeof(FGetServerBackfillTicketForPlayerPlayFabRequest) == 0x000050, "Wrong size on FGetServerBackfillTicketForPlayerPlayFabRequest");
static_assert(offsetof(FGetServerBackfillTicketForPlayerPlayFabRequest, QueueName) == 0x000020, "Member 'FGetServerBackfillTicketForPlayerPlayFabRequest::QueueName' has a wrong offset!");
static_assert(offsetof(FGetServerBackfillTicketForPlayerPlayFabRequest, PlayerEntity) == 0x000030, "Member 'FGetServerBackfillTicketForPlayerPlayFabRequest::PlayerEntity' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.ListGroupMembershipPlayFabRequest
// 0x0000 (0x0020 - 0x0020)
struct FListGroupMembershipPlayFabRequest final : public FPlayFabRequest
{
};
static_assert(alignof(FListGroupMembershipPlayFabRequest) == 0x000008, "Wrong alignment on FListGroupMembershipPlayFabRequest");
static_assert(sizeof(FListGroupMembershipPlayFabRequest) == 0x000020, "Wrong size on FListGroupMembershipPlayFabRequest");

// ScriptStruct MordhauOnlineSubsystem.GetObjectsPlayFabRequest
// 0x0020 (0x0040 - 0x0020)
struct FGetObjectsPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 EntityId;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EntityType;                                        // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetObjectsPlayFabRequest) == 0x000008, "Wrong alignment on FGetObjectsPlayFabRequest");
static_assert(sizeof(FGetObjectsPlayFabRequest) == 0x000040, "Wrong size on FGetObjectsPlayFabRequest");
static_assert(offsetof(FGetObjectsPlayFabRequest, EntityId) == 0x000020, "Member 'FGetObjectsPlayFabRequest::EntityId' has a wrong offset!");
static_assert(offsetof(FGetObjectsPlayFabRequest, EntityType) == 0x000030, "Member 'FGetObjectsPlayFabRequest::EntityType' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.CreateGroupRolePlayFabRequest
// 0x0030 (0x0050 - 0x0020)
struct FCreateGroupRolePlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 GroupID;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleId;                                            // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleName;                                          // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreateGroupRolePlayFabRequest) == 0x000008, "Wrong alignment on FCreateGroupRolePlayFabRequest");
static_assert(sizeof(FCreateGroupRolePlayFabRequest) == 0x000050, "Wrong size on FCreateGroupRolePlayFabRequest");
static_assert(offsetof(FCreateGroupRolePlayFabRequest, GroupID) == 0x000020, "Member 'FCreateGroupRolePlayFabRequest::GroupID' has a wrong offset!");
static_assert(offsetof(FCreateGroupRolePlayFabRequest, RoleId) == 0x000030, "Member 'FCreateGroupRolePlayFabRequest::RoleId' has a wrong offset!");
static_assert(offsetof(FCreateGroupRolePlayFabRequest, RoleName) == 0x000040, "Member 'FCreateGroupRolePlayFabRequest::RoleName' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.PlayFabGameServer
// 0x0110 (0x0110 - 0x0000)
struct FPlayFabGameServer final
{
public:
	class FString                                 ServerId;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EServerState                                  State;                                             // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastHeartbeat;                                     // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              Runtime;                                           // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabServerDetails                  ServerDetails;                                     // 0x0028(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0060(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerName;                                        // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0078(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0088(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QueueName;                                         // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Players;                                           // 0x00A8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x00B8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReservedSlots;                                     // 0x00BC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsModded;                                         // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOfficial;                                       // 0x00C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowJoin;                                        // 0x00C2(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPasswordProtected;                              // 0x00C3(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsConsoleServer;                                  // 0x00C4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNoviceServer;                                   // 0x00C5(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EServerVisibility                             Visibility;                                        // 0x00C6(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C7[0x1];                                       // 0x00C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Mods;                                              // 0x00C8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Pings;                                             // 0x00D8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EServerLocation                               Location;                                          // 0x00E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AccountID;                                         // 0x00F0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OperatingSystem;                                   // 0x0100(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayFabGameServer) == 0x000008, "Wrong alignment on FPlayFabGameServer");
static_assert(sizeof(FPlayFabGameServer) == 0x000110, "Wrong size on FPlayFabGameServer");
static_assert(offsetof(FPlayFabGameServer, ServerId) == 0x000000, "Member 'FPlayFabGameServer::ServerId' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, State) == 0x000010, "Member 'FPlayFabGameServer::State' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, LastHeartbeat) == 0x000018, "Member 'FPlayFabGameServer::LastHeartbeat' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, Runtime) == 0x000020, "Member 'FPlayFabGameServer::Runtime' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, ServerDetails) == 0x000028, "Member 'FPlayFabGameServer::ServerDetails' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, Version) == 0x000060, "Member 'FPlayFabGameServer::Version' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, ServerName) == 0x000068, "Member 'FPlayFabGameServer::ServerName' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, MapName) == 0x000078, "Member 'FPlayFabGameServer::MapName' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, GameMode) == 0x000088, "Member 'FPlayFabGameServer::GameMode' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, QueueName) == 0x000098, "Member 'FPlayFabGameServer::QueueName' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, Players) == 0x0000A8, "Member 'FPlayFabGameServer::Players' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, MaxPlayers) == 0x0000B8, "Member 'FPlayFabGameServer::MaxPlayers' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, ReservedSlots) == 0x0000BC, "Member 'FPlayFabGameServer::ReservedSlots' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, bIsModded) == 0x0000C0, "Member 'FPlayFabGameServer::bIsModded' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, bIsOfficial) == 0x0000C1, "Member 'FPlayFabGameServer::bIsOfficial' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, bAllowJoin) == 0x0000C2, "Member 'FPlayFabGameServer::bAllowJoin' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, bIsPasswordProtected) == 0x0000C3, "Member 'FPlayFabGameServer::bIsPasswordProtected' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, bIsConsoleServer) == 0x0000C4, "Member 'FPlayFabGameServer::bIsConsoleServer' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, bIsNoviceServer) == 0x0000C5, "Member 'FPlayFabGameServer::bIsNoviceServer' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, Visibility) == 0x0000C6, "Member 'FPlayFabGameServer::Visibility' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, Mods) == 0x0000C8, "Member 'FPlayFabGameServer::Mods' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, Pings) == 0x0000D8, "Member 'FPlayFabGameServer::Pings' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, Location) == 0x0000E8, "Member 'FPlayFabGameServer::Location' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, AccountID) == 0x0000F0, "Member 'FPlayFabGameServer::AccountID' has a wrong offset!");
static_assert(offsetof(FPlayFabGameServer, OperatingSystem) == 0x000100, "Member 'FPlayFabGameServer::OperatingSystem' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.AddFriendPlayFabRequest
// 0x0060 (0x0080 - 0x0020)
struct FAddFriendPlayFabRequest final : public FPlayFabRequest
{
public:
	struct FPlayFabPlayer                         Friend;                                            // 0x0020(0x0060)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAddFriendPlayFabRequest) == 0x000008, "Wrong alignment on FAddFriendPlayFabRequest");
static_assert(sizeof(FAddFriendPlayFabRequest) == 0x000080, "Wrong size on FAddFriendPlayFabRequest");
static_assert(offsetof(FAddFriendPlayFabRequest, Friend) == 0x000020, "Member 'FAddFriendPlayFabRequest::Friend' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.CreateGroupPlayFabRequest
// 0x0020 (0x0040 - 0x0020)
struct FCreateGroupPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 GroupName;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCreateGroupPlayFabRequest) == 0x000008, "Wrong alignment on FCreateGroupPlayFabRequest");
static_assert(sizeof(FCreateGroupPlayFabRequest) == 0x000040, "Wrong size on FCreateGroupPlayFabRequest");
static_assert(offsetof(FCreateGroupPlayFabRequest, GroupName) == 0x000020, "Member 'FCreateGroupPlayFabRequest::GroupName' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.ListGroupBlocksPlayFabRequest
// 0x0020 (0x0040 - 0x0020)
struct FListGroupBlocksPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 GroupID;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FListGroupBlocksPlayFabRequest) == 0x000008, "Wrong alignment on FListGroupBlocksPlayFabRequest");
static_assert(sizeof(FListGroupBlocksPlayFabRequest) == 0x000040, "Wrong size on FListGroupBlocksPlayFabRequest");
static_assert(offsetof(FListGroupBlocksPlayFabRequest, GroupID) == 0x000020, "Member 'FListGroupBlocksPlayFabRequest::GroupID' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.ItemStack
// 0x0008 (0x0008 - 0x0000)
struct FItemStack final
{
public:
	int32                                         ItemDefID;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemStack) == 0x000004, "Wrong alignment on FItemStack");
static_assert(sizeof(FItemStack) == 0x000008, "Wrong size on FItemStack");
static_assert(offsetof(FItemStack, ItemDefID) == 0x000000, "Member 'FItemStack::ItemDefID' has a wrong offset!");
static_assert(offsetof(FItemStack, Quantity) == 0x000004, "Member 'FItemStack::Quantity' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.RefreshEntityTokenPlayFabRequest
// 0x0000 (0x0020 - 0x0020)
struct FRefreshEntityTokenPlayFabRequest final : public FPlayFabRequest
{
};
static_assert(alignof(FRefreshEntityTokenPlayFabRequest) == 0x000008, "Wrong alignment on FRefreshEntityTokenPlayFabRequest");
static_assert(sizeof(FRefreshEntityTokenPlayFabRequest) == 0x000020, "Wrong size on FRefreshEntityTokenPlayFabRequest");

// ScriptStruct MordhauOnlineSubsystem.PlayFabEntitlements
// 0x0020 (0x0020 - 0x0000)
struct FPlayFabEntitlements final
{
public:
	TArray<class FString>                         GrantedEntitlements;                               // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         RemovedEntitlements;                               // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayFabEntitlements) == 0x000008, "Wrong alignment on FPlayFabEntitlements");
static_assert(sizeof(FPlayFabEntitlements) == 0x000020, "Wrong size on FPlayFabEntitlements");
static_assert(offsetof(FPlayFabEntitlements, GrantedEntitlements) == 0x000000, "Member 'FPlayFabEntitlements::GrantedEntitlements' has a wrong offset!");
static_assert(offsetof(FPlayFabEntitlements, RemovedEntitlements) == 0x000010, "Member 'FPlayFabEntitlements::RemovedEntitlements' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.PlayFabMatch
// 0x0060 (0x0060 - 0x0000)
struct FPlayFabMatch final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerId;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Map;                                               // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TopScore;                                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvgScore;                                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         StartTimestamp;                                    // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         EndTimestamp;                                      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayFabMatch) == 0x000008, "Wrong alignment on FPlayFabMatch");
static_assert(sizeof(FPlayFabMatch) == 0x000060, "Wrong size on FPlayFabMatch");
static_assert(offsetof(FPlayFabMatch, ID) == 0x000000, "Member 'FPlayFabMatch::ID' has a wrong offset!");
static_assert(offsetof(FPlayFabMatch, ServerId) == 0x000010, "Member 'FPlayFabMatch::ServerId' has a wrong offset!");
static_assert(offsetof(FPlayFabMatch, GameMode) == 0x000020, "Member 'FPlayFabMatch::GameMode' has a wrong offset!");
static_assert(offsetof(FPlayFabMatch, Map) == 0x000030, "Member 'FPlayFabMatch::Map' has a wrong offset!");
static_assert(offsetof(FPlayFabMatch, TopScore) == 0x000040, "Member 'FPlayFabMatch::TopScore' has a wrong offset!");
static_assert(offsetof(FPlayFabMatch, AvgScore) == 0x000044, "Member 'FPlayFabMatch::AvgScore' has a wrong offset!");
static_assert(offsetof(FPlayFabMatch, Score) == 0x000048, "Member 'FPlayFabMatch::Score' has a wrong offset!");
static_assert(offsetof(FPlayFabMatch, StartTimestamp) == 0x000050, "Member 'FPlayFabMatch::StartTimestamp' has a wrong offset!");
static_assert(offsetof(FPlayFabMatch, EndTimestamp) == 0x000058, "Member 'FPlayFabMatch::EndTimestamp' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.InstalledMod
// 0x0060 (0x0060 - 0x0000)
struct FInstalledMod final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModInfo                               Mod;                                               // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInstalledMod) == 0x000008, "Wrong alignment on FInstalledMod");
static_assert(sizeof(FInstalledMod) == 0x000060, "Wrong size on FInstalledMod");
static_assert(offsetof(FInstalledMod, Path) == 0x000000, "Member 'FInstalledMod::Path' has a wrong offset!");
static_assert(offsetof(FInstalledMod, Mod) == 0x000010, "Member 'FInstalledMod::Mod' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.QueuedModDownload
// 0x0068 (0x0068 - 0x0000)
struct FQueuedModDownload final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeInMb;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModInfo                               Mod;                                               // 0x0018(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQueuedModDownload) == 0x000008, "Wrong alignment on FQueuedModDownload");
static_assert(sizeof(FQueuedModDownload) == 0x000068, "Wrong size on FQueuedModDownload");
static_assert(offsetof(FQueuedModDownload, Path) == 0x000000, "Member 'FQueuedModDownload::Path' has a wrong offset!");
static_assert(offsetof(FQueuedModDownload, Progress) == 0x000010, "Member 'FQueuedModDownload::Progress' has a wrong offset!");
static_assert(offsetof(FQueuedModDownload, SizeInMb) == 0x000014, "Member 'FQueuedModDownload::SizeInMb' has a wrong offset!");
static_assert(offsetof(FQueuedModDownload, Mod) == 0x000018, "Member 'FQueuedModDownload::Mod' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.TestFunctionRequest
// 0x0020 (0x0040 - 0x0020)
struct FTestFunctionRequest final : public FPlayFabRequest
{
public:
	class FString                                 Payload;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Test;                                              // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTestFunctionRequest) == 0x000008, "Wrong alignment on FTestFunctionRequest");
static_assert(sizeof(FTestFunctionRequest) == 0x000040, "Wrong size on FTestFunctionRequest");
static_assert(offsetof(FTestFunctionRequest, Payload) == 0x000020, "Member 'FTestFunctionRequest::Payload' has a wrong offset!");
static_assert(offsetof(FTestFunctionRequest, Test) == 0x000030, "Member 'FTestFunctionRequest::Test' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetPlayerByShortIdRequest
// 0x0018 (0x0038 - 0x0020)
struct FGetPlayerByShortIdRequest final : public FPlayFabRequest
{
public:
	TArray<class FString>                         ShortIds;                                          // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	EPlatform                                     PlatformFilter;                                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGetPlayerByShortIdRequest) == 0x000008, "Wrong alignment on FGetPlayerByShortIdRequest");
static_assert(sizeof(FGetPlayerByShortIdRequest) == 0x000038, "Wrong size on FGetPlayerByShortIdRequest");
static_assert(offsetof(FGetPlayerByShortIdRequest, ShortIds) == 0x000020, "Member 'FGetPlayerByShortIdRequest::ShortIds' has a wrong offset!");
static_assert(offsetof(FGetPlayerByShortIdRequest, PlatformFilter) == 0x000030, "Member 'FGetPlayerByShortIdRequest::PlatformFilter' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.IndexPlayerPlayFabRequest
// 0x0000 (0x0020 - 0x0020)
struct FIndexPlayerPlayFabRequest final : public FPlayFabRequest
{
};
static_assert(alignof(FIndexPlayerPlayFabRequest) == 0x000008, "Wrong alignment on FIndexPlayerPlayFabRequest");
static_assert(sizeof(FIndexPlayerPlayFabRequest) == 0x000020, "Wrong size on FIndexPlayerPlayFabRequest");

// ScriptStruct MordhauOnlineSubsystem.RemoveFriendPlayFabRequest
// 0x0060 (0x0080 - 0x0020)
struct FRemoveFriendPlayFabRequest final : public FPlayFabRequest
{
public:
	struct FPlayFabPlayer                         Friend;                                            // 0x0020(0x0060)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRemoveFriendPlayFabRequest) == 0x000008, "Wrong alignment on FRemoveFriendPlayFabRequest");
static_assert(sizeof(FRemoveFriendPlayFabRequest) == 0x000080, "Wrong size on FRemoveFriendPlayFabRequest");
static_assert(offsetof(FRemoveFriendPlayFabRequest, Friend) == 0x000020, "Member 'FRemoveFriendPlayFabRequest::Friend' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetFriendsListPlayFabRequest
// 0x0018 (0x0038 - 0x0020)
struct FGetFriendsListPlayFabRequest final : public FPlayFabRequest
{
public:
	bool                                          bIncludeSteamFriends;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 XboxToken;                                         // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetFriendsListPlayFabRequest) == 0x000008, "Wrong alignment on FGetFriendsListPlayFabRequest");
static_assert(sizeof(FGetFriendsListPlayFabRequest) == 0x000038, "Wrong size on FGetFriendsListPlayFabRequest");
static_assert(offsetof(FGetFriendsListPlayFabRequest, bIncludeSteamFriends) == 0x000020, "Member 'FGetFriendsListPlayFabRequest::bIncludeSteamFriends' has a wrong offset!");
static_assert(offsetof(FGetFriendsListPlayFabRequest, XboxToken) == 0x000028, "Member 'FGetFriendsListPlayFabRequest::XboxToken' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.LeaveMatchmakingMatchPlayFabRequest
// 0x00B8 (0x00D8 - 0x0020)
struct FLeaveMatchmakingMatchPlayFabRequest final : public FPlayFabRequest
{
public:
	struct FPlayFabMatchmakingMatch               Match;                                             // 0x0020(0x00B8)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeaveMatchmakingMatchPlayFabRequest) == 0x000008, "Wrong alignment on FLeaveMatchmakingMatchPlayFabRequest");
static_assert(sizeof(FLeaveMatchmakingMatchPlayFabRequest) == 0x0000D8, "Wrong size on FLeaveMatchmakingMatchPlayFabRequest");
static_assert(offsetof(FLeaveMatchmakingMatchPlayFabRequest, Match) == 0x000020, "Member 'FLeaveMatchmakingMatchPlayFabRequest::Match' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.JoinMatchmakingMatchPlayFabRequest
// 0x00B8 (0x00D8 - 0x0020)
struct FJoinMatchmakingMatchPlayFabRequest final : public FPlayFabRequest
{
public:
	struct FPlayFabMatchmakingMatch               Match;                                             // 0x0020(0x00B8)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJoinMatchmakingMatchPlayFabRequest) == 0x000008, "Wrong alignment on FJoinMatchmakingMatchPlayFabRequest");
static_assert(sizeof(FJoinMatchmakingMatchPlayFabRequest) == 0x0000D8, "Wrong size on FJoinMatchmakingMatchPlayFabRequest");
static_assert(offsetof(FJoinMatchmakingMatchPlayFabRequest, Match) == 0x000020, "Member 'FJoinMatchmakingMatchPlayFabRequest::Match' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.UpdateEntitlementsPlayFabRequest
// 0x0010 (0x0030 - 0x0020)
struct FUpdateEntitlementsPlayFabRequest final : public FPlayFabRequest
{
public:
	TArray<class FString>                         EntitlementIDs;                                    // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUpdateEntitlementsPlayFabRequest) == 0x000008, "Wrong alignment on FUpdateEntitlementsPlayFabRequest");
static_assert(sizeof(FUpdateEntitlementsPlayFabRequest) == 0x000030, "Wrong size on FUpdateEntitlementsPlayFabRequest");
static_assert(offsetof(FUpdateEntitlementsPlayFabRequest, EntitlementIDs) == 0x000020, "Member 'FUpdateEntitlementsPlayFabRequest::EntitlementIDs' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.UpdateAccountInfoPlayFabRequest
// 0x0000 (0x0020 - 0x0020)
struct FUpdateAccountInfoPlayFabRequest final : public FPlayFabRequest
{
};
static_assert(alignof(FUpdateAccountInfoPlayFabRequest) == 0x000008, "Wrong alignment on FUpdateAccountInfoPlayFabRequest");
static_assert(sizeof(FUpdateAccountInfoPlayFabRequest) == 0x000020, "Wrong size on FUpdateAccountInfoPlayFabRequest");

// ScriptStruct MordhauOnlineSubsystem.GetEntityProfilesPlayFabRequest
// 0x0020 (0x0040 - 0x0020)
struct FGetEntityProfilesPlayFabRequest final : public FPlayFabRequest
{
public:
	TArray<struct FPlayFabEntity>                 Entities;                                          // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGetEntityProfilesPlayFabRequest) == 0x000008, "Wrong alignment on FGetEntityProfilesPlayFabRequest");
static_assert(sizeof(FGetEntityProfilesPlayFabRequest) == 0x000040, "Wrong size on FGetEntityProfilesPlayFabRequest");
static_assert(offsetof(FGetEntityProfilesPlayFabRequest, Entities) == 0x000020, "Member 'FGetEntityProfilesPlayFabRequest::Entities' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.UnblockEntityPlayFabRequest
// 0x0030 (0x0050 - 0x0020)
struct FUnblockEntityPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 GroupID;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EntityId;                                          // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUnblockEntityPlayFabRequest) == 0x000008, "Wrong alignment on FUnblockEntityPlayFabRequest");
static_assert(sizeof(FUnblockEntityPlayFabRequest) == 0x000050, "Wrong size on FUnblockEntityPlayFabRequest");
static_assert(offsetof(FUnblockEntityPlayFabRequest, GroupID) == 0x000020, "Member 'FUnblockEntityPlayFabRequest::GroupID' has a wrong offset!");
static_assert(offsetof(FUnblockEntityPlayFabRequest, EntityId) == 0x000030, "Member 'FUnblockEntityPlayFabRequest::EntityId' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.BlockEntityPlayFabRequest
// 0x0030 (0x0050 - 0x0020)
struct FBlockEntityPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 GroupID;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EntityId;                                          // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBlockEntityPlayFabRequest) == 0x000008, "Wrong alignment on FBlockEntityPlayFabRequest");
static_assert(sizeof(FBlockEntityPlayFabRequest) == 0x000050, "Wrong size on FBlockEntityPlayFabRequest");
static_assert(offsetof(FBlockEntityPlayFabRequest, GroupID) == 0x000020, "Member 'FBlockEntityPlayFabRequest::GroupID' has a wrong offset!");
static_assert(offsetof(FBlockEntityPlayFabRequest, EntityId) == 0x000030, "Member 'FBlockEntityPlayFabRequest::EntityId' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.RemoveGroupInvitationPlayFabRequest
// 0x0020 (0x0040 - 0x0020)
struct FRemoveGroupInvitationPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 GroupID;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EntityId;                                          // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRemoveGroupInvitationPlayFabRequest) == 0x000008, "Wrong alignment on FRemoveGroupInvitationPlayFabRequest");
static_assert(sizeof(FRemoveGroupInvitationPlayFabRequest) == 0x000040, "Wrong size on FRemoveGroupInvitationPlayFabRequest");
static_assert(offsetof(FRemoveGroupInvitationPlayFabRequest, GroupID) == 0x000020, "Member 'FRemoveGroupInvitationPlayFabRequest::GroupID' has a wrong offset!");
static_assert(offsetof(FRemoveGroupInvitationPlayFabRequest, EntityId) == 0x000030, "Member 'FRemoveGroupInvitationPlayFabRequest::EntityId' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.InviteToGroupPlayFabRequest
// 0x0038 (0x0058 - 0x0020)
struct FInviteToGroupPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 GroupID;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EntityId;                                          // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleId;                                            // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoAccept;                                        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInviteToGroupPlayFabRequest) == 0x000008, "Wrong alignment on FInviteToGroupPlayFabRequest");
static_assert(sizeof(FInviteToGroupPlayFabRequest) == 0x000058, "Wrong size on FInviteToGroupPlayFabRequest");
static_assert(offsetof(FInviteToGroupPlayFabRequest, GroupID) == 0x000020, "Member 'FInviteToGroupPlayFabRequest::GroupID' has a wrong offset!");
static_assert(offsetof(FInviteToGroupPlayFabRequest, EntityId) == 0x000030, "Member 'FInviteToGroupPlayFabRequest::EntityId' has a wrong offset!");
static_assert(offsetof(FInviteToGroupPlayFabRequest, RoleId) == 0x000040, "Member 'FInviteToGroupPlayFabRequest::RoleId' has a wrong offset!");
static_assert(offsetof(FInviteToGroupPlayFabRequest, AutoAccept) == 0x000050, "Member 'FInviteToGroupPlayFabRequest::AutoAccept' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.ApplyToGroupPlayFabRequest
// 0x0010 (0x0030 - 0x0020)
struct FApplyToGroupPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 GroupID;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FApplyToGroupPlayFabRequest) == 0x000008, "Wrong alignment on FApplyToGroupPlayFabRequest");
static_assert(sizeof(FApplyToGroupPlayFabRequest) == 0x000030, "Wrong size on FApplyToGroupPlayFabRequest");
static_assert(offsetof(FApplyToGroupPlayFabRequest, GroupID) == 0x000020, "Member 'FApplyToGroupPlayFabRequest::GroupID' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.DeleteGroupRolePlayFabRequest
// 0x0020 (0x0040 - 0x0020)
struct FDeleteGroupRolePlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 GroupID;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleId;                                            // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeleteGroupRolePlayFabRequest) == 0x000008, "Wrong alignment on FDeleteGroupRolePlayFabRequest");
static_assert(sizeof(FDeleteGroupRolePlayFabRequest) == 0x000040, "Wrong size on FDeleteGroupRolePlayFabRequest");
static_assert(offsetof(FDeleteGroupRolePlayFabRequest, GroupID) == 0x000020, "Member 'FDeleteGroupRolePlayFabRequest::GroupID' has a wrong offset!");
static_assert(offsetof(FDeleteGroupRolePlayFabRequest, RoleId) == 0x000030, "Member 'FDeleteGroupRolePlayFabRequest::RoleId' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.RemoveGroupMembersPlayFabRequest
// 0x0040 (0x0060 - 0x0020)
struct FRemoveGroupMembersPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 GroupID;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleId;                                            // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         MemberIDs;                                         // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRemoveGroupMembersPlayFabRequest) == 0x000008, "Wrong alignment on FRemoveGroupMembersPlayFabRequest");
static_assert(sizeof(FRemoveGroupMembersPlayFabRequest) == 0x000060, "Wrong size on FRemoveGroupMembersPlayFabRequest");
static_assert(offsetof(FRemoveGroupMembersPlayFabRequest, GroupID) == 0x000020, "Member 'FRemoveGroupMembersPlayFabRequest::GroupID' has a wrong offset!");
static_assert(offsetof(FRemoveGroupMembersPlayFabRequest, RoleId) == 0x000030, "Member 'FRemoveGroupMembersPlayFabRequest::RoleId' has a wrong offset!");
static_assert(offsetof(FRemoveGroupMembersPlayFabRequest, MemberIDs) == 0x000040, "Member 'FRemoveGroupMembersPlayFabRequest::MemberIDs' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.ListGroupMembersPlayFabRequest
// 0x0020 (0x0040 - 0x0020)
struct FListGroupMembersPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 GroupID;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FListGroupMembersPlayFabRequest) == 0x000008, "Wrong alignment on FListGroupMembersPlayFabRequest");
static_assert(sizeof(FListGroupMembersPlayFabRequest) == 0x000040, "Wrong size on FListGroupMembersPlayFabRequest");
static_assert(offsetof(FListGroupMembersPlayFabRequest, GroupID) == 0x000020, "Member 'FListGroupMembersPlayFabRequest::GroupID' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.ListGroupMembershipOpportunitiesPlayFabRequest
// 0x0010 (0x0030 - 0x0020)
struct FListGroupMembershipOpportunitiesPlayFabRequest final : public FPlayFabRequest
{
public:
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FListGroupMembershipOpportunitiesPlayFabRequest) == 0x000008, "Wrong alignment on FListGroupMembershipOpportunitiesPlayFabRequest");
static_assert(sizeof(FListGroupMembershipOpportunitiesPlayFabRequest) == 0x000030, "Wrong size on FListGroupMembershipOpportunitiesPlayFabRequest");

// ScriptStruct MordhauOnlineSubsystem.GetGroupPlayFabRequest
// 0x0030 (0x0050 - 0x0020)
struct FGetGroupPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 GroupID;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupName;                                         // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGetGroupPlayFabRequest) == 0x000008, "Wrong alignment on FGetGroupPlayFabRequest");
static_assert(sizeof(FGetGroupPlayFabRequest) == 0x000050, "Wrong size on FGetGroupPlayFabRequest");
static_assert(offsetof(FGetGroupPlayFabRequest, GroupID) == 0x000020, "Member 'FGetGroupPlayFabRequest::GroupID' has a wrong offset!");
static_assert(offsetof(FGetGroupPlayFabRequest, GroupName) == 0x000030, "Member 'FGetGroupPlayFabRequest::GroupName' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.SetObjectsPlayFabRequest
// 0x0030 (0x0050 - 0x0020)
struct FSetObjectsPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 EntityId;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EntityType;                                        // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSetObjectsPlayFabRequest) == 0x000008, "Wrong alignment on FSetObjectsPlayFabRequest");
static_assert(sizeof(FSetObjectsPlayFabRequest) == 0x000050, "Wrong size on FSetObjectsPlayFabRequest");
static_assert(offsetof(FSetObjectsPlayFabRequest, EntityId) == 0x000020, "Member 'FSetObjectsPlayFabRequest::EntityId' has a wrong offset!");
static_assert(offsetof(FSetObjectsPlayFabRequest, EntityType) == 0x000030, "Member 'FSetObjectsPlayFabRequest::EntityType' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.CancelServerBackfillTicketForPlayerPlayFabRequest
// 0x0030 (0x0050 - 0x0020)
struct FCancelServerBackfillTicketForPlayerPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 QueueName;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabPlayerEntity                   PlayerEntity;                                      // 0x0030(0x0020)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCancelServerBackfillTicketForPlayerPlayFabRequest) == 0x000008, "Wrong alignment on FCancelServerBackfillTicketForPlayerPlayFabRequest");
static_assert(sizeof(FCancelServerBackfillTicketForPlayerPlayFabRequest) == 0x000050, "Wrong size on FCancelServerBackfillTicketForPlayerPlayFabRequest");
static_assert(offsetof(FCancelServerBackfillTicketForPlayerPlayFabRequest, QueueName) == 0x000020, "Member 'FCancelServerBackfillTicketForPlayerPlayFabRequest::QueueName' has a wrong offset!");
static_assert(offsetof(FCancelServerBackfillTicketForPlayerPlayFabRequest, PlayerEntity) == 0x000030, "Member 'FCancelServerBackfillTicketForPlayerPlayFabRequest::PlayerEntity' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetServerBackfillTicketPlayFabRequest
// 0x0020 (0x0040 - 0x0020)
struct FGetServerBackfillTicketPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 QueueName;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TicketId;                                          // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetServerBackfillTicketPlayFabRequest) == 0x000008, "Wrong alignment on FGetServerBackfillTicketPlayFabRequest");
static_assert(sizeof(FGetServerBackfillTicketPlayFabRequest) == 0x000040, "Wrong size on FGetServerBackfillTicketPlayFabRequest");
static_assert(offsetof(FGetServerBackfillTicketPlayFabRequest, QueueName) == 0x000020, "Member 'FGetServerBackfillTicketPlayFabRequest::QueueName' has a wrong offset!");
static_assert(offsetof(FGetServerBackfillTicketPlayFabRequest, TicketId) == 0x000030, "Member 'FGetServerBackfillTicketPlayFabRequest::TicketId' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.CancelMatchmakingTicketPlayFabRequest
// 0x0010 (0x0030 - 0x0020)
struct FCancelMatchmakingTicketPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 QueueName;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCancelMatchmakingTicketPlayFabRequest) == 0x000008, "Wrong alignment on FCancelMatchmakingTicketPlayFabRequest");
static_assert(sizeof(FCancelMatchmakingTicketPlayFabRequest) == 0x000030, "Wrong size on FCancelMatchmakingTicketPlayFabRequest");
static_assert(offsetof(FCancelMatchmakingTicketPlayFabRequest, QueueName) == 0x000020, "Member 'FCancelMatchmakingTicketPlayFabRequest::QueueName' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetMatchmakingMatchPlayFabRequest
// 0x0020 (0x0040 - 0x0020)
struct FGetMatchmakingMatchPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 QueueName;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchId;                                           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetMatchmakingMatchPlayFabRequest) == 0x000008, "Wrong alignment on FGetMatchmakingMatchPlayFabRequest");
static_assert(sizeof(FGetMatchmakingMatchPlayFabRequest) == 0x000040, "Wrong size on FGetMatchmakingMatchPlayFabRequest");
static_assert(offsetof(FGetMatchmakingMatchPlayFabRequest, QueueName) == 0x000020, "Member 'FGetMatchmakingMatchPlayFabRequest::QueueName' has a wrong offset!");
static_assert(offsetof(FGetMatchmakingMatchPlayFabRequest, MatchId) == 0x000030, "Member 'FGetMatchmakingMatchPlayFabRequest::MatchId' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetMatchmakingTicketPlayFabRequest
// 0x0020 (0x0040 - 0x0020)
struct FGetMatchmakingTicketPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 QueueName;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TicketId;                                          // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetMatchmakingTicketPlayFabRequest) == 0x000008, "Wrong alignment on FGetMatchmakingTicketPlayFabRequest");
static_assert(sizeof(FGetMatchmakingTicketPlayFabRequest) == 0x000040, "Wrong size on FGetMatchmakingTicketPlayFabRequest");
static_assert(offsetof(FGetMatchmakingTicketPlayFabRequest, QueueName) == 0x000020, "Member 'FGetMatchmakingTicketPlayFabRequest::QueueName' has a wrong offset!");
static_assert(offsetof(FGetMatchmakingTicketPlayFabRequest, TicketId) == 0x000030, "Member 'FGetMatchmakingTicketPlayFabRequest::TicketId' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.JoinMatchmakingTicketPlayFabRequest
// 0x0088 (0x00A8 - 0x0020)
struct FJoinMatchmakingTicketPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 QueueName;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TicketId;                                          // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabMatchmakingAttributes          Attributes;                                        // 0x0040(0x0068)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJoinMatchmakingTicketPlayFabRequest) == 0x000008, "Wrong alignment on FJoinMatchmakingTicketPlayFabRequest");
static_assert(sizeof(FJoinMatchmakingTicketPlayFabRequest) == 0x0000A8, "Wrong size on FJoinMatchmakingTicketPlayFabRequest");
static_assert(offsetof(FJoinMatchmakingTicketPlayFabRequest, QueueName) == 0x000020, "Member 'FJoinMatchmakingTicketPlayFabRequest::QueueName' has a wrong offset!");
static_assert(offsetof(FJoinMatchmakingTicketPlayFabRequest, TicketId) == 0x000030, "Member 'FJoinMatchmakingTicketPlayFabRequest::TicketId' has a wrong offset!");
static_assert(offsetof(FJoinMatchmakingTicketPlayFabRequest, Attributes) == 0x000040, "Member 'FJoinMatchmakingTicketPlayFabRequest::Attributes' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.CreateMatchmakingTicketPlayFabRequest
// 0x0090 (0x00B0 - 0x0020)
struct FCreateMatchmakingTicketPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 QueueName;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabMatchmakingAttributes          Attributes;                                        // 0x0030(0x0068)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Members;                                           // 0x0098(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Timeout;                                           // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCreateMatchmakingTicketPlayFabRequest) == 0x000008, "Wrong alignment on FCreateMatchmakingTicketPlayFabRequest");
static_assert(sizeof(FCreateMatchmakingTicketPlayFabRequest) == 0x0000B0, "Wrong size on FCreateMatchmakingTicketPlayFabRequest");
static_assert(offsetof(FCreateMatchmakingTicketPlayFabRequest, QueueName) == 0x000020, "Member 'FCreateMatchmakingTicketPlayFabRequest::QueueName' has a wrong offset!");
static_assert(offsetof(FCreateMatchmakingTicketPlayFabRequest, Attributes) == 0x000030, "Member 'FCreateMatchmakingTicketPlayFabRequest::Attributes' has a wrong offset!");
static_assert(offsetof(FCreateMatchmakingTicketPlayFabRequest, Members) == 0x000098, "Member 'FCreateMatchmakingTicketPlayFabRequest::Members' has a wrong offset!");
static_assert(offsetof(FCreateMatchmakingTicketPlayFabRequest, Timeout) == 0x0000A8, "Member 'FCreateMatchmakingTicketPlayFabRequest::Timeout' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.ReportMatchEndedPlayFabRequest
// 0x0028 (0x0048 - 0x0020)
struct FReportMatchEndedPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 Region;                                            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Map;                                               // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSeconds;                                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinnerTeam;                                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReportMatchEndedPlayFabRequest) == 0x000008, "Wrong alignment on FReportMatchEndedPlayFabRequest");
static_assert(sizeof(FReportMatchEndedPlayFabRequest) == 0x000048, "Wrong size on FReportMatchEndedPlayFabRequest");
static_assert(offsetof(FReportMatchEndedPlayFabRequest, Region) == 0x000020, "Member 'FReportMatchEndedPlayFabRequest::Region' has a wrong offset!");
static_assert(offsetof(FReportMatchEndedPlayFabRequest, Map) == 0x000030, "Member 'FReportMatchEndedPlayFabRequest::Map' has a wrong offset!");
static_assert(offsetof(FReportMatchEndedPlayFabRequest, PlayerSeconds) == 0x000040, "Member 'FReportMatchEndedPlayFabRequest::PlayerSeconds' has a wrong offset!");
static_assert(offsetof(FReportMatchEndedPlayFabRequest, WinnerTeam) == 0x000044, "Member 'FReportMatchEndedPlayFabRequest::WinnerTeam' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.ReportTimeLeftPlayFabRequest
// 0x0028 (0x0048 - 0x0020)
struct FReportTimeLeftPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 Map;                                               // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerCount;                                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 TimeLeft;                                          // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReportTimeLeftPlayFabRequest) == 0x000008, "Wrong alignment on FReportTimeLeftPlayFabRequest");
static_assert(sizeof(FReportTimeLeftPlayFabRequest) == 0x000048, "Wrong size on FReportTimeLeftPlayFabRequest");
static_assert(offsetof(FReportTimeLeftPlayFabRequest, Map) == 0x000020, "Member 'FReportTimeLeftPlayFabRequest::Map' has a wrong offset!");
static_assert(offsetof(FReportTimeLeftPlayFabRequest, PlayerCount) == 0x000030, "Member 'FReportTimeLeftPlayFabRequest::PlayerCount' has a wrong offset!");
static_assert(offsetof(FReportTimeLeftPlayFabRequest, TimeLeft) == 0x000038, "Member 'FReportTimeLeftPlayFabRequest::TimeLeft' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.PlayFabPlayerData
// 0x0018 (0x0018 - 0x0000)
struct FPlayFabPlayerData final
{
public:
	bool                                          bImportedInventory;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPlayFabMatch>                  Matches;                                           // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayFabPlayerData) == 0x000008, "Wrong alignment on FPlayFabPlayerData");
static_assert(sizeof(FPlayFabPlayerData) == 0x000018, "Wrong size on FPlayFabPlayerData");
static_assert(offsetof(FPlayFabPlayerData, bImportedInventory) == 0x000000, "Member 'FPlayFabPlayerData::bImportedInventory' has a wrong offset!");
static_assert(offsetof(FPlayFabPlayerData, Matches) == 0x000008, "Member 'FPlayFabPlayerData::Matches' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.ClearRestrictionPlayFabRequest
// 0x0018 (0x0038 - 0x0020)
struct FClearRestrictionPlayFabRequest : public FPlayFabRequest
{
public:
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayFabRestriction                           Restriction;                                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClearRestrictionPlayFabRequest) == 0x000008, "Wrong alignment on FClearRestrictionPlayFabRequest");
static_assert(sizeof(FClearRestrictionPlayFabRequest) == 0x000038, "Wrong size on FClearRestrictionPlayFabRequest");
static_assert(offsetof(FClearRestrictionPlayFabRequest, PlayFabId) == 0x000020, "Member 'FClearRestrictionPlayFabRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FClearRestrictionPlayFabRequest, Restriction) == 0x000030, "Member 'FClearRestrictionPlayFabRequest::Restriction' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.ApplyRestrictionPlayFabRequest
// 0x0008 (0x0040 - 0x0038)
struct FApplyRestrictionPlayFabRequest final : public FClearRestrictionPlayFabRequest
{
public:
	int64                                         EndTimestamp;                                      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FApplyRestrictionPlayFabRequest) == 0x000008, "Wrong alignment on FApplyRestrictionPlayFabRequest");
static_assert(sizeof(FApplyRestrictionPlayFabRequest) == 0x000040, "Wrong size on FApplyRestrictionPlayFabRequest");
static_assert(offsetof(FApplyRestrictionPlayFabRequest, EndTimestamp) == 0x000038, "Member 'FApplyRestrictionPlayFabRequest::EndTimestamp' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.EndMatchPlayFabRequest
// 0x0060 (0x0080 - 0x0020)
struct FEndMatchPlayFabRequest final : public FPlayFabRequest
{
public:
	struct FPlayFabMatch                          Match;                                             // 0x0020(0x0060)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMatchPlayFabRequest) == 0x000008, "Wrong alignment on FEndMatchPlayFabRequest");
static_assert(sizeof(FEndMatchPlayFabRequest) == 0x000080, "Wrong size on FEndMatchPlayFabRequest");
static_assert(offsetof(FEndMatchPlayFabRequest, Match) == 0x000020, "Member 'FEndMatchPlayFabRequest::Match' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.StartMatchPlayFabRequest
// 0x0060 (0x0080 - 0x0020)
struct FStartMatchPlayFabRequest final : public FPlayFabRequest
{
public:
	struct FPlayFabMatch                          Match;                                             // 0x0020(0x0060)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FStartMatchPlayFabRequest) == 0x000008, "Wrong alignment on FStartMatchPlayFabRequest");
static_assert(sizeof(FStartMatchPlayFabRequest) == 0x000080, "Wrong size on FStartMatchPlayFabRequest");
static_assert(offsetof(FStartMatchPlayFabRequest, Match) == 0x000020, "Member 'FStartMatchPlayFabRequest::Match' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.RefreshGameServerPlayFabRequest
// 0x0000 (0x0020 - 0x0020)
struct FRefreshGameServerPlayFabRequest final : public FPlayFabRequest
{
};
static_assert(alignof(FRefreshGameServerPlayFabRequest) == 0x000008, "Wrong alignment on FRefreshGameServerPlayFabRequest");
static_assert(sizeof(FRefreshGameServerPlayFabRequest) == 0x000020, "Wrong size on FRefreshGameServerPlayFabRequest");

// ScriptStruct MordhauOnlineSubsystem.UpdateGameServerPlayFabRequest
// 0x00E8 (0x0108 - 0x0020)
struct FUpdateGameServerPlayFabRequest : public FPlayFabRequest
{
public:
	class FString                                 ServerName;                                        // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QueueName;                                         // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Players;                                           // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReservedSlots;                                     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegionName;                                        // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeaconListenPort;                                  // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowJoin;                                        // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPasswordProtected;                              // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsConsoleServer;                                  // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNoviceServer;                                   // 0x008F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visibility;                                        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Mods;                                              // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Pings;                                             // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Location;                                          // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OperatingSystem;                                   // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HostId;                                            // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InstanceId;                                        // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerKey;                                         // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUpdateGameServerPlayFabRequest) == 0x000008, "Wrong alignment on FUpdateGameServerPlayFabRequest");
static_assert(sizeof(FUpdateGameServerPlayFabRequest) == 0x000108, "Wrong size on FUpdateGameServerPlayFabRequest");
static_assert(offsetof(FUpdateGameServerPlayFabRequest, ServerName) == 0x000020, "Member 'FUpdateGameServerPlayFabRequest::ServerName' has a wrong offset!");
static_assert(offsetof(FUpdateGameServerPlayFabRequest, MapName) == 0x000030, "Member 'FUpdateGameServerPlayFabRequest::MapName' has a wrong offset!");
static_assert(offsetof(FUpdateGameServerPlayFabRequest, GameMode) == 0x000040, "Member 'FUpdateGameServerPlayFabRequest::GameMode' has a wrong offset!");
static_assert(offsetof(FUpdateGameServerPlayFabRequest, QueueName) == 0x000050, "Member 'FUpdateGameServerPlayFabRequest::QueueName' has a wrong offset!");
static_assert(offsetof(FUpdateGameServerPlayFabRequest, Players) == 0x000060, "Member 'FUpdateGameServerPlayFabRequest::Players' has a wrong offset!");
static_assert(offsetof(FUpdateGameServerPlayFabRequest, MaxPlayers) == 0x000070, "Member 'FUpdateGameServerPlayFabRequest::MaxPlayers' has a wrong offset!");
static_assert(offsetof(FUpdateGameServerPlayFabRequest, ReservedSlots) == 0x000074, "Member 'FUpdateGameServerPlayFabRequest::ReservedSlots' has a wrong offset!");
static_assert(offsetof(FUpdateGameServerPlayFabRequest, RegionName) == 0x000078, "Member 'FUpdateGameServerPlayFabRequest::RegionName' has a wrong offset!");
static_assert(offsetof(FUpdateGameServerPlayFabRequest, BeaconListenPort) == 0x000088, "Member 'FUpdateGameServerPlayFabRequest::BeaconListenPort' has a wrong offset!");
static_assert(offsetof(FUpdateGameServerPlayFabRequest, bAllowJoin) == 0x00008C, "Member 'FUpdateGameServerPlayFabRequest::bAllowJoin' has a wrong offset!");
static_assert(offsetof(FUpdateGameServerPlayFabRequest, bIsPasswordProtected) == 0x00008D, "Member 'FUpdateGameServerPlayFabRequest::bIsPasswordProtected' has a wrong offset!");
static_assert(offsetof(FUpdateGameServerPlayFabRequest, bIsConsoleServer) == 0x00008E, "Member 'FUpdateGameServerPlayFabRequest::bIsConsoleServer' has a wrong offset!");
static_assert(offsetof(FUpdateGameServerPlayFabRequest, bIsNoviceServer) == 0x00008F, "Member 'FUpdateGameServerPlayFabRequest::bIsNoviceServer' has a wrong offset!");
static_assert(offsetof(FUpdateGameServerPlayFabRequest, Visibility) == 0x000090, "Member 'FUpdateGameServerPlayFabRequest::Visibility' has a wrong offset!");
static_assert(offsetof(FUpdateGameServerPlayFabRequest, Mods) == 0x000098, "Member 'FUpdateGameServerPlayFabRequest::Mods' has a wrong offset!");
static_assert(offsetof(FUpdateGameServerPlayFabRequest, Pings) == 0x0000A8, "Member 'FUpdateGameServerPlayFabRequest::Pings' has a wrong offset!");
static_assert(offsetof(FUpdateGameServerPlayFabRequest, Location) == 0x0000B8, "Member 'FUpdateGameServerPlayFabRequest::Location' has a wrong offset!");
static_assert(offsetof(FUpdateGameServerPlayFabRequest, OperatingSystem) == 0x0000C8, "Member 'FUpdateGameServerPlayFabRequest::OperatingSystem' has a wrong offset!");
static_assert(offsetof(FUpdateGameServerPlayFabRequest, HostId) == 0x0000D8, "Member 'FUpdateGameServerPlayFabRequest::HostId' has a wrong offset!");
static_assert(offsetof(FUpdateGameServerPlayFabRequest, InstanceId) == 0x0000E8, "Member 'FUpdateGameServerPlayFabRequest::InstanceId' has a wrong offset!");
static_assert(offsetof(FUpdateGameServerPlayFabRequest, ServerKey) == 0x0000F8, "Member 'FUpdateGameServerPlayFabRequest::ServerKey' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.RegisterGameServerPlayFabRequest
// 0x0010 (0x0118 - 0x0108)
struct FRegisterGameServerPlayFabRequest final : public FUpdateGameServerPlayFabRequest
{
public:
	class FString                                 PublicIP;                                          // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRegisterGameServerPlayFabRequest) == 0x000008, "Wrong alignment on FRegisterGameServerPlayFabRequest");
static_assert(sizeof(FRegisterGameServerPlayFabRequest) == 0x000118, "Wrong size on FRegisterGameServerPlayFabRequest");
static_assert(offsetof(FRegisterGameServerPlayFabRequest, PublicIP) == 0x000108, "Member 'FRegisterGameServerPlayFabRequest::PublicIP' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.AbortMatchPlayFabRequest
// 0x0020 (0x0040 - 0x0020)
struct FAbortMatchPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 ServerId;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchId;                                           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbortMatchPlayFabRequest) == 0x000008, "Wrong alignment on FAbortMatchPlayFabRequest");
static_assert(sizeof(FAbortMatchPlayFabRequest) == 0x000040, "Wrong size on FAbortMatchPlayFabRequest");
static_assert(offsetof(FAbortMatchPlayFabRequest, ServerId) == 0x000020, "Member 'FAbortMatchPlayFabRequest::ServerId' has a wrong offset!");
static_assert(offsetof(FAbortMatchPlayFabRequest, MatchId) == 0x000030, "Member 'FAbortMatchPlayFabRequest::MatchId' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetMatchRewardsPlayFabRequest
// 0x0020 (0x0040 - 0x0020)
struct FGetMatchRewardsPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 ServerId;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchId;                                           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetMatchRewardsPlayFabRequest) == 0x000008, "Wrong alignment on FGetMatchRewardsPlayFabRequest");
static_assert(sizeof(FGetMatchRewardsPlayFabRequest) == 0x000040, "Wrong size on FGetMatchRewardsPlayFabRequest");
static_assert(offsetof(FGetMatchRewardsPlayFabRequest, ServerId) == 0x000020, "Member 'FGetMatchRewardsPlayFabRequest::ServerId' has a wrong offset!");
static_assert(offsetof(FGetMatchRewardsPlayFabRequest, MatchId) == 0x000030, "Member 'FGetMatchRewardsPlayFabRequest::MatchId' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetLeaderboardPlayFabRequest
// 0x0010 (0x0030 - 0x0020)
struct FGetLeaderboardPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 LeaderboardName;                                   // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetLeaderboardPlayFabRequest) == 0x000008, "Wrong alignment on FGetLeaderboardPlayFabRequest");
static_assert(sizeof(FGetLeaderboardPlayFabRequest) == 0x000030, "Wrong size on FGetLeaderboardPlayFabRequest");
static_assert(offsetof(FGetLeaderboardPlayFabRequest, LeaderboardName) == 0x000020, "Member 'FGetLeaderboardPlayFabRequest::LeaderboardName' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetServerInfoPlayFabRequest
// 0x0010 (0x0030 - 0x0020)
struct FGetServerInfoPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 ServerId;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetServerInfoPlayFabRequest) == 0x000008, "Wrong alignment on FGetServerInfoPlayFabRequest");
static_assert(sizeof(FGetServerInfoPlayFabRequest) == 0x000030, "Wrong size on FGetServerInfoPlayFabRequest");
static_assert(offsetof(FGetServerInfoPlayFabRequest, ServerId) == 0x000020, "Member 'FGetServerInfoPlayFabRequest::ServerId' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetGameServersPlayFabRequest
// 0x00A0 (0x00C0 - 0x0020)
struct FGetGameServersPlayFabRequest final : public FPlayFabRequest
{
public:
	TMap<class FString, class FString>            IncludesFilter;                                    // 0x0020(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ExcludesFilter;                                    // 0x0070(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetGameServersPlayFabRequest) == 0x000008, "Wrong alignment on FGetGameServersPlayFabRequest");
static_assert(sizeof(FGetGameServersPlayFabRequest) == 0x0000C0, "Wrong size on FGetGameServersPlayFabRequest");
static_assert(offsetof(FGetGameServersPlayFabRequest, IncludesFilter) == 0x000020, "Member 'FGetGameServersPlayFabRequest::IncludesFilter' has a wrong offset!");
static_assert(offsetof(FGetGameServersPlayFabRequest, ExcludesFilter) == 0x000070, "Member 'FGetGameServersPlayFabRequest::ExcludesFilter' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GrantItemsPlayFabRequest
// 0x0010 (0x0030 - 0x0020)
struct FGrantItemsPlayFabRequest final : public FPlayFabRequest
{
public:
	TArray<class FString>                         ItemIds;                                           // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGrantItemsPlayFabRequest) == 0x000008, "Wrong alignment on FGrantItemsPlayFabRequest");
static_assert(sizeof(FGrantItemsPlayFabRequest) == 0x000030, "Wrong size on FGrantItemsPlayFabRequest");
static_assert(offsetof(FGrantItemsPlayFabRequest, ItemIds) == 0x000020, "Member 'FGrantItemsPlayFabRequest::ItemIds' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.UnlockItemsPlayFabRequest
// 0x0010 (0x0030 - 0x0020)
struct FUnlockItemsPlayFabRequest final : public FPlayFabRequest
{
public:
	TArray<class FString>                         ItemIds;                                           // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnlockItemsPlayFabRequest) == 0x000008, "Wrong alignment on FUnlockItemsPlayFabRequest");
static_assert(sizeof(FUnlockItemsPlayFabRequest) == 0x000030, "Wrong size on FUnlockItemsPlayFabRequest");
static_assert(offsetof(FUnlockItemsPlayFabRequest, ItemIds) == 0x000020, "Member 'FUnlockItemsPlayFabRequest::ItemIds' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.ImportInventoryPlayFabRequest
// 0x0000 (0x0020 - 0x0020)
struct FImportInventoryPlayFabRequest final : public FPlayFabRequest
{
};
static_assert(alignof(FImportInventoryPlayFabRequest) == 0x000008, "Wrong alignment on FImportInventoryPlayFabRequest");
static_assert(sizeof(FImportInventoryPlayFabRequest) == 0x000020, "Wrong size on FImportInventoryPlayFabRequest");

// ScriptStruct MordhauOnlineSubsystem.GetTitlePlayersFromMasterPlayerAccountIdsPlayFabRequest
// 0x0020 (0x0040 - 0x0020)
struct FGetTitlePlayersFromMasterPlayerAccountIdsPlayFabRequest final : public FPlayFabRequest
{
public:
	TArray<class FString>                         MasterAccountIDs;                                  // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGetTitlePlayersFromMasterPlayerAccountIdsPlayFabRequest) == 0x000008, "Wrong alignment on FGetTitlePlayersFromMasterPlayerAccountIdsPlayFabRequest");
static_assert(sizeof(FGetTitlePlayersFromMasterPlayerAccountIdsPlayFabRequest) == 0x000040, "Wrong size on FGetTitlePlayersFromMasterPlayerAccountIdsPlayFabRequest");
static_assert(offsetof(FGetTitlePlayersFromMasterPlayerAccountIdsPlayFabRequest, MasterAccountIDs) == 0x000020, "Member 'FGetTitlePlayersFromMasterPlayerAccountIdsPlayFabRequest::MasterAccountIDs' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetPlayFabIDsFromPSNAccountIDsPlayFabRequest
// 0x0010 (0x0030 - 0x0020)
struct FGetPlayFabIDsFromPSNAccountIDsPlayFabRequest final : public FPlayFabRequest
{
public:
	TArray<class FString>                         AccountIDs;                                        // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetPlayFabIDsFromPSNAccountIDsPlayFabRequest) == 0x000008, "Wrong alignment on FGetPlayFabIDsFromPSNAccountIDsPlayFabRequest");
static_assert(sizeof(FGetPlayFabIDsFromPSNAccountIDsPlayFabRequest) == 0x000030, "Wrong size on FGetPlayFabIDsFromPSNAccountIDsPlayFabRequest");
static_assert(offsetof(FGetPlayFabIDsFromPSNAccountIDsPlayFabRequest, AccountIDs) == 0x000020, "Member 'FGetPlayFabIDsFromPSNAccountIDsPlayFabRequest::AccountIDs' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetPlayFabIDsFromXboxLiveIDsPlayFabRequest
// 0x0010 (0x0030 - 0x0020)
struct FGetPlayFabIDsFromXboxLiveIDsPlayFabRequest final : public FPlayFabRequest
{
public:
	TArray<class FString>                         XboxLiveIDs;                                       // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetPlayFabIDsFromXboxLiveIDsPlayFabRequest) == 0x000008, "Wrong alignment on FGetPlayFabIDsFromXboxLiveIDsPlayFabRequest");
static_assert(sizeof(FGetPlayFabIDsFromXboxLiveIDsPlayFabRequest) == 0x000030, "Wrong size on FGetPlayFabIDsFromXboxLiveIDsPlayFabRequest");
static_assert(offsetof(FGetPlayFabIDsFromXboxLiveIDsPlayFabRequest, XboxLiveIDs) == 0x000020, "Member 'FGetPlayFabIDsFromXboxLiveIDsPlayFabRequest::XboxLiveIDs' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetPlayFabIDsFromEpicIDsPlayFabRequest
// 0x0010 (0x0030 - 0x0020)
struct FGetPlayFabIDsFromEpicIDsPlayFabRequest final : public FPlayFabRequest
{
public:
	TArray<class FString>                         AccountIDs;                                        // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetPlayFabIDsFromEpicIDsPlayFabRequest) == 0x000008, "Wrong alignment on FGetPlayFabIDsFromEpicIDsPlayFabRequest");
static_assert(sizeof(FGetPlayFabIDsFromEpicIDsPlayFabRequest) == 0x000030, "Wrong size on FGetPlayFabIDsFromEpicIDsPlayFabRequest");
static_assert(offsetof(FGetPlayFabIDsFromEpicIDsPlayFabRequest, AccountIDs) == 0x000020, "Member 'FGetPlayFabIDsFromEpicIDsPlayFabRequest::AccountIDs' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetPlayFabIDsFromSteamIDsPlayFabRequest
// 0x0010 (0x0030 - 0x0020)
struct FGetPlayFabIDsFromSteamIDsPlayFabRequest final : public FPlayFabRequest
{
public:
	TArray<class FString>                         SteamIDs;                                          // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetPlayFabIDsFromSteamIDsPlayFabRequest) == 0x000008, "Wrong alignment on FGetPlayFabIDsFromSteamIDsPlayFabRequest");
static_assert(sizeof(FGetPlayFabIDsFromSteamIDsPlayFabRequest) == 0x000030, "Wrong size on FGetPlayFabIDsFromSteamIDsPlayFabRequest");
static_assert(offsetof(FGetPlayFabIDsFromSteamIDsPlayFabRequest, SteamIDs) == 0x000020, "Member 'FGetPlayFabIDsFromSteamIDsPlayFabRequest::SteamIDs' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetCatalogItemsPlayFabRequest
// 0x0000 (0x0020 - 0x0020)
struct FGetCatalogItemsPlayFabRequest final : public FPlayFabRequest
{
};
static_assert(alignof(FGetCatalogItemsPlayFabRequest) == 0x000008, "Wrong alignment on FGetCatalogItemsPlayFabRequest");
static_assert(sizeof(FGetCatalogItemsPlayFabRequest) == 0x000020, "Wrong size on FGetCatalogItemsPlayFabRequest");

// ScriptStruct MordhauOnlineSubsystem.UpdatePlayerStatsPlayFabRequest
// 0x0060 (0x0080 - 0x0020)
struct FUpdatePlayerStatsPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FPlayFabStat>      Stats;                                             // 0x0030(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FUpdatePlayerStatsPlayFabRequest) == 0x000008, "Wrong alignment on FUpdatePlayerStatsPlayFabRequest");
static_assert(sizeof(FUpdatePlayerStatsPlayFabRequest) == 0x000080, "Wrong size on FUpdatePlayerStatsPlayFabRequest");
static_assert(offsetof(FUpdatePlayerStatsPlayFabRequest, PlayFabId) == 0x000020, "Member 'FUpdatePlayerStatsPlayFabRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FUpdatePlayerStatsPlayFabRequest, Stats) == 0x000030, "Member 'FUpdatePlayerStatsPlayFabRequest::Stats' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetPlayerStatsPlayFabRequest
// 0x0010 (0x0030 - 0x0020)
struct FGetPlayerStatsPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetPlayerStatsPlayFabRequest) == 0x000008, "Wrong alignment on FGetPlayerStatsPlayFabRequest");
static_assert(sizeof(FGetPlayerStatsPlayFabRequest) == 0x000030, "Wrong size on FGetPlayerStatsPlayFabRequest");
static_assert(offsetof(FGetPlayerStatsPlayFabRequest, PlayFabId) == 0x000020, "Member 'FGetPlayerStatsPlayFabRequest::PlayFabId' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetPlayerCombinedInfoPlayFabRequest
// 0x0020 (0x0040 - 0x0020)
struct FGetPlayerCombinedInfoPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGetPlayerCombinedInfoPlayFabRequest) == 0x000008, "Wrong alignment on FGetPlayerCombinedInfoPlayFabRequest");
static_assert(sizeof(FGetPlayerCombinedInfoPlayFabRequest) == 0x000040, "Wrong size on FGetPlayerCombinedInfoPlayFabRequest");
static_assert(offsetof(FGetPlayerCombinedInfoPlayFabRequest, PlayFabId) == 0x000020, "Member 'FGetPlayerCombinedInfoPlayFabRequest::PlayFabId' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetPlayerPlayFabRequest
// 0x0010 (0x0030 - 0x0020)
struct FGetPlayerPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetPlayerPlayFabRequest) == 0x000008, "Wrong alignment on FGetPlayerPlayFabRequest");
static_assert(sizeof(FGetPlayerPlayFabRequest) == 0x000030, "Wrong size on FGetPlayerPlayFabRequest");
static_assert(offsetof(FGetPlayerPlayFabRequest, PlayFabId) == 0x000020, "Member 'FGetPlayerPlayFabRequest::PlayFabId' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetPlayerInventoryPlayFabRequest
// 0x0010 (0x0030 - 0x0020)
struct FGetPlayerInventoryPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetPlayerInventoryPlayFabRequest) == 0x000008, "Wrong alignment on FGetPlayerInventoryPlayFabRequest");
static_assert(sizeof(FGetPlayerInventoryPlayFabRequest) == 0x000030, "Wrong size on FGetPlayerInventoryPlayFabRequest");
static_assert(offsetof(FGetPlayerInventoryPlayFabRequest, PlayFabId) == 0x000020, "Member 'FGetPlayerInventoryPlayFabRequest::PlayFabId' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetPlayerDataPlayFabRequest
// 0x0010 (0x0030 - 0x0020)
struct FGetPlayerDataPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetPlayerDataPlayFabRequest) == 0x000008, "Wrong alignment on FGetPlayerDataPlayFabRequest");
static_assert(sizeof(FGetPlayerDataPlayFabRequest) == 0x000030, "Wrong size on FGetPlayerDataPlayFabRequest");
static_assert(offsetof(FGetPlayerDataPlayFabRequest, PlayFabId) == 0x000020, "Member 'FGetPlayerDataPlayFabRequest::PlayFabId' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetTitleInternalDataPlayFabRequest
// 0x0010 (0x0030 - 0x0020)
struct FGetTitleInternalDataPlayFabRequest final : public FPlayFabRequest
{
public:
	TArray<class FString>                         Keys;                                              // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetTitleInternalDataPlayFabRequest) == 0x000008, "Wrong alignment on FGetTitleInternalDataPlayFabRequest");
static_assert(sizeof(FGetTitleInternalDataPlayFabRequest) == 0x000030, "Wrong size on FGetTitleInternalDataPlayFabRequest");
static_assert(offsetof(FGetTitleInternalDataPlayFabRequest, Keys) == 0x000020, "Member 'FGetTitleInternalDataPlayFabRequest::Keys' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GetTitleDataPlayFabRequest
// 0x0000 (0x0020 - 0x0020)
struct FGetTitleDataPlayFabRequest final : public FPlayFabRequest
{
};
static_assert(alignof(FGetTitleDataPlayFabRequest) == 0x000008, "Wrong alignment on FGetTitleDataPlayFabRequest");
static_assert(sizeof(FGetTitleDataPlayFabRequest) == 0x000020, "Wrong size on FGetTitleDataPlayFabRequest");

// ScriptStruct MordhauOnlineSubsystem.UpdateTimeDriftPlayFabRequest
// 0x0000 (0x0020 - 0x0020)
struct FUpdateTimeDriftPlayFabRequest final : public FPlayFabRequest
{
};
static_assert(alignof(FUpdateTimeDriftPlayFabRequest) == 0x000008, "Wrong alignment on FUpdateTimeDriftPlayFabRequest");
static_assert(sizeof(FUpdateTimeDriftPlayFabRequest) == 0x000020, "Wrong size on FUpdateTimeDriftPlayFabRequest");

// ScriptStruct MordhauOnlineSubsystem.LoginWithServerPlayFabRequest
// 0x0010 (0x0030 - 0x0020)
struct FLoginWithServerPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 UniqueId;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoginWithServerPlayFabRequest) == 0x000008, "Wrong alignment on FLoginWithServerPlayFabRequest");
static_assert(sizeof(FLoginWithServerPlayFabRequest) == 0x000030, "Wrong size on FLoginWithServerPlayFabRequest");
static_assert(offsetof(FLoginWithServerPlayFabRequest, UniqueId) == 0x000020, "Member 'FLoginWithServerPlayFabRequest::UniqueId' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.LoginWithEpicPlayFabRequest
// 0x0010 (0x0030 - 0x0020)
struct FLoginWithEpicPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 AuthToken;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoginWithEpicPlayFabRequest) == 0x000008, "Wrong alignment on FLoginWithEpicPlayFabRequest");
static_assert(sizeof(FLoginWithEpicPlayFabRequest) == 0x000030, "Wrong size on FLoginWithEpicPlayFabRequest");
static_assert(offsetof(FLoginWithEpicPlayFabRequest, AuthToken) == 0x000020, "Member 'FLoginWithEpicPlayFabRequest::AuthToken' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.LoginWithSteamPlayFabRequest
// 0x0010 (0x0030 - 0x0020)
struct FLoginWithSteamPlayFabRequest final : public FPlayFabRequest
{
public:
	class FString                                 AuthTicket;                                        // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoginWithSteamPlayFabRequest) == 0x000008, "Wrong alignment on FLoginWithSteamPlayFabRequest");
static_assert(sizeof(FLoginWithSteamPlayFabRequest) == 0x000030, "Wrong size on FLoginWithSteamPlayFabRequest");
static_assert(offsetof(FLoginWithSteamPlayFabRequest, AuthTicket) == 0x000020, "Member 'FLoginWithSteamPlayFabRequest::AuthTicket' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.GroupInvite
// 0x0048 (0x0048 - 0x0000)
struct FGroupInvite final
{
public:
	class FString                                 GroupID;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleId;                                            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InvitedById;                                       // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InvitedId;                                         // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Expires;                                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupInvite) == 0x000008, "Wrong alignment on FGroupInvite");
static_assert(sizeof(FGroupInvite) == 0x000048, "Wrong size on FGroupInvite");
static_assert(offsetof(FGroupInvite, GroupID) == 0x000000, "Member 'FGroupInvite::GroupID' has a wrong offset!");
static_assert(offsetof(FGroupInvite, RoleId) == 0x000010, "Member 'FGroupInvite::RoleId' has a wrong offset!");
static_assert(offsetof(FGroupInvite, InvitedById) == 0x000020, "Member 'FGroupInvite::InvitedById' has a wrong offset!");
static_assert(offsetof(FGroupInvite, InvitedId) == 0x000030, "Member 'FGroupInvite::InvitedId' has a wrong offset!");
static_assert(offsetof(FGroupInvite, Expires) == 0x000040, "Member 'FGroupInvite::Expires' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.PlayFabBackfillTicket
// 0x00A0 (0x00A0 - 0x0000)
struct FPlayFabBackfillTicket final
{
public:
	class FString                                 QueueName;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TicketId;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchId;                                           // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayFabTicketStatus                          Status;                                            // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CreationTime;                                      // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timeout;                                           // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPlayFabMatchmakingPlayer>      Members;                                           // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 CancellationReason;                                // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabServerDetails                  ServerDetails;                                     // 0x0068(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayFabBackfillTicket) == 0x000008, "Wrong alignment on FPlayFabBackfillTicket");
static_assert(sizeof(FPlayFabBackfillTicket) == 0x0000A0, "Wrong size on FPlayFabBackfillTicket");
static_assert(offsetof(FPlayFabBackfillTicket, QueueName) == 0x000000, "Member 'FPlayFabBackfillTicket::QueueName' has a wrong offset!");
static_assert(offsetof(FPlayFabBackfillTicket, TicketId) == 0x000010, "Member 'FPlayFabBackfillTicket::TicketId' has a wrong offset!");
static_assert(offsetof(FPlayFabBackfillTicket, MatchId) == 0x000020, "Member 'FPlayFabBackfillTicket::MatchId' has a wrong offset!");
static_assert(offsetof(FPlayFabBackfillTicket, Status) == 0x000030, "Member 'FPlayFabBackfillTicket::Status' has a wrong offset!");
static_assert(offsetof(FPlayFabBackfillTicket, CreationTime) == 0x000038, "Member 'FPlayFabBackfillTicket::CreationTime' has a wrong offset!");
static_assert(offsetof(FPlayFabBackfillTicket, Timeout) == 0x000040, "Member 'FPlayFabBackfillTicket::Timeout' has a wrong offset!");
static_assert(offsetof(FPlayFabBackfillTicket, Members) == 0x000048, "Member 'FPlayFabBackfillTicket::Members' has a wrong offset!");
static_assert(offsetof(FPlayFabBackfillTicket, CancellationReason) == 0x000058, "Member 'FPlayFabBackfillTicket::CancellationReason' has a wrong offset!");
static_assert(offsetof(FPlayFabBackfillTicket, ServerDetails) == 0x000068, "Member 'FPlayFabBackfillTicket::ServerDetails' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.Reward
// 0x0018 (0x0018 - 0x0000)
struct FReward final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XP;                                                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReward) == 0x000008, "Wrong alignment on FReward");
static_assert(sizeof(FReward) == 0x000018, "Wrong size on FReward");
static_assert(offsetof(FReward, PlayFabId) == 0x000000, "Member 'FReward::PlayFabId' has a wrong offset!");
static_assert(offsetof(FReward, Gold) == 0x000010, "Member 'FReward::Gold' has a wrong offset!");
static_assert(offsetof(FReward, XP) == 0x000014, "Member 'FReward::XP' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.PlayFabServerInfo
// 0x0028 (0x0028 - 0x0000)
struct FPlayFabServerInfo final
{
public:
	class FString                                 ServerId;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOfficial;                                        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Mods;                                              // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayFabServerInfo) == 0x000008, "Wrong alignment on FPlayFabServerInfo");
static_assert(sizeof(FPlayFabServerInfo) == 0x000028, "Wrong size on FPlayFabServerInfo");
static_assert(offsetof(FPlayFabServerInfo, ServerId) == 0x000000, "Member 'FPlayFabServerInfo::ServerId' has a wrong offset!");
static_assert(offsetof(FPlayFabServerInfo, IsOfficial) == 0x000010, "Member 'FPlayFabServerInfo::IsOfficial' has a wrong offset!");
static_assert(offsetof(FPlayFabServerInfo, Mods) == 0x000018, "Member 'FPlayFabServerInfo::Mods' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.PlayFabStats
// 0x0050 (0x0050 - 0x0000)
struct FPlayFabStats final
{
public:
	TMap<class FString, struct FPlayFabStat>      Stats;                                             // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayFabStats) == 0x000008, "Wrong alignment on FPlayFabStats");
static_assert(sizeof(FPlayFabStats) == 0x000050, "Wrong size on FPlayFabStats");
static_assert(offsetof(FPlayFabStats, Stats) == 0x000000, "Member 'FPlayFabStats::Stats' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.PlayFabTitleInternalData
// 0x0060 (0x0060 - 0x0000)
struct FPlayFabTitleInternalData final
{
public:
	TArray<class FString>                         Admins;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x50];                                      // 0x0010(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayFabTitleInternalData) == 0x000008, "Wrong alignment on FPlayFabTitleInternalData");
static_assert(sizeof(FPlayFabTitleInternalData) == 0x000060, "Wrong size on FPlayFabTitleInternalData");
static_assert(offsetof(FPlayFabTitleInternalData, Admins) == 0x000000, "Member 'FPlayFabTitleInternalData::Admins' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.PlayFabGroupEntity
// 0x0000 (0x0020 - 0x0020)
struct FPlayFabGroupEntity final : public FPlayFabEntity
{
};
static_assert(alignof(FPlayFabGroupEntity) == 0x000008, "Wrong alignment on FPlayFabGroupEntity");
static_assert(sizeof(FPlayFabGroupEntity) == 0x000020, "Wrong size on FPlayFabGroupEntity");

// ScriptStruct MordhauOnlineSubsystem.PlayFabGroup
// 0x0068 (0x0068 - 0x0000)
struct FPlayFabGroup final
{
public:
	struct FPlayFabGroupEntity                    Entity;                                            // 0x0000(0x0020)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreationTime;                                      // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdminRoleId;                                       // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MemberRoleId;                                      // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Roles;                                             // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayFabGroup) == 0x000008, "Wrong alignment on FPlayFabGroup");
static_assert(sizeof(FPlayFabGroup) == 0x000068, "Wrong size on FPlayFabGroup");
static_assert(offsetof(FPlayFabGroup, Entity) == 0x000000, "Member 'FPlayFabGroup::Entity' has a wrong offset!");
static_assert(offsetof(FPlayFabGroup, Name) == 0x000020, "Member 'FPlayFabGroup::Name' has a wrong offset!");
static_assert(offsetof(FPlayFabGroup, CreationTime) == 0x000030, "Member 'FPlayFabGroup::CreationTime' has a wrong offset!");
static_assert(offsetof(FPlayFabGroup, AdminRoleId) == 0x000038, "Member 'FPlayFabGroup::AdminRoleId' has a wrong offset!");
static_assert(offsetof(FPlayFabGroup, MemberRoleId) == 0x000048, "Member 'FPlayFabGroup::MemberRoleId' has a wrong offset!");
static_assert(offsetof(FPlayFabGroup, Roles) == 0x000058, "Member 'FPlayFabGroup::Roles' has a wrong offset!");

// ScriptStruct MordhauOnlineSubsystem.PlayFabServer
// 0x0020 (0x0050 - 0x0030)
struct FPlayFabServer final : public FPlayFabProfile
{
public:
	struct FPlayFabEntity                         Entity;                                            // 0x0030(0x0020)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayFabServer) == 0x000008, "Wrong alignment on FPlayFabServer");
static_assert(sizeof(FPlayFabServer) == 0x000050, "Wrong size on FPlayFabServer");
static_assert(offsetof(FPlayFabServer, Entity) == 0x000030, "Member 'FPlayFabServer::Entity' has a wrong offset!");

}

