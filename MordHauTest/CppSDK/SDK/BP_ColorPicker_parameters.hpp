#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ColorPicker

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_ColorPicker.BP_ColorPicker_C.ExecuteUbergraph_BP_ColorPicker
// 0x0040 (0x0040 - 0x0000)
struct BP_ColorPicker_C_ExecuteUbergraph_BP_ColorPicker final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ColorPickerContainer_C*             CallFunc_Create_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_ColorIndex;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Index;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_Array_Get_Item_1;                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_CustomEvent_Color;                          // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_Array_Get_Item_2;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ColorPicker_C_ExecuteUbergraph_BP_ColorPicker) == 0x000008, "Wrong alignment on BP_ColorPicker_C_ExecuteUbergraph_BP_ColorPicker");
static_assert(sizeof(BP_ColorPicker_C_ExecuteUbergraph_BP_ColorPicker) == 0x000040, "Wrong size on BP_ColorPicker_C_ExecuteUbergraph_BP_ColorPicker");
static_assert(offsetof(BP_ColorPicker_C_ExecuteUbergraph_BP_ColorPicker, EntryPoint) == 0x000000, "Member 'BP_ColorPicker_C_ExecuteUbergraph_BP_ColorPicker::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ColorPicker_C_ExecuteUbergraph_BP_ColorPicker, CallFunc_Create_ReturnValue) == 0x000008, "Member 'BP_ColorPicker_C_ExecuteUbergraph_BP_ColorPicker::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ColorPicker_C_ExecuteUbergraph_BP_ColorPicker, K2Node_CustomEvent_ColorIndex) == 0x000010, "Member 'BP_ColorPicker_C_ExecuteUbergraph_BP_ColorPicker::K2Node_CustomEvent_ColorIndex' has a wrong offset!");
static_assert(offsetof(BP_ColorPicker_C_ExecuteUbergraph_BP_ColorPicker, K2Node_CustomEvent_Index) == 0x000014, "Member 'BP_ColorPicker_C_ExecuteUbergraph_BP_ColorPicker::K2Node_CustomEvent_Index' has a wrong offset!");
static_assert(offsetof(BP_ColorPicker_C_ExecuteUbergraph_BP_ColorPicker, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_ColorPicker_C_ExecuteUbergraph_BP_ColorPicker::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ColorPicker_C_ExecuteUbergraph_BP_ColorPicker, CallFunc_Array_Get_Item_1) == 0x000020, "Member 'BP_ColorPicker_C_ExecuteUbergraph_BP_ColorPicker::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_ColorPicker_C_ExecuteUbergraph_BP_ColorPicker, K2Node_CustomEvent_Color) == 0x000028, "Member 'BP_ColorPicker_C_ExecuteUbergraph_BP_ColorPicker::K2Node_CustomEvent_Color' has a wrong offset!");
static_assert(offsetof(BP_ColorPicker_C_ExecuteUbergraph_BP_ColorPicker, CallFunc_Array_Get_Item_2) == 0x000038, "Member 'BP_ColorPicker_C_ExecuteUbergraph_BP_ColorPicker::CallFunc_Array_Get_Item_2' has a wrong offset!");

// Function BP_ColorPicker.BP_ColorPicker_C.UpdatePreviewColor
// 0x0010 (0x0010 - 0x0000)
struct BP_ColorPicker_C_UpdatePreviewColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ColorPicker_C_UpdatePreviewColor) == 0x000004, "Wrong alignment on BP_ColorPicker_C_UpdatePreviewColor");
static_assert(sizeof(BP_ColorPicker_C_UpdatePreviewColor) == 0x000010, "Wrong size on BP_ColorPicker_C_UpdatePreviewColor");
static_assert(offsetof(BP_ColorPicker_C_UpdatePreviewColor, Color) == 0x000000, "Member 'BP_ColorPicker_C_UpdatePreviewColor::Color' has a wrong offset!");

// Function BP_ColorPicker.BP_ColorPicker_C.OnHovered
// 0x0004 (0x0004 - 0x0000)
struct BP_ColorPicker_C_OnHovered final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ColorPicker_C_OnHovered) == 0x000004, "Wrong alignment on BP_ColorPicker_C_OnHovered");
static_assert(sizeof(BP_ColorPicker_C_OnHovered) == 0x000004, "Wrong size on BP_ColorPicker_C_OnHovered");
static_assert(offsetof(BP_ColorPicker_C_OnHovered, Index_0) == 0x000000, "Member 'BP_ColorPicker_C_OnHovered::Index_0' has a wrong offset!");

// Function BP_ColorPicker.BP_ColorPicker_C.OnClicked
// 0x0004 (0x0004 - 0x0000)
struct BP_ColorPicker_C_OnClicked final
{
public:
	int32                                         ColorIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ColorPicker_C_OnClicked) == 0x000004, "Wrong alignment on BP_ColorPicker_C_OnClicked");
static_assert(sizeof(BP_ColorPicker_C_OnClicked) == 0x000004, "Wrong size on BP_ColorPicker_C_OnClicked");
static_assert(offsetof(BP_ColorPicker_C_OnClicked, ColorIndex) == 0x000000, "Member 'BP_ColorPicker_C_OnClicked::ColorIndex' has a wrong offset!");

// Function BP_ColorPicker.BP_ColorPicker_C.SetColors
// 0x0018 (0x0018 - 0x0000)
struct BP_ColorPicker_C_SetColors final
{
public:
	TArray<class UClass*>                         Colors_0;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UClass*                                 CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ColorPicker_C_SetColors) == 0x000008, "Wrong alignment on BP_ColorPicker_C_SetColors");
static_assert(sizeof(BP_ColorPicker_C_SetColors) == 0x000018, "Wrong size on BP_ColorPicker_C_SetColors");
static_assert(offsetof(BP_ColorPicker_C_SetColors, Colors_0) == 0x000000, "Member 'BP_ColorPicker_C_SetColors::Colors_0' has a wrong offset!");
static_assert(offsetof(BP_ColorPicker_C_SetColors, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_ColorPicker_C_SetColors::CallFunc_Array_Get_Item' has a wrong offset!");

// Function BP_ColorPicker.BP_ColorPicker_C.GetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct BP_ColorPicker_C_GetSelectedIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ColorPicker_C_GetSelectedIndex) == 0x000004, "Wrong alignment on BP_ColorPicker_C_GetSelectedIndex");
static_assert(sizeof(BP_ColorPicker_C_GetSelectedIndex) == 0x000004, "Wrong size on BP_ColorPicker_C_GetSelectedIndex");
static_assert(offsetof(BP_ColorPicker_C_GetSelectedIndex, Index_0) == 0x000000, "Member 'BP_ColorPicker_C_GetSelectedIndex::Index_0' has a wrong offset!");

// Function BP_ColorPicker.BP_ColorPicker_C.SetIndex
// 0x0018 (0x0018 - 0x0000)
struct BP_ColorPicker_C_SetIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_Array_Get_Item;                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ColorPicker_C_SetIndex) == 0x000008, "Wrong alignment on BP_ColorPicker_C_SetIndex");
static_assert(sizeof(BP_ColorPicker_C_SetIndex) == 0x000018, "Wrong size on BP_ColorPicker_C_SetIndex");
static_assert(offsetof(BP_ColorPicker_C_SetIndex, Index_0) == 0x000000, "Member 'BP_ColorPicker_C_SetIndex::Index_0' has a wrong offset!");
static_assert(offsetof(BP_ColorPicker_C_SetIndex, CallFunc_Array_Get_Item) == 0x000008, "Member 'BP_ColorPicker_C_SetIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ColorPicker_C_SetIndex, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_ColorPicker_C_SetIndex::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ColorPicker_C_SetIndex, CallFunc_Less_IntInt_ReturnValue) == 0x000014, "Member 'BP_ColorPicker_C_SetIndex::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_ColorPicker.BP_ColorPicker_C.GetSelectedColors
// 0x0010 (0x0010 - 0x0000)
struct BP_ColorPicker_C_GetSelectedColors final
{
public:
	TArray<class UClass*>                         Colors_0;                                          // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BP_ColorPicker_C_GetSelectedColors) == 0x000008, "Wrong alignment on BP_ColorPicker_C_GetSelectedColors");
static_assert(sizeof(BP_ColorPicker_C_GetSelectedColors) == 0x000010, "Wrong size on BP_ColorPicker_C_GetSelectedColors");
static_assert(offsetof(BP_ColorPicker_C_GetSelectedColors, Colors_0) == 0x000000, "Member 'BP_ColorPicker_C_GetSelectedColors::Colors_0' has a wrong offset!");

// Function BP_ColorPicker.BP_ColorPicker_C.SetColorsAndIndex
// 0x0018 (0x0018 - 0x0000)
struct BP_ColorPicker_C_SetColorsAndIndex final
{
public:
	TArray<class UClass*>                         Colors_0;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Index_0;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ColorPicker_C_SetColorsAndIndex) == 0x000008, "Wrong alignment on BP_ColorPicker_C_SetColorsAndIndex");
static_assert(sizeof(BP_ColorPicker_C_SetColorsAndIndex) == 0x000018, "Wrong size on BP_ColorPicker_C_SetColorsAndIndex");
static_assert(offsetof(BP_ColorPicker_C_SetColorsAndIndex, Colors_0) == 0x000000, "Member 'BP_ColorPicker_C_SetColorsAndIndex::Colors_0' has a wrong offset!");
static_assert(offsetof(BP_ColorPicker_C_SetColorsAndIndex, Index_0) == 0x000010, "Member 'BP_ColorPicker_C_SetColorsAndIndex::Index_0' has a wrong offset!");

// Function BP_ColorPicker.BP_ColorPicker_C.CloseColorPicker
// 0x0002 (0x0002 - 0x0000)
struct BP_ColorPicker_C_CloseColorPicker final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ColorPicker_C_CloseColorPicker) == 0x000001, "Wrong alignment on BP_ColorPicker_C_CloseColorPicker");
static_assert(sizeof(BP_ColorPicker_C_CloseColorPicker) == 0x000002, "Wrong size on BP_ColorPicker_C_CloseColorPicker");
static_assert(offsetof(BP_ColorPicker_C_CloseColorPicker, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_ColorPicker_C_CloseColorPicker::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ColorPicker_C_CloseColorPicker, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'BP_ColorPicker_C_CloseColorPicker::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

}

