#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VehicleBallista

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_VehicleBallista.BP_VehicleBallista_C.ExecuteUbergraph_BP_VehicleBallista
// 0x0190 (0x0190 - 0x0000)
struct BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetMesh_ReturnValue;                      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      K2Node_Event_Character_1;                          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMordhauAnimInstance*                   K2Node_Event_AnimInst;                             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTime;                            // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      K2Node_Event_Character;                            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bRotationOnly;                        // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAB_MordhauCharacterAnimation_C*        K2Node_DynamicCast_AsAB_Mordhau_Character_Animation; // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0xF];                                       // 0x00C1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_1;         // 0x00D0(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_2;         // 0x0100(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_TransformDirection_ReturnValue;           // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformDirection_ReturnValue_1;         // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Ballista_C*                         K2Node_DynamicCast_AsBP_Ballista;                  // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista) == 0x000010, "Wrong alignment on BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista");
static_assert(sizeof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista) == 0x000190, "Wrong size on BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, EntryPoint) == 0x000000, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, CallFunc_GetMesh_ReturnValue) == 0x000008, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::CallFunc_GetMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, CallFunc_GetSocketTransform_ReturnValue) == 0x000010, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, CallFunc_GetSocketLocation_ReturnValue) == 0x000040, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, CallFunc_BreakTransform_Location) == 0x00004C, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, CallFunc_BreakTransform_Rotation) == 0x000058, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, CallFunc_BreakTransform_Scale) == 0x000064, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, CallFunc_GetSocketLocation_ReturnValue_1) == 0x000070, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, CallFunc_BreakRotator_Roll) == 0x00007C, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, CallFunc_BreakRotator_Pitch) == 0x000080, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, CallFunc_BreakRotator_Yaw) == 0x000084, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000088, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, K2Node_Event_Character_1) == 0x000090, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::K2Node_Event_Character_1' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, K2Node_Event_AnimInst) == 0x000098, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::K2Node_Event_AnimInst' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, K2Node_Event_DeltaTime) == 0x0000A0, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::K2Node_Event_DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, K2Node_Event_Character) == 0x0000A8, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::K2Node_Event_Character' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, K2Node_Event_DeltaSeconds) == 0x0000B0, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, K2Node_Event_bRotationOnly) == 0x0000B4, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::K2Node_Event_bRotationOnly' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, K2Node_DynamicCast_AsAB_Mordhau_Character_Animation) == 0x0000B8, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::K2Node_DynamicCast_AsAB_Mordhau_Character_Animation' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, K2Node_DynamicCast_bSuccess) == 0x0000C0, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, CallFunc_GetSocketTransform_ReturnValue_1) == 0x0000D0, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::CallFunc_GetSocketTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, CallFunc_GetSocketTransform_ReturnValue_2) == 0x000100, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::CallFunc_GetSocketTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, CallFunc_TransformDirection_ReturnValue) == 0x000130, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::CallFunc_TransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, CallFunc_TransformDirection_ReturnValue_1) == 0x00013C, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::CallFunc_TransformDirection_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000148, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000154, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, CallFunc_MakeRotator_ReturnValue) == 0x000160, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, CallFunc_MapRangeClamped_ReturnValue) == 0x00016C, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000170, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, CallFunc_GetOwner_ReturnValue) == 0x000178, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, K2Node_DynamicCast_AsBP_Ballista) == 0x000180, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::K2Node_DynamicCast_AsBP_Ballista' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista, K2Node_DynamicCast_bSuccess_1) == 0x000188, "Member 'BP_VehicleBallista_C_ExecuteUbergraph_BP_VehicleBallista::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_VehicleBallista.BP_VehicleBallista_C.UpdateFPCameraFor
// 0x0010 (0x0010 - 0x0000)
struct BP_VehicleBallista_C_UpdateFPCameraFor final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRotationOnly;                                     // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VehicleBallista_C_UpdateFPCameraFor) == 0x000008, "Wrong alignment on BP_VehicleBallista_C_UpdateFPCameraFor");
static_assert(sizeof(BP_VehicleBallista_C_UpdateFPCameraFor) == 0x000010, "Wrong size on BP_VehicleBallista_C_UpdateFPCameraFor");
static_assert(offsetof(BP_VehicleBallista_C_UpdateFPCameraFor, Character) == 0x000000, "Member 'BP_VehicleBallista_C_UpdateFPCameraFor::Character' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_UpdateFPCameraFor, DeltaSeconds) == 0x000008, "Member 'BP_VehicleBallista_C_UpdateFPCameraFor::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_UpdateFPCameraFor, bRotationOnly) == 0x00000C, "Member 'BP_VehicleBallista_C_UpdateFPCameraFor::bRotationOnly' has a wrong offset!");

// Function BP_VehicleBallista.BP_VehicleBallista_C.UpdateAnimationFor
// 0x0018 (0x0018 - 0x0000)
struct BP_VehicleBallista_C_UpdateAnimationFor final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMordhauAnimInstance*                   AnimInst;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VehicleBallista_C_UpdateAnimationFor) == 0x000008, "Wrong alignment on BP_VehicleBallista_C_UpdateAnimationFor");
static_assert(sizeof(BP_VehicleBallista_C_UpdateAnimationFor) == 0x000018, "Wrong size on BP_VehicleBallista_C_UpdateAnimationFor");
static_assert(offsetof(BP_VehicleBallista_C_UpdateAnimationFor, Character) == 0x000000, "Member 'BP_VehicleBallista_C_UpdateAnimationFor::Character' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_UpdateAnimationFor, AnimInst) == 0x000008, "Member 'BP_VehicleBallista_C_UpdateAnimationFor::AnimInst' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_UpdateAnimationFor, DeltaTime) == 0x000010, "Member 'BP_VehicleBallista_C_UpdateAnimationFor::DeltaTime' has a wrong offset!");

// Function BP_VehicleBallista.BP_VehicleBallista_C.PostProcessCameraPOV
// 0x02A0 (0x02A0 - 0x0000)
struct BP_VehicleBallista_C_PostProcessCameraPOV final
{
public:
	struct FPOV                                   InPOV;                                             // 0x0000(0x001C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      Character;                                         // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPOV                                   ReturnValue;                                       // 0x0028(0x001C)(Parm, OutParm, ReturnParm, NoDestructor)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetMesh_ReturnValue;                      // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0xF];                                       // 0x0051(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x00A0(0x0030)(IsPlainOldData, NoDestructor)
	class UAB_BallistaFix_C*                      K2Node_DynamicCast_AsAB_Ballista_Fix;              // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_1;         // 0x0110(0x0030)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0150(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x0180(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4[0xC];                                      // 0x01B4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue_1;          // 0x01C0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_215[0x3];                                      // 0x0215(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0230(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x023C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0248(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0254(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x026C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPOV                                   K2Node_MakeStruct_POV;                             // 0x0278(0x001C)(NoDestructor, UObjectWrapper)
};
static_assert(alignof(BP_VehicleBallista_C_PostProcessCameraPOV) == 0x000010, "Wrong alignment on BP_VehicleBallista_C_PostProcessCameraPOV");
static_assert(sizeof(BP_VehicleBallista_C_PostProcessCameraPOV) == 0x0002A0, "Wrong size on BP_VehicleBallista_C_PostProcessCameraPOV");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, InPOV) == 0x000000, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::InPOV' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, Character) == 0x000020, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::Character' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, ReturnValue) == 0x000028, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_GetMesh_ReturnValue) == 0x000048, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_GetMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000060, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_GetAnimInstance_ReturnValue) == 0x000090, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_GetSocketTransform_ReturnValue) == 0x0000A0, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, K2Node_DynamicCast_AsAB_Ballista_Fix) == 0x0000D0, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::K2Node_DynamicCast_AsAB_Ballista_Fix' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, K2Node_DynamicCast_bSuccess) == 0x0000D8, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_BreakTransform_Location) == 0x0000DC, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_BreakTransform_Rotation) == 0x0000E8, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_BreakTransform_Scale) == 0x0000F4, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_BreakRotator_Roll) == 0x000100, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_BreakRotator_Pitch) == 0x000104, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_BreakRotator_Yaw) == 0x000108, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00010C, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_GetSocketTransform_ReturnValue_1) == 0x000110, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_GetSocketTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_MakeRotator_ReturnValue) == 0x000140, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_MakeTransform_ReturnValue) == 0x000150, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_ComposeTransforms_ReturnValue) == 0x000180, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0001B0, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_ComposeTransforms_ReturnValue_1) == 0x0001C0, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_ComposeTransforms_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_BreakTransform_Location_1) == 0x0001F0, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_BreakTransform_Rotation_1) == 0x0001FC, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_BreakTransform_Scale_1) == 0x000208, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, Temp_bool_Variable) == 0x000214, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_GetForwardVector_ReturnValue) == 0x000218, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000224, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000230, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_GetUpVector_ReturnValue) == 0x00023C, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, K2Node_Select_Default) == 0x000248, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000254, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_Add_VectorVector_ReturnValue) == 0x000260, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, CallFunc_Add_VectorVector_ReturnValue_1) == 0x00026C, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VehicleBallista_C_PostProcessCameraPOV, K2Node_MakeStruct_POV) == 0x000278, "Member 'BP_VehicleBallista_C_PostProcessCameraPOV::K2Node_MakeStruct_POV' has a wrong offset!");

}

