#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EmblemDisplayEntry

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function BP_EmblemDisplayEntry.BP_EmblemDisplayEntry_C.ExecuteUbergraph_BP_EmblemDisplayEntry
// 0x0020 (0x0020 - 0x0000)
struct BP_EmblemDisplayEntry_C_ExecuteUbergraph_BP_EmblemDisplayEntry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BP_EmblemDisplayEntry_C_ExecuteUbergraph_BP_EmblemDisplayEntry) == 0x000008, "Wrong alignment on BP_EmblemDisplayEntry_C_ExecuteUbergraph_BP_EmblemDisplayEntry");
static_assert(sizeof(BP_EmblemDisplayEntry_C_ExecuteUbergraph_BP_EmblemDisplayEntry) == 0x000020, "Wrong size on BP_EmblemDisplayEntry_C_ExecuteUbergraph_BP_EmblemDisplayEntry");
static_assert(offsetof(BP_EmblemDisplayEntry_C_ExecuteUbergraph_BP_EmblemDisplayEntry, EntryPoint) == 0x000000, "Member 'BP_EmblemDisplayEntry_C_ExecuteUbergraph_BP_EmblemDisplayEntry::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_EmblemDisplayEntry_C_ExecuteUbergraph_BP_EmblemDisplayEntry, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000008, "Member 'BP_EmblemDisplayEntry_C_ExecuteUbergraph_BP_EmblemDisplayEntry::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EmblemDisplayEntry_C_ExecuteUbergraph_BP_EmblemDisplayEntry, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BP_EmblemDisplayEntry_C_ExecuteUbergraph_BP_EmblemDisplayEntry::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function BP_EmblemDisplayEntry.BP_EmblemDisplayEntry_C.GetSelectedVisibility
// 0x0005 (0x0005 - 0x0000)
struct BP_EmblemDisplayEntry_C_GetSelectedVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EmblemDisplayEntry_C_GetSelectedVisibility) == 0x000001, "Wrong alignment on BP_EmblemDisplayEntry_C_GetSelectedVisibility");
static_assert(sizeof(BP_EmblemDisplayEntry_C_GetSelectedVisibility) == 0x000005, "Wrong size on BP_EmblemDisplayEntry_C_GetSelectedVisibility");
static_assert(offsetof(BP_EmblemDisplayEntry_C_GetSelectedVisibility, ReturnValue) == 0x000000, "Member 'BP_EmblemDisplayEntry_C_GetSelectedVisibility::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EmblemDisplayEntry_C_GetSelectedVisibility, Temp_bool_Variable) == 0x000001, "Member 'BP_EmblemDisplayEntry_C_GetSelectedVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_EmblemDisplayEntry_C_GetSelectedVisibility, Temp_byte_Variable) == 0x000002, "Member 'BP_EmblemDisplayEntry_C_GetSelectedVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_EmblemDisplayEntry_C_GetSelectedVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'BP_EmblemDisplayEntry_C_GetSelectedVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_EmblemDisplayEntry_C_GetSelectedVisibility, K2Node_Select_Default) == 0x000004, "Member 'BP_EmblemDisplayEntry_C_GetSelectedVisibility::K2Node_Select_Default' has a wrong offset!");

// Function BP_EmblemDisplayEntry.BP_EmblemDisplayEntry_C.Get_ic_locked_Visibility_0
// 0x0005 (0x0005 - 0x0000)
struct BP_EmblemDisplayEntry_C_Get_ic_locked_Visibility_0 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EmblemDisplayEntry_C_Get_ic_locked_Visibility_0) == 0x000001, "Wrong alignment on BP_EmblemDisplayEntry_C_Get_ic_locked_Visibility_0");
static_assert(sizeof(BP_EmblemDisplayEntry_C_Get_ic_locked_Visibility_0) == 0x000005, "Wrong size on BP_EmblemDisplayEntry_C_Get_ic_locked_Visibility_0");
static_assert(offsetof(BP_EmblemDisplayEntry_C_Get_ic_locked_Visibility_0, ReturnValue) == 0x000000, "Member 'BP_EmblemDisplayEntry_C_Get_ic_locked_Visibility_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EmblemDisplayEntry_C_Get_ic_locked_Visibility_0, Temp_bool_Variable) == 0x000001, "Member 'BP_EmblemDisplayEntry_C_Get_ic_locked_Visibility_0::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_EmblemDisplayEntry_C_Get_ic_locked_Visibility_0, Temp_byte_Variable) == 0x000002, "Member 'BP_EmblemDisplayEntry_C_Get_ic_locked_Visibility_0::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_EmblemDisplayEntry_C_Get_ic_locked_Visibility_0, Temp_byte_Variable_1) == 0x000003, "Member 'BP_EmblemDisplayEntry_C_Get_ic_locked_Visibility_0::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_EmblemDisplayEntry_C_Get_ic_locked_Visibility_0, K2Node_Select_Default) == 0x000004, "Member 'BP_EmblemDisplayEntry_C_Get_ic_locked_Visibility_0::K2Node_Select_Default' has a wrong offset!");

// Function BP_EmblemDisplayEntry.BP_EmblemDisplayEntry_C.Initialize Emblem
// 0x0050 (0x0050 - 0x0000)
struct BP_EmblemDisplayEntry_C_Initialize_Emblem final
{
public:
	class FString                                 CallFunc_GetPlayFabID_ReturnValue;                 // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UMordhauInventory*                      CallFunc_GetMordhauInventory_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ReferenceParm)
	bool                                          CallFunc_HasItem_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetGoldAndRankUnlockRequirement_Gold;     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGoldAndRankUnlockRequirement_Rank;     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetUnlockTooltipText_TooltipText;         // 0x0038(0x0018)()
};
static_assert(alignof(BP_EmblemDisplayEntry_C_Initialize_Emblem) == 0x000008, "Wrong alignment on BP_EmblemDisplayEntry_C_Initialize_Emblem");
static_assert(sizeof(BP_EmblemDisplayEntry_C_Initialize_Emblem) == 0x000050, "Wrong size on BP_EmblemDisplayEntry_C_Initialize_Emblem");
static_assert(offsetof(BP_EmblemDisplayEntry_C_Initialize_Emblem, CallFunc_GetPlayFabID_ReturnValue) == 0x000000, "Member 'BP_EmblemDisplayEntry_C_Initialize_Emblem::CallFunc_GetPlayFabID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EmblemDisplayEntry_C_Initialize_Emblem, CallFunc_GetMordhauInventory_ReturnValue) == 0x000010, "Member 'BP_EmblemDisplayEntry_C_Initialize_Emblem::CallFunc_GetMordhauInventory_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EmblemDisplayEntry_C_Initialize_Emblem, K2Node_MakeArray_Array) == 0x000018, "Member 'BP_EmblemDisplayEntry_C_Initialize_Emblem::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_EmblemDisplayEntry_C_Initialize_Emblem, CallFunc_HasItem_ReturnValue) == 0x000028, "Member 'BP_EmblemDisplayEntry_C_Initialize_Emblem::CallFunc_HasItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EmblemDisplayEntry_C_Initialize_Emblem, CallFunc_GetGoldAndRankUnlockRequirement_Gold) == 0x00002C, "Member 'BP_EmblemDisplayEntry_C_Initialize_Emblem::CallFunc_GetGoldAndRankUnlockRequirement_Gold' has a wrong offset!");
static_assert(offsetof(BP_EmblemDisplayEntry_C_Initialize_Emblem, CallFunc_GetGoldAndRankUnlockRequirement_Rank) == 0x000030, "Member 'BP_EmblemDisplayEntry_C_Initialize_Emblem::CallFunc_GetGoldAndRankUnlockRequirement_Rank' has a wrong offset!");
static_assert(offsetof(BP_EmblemDisplayEntry_C_Initialize_Emblem, CallFunc_GetUnlockTooltipText_TooltipText) == 0x000038, "Member 'BP_EmblemDisplayEntry_C_Initialize_Emblem::CallFunc_GetUnlockTooltipText_TooltipText' has a wrong offset!");

}

