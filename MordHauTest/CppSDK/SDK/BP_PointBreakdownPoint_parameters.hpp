#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PointBreakdownPoint

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function BP_PointBreakdownPoint.BP_PointBreakdownPoint_C.ExecuteUbergraph_BP_PointBreakdownPoint
// 0x0008 (0x0008 - 0x0000)
struct BP_PointBreakdownPoint_C_ExecuteUbergraph_BP_PointBreakdownPoint final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PointBreakdownPoint_C_ExecuteUbergraph_BP_PointBreakdownPoint) == 0x000004, "Wrong alignment on BP_PointBreakdownPoint_C_ExecuteUbergraph_BP_PointBreakdownPoint");
static_assert(sizeof(BP_PointBreakdownPoint_C_ExecuteUbergraph_BP_PointBreakdownPoint) == 0x000008, "Wrong size on BP_PointBreakdownPoint_C_ExecuteUbergraph_BP_PointBreakdownPoint");
static_assert(offsetof(BP_PointBreakdownPoint_C_ExecuteUbergraph_BP_PointBreakdownPoint, EntryPoint) == 0x000000, "Member 'BP_PointBreakdownPoint_C_ExecuteUbergraph_BP_PointBreakdownPoint::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PointBreakdownPoint_C_ExecuteUbergraph_BP_PointBreakdownPoint, Temp_bool_Variable) == 0x000004, "Member 'BP_PointBreakdownPoint_C_ExecuteUbergraph_BP_PointBreakdownPoint::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PointBreakdownPoint_C_ExecuteUbergraph_BP_PointBreakdownPoint, Temp_byte_Variable) == 0x000005, "Member 'BP_PointBreakdownPoint_C_ExecuteUbergraph_BP_PointBreakdownPoint::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PointBreakdownPoint_C_ExecuteUbergraph_BP_PointBreakdownPoint, Temp_byte_Variable_1) == 0x000006, "Member 'BP_PointBreakdownPoint_C_ExecuteUbergraph_BP_PointBreakdownPoint::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PointBreakdownPoint_C_ExecuteUbergraph_BP_PointBreakdownPoint, K2Node_Select_Default) == 0x000007, "Member 'BP_PointBreakdownPoint_C_ExecuteUbergraph_BP_PointBreakdownPoint::K2Node_Select_Default' has a wrong offset!");

// Function BP_PointBreakdownPoint.BP_PointBreakdownPoint_C.Update
// 0x0018 (0x0018 - 0x0000)
struct BP_PointBreakdownPoint_C_Update final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color_Override;                                    // 0x0004(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PointBreakdownPoint_C_Update) == 0x000004, "Wrong alignment on BP_PointBreakdownPoint_C_Update");
static_assert(sizeof(BP_PointBreakdownPoint_C_Update) == 0x000018, "Wrong size on BP_PointBreakdownPoint_C_Update");
static_assert(offsetof(BP_PointBreakdownPoint_C_Update, Active) == 0x000000, "Member 'BP_PointBreakdownPoint_C_Update::Active' has a wrong offset!");
static_assert(offsetof(BP_PointBreakdownPoint_C_Update, Color_Override) == 0x000004, "Member 'BP_PointBreakdownPoint_C_Update::Color_Override' has a wrong offset!");
static_assert(offsetof(BP_PointBreakdownPoint_C_Update, Temp_bool_Variable) == 0x000014, "Member 'BP_PointBreakdownPoint_C_Update::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PointBreakdownPoint_C_Update, Temp_byte_Variable) == 0x000015, "Member 'BP_PointBreakdownPoint_C_Update::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PointBreakdownPoint_C_Update, Temp_byte_Variable_1) == 0x000016, "Member 'BP_PointBreakdownPoint_C_Update::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PointBreakdownPoint_C_Update, K2Node_Select_Default) == 0x000017, "Member 'BP_PointBreakdownPoint_C_Update::K2Node_Select_Default' has a wrong offset!");

}

