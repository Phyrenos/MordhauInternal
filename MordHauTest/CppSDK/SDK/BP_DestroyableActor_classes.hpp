#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DestroyableActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_MordhauActor_classes.hpp"
#include "Mordhau_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DestroyableActor.BP_DestroyableActor_C
// 0x0100 (0x04E0 - 0x03E0)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_DestroyableActor_C : public ABP_MordhauActor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UDamageableComponent*                   Damageable;                                        // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        DamageAudioOrigin;                                 // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        DamageParticleTransform;                           // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         Health;                                            // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxHealth;                                         // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageFactor;                                      // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReplicatedHealth;                                  // 0x0414(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_415[0x3];                                      // 0x0415(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMesh*>                    DamageMeshes;                                      // 0x0418(0x0010)(Edit, BlueprintVisible)
	TArray<uint8>                                 DamageMeshesHealth;                                // 0x0428(0x0010)(Edit, BlueprintVisible)
	bool                                          DeleteWhenDestroyed;                               // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DisableCollisionWhenDestroyed;                     // 0x0439(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43A[0x6];                                      // 0x043A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        DamageMeshChangeParticle;                          // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnHealth;                                       // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         LastReplicatedHealth;                              // 0x044C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Regenerating;                                      // 0x044D(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_44E[0x2];                                      // 0x044E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RegenTick;                                         // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RegenPerTick;                                      // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CurrentRegeneratingSound;                          // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RegenStartDelay;                                   // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_464[0x4];                                      // 0x0464(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              RegeneratingSoundCue;                              // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StopRegeneratingOnDamage;                          // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         MaxHealthRepairableTo;                             // 0x0471(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoResumeRegenerating;                            // 0x0472(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Repairable;                                        // 0x0473(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         RepairableHealthSegments;                          // 0x0474(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_475[0x3];                                      // 0x0475(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              DamageStateChangeSound;                            // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              RepairStateChangeSound;                            // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         OwningTeam;                                        // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_489[0x3];                                      // 0x0489(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RepairScoreMax;                                    // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageScoreMax;                                    // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DestroysOtherWhenUpgrading;                        // 0x0494(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_495[0x3];                                      // 0x0495(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RepairFactor;                                      // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PerformsUnstuckProcess;                            // 0x049C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49D[0x3];                                      // 0x049D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            LastHealthChangeInstigator;                        // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   DisplayName;                                       // 0x04A8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              OnDeath;                                           // 0x04C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          HideTextDisplayAtNoHealth;                         // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_DestroyableActor(int32 EntryPoint);
	void DetachAfterShortDelay();
	void StartRegenerating();
	void RegenTickEvent();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void UserConstructionScript();
	void UpdateReplicatedHealth();
	void OnRep_ReplicatedHealth();
	void SetHealth(float NewHealth, class AController* Instigator_0);
	void PlayParticle();
	void StopRegenerating();
	void OnReplicatedHealthChanged();
	void OnRep_Regenerating();
	void DetachAttachedProjectiles();
	void OnStoppedRegenerating();
	void OnMeshChanged();
	void OnPlayedParticle(class UParticleSystemComponent* ParticleSystem);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DestroyableActor_C">();
	}
	static class ABP_DestroyableActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DestroyableActor_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_DestroyableActor_C) == 0x000010, "Wrong alignment on ABP_DestroyableActor_C");
static_assert(sizeof(ABP_DestroyableActor_C) == 0x0004E0, "Wrong size on ABP_DestroyableActor_C");
static_assert(offsetof(ABP_DestroyableActor_C, UberGraphFrame) == 0x0003E0, "Member 'ABP_DestroyableActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, Damageable) == 0x0003E8, "Member 'ABP_DestroyableActor_C::Damageable' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, DamageAudioOrigin) == 0x0003F0, "Member 'ABP_DestroyableActor_C::DamageAudioOrigin' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, DamageParticleTransform) == 0x0003F8, "Member 'ABP_DestroyableActor_C::DamageParticleTransform' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, StaticMesh) == 0x000400, "Member 'ABP_DestroyableActor_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, Health) == 0x000408, "Member 'ABP_DestroyableActor_C::Health' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, MaxHealth) == 0x00040C, "Member 'ABP_DestroyableActor_C::MaxHealth' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, DamageFactor) == 0x000410, "Member 'ABP_DestroyableActor_C::DamageFactor' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, ReplicatedHealth) == 0x000414, "Member 'ABP_DestroyableActor_C::ReplicatedHealth' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, DamageMeshes) == 0x000418, "Member 'ABP_DestroyableActor_C::DamageMeshes' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, DamageMeshesHealth) == 0x000428, "Member 'ABP_DestroyableActor_C::DamageMeshesHealth' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, DeleteWhenDestroyed) == 0x000438, "Member 'ABP_DestroyableActor_C::DeleteWhenDestroyed' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, DisableCollisionWhenDestroyed) == 0x000439, "Member 'ABP_DestroyableActor_C::DisableCollisionWhenDestroyed' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, DamageMeshChangeParticle) == 0x000440, "Member 'ABP_DestroyableActor_C::DamageMeshChangeParticle' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, SpawnHealth) == 0x000448, "Member 'ABP_DestroyableActor_C::SpawnHealth' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, LastReplicatedHealth) == 0x00044C, "Member 'ABP_DestroyableActor_C::LastReplicatedHealth' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, Regenerating) == 0x00044D, "Member 'ABP_DestroyableActor_C::Regenerating' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, RegenTick) == 0x000450, "Member 'ABP_DestroyableActor_C::RegenTick' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, RegenPerTick) == 0x000454, "Member 'ABP_DestroyableActor_C::RegenPerTick' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, CurrentRegeneratingSound) == 0x000458, "Member 'ABP_DestroyableActor_C::CurrentRegeneratingSound' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, RegenStartDelay) == 0x000460, "Member 'ABP_DestroyableActor_C::RegenStartDelay' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, RegeneratingSoundCue) == 0x000468, "Member 'ABP_DestroyableActor_C::RegeneratingSoundCue' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, StopRegeneratingOnDamage) == 0x000470, "Member 'ABP_DestroyableActor_C::StopRegeneratingOnDamage' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, MaxHealthRepairableTo) == 0x000471, "Member 'ABP_DestroyableActor_C::MaxHealthRepairableTo' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, AutoResumeRegenerating) == 0x000472, "Member 'ABP_DestroyableActor_C::AutoResumeRegenerating' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, Repairable) == 0x000473, "Member 'ABP_DestroyableActor_C::Repairable' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, RepairableHealthSegments) == 0x000474, "Member 'ABP_DestroyableActor_C::RepairableHealthSegments' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, DamageStateChangeSound) == 0x000478, "Member 'ABP_DestroyableActor_C::DamageStateChangeSound' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, RepairStateChangeSound) == 0x000480, "Member 'ABP_DestroyableActor_C::RepairStateChangeSound' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, OwningTeam) == 0x000488, "Member 'ABP_DestroyableActor_C::OwningTeam' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, RepairScoreMax) == 0x00048C, "Member 'ABP_DestroyableActor_C::RepairScoreMax' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, DamageScoreMax) == 0x000490, "Member 'ABP_DestroyableActor_C::DamageScoreMax' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, DestroysOtherWhenUpgrading) == 0x000494, "Member 'ABP_DestroyableActor_C::DestroysOtherWhenUpgrading' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, RepairFactor) == 0x000498, "Member 'ABP_DestroyableActor_C::RepairFactor' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, PerformsUnstuckProcess) == 0x00049C, "Member 'ABP_DestroyableActor_C::PerformsUnstuckProcess' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, LastHealthChangeInstigator) == 0x0004A0, "Member 'ABP_DestroyableActor_C::LastHealthChangeInstigator' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, DisplayName) == 0x0004A8, "Member 'ABP_DestroyableActor_C::DisplayName' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, OnDeath) == 0x0004C0, "Member 'ABP_DestroyableActor_C::OnDeath' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableActor_C, HideTextDisplayAtNoHealth) == 0x0004D0, "Member 'ABP_DestroyableActor_C::HideTextDisplayAtNoHealth' has a wrong offset!");

}

