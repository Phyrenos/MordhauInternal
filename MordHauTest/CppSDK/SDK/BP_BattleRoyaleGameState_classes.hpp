#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleRoyaleGameState

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_MordhauGameState_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BattleRoyaleGameState.BP_BattleRoyaleGameState_C
// 0x0010 (0x08C8 - 0x08B8)
class ABP_BattleRoyaleGameState_C final : public ABP_MordhauGameState_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_BattleRoyaleGameState_C;         // 0x08B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	float                                         RoundStartDuration;                                // 0x08C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Countdown;                                         // 0x08C4(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         PreviousCountdown;                                 // 0x08C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BattleRoyaleGameState(int32 EntryPoint);
	bool ShouldBlockPawnInput();
	void OnRep_Countdown();
	void IsInGetReady(bool* Result);
	void ReceiveTick(float DeltaSeconds);
	void HandleMatchEndInfo();
	void ShouldHideSpawnInfoText(bool* Hide);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BattleRoyaleGameState_C">();
	}
	static class ABP_BattleRoyaleGameState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BattleRoyaleGameState_C>();
	}
};
static_assert(alignof(ABP_BattleRoyaleGameState_C) == 0x000008, "Wrong alignment on ABP_BattleRoyaleGameState_C");
static_assert(sizeof(ABP_BattleRoyaleGameState_C) == 0x0008C8, "Wrong size on ABP_BattleRoyaleGameState_C");
static_assert(offsetof(ABP_BattleRoyaleGameState_C, UberGraphFrame_BP_BattleRoyaleGameState_C) == 0x0008B8, "Member 'ABP_BattleRoyaleGameState_C::UberGraphFrame_BP_BattleRoyaleGameState_C' has a wrong offset!");
static_assert(offsetof(ABP_BattleRoyaleGameState_C, RoundStartDuration) == 0x0008C0, "Member 'ABP_BattleRoyaleGameState_C::RoundStartDuration' has a wrong offset!");
static_assert(offsetof(ABP_BattleRoyaleGameState_C, Countdown) == 0x0008C4, "Member 'ABP_BattleRoyaleGameState_C::Countdown' has a wrong offset!");
static_assert(offsetof(ABP_BattleRoyaleGameState_C, PreviousCountdown) == 0x0008C5, "Member 'ABP_BattleRoyaleGameState_C::PreviousCountdown' has a wrong offset!");

}

