#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GridItemEntry

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function BP_GridItemEntry.BP_GridItemEntry_C.ExecuteUbergraph_BP_GridItemEntry
// 0x0024 (0x0024 - 0x0000)
struct BP_GridItemEntry_C_ExecuteUbergraph_BP_GridItemEntry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BP_GridItemEntry_C_ExecuteUbergraph_BP_GridItemEntry) == 0x000004, "Wrong alignment on BP_GridItemEntry_C_ExecuteUbergraph_BP_GridItemEntry");
static_assert(sizeof(BP_GridItemEntry_C_ExecuteUbergraph_BP_GridItemEntry) == 0x000024, "Wrong size on BP_GridItemEntry_C_ExecuteUbergraph_BP_GridItemEntry");
static_assert(offsetof(BP_GridItemEntry_C_ExecuteUbergraph_BP_GridItemEntry, EntryPoint) == 0x000000, "Member 'BP_GridItemEntry_C_ExecuteUbergraph_BP_GridItemEntry::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_ExecuteUbergraph_BP_GridItemEntry, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_GridItemEntry_C_ExecuteUbergraph_BP_GridItemEntry::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_ExecuteUbergraph_BP_GridItemEntry, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'BP_GridItemEntry_C_ExecuteUbergraph_BP_GridItemEntry::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function BP_GridItemEntry.BP_GridItemEntry_C.Get_GradientOverlay_Visibility_0
// 0x0005 (0x0005 - 0x0000)
struct BP_GridItemEntry_C_Get_GradientOverlay_Visibility_0 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GridItemEntry_C_Get_GradientOverlay_Visibility_0) == 0x000001, "Wrong alignment on BP_GridItemEntry_C_Get_GradientOverlay_Visibility_0");
static_assert(sizeof(BP_GridItemEntry_C_Get_GradientOverlay_Visibility_0) == 0x000005, "Wrong size on BP_GridItemEntry_C_Get_GradientOverlay_Visibility_0");
static_assert(offsetof(BP_GridItemEntry_C_Get_GradientOverlay_Visibility_0, ReturnValue) == 0x000000, "Member 'BP_GridItemEntry_C_Get_GradientOverlay_Visibility_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Get_GradientOverlay_Visibility_0, Temp_bool_Variable) == 0x000001, "Member 'BP_GridItemEntry_C_Get_GradientOverlay_Visibility_0::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Get_GradientOverlay_Visibility_0, Temp_byte_Variable) == 0x000002, "Member 'BP_GridItemEntry_C_Get_GradientOverlay_Visibility_0::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Get_GradientOverlay_Visibility_0, Temp_byte_Variable_1) == 0x000003, "Member 'BP_GridItemEntry_C_Get_GradientOverlay_Visibility_0::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Get_GradientOverlay_Visibility_0, K2Node_Select_Default) == 0x000004, "Member 'BP_GridItemEntry_C_Get_GradientOverlay_Visibility_0::K2Node_Select_Default' has a wrong offset!");

// Function BP_GridItemEntry.BP_GridItemEntry_C.Initialize Item Entry
// 0x0078 (0x0078 - 0x0000)
struct BP_GridItemEntry_C_Initialize_Item_Entry final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPlayFabID_ReturnValue;                 // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UMordhauInventory*                      CallFunc_GetMordhauInventory_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasItem_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_1;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ReferenceParm)
	class FText                                   CallFunc_GetUnlockTooltipText_TooltipText;         // 0x0058(0x0018)()
	int32                                         CallFunc_GetGoldAndRankUnlockRequirement_Gold;     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGoldAndRankUnlockRequirement_Rank;     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GridItemEntry_C_Initialize_Item_Entry) == 0x000008, "Wrong alignment on BP_GridItemEntry_C_Initialize_Item_Entry");
static_assert(sizeof(BP_GridItemEntry_C_Initialize_Item_Entry) == 0x000078, "Wrong size on BP_GridItemEntry_C_Initialize_Item_Entry");
static_assert(offsetof(BP_GridItemEntry_C_Initialize_Item_Entry, Temp_bool_Variable) == 0x000000, "Member 'BP_GridItemEntry_C_Initialize_Item_Entry::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Initialize_Item_Entry, Temp_byte_Variable) == 0x000001, "Member 'BP_GridItemEntry_C_Initialize_Item_Entry::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Initialize_Item_Entry, Temp_byte_Variable_1) == 0x000002, "Member 'BP_GridItemEntry_C_Initialize_Item_Entry::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Initialize_Item_Entry, Temp_bool_Variable_1) == 0x000003, "Member 'BP_GridItemEntry_C_Initialize_Item_Entry::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Initialize_Item_Entry, Temp_object_Variable) == 0x000008, "Member 'BP_GridItemEntry_C_Initialize_Item_Entry::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Initialize_Item_Entry, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'BP_GridItemEntry_C_Initialize_Item_Entry::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Initialize_Item_Entry, K2Node_Select_Default) == 0x000018, "Member 'BP_GridItemEntry_C_Initialize_Item_Entry::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Initialize_Item_Entry, CallFunc_GetPlayFabID_ReturnValue) == 0x000020, "Member 'BP_GridItemEntry_C_Initialize_Item_Entry::CallFunc_GetPlayFabID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Initialize_Item_Entry, CallFunc_GetMordhauInventory_ReturnValue) == 0x000030, "Member 'BP_GridItemEntry_C_Initialize_Item_Entry::CallFunc_GetMordhauInventory_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Initialize_Item_Entry, CallFunc_HasItem_ReturnValue) == 0x000038, "Member 'BP_GridItemEntry_C_Initialize_Item_Entry::CallFunc_HasItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Initialize_Item_Entry, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'BP_GridItemEntry_C_Initialize_Item_Entry::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Initialize_Item_Entry, K2Node_Select_Default_1) == 0x000040, "Member 'BP_GridItemEntry_C_Initialize_Item_Entry::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Initialize_Item_Entry, K2Node_MakeArray_Array) == 0x000048, "Member 'BP_GridItemEntry_C_Initialize_Item_Entry::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Initialize_Item_Entry, CallFunc_GetUnlockTooltipText_TooltipText) == 0x000058, "Member 'BP_GridItemEntry_C_Initialize_Item_Entry::CallFunc_GetUnlockTooltipText_TooltipText' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Initialize_Item_Entry, CallFunc_GetGoldAndRankUnlockRequirement_Gold) == 0x000070, "Member 'BP_GridItemEntry_C_Initialize_Item_Entry::CallFunc_GetGoldAndRankUnlockRequirement_Gold' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Initialize_Item_Entry, CallFunc_GetGoldAndRankUnlockRequirement_Rank) == 0x000074, "Member 'BP_GridItemEntry_C_Initialize_Item_Entry::CallFunc_GetGoldAndRankUnlockRequirement_Rank' has a wrong offset!");

// Function BP_GridItemEntry.BP_GridItemEntry_C.Get_Image_3_Visibility_0
// 0x0005 (0x0005 - 0x0000)
struct BP_GridItemEntry_C_Get_Image_3_Visibility_0 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GridItemEntry_C_Get_Image_3_Visibility_0) == 0x000001, "Wrong alignment on BP_GridItemEntry_C_Get_Image_3_Visibility_0");
static_assert(sizeof(BP_GridItemEntry_C_Get_Image_3_Visibility_0) == 0x000005, "Wrong size on BP_GridItemEntry_C_Get_Image_3_Visibility_0");
static_assert(offsetof(BP_GridItemEntry_C_Get_Image_3_Visibility_0, ReturnValue) == 0x000000, "Member 'BP_GridItemEntry_C_Get_Image_3_Visibility_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Get_Image_3_Visibility_0, Temp_bool_Variable) == 0x000001, "Member 'BP_GridItemEntry_C_Get_Image_3_Visibility_0::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Get_Image_3_Visibility_0, Temp_byte_Variable) == 0x000002, "Member 'BP_GridItemEntry_C_Get_Image_3_Visibility_0::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Get_Image_3_Visibility_0, Temp_byte_Variable_1) == 0x000003, "Member 'BP_GridItemEntry_C_Get_Image_3_Visibility_0::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Get_Image_3_Visibility_0, K2Node_Select_Default) == 0x000004, "Member 'BP_GridItemEntry_C_Get_Image_3_Visibility_0::K2Node_Select_Default' has a wrong offset!");

// Function BP_GridItemEntry.BP_GridItemEntry_C.Get_Image_ColorAndOpacity_0
// 0x006C (0x006C - 0x0000)
struct BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0 final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHovered_ReturnValue;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x005C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0) == 0x000004, "Wrong alignment on BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0");
static_assert(sizeof(BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0) == 0x00006C, "Wrong size on BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0");
static_assert(offsetof(BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0, ReturnValue) == 0x000000, "Member 'BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0, Temp_bool_Variable) == 0x000010, "Member 'BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0, Temp_struct_Variable) == 0x000014, "Member 'BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0, Temp_struct_Variable_1) == 0x000024, "Member 'BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0, Temp_bool_Variable_1) == 0x000034, "Member 'BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0, Temp_struct_Variable_2) == 0x000038, "Member 'BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0, CallFunc_IsHovered_ReturnValue) == 0x000048, "Member 'BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0::CallFunc_IsHovered_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0, K2Node_Select_Default) == 0x00004C, "Member 'BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0, K2Node_Select_Default_1) == 0x00005C, "Member 'BP_GridItemEntry_C_Get_Image_ColorAndOpacity_0::K2Node_Select_Default_1' has a wrong offset!");

}

