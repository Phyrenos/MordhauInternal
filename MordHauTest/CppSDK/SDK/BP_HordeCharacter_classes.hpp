#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HordeCharacter

#include "Basic.hpp"

#include "BP_BattleRoyaleCharacter_classes.hpp"
#include "Engine_structs.hpp"
#include "Mordhau_structs.hpp"
#include "E_HordeSkill_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HordeCharacter.BP_HordeCharacter_C
// 0x0070 (0x1380 - 0x1310)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_HordeCharacter_C : public ABP_BattleRoyaleCharacter_C
{
public:
	uint8                                         Pad_1301[0x7];                                     // 0x1301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_HordeCharacter_C;                // 0x1308(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	bool                                          AlreadyGaveDefaults;                               // 0x1310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1311[0x7];                                     // 0x1311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReplicatedSkills;                                  // 0x1318(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	bool                                          LastAttackBypassesParry;                           // 0x1328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsImmortal;                                        // 0x1329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_132A[0x6];                                     // 0x132A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AMordhauAIController*>           VanishedFor;                                       // 0x1330(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         Special;                                           // 0x1340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         DivineFavorCounter;                                // 0x1344(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          NewHorde;                                          // 0x1345(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         RevivedCount;                                      // 0x1346(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1347[0x1];                                     // 0x1347(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OriginalReceivedDamageModifier;                    // 0x1348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastAbilityStartTime;                              // 0x134C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastAbilityDuration;                               // 0x1350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TauntDuration;                                     // 0x1354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxWalkSpeedOverride;                              // 0x1358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealthOnKillOverride;                              // 0x135C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SuperSprintModifierOverride;                       // 0x1360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreTauntDamageReceivedModifier;                    // 0x1364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HordePlayerGrave_C*                 SpawnedGrave;                                      // 0x1368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 PlayerGraveClass;                                  // 0x1370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_HordeCharacter(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void UndoTauntDamageModifier();
	void RequestVolley(const struct FVector& Location);
	void MaintenanceTick();
	void RegenerationTick();
	void ReceiveDestroyed();
	void Unvanish();
	void TriggerImmortality();
	void OnAttackStarted();
	void OnBlockedMelee(const struct FHitResult& HitResult, class AMordhauCharacter* Attacker);
	void OnPickedUp(class AMordhauEquipment* Eq);
	void OnKilled(class AController* EventInstigator);
	void OnArmorReplicated(EWearableSlot Slot);
	void OnRep_ReplicatedSkills();
	void GetSkill(E_HordeSkill Skill, uint8* Level, float* PercentA, float* PercentB, int32* IntegerA, float* TimeA);
	void ApplySkills();
	void RoundEnded();
	void GetSkillFloat(E_HordeSkill Skill, float* Value, float* PercentA, float* PercentB, int32* IntegerA, float* TimeA);
	void ModifyOutgoingDamage(class AActor* Receiver, EMordhauDamageType DamageType, struct FHitResult& HitInfo, class AActor* Agent, float InDamage, float* OutDamage);
	void ApplySkillsToEquipment(class AMordhauEquipment* Equip);
	float ModifyDamage(float DamageAmount, const struct FMordhauDamageInfo& DamageInfo, class AController* EventInstigator);
	void BeginHookshot();
	void BeginShockwave();
	void Stage2Hookshot();
	void Stage2Shockwave();
	void BeginTaunt();
	void Stage2Taunt();
	void BeginDivineFavor();
	void Stage2DivineFavor();
	void OnDied(float Angle, EMordhauDamageType Type, uint8 SubType, class FName bone, const struct FVector& Point, class AActor* Source, class AActor* Agent);
	void ReceiveBeginPlay();
	void BeginImmortality();
	void Stage2Immortality();
	void BeginVanish();
	void Stage2Vanish();
	void DoSpecialAbility(bool* Success);
	void SpecialCooldown(float Duration);
	void OnKilledEnemy(class ABP_HordeEnemy_C* Enemy);
	void AwardHealthOnKillToTeammates();
	void OnRep_DivineFavorCounter();
	void SaveEquipmentToPlayerState();
	void RememberStartAbilityTime(float Duration, float* OutDuration);
	void FindVolleyTarget(const struct FVector& AimLocation, const struct FRotator& AimRotation, bool* Success, struct FVector* Location);
	void SpawnArmorPiece(class UClass* WearablePickupClass);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HordeCharacter_C">();
	}
	static class ABP_HordeCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HordeCharacter_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_HordeCharacter_C) == 0x000010, "Wrong alignment on ABP_HordeCharacter_C");
static_assert(sizeof(ABP_HordeCharacter_C) == 0x001380, "Wrong size on ABP_HordeCharacter_C");
static_assert(offsetof(ABP_HordeCharacter_C, UberGraphFrame_BP_HordeCharacter_C) == 0x001308, "Member 'ABP_HordeCharacter_C::UberGraphFrame_BP_HordeCharacter_C' has a wrong offset!");
static_assert(offsetof(ABP_HordeCharacter_C, AlreadyGaveDefaults) == 0x001310, "Member 'ABP_HordeCharacter_C::AlreadyGaveDefaults' has a wrong offset!");
static_assert(offsetof(ABP_HordeCharacter_C, ReplicatedSkills) == 0x001318, "Member 'ABP_HordeCharacter_C::ReplicatedSkills' has a wrong offset!");
static_assert(offsetof(ABP_HordeCharacter_C, LastAttackBypassesParry) == 0x001328, "Member 'ABP_HordeCharacter_C::LastAttackBypassesParry' has a wrong offset!");
static_assert(offsetof(ABP_HordeCharacter_C, IsImmortal) == 0x001329, "Member 'ABP_HordeCharacter_C::IsImmortal' has a wrong offset!");
static_assert(offsetof(ABP_HordeCharacter_C, VanishedFor) == 0x001330, "Member 'ABP_HordeCharacter_C::VanishedFor' has a wrong offset!");
static_assert(offsetof(ABP_HordeCharacter_C, Special) == 0x001340, "Member 'ABP_HordeCharacter_C::Special' has a wrong offset!");
static_assert(offsetof(ABP_HordeCharacter_C, DivineFavorCounter) == 0x001344, "Member 'ABP_HordeCharacter_C::DivineFavorCounter' has a wrong offset!");
static_assert(offsetof(ABP_HordeCharacter_C, NewHorde) == 0x001345, "Member 'ABP_HordeCharacter_C::NewHorde' has a wrong offset!");
static_assert(offsetof(ABP_HordeCharacter_C, RevivedCount) == 0x001346, "Member 'ABP_HordeCharacter_C::RevivedCount' has a wrong offset!");
static_assert(offsetof(ABP_HordeCharacter_C, OriginalReceivedDamageModifier) == 0x001348, "Member 'ABP_HordeCharacter_C::OriginalReceivedDamageModifier' has a wrong offset!");
static_assert(offsetof(ABP_HordeCharacter_C, LastAbilityStartTime) == 0x00134C, "Member 'ABP_HordeCharacter_C::LastAbilityStartTime' has a wrong offset!");
static_assert(offsetof(ABP_HordeCharacter_C, LastAbilityDuration) == 0x001350, "Member 'ABP_HordeCharacter_C::LastAbilityDuration' has a wrong offset!");
static_assert(offsetof(ABP_HordeCharacter_C, TauntDuration) == 0x001354, "Member 'ABP_HordeCharacter_C::TauntDuration' has a wrong offset!");
static_assert(offsetof(ABP_HordeCharacter_C, MaxWalkSpeedOverride) == 0x001358, "Member 'ABP_HordeCharacter_C::MaxWalkSpeedOverride' has a wrong offset!");
static_assert(offsetof(ABP_HordeCharacter_C, HealthOnKillOverride) == 0x00135C, "Member 'ABP_HordeCharacter_C::HealthOnKillOverride' has a wrong offset!");
static_assert(offsetof(ABP_HordeCharacter_C, SuperSprintModifierOverride) == 0x001360, "Member 'ABP_HordeCharacter_C::SuperSprintModifierOverride' has a wrong offset!");
static_assert(offsetof(ABP_HordeCharacter_C, PreTauntDamageReceivedModifier) == 0x001364, "Member 'ABP_HordeCharacter_C::PreTauntDamageReceivedModifier' has a wrong offset!");
static_assert(offsetof(ABP_HordeCharacter_C, SpawnedGrave) == 0x001368, "Member 'ABP_HordeCharacter_C::SpawnedGrave' has a wrong offset!");
static_assert(offsetof(ABP_HordeCharacter_C, PlayerGraveClass) == 0x001370, "Member 'ABP_HordeCharacter_C::PlayerGraveClass' has a wrong offset!");

}

