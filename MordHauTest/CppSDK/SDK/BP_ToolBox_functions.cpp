#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ToolBox

#include "Basic.hpp"

#include "BP_ToolBox_classes.hpp"
#include "BP_ToolBox_parameters.hpp"


namespace SDK
{

// Function BP_ToolBox.BP_ToolBox_C.ExecuteUbergraph_BP_ToolBox
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ToolBox_C::ExecuteUbergraph_BP_ToolBox(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "ExecuteUbergraph_BP_ToolBox");

	Params::BP_ToolBox_C_ExecuteUbergraph_BP_ToolBox Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ToolBox.BP_ToolBox_C.OnUnbindEventToPlaceablesUpdate
// (BlueprintCallable, BlueprintEvent)

void ABP_ToolBox_C::OnUnbindEventToPlaceablesUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "OnUnbindEventToPlaceablesUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ToolBox.BP_ToolBox_C.EventOnPlaceablesUpdate
// (BlueprintCallable, BlueprintEvent)

void ABP_ToolBox_C::EventOnPlaceablesUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "EventOnPlaceablesUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ToolBox.BP_ToolBox_C.OnBindEventToPlaceablesUpdate
// (BlueprintCallable, BlueprintEvent)

void ABP_ToolBox_C::OnBindEventToPlaceablesUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "OnBindEventToPlaceablesUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ToolBox.BP_ToolBox_C.K2_OnBecomeViewTarget
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*                PC                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ToolBox_C::K2_OnBecomeViewTarget(class APlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "K2_OnBecomeViewTarget");

	Params::BP_ToolBox_C_K2_OnBecomeViewTarget Parms{};

	Parms.PC = PC;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ToolBox.BP_ToolBox_C.BndEvt__BuildingSystem_K2Node_ComponentBoundEvent_1_OnMeshPreviewDestroyed__DelegateSignature
// (BlueprintEvent)

void ABP_ToolBox_C::BndEvt__BuildingSystem_K2Node_ComponentBoundEvent_1_OnMeshPreviewDestroyed__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "BndEvt__BuildingSystem_K2Node_ComponentBoundEvent_1_OnMeshPreviewDestroyed__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ToolBox.BP_ToolBox_C.BndEvt__BuildingSystem_K2Node_ComponentBoundEvent_0_OnMeshPreviewCreated__DelegateSignature
// (BlueprintEvent)

void ABP_ToolBox_C::BndEvt__BuildingSystem_K2Node_ComponentBoundEvent_0_OnMeshPreviewCreated__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "BndEvt__BuildingSystem_K2Node_ComponentBoundEvent_0_OnMeshPreviewCreated__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ToolBox.BP_ToolBox_C.ServerRequestPlant
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// uint8                                   ObjectType_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  AttachTo                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ToolBox_C::ServerRequestPlant(const struct FVector& Location, const struct FRotator& Rotation, uint8 ObjectType_0, class USceneComponent* AttachTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "ServerRequestPlant");

	Params::BP_ToolBox_C_ServerRequestPlant Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.ObjectType_0 = ObjectType_0;
	Parms.AttachTo = AttachTo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ToolBox.BP_ToolBox_C.LocalPlayerLateTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ToolBox_C::LocalPlayerLateTick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "LocalPlayerLateTick");

	Params::BP_ToolBox_C_LocalPlayerLateTick Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ToolBox.BP_ToolBox_C.UpdateEquipmentState
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_ToolBox_C::UpdateEquipmentState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "UpdateEquipmentState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ToolBox.BP_ToolBox_C.OnRequestFire
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMordhauCharacter*                Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_ToolBox_C::OnRequestFire(class AMordhauCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "OnRequestFire");

	Params::BP_ToolBox_C_OnRequestFire Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ToolBox.BP_ToolBox_C.OnRequestModeSwitch
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMordhauCharacter*                Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_ToolBox_C::OnRequestModeSwitch(class AMordhauCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "OnRequestModeSwitch");

	Params::BP_ToolBox_C_OnRequestModeSwitch Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ToolBox.BP_ToolBox_C.RequestPlant
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// uint8                                   ObjectType_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  AttachTo                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ToolBox_C::RequestPlant(const struct FVector& Location, const struct FRotator& Rotation, uint8 ObjectType_0, class USceneComponent* AttachTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "RequestPlant");

	Params::BP_ToolBox_C_RequestPlant Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.ObjectType_0 = ObjectType_0;
	Parms.AttachTo = AttachTo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ToolBox.BP_ToolBox_C.AddSkeletalMeshPreviewIfNone
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMesh*                    SkeletalMesh                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ToolBox_C::AddSkeletalMeshPreviewIfNone(class USkeletalMesh* SkeletalMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "AddSkeletalMeshPreviewIfNone");

	Params::BP_ToolBox_C_AddSkeletalMeshPreviewIfNone Parms{};

	Parms.SkeletalMesh = SkeletalMesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ToolBox.BP_ToolBox_C.AddStaticMeshPreviewIfNone
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ToolBox_C::AddStaticMeshPreviewIfNone(class UStaticMesh* StaticMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "AddStaticMeshPreviewIfNone");

	Params::BP_ToolBox_C_AddStaticMeshPreviewIfNone Parms{};

	Parms.StaticMesh = StaticMesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ToolBox.BP_ToolBox_C.DestroyMeshPreview
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ToolBox_C::DestroyMeshPreview()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "DestroyMeshPreview");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ToolBox.BP_ToolBox_C.SetupMeshPreview
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ToolBox_C::SetupMeshPreview()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "SetupMeshPreview");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ToolBox.BP_ToolBox_C.CycleObjectType
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ToolBox_C::CycleObjectType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "CycleObjectType");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ToolBox.BP_ToolBox_C.ValidateSpotWithBuildingSystem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DisplayObjectPreview                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Succeeded                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class USceneComponent*                  AttachToComponent                                      (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ToolBox_C::ValidateSpotWithBuildingSystem(const struct FVector& Offset, bool DisplayObjectPreview, bool* Succeeded, struct FVector* Location, struct FRotator* Rotation, class USceneComponent** AttachToComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "ValidateSpotWithBuildingSystem");

	Params::BP_ToolBox_C_ValidateSpotWithBuildingSystem Parms{};

	Parms.Offset = std::move(Offset);
	Parms.DisplayObjectPreview = DisplayObjectPreview;

	UObject::ProcessEvent(Func, &Parms);

	if (Succeeded != nullptr)
		*Succeeded = Parms.Succeeded;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);

	if (AttachToComponent != nullptr)
		*AttachToComponent = Parms.AttachToComponent;
}


// Function BP_ToolBox.BP_ToolBox_C.GetAmountOfPlacedEquipment
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             PlaceableEquipmentName                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Amount                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ToolBox_C::GetAmountOfPlacedEquipment(class FName PlaceableEquipmentName, int32* Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "GetAmountOfPlacedEquipment");

	Params::BP_ToolBox_C_GetAmountOfPlacedEquipment Parms{};

	Parms.PlaceableEquipmentName = PlaceableEquipmentName;

	UObject::ProcessEvent(Func, &Parms);

	if (Amount != nullptr)
		*Amount = Parms.Amount;
}


// Function BP_ToolBox.BP_ToolBox_C.UpdateEquipmentUI
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ToolBox_C::UpdateEquipmentUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "UpdateEquipmentUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ToolBox.BP_ToolBox_C.OnShowWidget
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ToolBox_C::OnShowWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "OnShowWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ToolBox.BP_ToolBox_C.OnHideWidget
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ToolBox_C::OnHideWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "OnHideWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ToolBox.BP_ToolBox_C.Update Trace Text
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Trace_Placement_Text                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    IgnoreLastText                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Valid_Placement                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ToolBox_C::Update_Trace_Text(const class FText& Trace_Placement_Text, bool IgnoreLastText, bool Valid_Placement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "Update Trace Text");

	Params::BP_ToolBox_C_Update_Trace_Text Parms{};

	Parms.Trace_Placement_Text = std::move(Trace_Placement_Text);
	Parms.IgnoreLastText = IgnoreLastText;
	Parms.Valid_Placement = Valid_Placement;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ToolBox.BP_ToolBox_C.ValidateDeployableSpawnConditions
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ToolBox_C::ValidateDeployableSpawnConditions(int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ToolBox_C", "ValidateDeployableSpawnConditions");

	Params::BP_ToolBox_C_ValidateDeployableSpawnConditions Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}

}

