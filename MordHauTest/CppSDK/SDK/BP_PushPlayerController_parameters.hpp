#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PushPlayerController

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_PushPlayerController.BP_PushPlayerController_C.ExecuteUbergraph_BP_PushPlayerController
// 0x00D0 (0x00D0 - 0x0000)
struct BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauPlayerState*                    K2Node_DynamicCast_AsMordhau_Player_State;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_Event_aPawn;                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      K2Node_DynamicCast_AsMordhau_Character;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLastVehicleTime_ReturnValue;           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      K2Node_Event_Killed_1;                             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_FrontlineGameState_C*               K2Node_DynamicCast_AsBP_Frontline_Game_State;      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchStarted_ReturnValue;              // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PushCharacter_C*                    K2Node_DynamicCast_AsBP_Push_Character;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Percentage;                           // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      K2Node_Event_Killed;                               // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PushCharacter_C*                    K2Node_DynamicCast_AsBP_Push_Character_1;          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PushGameState_C*                    K2Node_DynamicCast_AsBP_Push_Game_State;           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauPlayerState*                    K2Node_DynamicCast_AsMordhau_Player_State_1;       // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_2;               // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PushGameState_C*                    K2Node_DynamicCast_AsBP_Push_Game_State_1;         // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController) == 0x000008, "Wrong alignment on BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController");
static_assert(sizeof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController) == 0x0000D0, "Wrong size on BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, EntryPoint) == 0x000000, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, K2Node_DynamicCast_AsMordhau_Player_State) == 0x000008, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::K2Node_DynamicCast_AsMordhau_Player_State' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, K2Node_Event_aPawn) == 0x000018, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::K2Node_Event_aPawn' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, K2Node_DynamicCast_AsMordhau_Character) == 0x000020, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::K2Node_DynamicCast_AsMordhau_Character' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, CallFunc_Conv_IntToByte_ReturnValue) == 0x000029, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, CallFunc_GetLastVehicleTime_ReturnValue) == 0x00002C, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::CallFunc_GetLastVehicleTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, CallFunc_GetGameState_ReturnValue) == 0x000038, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, K2Node_Event_Killed_1) == 0x000040, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::K2Node_Event_Killed_1' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, K2Node_DynamicCast_AsBP_Frontline_Game_State) == 0x000048, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::K2Node_DynamicCast_AsBP_Frontline_Game_State' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, K2Node_DynamicCast_bSuccess_2) == 0x000050, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, CallFunc_HasMatchStarted_ReturnValue) == 0x000051, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::CallFunc_HasMatchStarted_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, K2Node_DynamicCast_AsBP_Push_Character) == 0x000058, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::K2Node_DynamicCast_AsBP_Push_Character' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, K2Node_DynamicCast_bSuccess_3) == 0x000060, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, K2Node_Event_Percentage) == 0x000064, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::K2Node_Event_Percentage' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, K2Node_Event_Killed) == 0x000068, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::K2Node_Event_Killed' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, K2Node_DynamicCast_AsBP_Push_Character_1) == 0x000070, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::K2Node_DynamicCast_AsBP_Push_Character_1' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, K2Node_DynamicCast_bSuccess_4) == 0x000078, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, CallFunc_MakeLiteralInt_ReturnValue) == 0x00007C, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, CallFunc_GetGameState_ReturnValue_1) == 0x000080, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000088, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, K2Node_DynamicCast_AsBP_Push_Game_State) == 0x000090, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::K2Node_DynamicCast_AsBP_Push_Game_State' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, K2Node_DynamicCast_bSuccess_5) == 0x000098, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, CallFunc_FCeil_ReturnValue) == 0x00009C, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::CallFunc_FCeil_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, CallFunc_Greater_IntInt_ReturnValue) == 0x0000A0, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, CallFunc_BooleanAND_ReturnValue) == 0x0000A1, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, K2Node_DynamicCast_AsMordhau_Player_State_1) == 0x0000A8, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::K2Node_DynamicCast_AsMordhau_Player_State_1' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, K2Node_DynamicCast_bSuccess_6) == 0x0000B0, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, CallFunc_GetGameState_ReturnValue_2) == 0x0000B8, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::CallFunc_GetGameState_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, K2Node_DynamicCast_AsBP_Push_Game_State_1) == 0x0000C0, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::K2Node_DynamicCast_AsBP_Push_Game_State_1' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, K2Node_DynamicCast_bSuccess_7) == 0x0000C8, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x0000C9, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000CA, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000CB, "Member 'BP_PushPlayerController_C_ExecuteUbergraph_BP_PushPlayerController::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");

// Function BP_PushPlayerController.BP_PushPlayerController_C.OnReceivedAssistScore
// 0x0010 (0x0010 - 0x0000)
struct BP_PushPlayerController_C_OnReceivedAssistScore final
{
public:
	float                                         Percentage;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      Killed;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PushPlayerController_C_OnReceivedAssistScore) == 0x000008, "Wrong alignment on BP_PushPlayerController_C_OnReceivedAssistScore");
static_assert(sizeof(BP_PushPlayerController_C_OnReceivedAssistScore) == 0x000010, "Wrong size on BP_PushPlayerController_C_OnReceivedAssistScore");
static_assert(offsetof(BP_PushPlayerController_C_OnReceivedAssistScore, Percentage) == 0x000000, "Member 'BP_PushPlayerController_C_OnReceivedAssistScore::Percentage' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_OnReceivedAssistScore, Killed) == 0x000008, "Member 'BP_PushPlayerController_C_OnReceivedAssistScore::Killed' has a wrong offset!");

// Function BP_PushPlayerController.BP_PushPlayerController_C.OnReceivedKillScore
// 0x0008 (0x0008 - 0x0000)
struct BP_PushPlayerController_C_OnReceivedKillScore final
{
public:
	class AMordhauCharacter*                      Killed;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PushPlayerController_C_OnReceivedKillScore) == 0x000008, "Wrong alignment on BP_PushPlayerController_C_OnReceivedKillScore");
static_assert(sizeof(BP_PushPlayerController_C_OnReceivedKillScore) == 0x000008, "Wrong size on BP_PushPlayerController_C_OnReceivedKillScore");
static_assert(offsetof(BP_PushPlayerController_C_OnReceivedKillScore, Killed) == 0x000000, "Member 'BP_PushPlayerController_C_OnReceivedKillScore::Killed' has a wrong offset!");

// Function BP_PushPlayerController.BP_PushPlayerController_C.ShowCurrentObjective
// 0x00E0 (0x00E0 - 0x0000)
struct BP_PushPlayerController_C_ShowCurrentObjective final
{
public:
	bool                                          PlayHorn;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TextToShow;                                        // 0x0008(0x0018)(Edit, BlueprintVisible)
	uint8                                         Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable_1;                              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable_2;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable_3;                              // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauPlayerState*                    K2Node_DynamicCast_AsMordhau_Player_State;         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PushGameState_C*                    K2Node_DynamicCast_AsBP_Push_Game_State;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AControlPoint*                          CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PushObjectivePoint_C*               K2Node_DynamicCast_AsBP_Push_Objective_Point;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         K2Node_Select_Default;                             // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_1;                           // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0088(0x0018)()
	class AMordhauHUD*                            CallFunc_GetMordhauHUD_ReturnValue;                // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_FrontlineHUD_C*                     K2Node_DynamicCast_AsBP_Frontline_HUD;             // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      K2Node_DynamicCast_AsMordhau_Character;            // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_FrontlineKillObjective_C*           K2Node_DynamicCast_AsBP_Frontline_Kill_Objective;  // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PushPlayerController_C_ShowCurrentObjective) == 0x000008, "Wrong alignment on BP_PushPlayerController_C_ShowCurrentObjective");
static_assert(sizeof(BP_PushPlayerController_C_ShowCurrentObjective) == 0x0000E0, "Wrong size on BP_PushPlayerController_C_ShowCurrentObjective");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, PlayHorn) == 0x000000, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::PlayHorn' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, TextToShow) == 0x000008, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::TextToShow' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, Temp_byte_Variable) == 0x000020, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, Temp_byte_Variable_1) == 0x000021, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, Temp_byte_Variable_2) == 0x000022, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, Temp_byte_Variable_3) == 0x000023, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, Temp_bool_True_if_break_was_hit_Variable) == 0x000024, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, CallFunc_Not_PreBool_ReturnValue) == 0x00002C, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, CallFunc_GetGameState_ReturnValue) == 0x000038, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, K2Node_DynamicCast_AsMordhau_Player_State) == 0x000040, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::K2Node_DynamicCast_AsMordhau_Player_State' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, K2Node_DynamicCast_AsBP_Push_Game_State) == 0x000050, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::K2Node_DynamicCast_AsBP_Push_Game_State' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, CallFunc_Array_Get_Item) == 0x000060, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, K2Node_DynamicCast_AsBP_Push_Objective_Point) == 0x000068, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::K2Node_DynamicCast_AsBP_Push_Objective_Point' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, K2Node_DynamicCast_bSuccess_2) == 0x000070, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, K2Node_Select_Default) == 0x000071, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000074, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000078, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000079, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, CallFunc_Array_Length_ReturnValue) == 0x00007C, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, K2Node_Select_Default_1) == 0x000080, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, CallFunc_Less_IntInt_ReturnValue) == 0x000081, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, CallFunc_BooleanAND_ReturnValue) == 0x000082, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, CallFunc_BooleanAND_ReturnValue_1) == 0x000083, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, CallFunc_MakeLiteralText_ReturnValue) == 0x000088, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, CallFunc_GetMordhauHUD_ReturnValue) == 0x0000A0, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::CallFunc_GetMordhauHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, CallFunc_K2_GetPawn_ReturnValue) == 0x0000A8, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, K2Node_DynamicCast_AsBP_Frontline_HUD) == 0x0000B0, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::K2Node_DynamicCast_AsBP_Frontline_HUD' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, K2Node_DynamicCast_bSuccess_3) == 0x0000B8, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, K2Node_DynamicCast_AsMordhau_Character) == 0x0000C0, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::K2Node_DynamicCast_AsMordhau_Character' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, K2Node_DynamicCast_bSuccess_4) == 0x0000C8, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, K2Node_DynamicCast_AsBP_Frontline_Kill_Objective) == 0x0000D0, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::K2Node_DynamicCast_AsBP_Frontline_Kill_Objective' has a wrong offset!");
static_assert(offsetof(BP_PushPlayerController_C_ShowCurrentObjective, K2Node_DynamicCast_bSuccess_5) == 0x0000D8, "Member 'BP_PushPlayerController_C_ShowCurrentObjective::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");

// Function BP_PushPlayerController.BP_PushPlayerController_C.OnAfterPossess
// 0x0008 (0x0008 - 0x0000)
struct BP_PushPlayerController_C_OnAfterPossess final
{
public:
	class APawn*                                  APawn;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PushPlayerController_C_OnAfterPossess) == 0x000008, "Wrong alignment on BP_PushPlayerController_C_OnAfterPossess");
static_assert(sizeof(BP_PushPlayerController_C_OnAfterPossess) == 0x000008, "Wrong size on BP_PushPlayerController_C_OnAfterPossess");
static_assert(offsetof(BP_PushPlayerController_C_OnAfterPossess, APawn) == 0x000000, "Member 'BP_PushPlayerController_C_OnAfterPossess::APawn' has a wrong offset!");

}

