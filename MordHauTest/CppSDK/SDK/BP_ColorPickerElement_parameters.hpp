#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ColorPickerElement

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_ColorPickerElement.BP_ColorPickerElement_C.ExecuteUbergraph_BP_ColorPickerElement
// 0x0150 (0x0150 - 0x0000)
struct BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x000C(0x0038)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_MouseEvent_1;                         // 0x0048(0x0070)(ConstParm)
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x00B8(0x0070)(ConstParm)
	bool                                          CallFunc_IsSelectedElement_Value;                  // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauPlayerController*               K2Node_DynamicCast_AsMordhau_Player_Controller;    // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement) == 0x000008, "Wrong alignment on BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement");
static_assert(sizeof(BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement) == 0x000150, "Wrong size on BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement");
static_assert(offsetof(BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement, EntryPoint) == 0x000000, "Member 'BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement, CallFunc_MakeLiteralName_ReturnValue) == 0x000004, "Member 'BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement, K2Node_Event_MyGeometry) == 0x00000C, "Member 'BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement, K2Node_Event_MouseEvent_1) == 0x000048, "Member 'BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement::K2Node_Event_MouseEvent_1' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement, K2Node_Event_MouseEvent) == 0x0000B8, "Member 'BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement::K2Node_Event_MouseEvent' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement, CallFunc_IsSelectedElement_Value) == 0x000128, "Member 'BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement::CallFunc_IsSelectedElement_Value' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement, CallFunc_FTrunc_ReturnValue) == 0x00012C, "Member 'BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement, CallFunc_FTrunc_ReturnValue_1) == 0x000130, "Member 'BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement, CallFunc_GetPlayerController_ReturnValue) == 0x000138, "Member 'BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement, K2Node_DynamicCast_AsMordhau_Player_Controller) == 0x000140, "Member 'BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement::K2Node_DynamicCast_AsMordhau_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement, K2Node_DynamicCast_bSuccess) == 0x000148, "Member 'BP_ColorPickerElement_C_ExecuteUbergraph_BP_ColorPickerElement::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_ColorPickerElement.BP_ColorPickerElement_C.OnMouseLeave
// 0x0070 (0x0070 - 0x0000)
struct BP_ColorPickerElement_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_ColorPickerElement_C_OnMouseLeave) == 0x000008, "Wrong alignment on BP_ColorPickerElement_C_OnMouseLeave");
static_assert(sizeof(BP_ColorPickerElement_C_OnMouseLeave) == 0x000070, "Wrong size on BP_ColorPickerElement_C_OnMouseLeave");
static_assert(offsetof(BP_ColorPickerElement_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'BP_ColorPickerElement_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function BP_ColorPickerElement.BP_ColorPickerElement_C.OnMouseEnter
// 0x00A8 (0x00A8 - 0x0000)
struct BP_ColorPickerElement_C_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_ColorPickerElement_C_OnMouseEnter) == 0x000008, "Wrong alignment on BP_ColorPickerElement_C_OnMouseEnter");
static_assert(sizeof(BP_ColorPickerElement_C_OnMouseEnter) == 0x0000A8, "Wrong size on BP_ColorPickerElement_C_OnMouseEnter");
static_assert(offsetof(BP_ColorPickerElement_C_OnMouseEnter, MyGeometry) == 0x000000, "Member 'BP_ColorPickerElement_C_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_OnMouseEnter, MouseEvent) == 0x000038, "Member 'BP_ColorPickerElement_C_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function BP_ColorPickerElement.BP_ColorPickerElement_C.SetColor
// 0x0038 (0x0038 - 0x0000)
struct BP_ColorPickerElement_C_SetColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_ColorPickerElement_C_SetColor) == 0x000004, "Wrong alignment on BP_ColorPickerElement_C_SetColor");
static_assert(sizeof(BP_ColorPickerElement_C_SetColor) == 0x000038, "Wrong size on BP_ColorPickerElement_C_SetColor");
static_assert(offsetof(BP_ColorPickerElement_C_SetColor, Color) == 0x000000, "Member 'BP_ColorPickerElement_C_SetColor::Color' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetColor, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_ColorPickerElement_C_SetColor::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetColor, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000014, "Member 'BP_ColorPickerElement_C_SetColor::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetColor, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_ColorPickerElement_C_SetColor::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetColor, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_ColorPickerElement_C_SetColor::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetColor, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000020, "Member 'BP_ColorPickerElement_C_SetColor::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetColor, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_ColorPickerElement_C_SetColor::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetColor, K2Node_MakeStruct_LinearColor) == 0x000028, "Member 'BP_ColorPickerElement_C_SetColor::K2Node_MakeStruct_LinearColor' has a wrong offset!");

// Function BP_ColorPickerElement.BP_ColorPickerElement_C.SetData
// 0x01A8 (0x01A8 - 0x0000)
struct BP_ColorPickerElement_C_SetData final
{
public:
	int32                                         Param_Index_0;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauInventory*                      CallFunc_GetMordhauInventory_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0010(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0050(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0090(0x0010)(ReferenceParm)
	class FString                                 CallFunc_GetPlayFabID_ReturnValue;                 // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00B0(0x0018)()
	bool                                          CallFunc_IsSelectedElement_Value;                  // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_Array_Get_Item;                           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array_1;                          // 0x00D8(0x0010)(ReferenceParm)
	TArray<int32>                                 K2Node_MakeArray_Array_2;                          // 0x00E8(0x0010)(ReferenceParm)
	int32                                         CallFunc_GetGoldAndRankUnlockRequirement_Gold;     // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGoldAndRankUnlockRequirement_Rank;     // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetUnlockTooltipText_TooltipText;         // 0x0100(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0118(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0130(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_3;                          // 0x0170(0x0010)(ReferenceParm)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0188(0x0018)()
	bool                                          CallFunc_HasItem_ReturnValue;                      // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ColorPickerElement_C_SetData) == 0x000008, "Wrong alignment on BP_ColorPickerElement_C_SetData");
static_assert(sizeof(BP_ColorPickerElement_C_SetData) == 0x0001A8, "Wrong size on BP_ColorPickerElement_C_SetData");
static_assert(offsetof(BP_ColorPickerElement_C_SetData, Param_Index_0) == 0x000000, "Member 'BP_ColorPickerElement_C_SetData::Param_Index_0' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetData, CallFunc_GetMordhauInventory_ReturnValue) == 0x000008, "Member 'BP_ColorPickerElement_C_SetData::CallFunc_GetMordhauInventory_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetData, K2Node_MakeStruct_FormatArgumentData) == 0x000010, "Member 'BP_ColorPickerElement_C_SetData::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetData, K2Node_MakeStruct_FormatArgumentData_1) == 0x000050, "Member 'BP_ColorPickerElement_C_SetData::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetData, K2Node_MakeArray_Array) == 0x000090, "Member 'BP_ColorPickerElement_C_SetData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetData, CallFunc_GetPlayFabID_ReturnValue) == 0x0000A0, "Member 'BP_ColorPickerElement_C_SetData::CallFunc_GetPlayFabID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetData, CallFunc_Format_ReturnValue) == 0x0000B0, "Member 'BP_ColorPickerElement_C_SetData::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetData, CallFunc_IsSelectedElement_Value) == 0x0000C8, "Member 'BP_ColorPickerElement_C_SetData::CallFunc_IsSelectedElement_Value' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetData, CallFunc_Array_Get_Item) == 0x0000D0, "Member 'BP_ColorPickerElement_C_SetData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetData, K2Node_MakeArray_Array_1) == 0x0000D8, "Member 'BP_ColorPickerElement_C_SetData::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetData, K2Node_MakeArray_Array_2) == 0x0000E8, "Member 'BP_ColorPickerElement_C_SetData::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetData, CallFunc_GetGoldAndRankUnlockRequirement_Gold) == 0x0000F8, "Member 'BP_ColorPickerElement_C_SetData::CallFunc_GetGoldAndRankUnlockRequirement_Gold' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetData, CallFunc_GetGoldAndRankUnlockRequirement_Rank) == 0x0000FC, "Member 'BP_ColorPickerElement_C_SetData::CallFunc_GetGoldAndRankUnlockRequirement_Rank' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetData, CallFunc_GetUnlockTooltipText_TooltipText) == 0x000100, "Member 'BP_ColorPickerElement_C_SetData::CallFunc_GetUnlockTooltipText_TooltipText' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetData, CallFunc_Conv_IntToText_ReturnValue) == 0x000118, "Member 'BP_ColorPickerElement_C_SetData::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetData, K2Node_MakeStruct_FormatArgumentData_2) == 0x000130, "Member 'BP_ColorPickerElement_C_SetData::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetData, K2Node_MakeArray_Array_3) == 0x000170, "Member 'BP_ColorPickerElement_C_SetData::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetData, CallFunc_TextIsEmpty_ReturnValue) == 0x000180, "Member 'BP_ColorPickerElement_C_SetData::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetData, CallFunc_Format_ReturnValue_1) == 0x000188, "Member 'BP_ColorPickerElement_C_SetData::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetData, CallFunc_HasItem_ReturnValue) == 0x0001A0, "Member 'BP_ColorPickerElement_C_SetData::CallFunc_HasItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_SetData, CallFunc_Not_PreBool_ReturnValue) == 0x0001A1, "Member 'BP_ColorPickerElement_C_SetData::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_ColorPickerElement.BP_ColorPickerElement_C.IsSelectedElement
// 0x0002 (0x0002 - 0x0000)
struct BP_ColorPickerElement_C_IsSelectedElement final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ColorPickerElement_C_IsSelectedElement) == 0x000001, "Wrong alignment on BP_ColorPickerElement_C_IsSelectedElement");
static_assert(sizeof(BP_ColorPickerElement_C_IsSelectedElement) == 0x000002, "Wrong size on BP_ColorPickerElement_C_IsSelectedElement");
static_assert(offsetof(BP_ColorPickerElement_C_IsSelectedElement, Value) == 0x000000, "Member 'BP_ColorPickerElement_C_IsSelectedElement::Value' has a wrong offset!");
static_assert(offsetof(BP_ColorPickerElement_C_IsSelectedElement, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000001, "Member 'BP_ColorPickerElement_C_IsSelectedElement::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_ColorPickerElement.BP_ColorPickerElement_C.Get_ImageButton_ToolTipText_0
// 0x0018 (0x0018 - 0x0000)
struct BP_ColorPickerElement_C_Get_ImageButton_ToolTipText_0 final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(BP_ColorPickerElement_C_Get_ImageButton_ToolTipText_0) == 0x000008, "Wrong alignment on BP_ColorPickerElement_C_Get_ImageButton_ToolTipText_0");
static_assert(sizeof(BP_ColorPickerElement_C_Get_ImageButton_ToolTipText_0) == 0x000018, "Wrong size on BP_ColorPickerElement_C_Get_ImageButton_ToolTipText_0");
static_assert(offsetof(BP_ColorPickerElement_C_Get_ImageButton_ToolTipText_0, ReturnValue) == 0x000000, "Member 'BP_ColorPickerElement_C_Get_ImageButton_ToolTipText_0::ReturnValue' has a wrong offset!");

// Function BP_ColorPickerElement.BP_ColorPickerElement_C.Get_Lock_Visibility_0
// 0x0001 (0x0001 - 0x0000)
struct BP_ColorPickerElement_C_Get_Lock_Visibility_0 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ColorPickerElement_C_Get_Lock_Visibility_0) == 0x000001, "Wrong alignment on BP_ColorPickerElement_C_Get_Lock_Visibility_0");
static_assert(sizeof(BP_ColorPickerElement_C_Get_Lock_Visibility_0) == 0x000001, "Wrong size on BP_ColorPickerElement_C_Get_Lock_Visibility_0");
static_assert(offsetof(BP_ColorPickerElement_C_Get_Lock_Visibility_0, ReturnValue) == 0x000000, "Member 'BP_ColorPickerElement_C_Get_Lock_Visibility_0::ReturnValue' has a wrong offset!");

}

