#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DemonHordeEnemy

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_HordeEnemy_classes.hpp"
#include "Mordhau_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DemonHordeEnemy.BP_DemonHordeEnemy_C
// 0x0060 (0x1410 - 0x13B0)
class ABP_DemonHordeEnemy_C : public ABP_HordeEnemy_C
{
public:
	uint8                                         Pad_13A4[0x4];                                     // 0x13A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_DemonHordeEnemy_C;               // 0x13A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UParticleSystemComponent*               OgreBuff;                                          // 0x13B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UPointLightComponent*                   OgreBuffLight;                                     // 0x13B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UParticleSystemComponent*               OgreBuffEyeR;                                      // 0x13C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UParticleSystemComponent*               OgreBuffEyeL;                                      // 0x13C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         MaxDamagePerHit;                                   // 0x13D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13D4[0x4];                                     // 0x13D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 DesiredFists;                                      // 0x13D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsesShieldBehaviour;                               // 0x13E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13E1[0x3];                                     // 0x13E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HoldTime;                                          // 0x13E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DestroysControllerOnDeath;                         // 0x13E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13E9[0x3];                                     // 0x13E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExtraHealthOnKill;                                 // 0x13EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            SelfController;                                    // 0x13F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseMaxWalkSpeed;                                  // 0x13F8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseMeleeWindupModifier;                           // 0x13FC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLedgePushing;                                    // 0x1400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1401[0x3];                                     // 0x1401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LedgePushRotation;                                 // 0x1404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCartPushing;                                     // 0x1408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1409[0x3];                                     // 0x1409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CartPushRotation;                                  // 0x140C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DemonHordeEnemy(int32 EntryPoint);
	void PrestigeHealthModifier();
	void LedgePusherFallDamage();
	void ApplyOgreBuff();
	void ReceivePossessed(class AController* NewController);
	void ReceiveTick(float DeltaSeconds);
	void BPLODTick(float DeltaTime);
	void SetupMapSpecificAdjustments();
	void GetOgreBuffActivateTemplate(class UParticleSystem** Template);
	void GiveFists();
	float ModifyDamage(float DamageAmount, const struct FMordhauDamageInfo& DamageInfo, class AController* EventInstigator);
	void ReceiveBeginPlay();
	void OnDied(float Angle, EMordhauDamageType Type, uint8 SubType, class FName bone, const struct FVector& Point, class AActor* Source, class AActor* Agent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DemonHordeEnemy_C">();
	}
	static class ABP_DemonHordeEnemy_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DemonHordeEnemy_C>();
	}
};
static_assert(alignof(ABP_DemonHordeEnemy_C) == 0x000010, "Wrong alignment on ABP_DemonHordeEnemy_C");
static_assert(sizeof(ABP_DemonHordeEnemy_C) == 0x001410, "Wrong size on ABP_DemonHordeEnemy_C");
static_assert(offsetof(ABP_DemonHordeEnemy_C, UberGraphFrame_BP_DemonHordeEnemy_C) == 0x0013A8, "Member 'ABP_DemonHordeEnemy_C::UberGraphFrame_BP_DemonHordeEnemy_C' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_C, OgreBuff) == 0x0013B0, "Member 'ABP_DemonHordeEnemy_C::OgreBuff' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_C, OgreBuffLight) == 0x0013B8, "Member 'ABP_DemonHordeEnemy_C::OgreBuffLight' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_C, OgreBuffEyeR) == 0x0013C0, "Member 'ABP_DemonHordeEnemy_C::OgreBuffEyeR' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_C, OgreBuffEyeL) == 0x0013C8, "Member 'ABP_DemonHordeEnemy_C::OgreBuffEyeL' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_C, MaxDamagePerHit) == 0x0013D0, "Member 'ABP_DemonHordeEnemy_C::MaxDamagePerHit' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_C, DesiredFists) == 0x0013D8, "Member 'ABP_DemonHordeEnemy_C::DesiredFists' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_C, UsesShieldBehaviour) == 0x0013E0, "Member 'ABP_DemonHordeEnemy_C::UsesShieldBehaviour' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_C, HoldTime) == 0x0013E4, "Member 'ABP_DemonHordeEnemy_C::HoldTime' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_C, DestroysControllerOnDeath) == 0x0013E8, "Member 'ABP_DemonHordeEnemy_C::DestroysControllerOnDeath' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_C, ExtraHealthOnKill) == 0x0013EC, "Member 'ABP_DemonHordeEnemy_C::ExtraHealthOnKill' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_C, SelfController) == 0x0013F0, "Member 'ABP_DemonHordeEnemy_C::SelfController' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_C, BaseMaxWalkSpeed) == 0x0013F8, "Member 'ABP_DemonHordeEnemy_C::BaseMaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_C, BaseMeleeWindupModifier) == 0x0013FC, "Member 'ABP_DemonHordeEnemy_C::BaseMeleeWindupModifier' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_C, IsLedgePushing) == 0x001400, "Member 'ABP_DemonHordeEnemy_C::IsLedgePushing' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_C, LedgePushRotation) == 0x001404, "Member 'ABP_DemonHordeEnemy_C::LedgePushRotation' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_C, IsCartPushing) == 0x001408, "Member 'ABP_DemonHordeEnemy_C::IsCartPushing' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_C, CartPushRotation) == 0x00140C, "Member 'ABP_DemonHordeEnemy_C::CartPushRotation' has a wrong offset!");

}

