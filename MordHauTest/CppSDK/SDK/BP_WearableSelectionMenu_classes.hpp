#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WearableSelectionMenu

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mordhau_structs.hpp"
#include "UMG_structs.hpp"
#include "S_WearableData_structs.hpp"
#include "BP_SelectionMenu_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_WearableSelectionMenu.BP_WearableSelectionMenu_C
// 0x01B0 (0x04B8 - 0x0308)
class UBP_WearableSelectionMenu_C final : public UBP_SelectionMenu_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0308(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UWidgetAnimation*                       RefreshList;                                       // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBP_ArmorSlotWearableText_C*            BP_ArmorSlotWearableText;                          // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_ArmorTierFilterTab_C*               BP_ArmorTierFilterTab_0;                           // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_ArmorTierFilterTab_C*               BP_ArmorTierFilterTab_1;                           // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_ArmorTierFilterTab_C*               BP_ArmorTierFilterTab_2;                           // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_ArmorTierFilterTab_C*               BP_ArmorTierFilterTab_3;                           // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_ButtonPrompt_C*                     BP_ButtonPrompt_ArmorFilterDown;                   // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_ButtonPrompt_C*                     BP_ButtonPrompt_ArmorFilterUp;                     // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_CasualRankDiamond_C*                BP_CasualRankDiamond;                              // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_ColorPatternWidget_C*               BP_ColorPatternWidget;                             // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_ItemGoldCost_C*                     BP_PlayerGold;                                     // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_PromptButton_New_C*                 BP_PromptButton_Back;                              // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_PromptButton_New_C*                 BP_PromptButton_NextSlot;                          // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_PromptButton_New_C*                 BP_PromptButton_PrevSlot;                          // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_SearchBar_C*                        BP_SearchBar;                                      // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_SmallTopLabel_C*                    BP_SmallTopLabel;                                  // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_0;                                         // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_Filters;                                   // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTileView*                              TileView_Wearables;                                // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	EWearableSlot                                 Wearable_Slot;                                     // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A9[0x7];                                      // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 New_Tier)> SwitchArmorTierTab;                                // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 Color_Slot)> Color_Clicked;                                     // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 Value)>   Pattern_Value_Changed;                             // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Pattern_Widget;                                    // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UBP_WearableItemEntry_C*>        Head_Wearables;                                    // 0x03F0(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	bool                                          IsEditingHordeCustomization;                       // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_WearableData>                MainWearableUIData;                                // 0x0408(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UBP_WearableData_C*>             WearablesDataUI;                                   // 0x0418(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsAscendingSorting;                                // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_WearableData_C*>             TempObjectUIData;                                  // 0x0430(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FS_WearableData>                TempUIData;                                        // 0x0440(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UBP_ArmorTierFilterTab_C*>       Armor_Filter_Tabs;                                 // 0x0450(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	uint8                                         Selected_Armor_Filter_Tier;                        // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_461[0x3];                                      // 0x0461(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Armor_Tier;                                        // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharacterProfileBPWrapper*             Profile_Wrapper;                                   // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              List_Unhovered;                                    // 0x0470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 Direction)> SwitchSlotClicked;                                 // 0x0480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UBP_ArmorTierFilterTab_C*               Selected_Filter_Tab;                               // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(int32 Pattern_Id)> Pattern_Clicked;                                   // 0x0498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Fetch_New_Data;                                    // 0x04A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_BP_WearableSelectionMenu(int32 EntryPoint);
	void BndEvt__BP_WearableSelectionMenu_BP_ColorPatternWidget_K2Node_ComponentBoundEvent_5_Pattern_Entry_Clicked__DelegateSignature(int32 Pattern_Id);
	void BndEvt__BP_WearableSelectionMenu_BP_PromptButton_PrevSlot_K2Node_ComponentBoundEvent_4_onClicked__DelegateSignature();
	void BndEvt__BP_WearableSelectionMenu_BP_PromptButton_NextSlot_K2Node_ComponentBoundEvent_3_onClicked__DelegateSignature();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Tab_Clicked_(class UBP_ArmorTierFilterTab_C* Tab);
	void BndEvt__BP_WearableSelectionMenu_BP_PromptButton_Back_K2Node_ComponentBoundEvent_1_onClicked__DelegateSignature();
	void Filter_Data_New(bool bPlayRefreshAnim);
	void Update_Color_and_Pattern_Widget();
	void BndEvt__BP_ColorPatternWidget_K2Node_ComponentBoundEvent_2_Color_Entry_Clicked__DelegateSignature(int32 Color_Slot);
	void BndEvt__BP_ColorPatternWidget_K2Node_ComponentBoundEvent_0_PatternValueChanged__DelegateSignature(int32 Value);
	void Update_Armor_Slot_Wearable_Text(uint8 Armor_Class, const class FText& Slot_Name, const class FText& Wearable_Name);
	void Construct();
	void Set_Layout_();
	void BndEvt__BP_SearchBar_K2Node_ComponentBoundEvent_7_On_Text_Changed__DelegateSignature(const class FText& Text);
	void Sort_By_Function_Delegate(TArray<class UBP_WearableData_C*>& Wearable_Data, const TDelegate<void(class UObject* ObjA, class UObject* ObjB, bool* RetVal)>& Function_Delegate, TArray<class UBP_WearableData_C*>* New_Wearable_Data);
	void Sort_By_Armor_Class_Ascending(class UObject* Obj_A, class UObject* Obj_B, bool* Ret_Val);
	void Sort_By_Armor_Class_Descending(class UObject* Obj_A, class UObject* Obj_B, bool* Ret_Val);
	void Filter_by_Function_Delegate(TArray<class UBP_WearableData_C*>& Wearable_Data, const TDelegate<void(class UObject* Obj, bool* RetVal)>& FuncDel, TArray<class UBP_WearableData_C*>* New_Wearable_Data);
	void Filter_Is_Peasant_Armor(class UObject* Obj_A, bool* Ret_Val);
	void Filter_by_Armor_Class(class UObject* Obj_A, bool* Ret_Val);
	void Get_Selected_Entry_Colors(TArray<struct FS_ArmorySlotColorInfo>* Slot_Color_Info, TArray<int32>* Pattern_Values, struct FPatternInfo* Selected_Pattern);
	class FText Get_EntriesTitle_Text_0();
	void Update_Wearable_Data(TArray<struct FS_WearableData>& WearableUIData);
	void Sort_By_Name_Ascending(class UObject* Obj_A, class UObject* Obj_B, bool* Ret_Val);
	void Sort_By_Name_Descending(class UObject* Obj_A, class UObject* Obj_B, bool* Ret_Val);
	void Filter_Wearable_by_Name(class UObject* Obj_A, bool* Ret_Val);
	void Convert_Data_Array_to_Object_Array(TArray<struct FS_WearableData>& Data, TArray<class UBP_WearableData_C*>* Wearable_UI_Data);
	void Convert_Object_Array_To_Data_Array(TArray<class UBP_WearableData_C*>& Data, TArray<struct FS_WearableData>* Wearable_UI_Data);
	void Initialize_Data(TArray<struct FS_WearableData>& Wearable_Data);
	void Select_Tab(class UBP_ArmorTierFilterTab_C* Tab, bool Skip_Data_Update);
	void Initialize_Filter_Profile();
	void Select_Initial_Filter_Tab(bool Skip_Data_Update);
	void Previous_Slot_Text();
	void Select_Next_Filter_Tab();
	void Select_Prev_Filter_Tab();
	void SortDlcToTop(TArray<class UBP_WearableData_C*>& WearableData, TArray<class UBP_WearableData_C*>* ReturnWearbaleData);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WearableSelectionMenu_C">();
	}
	static class UBP_WearableSelectionMenu_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_WearableSelectionMenu_C>();
	}
};
static_assert(alignof(UBP_WearableSelectionMenu_C) == 0x000008, "Wrong alignment on UBP_WearableSelectionMenu_C");
static_assert(sizeof(UBP_WearableSelectionMenu_C) == 0x0004B8, "Wrong size on UBP_WearableSelectionMenu_C");
static_assert(offsetof(UBP_WearableSelectionMenu_C, UberGraphFrame) == 0x000308, "Member 'UBP_WearableSelectionMenu_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, RefreshList) == 0x000310, "Member 'UBP_WearableSelectionMenu_C::RefreshList' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, BP_ArmorSlotWearableText) == 0x000318, "Member 'UBP_WearableSelectionMenu_C::BP_ArmorSlotWearableText' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, BP_ArmorTierFilterTab_0) == 0x000320, "Member 'UBP_WearableSelectionMenu_C::BP_ArmorTierFilterTab_0' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, BP_ArmorTierFilterTab_1) == 0x000328, "Member 'UBP_WearableSelectionMenu_C::BP_ArmorTierFilterTab_1' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, BP_ArmorTierFilterTab_2) == 0x000330, "Member 'UBP_WearableSelectionMenu_C::BP_ArmorTierFilterTab_2' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, BP_ArmorTierFilterTab_3) == 0x000338, "Member 'UBP_WearableSelectionMenu_C::BP_ArmorTierFilterTab_3' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, BP_ButtonPrompt_ArmorFilterDown) == 0x000340, "Member 'UBP_WearableSelectionMenu_C::BP_ButtonPrompt_ArmorFilterDown' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, BP_ButtonPrompt_ArmorFilterUp) == 0x000348, "Member 'UBP_WearableSelectionMenu_C::BP_ButtonPrompt_ArmorFilterUp' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, BP_CasualRankDiamond) == 0x000350, "Member 'UBP_WearableSelectionMenu_C::BP_CasualRankDiamond' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, BP_ColorPatternWidget) == 0x000358, "Member 'UBP_WearableSelectionMenu_C::BP_ColorPatternWidget' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, BP_PlayerGold) == 0x000360, "Member 'UBP_WearableSelectionMenu_C::BP_PlayerGold' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, BP_PromptButton_Back) == 0x000368, "Member 'UBP_WearableSelectionMenu_C::BP_PromptButton_Back' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, BP_PromptButton_NextSlot) == 0x000370, "Member 'UBP_WearableSelectionMenu_C::BP_PromptButton_NextSlot' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, BP_PromptButton_PrevSlot) == 0x000378, "Member 'UBP_WearableSelectionMenu_C::BP_PromptButton_PrevSlot' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, BP_SearchBar) == 0x000380, "Member 'UBP_WearableSelectionMenu_C::BP_SearchBar' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, BP_SmallTopLabel) == 0x000388, "Member 'UBP_WearableSelectionMenu_C::BP_SmallTopLabel' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, Overlay_0) == 0x000390, "Member 'UBP_WearableSelectionMenu_C::Overlay_0' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, SizeBox_Filters) == 0x000398, "Member 'UBP_WearableSelectionMenu_C::SizeBox_Filters' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, TileView_Wearables) == 0x0003A0, "Member 'UBP_WearableSelectionMenu_C::TileView_Wearables' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, Wearable_Slot) == 0x0003A8, "Member 'UBP_WearableSelectionMenu_C::Wearable_Slot' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, SwitchArmorTierTab) == 0x0003B0, "Member 'UBP_WearableSelectionMenu_C::SwitchArmorTierTab' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, Color_Clicked) == 0x0003C0, "Member 'UBP_WearableSelectionMenu_C::Color_Clicked' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, Pattern_Value_Changed) == 0x0003D0, "Member 'UBP_WearableSelectionMenu_C::Pattern_Value_Changed' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, Pattern_Widget) == 0x0003E0, "Member 'UBP_WearableSelectionMenu_C::Pattern_Widget' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, Head_Wearables) == 0x0003F0, "Member 'UBP_WearableSelectionMenu_C::Head_Wearables' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, IsEditingHordeCustomization) == 0x000400, "Member 'UBP_WearableSelectionMenu_C::IsEditingHordeCustomization' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, MainWearableUIData) == 0x000408, "Member 'UBP_WearableSelectionMenu_C::MainWearableUIData' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, WearablesDataUI) == 0x000418, "Member 'UBP_WearableSelectionMenu_C::WearablesDataUI' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, IsAscendingSorting) == 0x000428, "Member 'UBP_WearableSelectionMenu_C::IsAscendingSorting' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, TempObjectUIData) == 0x000430, "Member 'UBP_WearableSelectionMenu_C::TempObjectUIData' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, TempUIData) == 0x000440, "Member 'UBP_WearableSelectionMenu_C::TempUIData' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, Armor_Filter_Tabs) == 0x000450, "Member 'UBP_WearableSelectionMenu_C::Armor_Filter_Tabs' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, Selected_Armor_Filter_Tier) == 0x000460, "Member 'UBP_WearableSelectionMenu_C::Selected_Armor_Filter_Tier' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, Armor_Tier) == 0x000464, "Member 'UBP_WearableSelectionMenu_C::Armor_Tier' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, Profile_Wrapper) == 0x000468, "Member 'UBP_WearableSelectionMenu_C::Profile_Wrapper' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, List_Unhovered) == 0x000470, "Member 'UBP_WearableSelectionMenu_C::List_Unhovered' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, SwitchSlotClicked) == 0x000480, "Member 'UBP_WearableSelectionMenu_C::SwitchSlotClicked' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, Selected_Filter_Tab) == 0x000490, "Member 'UBP_WearableSelectionMenu_C::Selected_Filter_Tab' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, Pattern_Clicked) == 0x000498, "Member 'UBP_WearableSelectionMenu_C::Pattern_Clicked' has a wrong offset!");
static_assert(offsetof(UBP_WearableSelectionMenu_C, Fetch_New_Data) == 0x0004A8, "Member 'UBP_WearableSelectionMenu_C::Fetch_New_Data' has a wrong offset!");

}

