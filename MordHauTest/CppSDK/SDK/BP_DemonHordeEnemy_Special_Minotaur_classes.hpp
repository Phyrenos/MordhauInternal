#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DemonHordeEnemy_Special_Minotaur

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mordhau_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_DemonHordeEnemy_Special_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DemonHordeEnemy_Special_Minotaur.BP_DemonHordeEnemy_Special_Minotaur_C
// 0x0040 (0x1570 - 0x1530)
class ABP_DemonHordeEnemy_Special_Minotaur_C final : public ABP_DemonHordeEnemy_Special_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_DemonHordeEnemy_Special_Minotaur_C; // 0x1530(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class USphereComponent*                       RoarSphere;                                        // 0x1538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       ChargeSphereExtra;                                 // 0x1540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       ChargeSphere;                                      // 0x1548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRoarState;                                       // 0x1550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsChargeState;                                     // 0x1551(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1552[0x2];                                     // 0x1552(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ChargeDirection;                                   // 0x1554(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWindup;                                          // 0x1560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsStateCooldown;                                   // 0x1561(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1562[0x2];                                     // 0x1562(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StateCooldown;                                     // 0x1564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AbilityDamage;                                     // 0x1568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DemonHordeEnemy_Special_Minotaur(int32 EntryPoint);
	void RoarEffectsMulti(const struct FVector& Location);
	void ImpactEffectsMulti(const struct FVector& Location);
	void BndEvt__BP_DemonHordeEnemy_Special_Minotaur_ChargeSphereExtra_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ImpactKnockback(class AActor* ImpactTarget);
	void StartStateCooldown();
	void MoveBlockedBySlow(const struct FHitResult& Impact);
	void BndEvt__BP_DemonHordeEnemy_Special_Minotaur_ChargeSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveTick(float DeltaSeconds);
	void BehaviourLoop();
	void ReceiveBeginPlay();
	void OnDied(float Angle, EMordhauDamageType Type, uint8 SubType, class FName bone, const struct FVector& Point, class AActor* Source, class AActor* Agent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DemonHordeEnemy_Special_Minotaur_C">();
	}
	static class ABP_DemonHordeEnemy_Special_Minotaur_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DemonHordeEnemy_Special_Minotaur_C>();
	}
};
static_assert(alignof(ABP_DemonHordeEnemy_Special_Minotaur_C) == 0x000010, "Wrong alignment on ABP_DemonHordeEnemy_Special_Minotaur_C");
static_assert(sizeof(ABP_DemonHordeEnemy_Special_Minotaur_C) == 0x001570, "Wrong size on ABP_DemonHordeEnemy_Special_Minotaur_C");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Minotaur_C, UberGraphFrame_BP_DemonHordeEnemy_Special_Minotaur_C) == 0x001530, "Member 'ABP_DemonHordeEnemy_Special_Minotaur_C::UberGraphFrame_BP_DemonHordeEnemy_Special_Minotaur_C' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Minotaur_C, RoarSphere) == 0x001538, "Member 'ABP_DemonHordeEnemy_Special_Minotaur_C::RoarSphere' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Minotaur_C, ChargeSphereExtra) == 0x001540, "Member 'ABP_DemonHordeEnemy_Special_Minotaur_C::ChargeSphereExtra' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Minotaur_C, ChargeSphere) == 0x001548, "Member 'ABP_DemonHordeEnemy_Special_Minotaur_C::ChargeSphere' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Minotaur_C, IsRoarState) == 0x001550, "Member 'ABP_DemonHordeEnemy_Special_Minotaur_C::IsRoarState' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Minotaur_C, IsChargeState) == 0x001551, "Member 'ABP_DemonHordeEnemy_Special_Minotaur_C::IsChargeState' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Minotaur_C, ChargeDirection) == 0x001554, "Member 'ABP_DemonHordeEnemy_Special_Minotaur_C::ChargeDirection' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Minotaur_C, IsWindup) == 0x001560, "Member 'ABP_DemonHordeEnemy_Special_Minotaur_C::IsWindup' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Minotaur_C, IsStateCooldown) == 0x001561, "Member 'ABP_DemonHordeEnemy_Special_Minotaur_C::IsStateCooldown' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Minotaur_C, StateCooldown) == 0x001564, "Member 'ABP_DemonHordeEnemy_Special_Minotaur_C::StateCooldown' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Minotaur_C, AbilityDamage) == 0x001568, "Member 'ABP_DemonHordeEnemy_Special_Minotaur_C::AbilityDamage' has a wrong offset!");

}

