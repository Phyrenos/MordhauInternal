#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MordhauSlider

#include "Basic.hpp"

#include "S_MordhauSlider_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function BP_MordhauSlider.BP_MordhauSlider_C.ExecuteUbergraph_BP_MordhauSlider
// 0x0250 (0x0250 - 0x0000)
struct BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry_1;                         // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_Value;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_ComponentBoundEvent_Text_1;                 // 0x0048(0x0018)(ConstParm)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetSubstring_ReturnValue;                 // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   K2Node_ComponentBoundEvent_Text;                   // 0x0080(0x0018)(ConstParm)
	ETextCommit                                   K2Node_ComponentBoundEvent_CommitMethod;           // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00A0(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_StringToFloat_ReturnValue;           // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNumeric_ReturnValue;                    // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Get_Numeric_Value_ReturnValue;            // 0x00D0(0x0018)()
	bool                                          CallFunc_IsPressed_ReturnValue;                    // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPressed_ReturnValue_1;                  // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EB[0x1];                                       // 0x00EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRealTimeSeconds_ReturnValue;           // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPressed_ReturnValue_2;                  // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRealTimeSeconds_ReturnValue_1;         // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPressed_ReturnValue_3;                  // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_103[0x1];                                      // 0x0103(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x011B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         K2Node_CustomEvent_Direction;                      // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRealTimeSeconds_ReturnValue_2;         // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0130(0x0038)(IsPlainOldData, NoDestructor)
	struct FPointerEvent                          K2Node_Event_MouseEvent_1;                         // 0x0168(0x0070)(ConstParm)
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x01D8(0x0070)(ConstParm)
	bool                                          CallFunc_IsConsolePlatform_ReturnValue;            // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider) == 0x000008, "Wrong alignment on BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider");
static_assert(sizeof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider) == 0x000250, "Wrong size on BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, EntryPoint) == 0x000000, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, K2Node_Event_MyGeometry_1) == 0x000004, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::K2Node_Event_MyGeometry_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, K2Node_ComponentBoundEvent_Value) == 0x000040, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::K2Node_ComponentBoundEvent_Value' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, K2Node_ComponentBoundEvent_Text_1) == 0x000048, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::K2Node_ComponentBoundEvent_Text_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_Conv_TextToString_ReturnValue) == 0x000060, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_GetSubstring_ReturnValue) == 0x000070, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_GetSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, K2Node_ComponentBoundEvent_Text) == 0x000080, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::K2Node_ComponentBoundEvent_Text' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, K2Node_ComponentBoundEvent_CommitMethod) == 0x000098, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::K2Node_ComponentBoundEvent_CommitMethod' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_Conv_StringToText_ReturnValue) == 0x0000A0, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_Conv_TextToString_ReturnValue_1) == 0x0000B8, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_Conv_StringToFloat_ReturnValue) == 0x0000C8, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_Conv_StringToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_IsNumeric_ReturnValue) == 0x0000CC, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_IsNumeric_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_Get_Numeric_Value_ReturnValue) == 0x0000D0, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_Get_Numeric_Value_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_IsPressed_ReturnValue) == 0x0000E8, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_IsPressed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_IsPressed_ReturnValue_1) == 0x0000E9, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_IsPressed_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_BooleanOR_ReturnValue) == 0x0000EA, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000EC, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_GetRealTimeSeconds_ReturnValue) == 0x0000F0, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_GetRealTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_IsPressed_ReturnValue_2) == 0x0000F4, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_IsPressed_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_GetRealTimeSeconds_ReturnValue_1) == 0x0000F8, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_GetRealTimeSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000FC, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000100, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_IsPressed_ReturnValue_3) == 0x000101, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_IsPressed_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, Temp_bool_Has_Been_Initd_Variable) == 0x000102, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_BreakVector2D_X) == 0x000104, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_BreakVector2D_Y) == 0x000108, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_MapRangeClamped_ReturnValue) == 0x00010C, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000110, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, K2Node_Event_IsDesignTime) == 0x000118, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_BooleanOR_ReturnValue_1) == 0x000119, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_BooleanOR_ReturnValue_2) == 0x00011A, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_BooleanOR_ReturnValue_3) == 0x00011B, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, K2Node_CustomEvent_Direction) == 0x00011C, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::K2Node_CustomEvent_Direction' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_BooleanOR_ReturnValue_4) == 0x000120, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_GetRealTimeSeconds_ReturnValue_2) == 0x000124, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_GetRealTimeSeconds_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_GetFloatValue_ReturnValue) == 0x000128, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, Temp_bool_IsClosed_Variable) == 0x00012C, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, K2Node_Event_MyGeometry) == 0x000130, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, K2Node_Event_MouseEvent_1) == 0x000168, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::K2Node_Event_MouseEvent_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, K2Node_Event_MouseEvent) == 0x0001D8, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::K2Node_Event_MouseEvent' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_IsConsolePlatform_ReturnValue) == 0x000248, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_IsConsolePlatform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider, CallFunc_BooleanAND_ReturnValue) == 0x000249, "Member 'BP_MordhauSlider_C_ExecuteUbergraph_BP_MordhauSlider::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_MordhauSlider.BP_MordhauSlider_C.OnMouseLeave
// 0x0070 (0x0070 - 0x0000)
struct BP_MordhauSlider_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_MordhauSlider_C_OnMouseLeave) == 0x000008, "Wrong alignment on BP_MordhauSlider_C_OnMouseLeave");
static_assert(sizeof(BP_MordhauSlider_C_OnMouseLeave) == 0x000070, "Wrong size on BP_MordhauSlider_C_OnMouseLeave");
static_assert(offsetof(BP_MordhauSlider_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'BP_MordhauSlider_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function BP_MordhauSlider.BP_MordhauSlider_C.OnMouseEnter
// 0x00A8 (0x00A8 - 0x0000)
struct BP_MordhauSlider_C_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_MordhauSlider_C_OnMouseEnter) == 0x000008, "Wrong alignment on BP_MordhauSlider_C_OnMouseEnter");
static_assert(sizeof(BP_MordhauSlider_C_OnMouseEnter) == 0x0000A8, "Wrong size on BP_MordhauSlider_C_OnMouseEnter");
static_assert(offsetof(BP_MordhauSlider_C_OnMouseEnter, MyGeometry) == 0x000000, "Member 'BP_MordhauSlider_C_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_OnMouseEnter, MouseEvent) == 0x000038, "Member 'BP_MordhauSlider_C_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function BP_MordhauSlider.BP_MordhauSlider_C.On Simulated Button Pressed
// 0x0004 (0x0004 - 0x0000)
struct BP_MordhauSlider_C_On_Simulated_Button_Pressed final
{
public:
	int32                                         Direction;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MordhauSlider_C_On_Simulated_Button_Pressed) == 0x000004, "Wrong alignment on BP_MordhauSlider_C_On_Simulated_Button_Pressed");
static_assert(sizeof(BP_MordhauSlider_C_On_Simulated_Button_Pressed) == 0x000004, "Wrong size on BP_MordhauSlider_C_On_Simulated_Button_Pressed");
static_assert(offsetof(BP_MordhauSlider_C_On_Simulated_Button_Pressed, Direction) == 0x000000, "Member 'BP_MordhauSlider_C_On_Simulated_Button_Pressed::Direction' has a wrong offset!");

// Function BP_MordhauSlider.BP_MordhauSlider_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_MordhauSlider_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MordhauSlider_C_PreConstruct) == 0x000001, "Wrong alignment on BP_MordhauSlider_C_PreConstruct");
static_assert(sizeof(BP_MordhauSlider_C_PreConstruct) == 0x000001, "Wrong size on BP_MordhauSlider_C_PreConstruct");
static_assert(offsetof(BP_MordhauSlider_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_MordhauSlider_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_MordhauSlider.BP_MordhauSlider_C.BndEvt__NumericDisplay_K2Node_ComponentBoundEvent_2_OnEditableTextCommittedEvent__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_MordhauSlider_C_BndEvt__NumericDisplay_K2Node_ComponentBoundEvent_2_OnEditableTextCommittedEvent__DelegateSignature final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MordhauSlider_C_BndEvt__NumericDisplay_K2Node_ComponentBoundEvent_2_OnEditableTextCommittedEvent__DelegateSignature) == 0x000008, "Wrong alignment on BP_MordhauSlider_C_BndEvt__NumericDisplay_K2Node_ComponentBoundEvent_2_OnEditableTextCommittedEvent__DelegateSignature");
static_assert(sizeof(BP_MordhauSlider_C_BndEvt__NumericDisplay_K2Node_ComponentBoundEvent_2_OnEditableTextCommittedEvent__DelegateSignature) == 0x000020, "Wrong size on BP_MordhauSlider_C_BndEvt__NumericDisplay_K2Node_ComponentBoundEvent_2_OnEditableTextCommittedEvent__DelegateSignature");
static_assert(offsetof(BP_MordhauSlider_C_BndEvt__NumericDisplay_K2Node_ComponentBoundEvent_2_OnEditableTextCommittedEvent__DelegateSignature, Text) == 0x000000, "Member 'BP_MordhauSlider_C_BndEvt__NumericDisplay_K2Node_ComponentBoundEvent_2_OnEditableTextCommittedEvent__DelegateSignature::Text' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_BndEvt__NumericDisplay_K2Node_ComponentBoundEvent_2_OnEditableTextCommittedEvent__DelegateSignature, CommitMethod) == 0x000018, "Member 'BP_MordhauSlider_C_BndEvt__NumericDisplay_K2Node_ComponentBoundEvent_2_OnEditableTextCommittedEvent__DelegateSignature::CommitMethod' has a wrong offset!");

// Function BP_MordhauSlider.BP_MordhauSlider_C.BndEvt__NumericDisplay_K2Node_ComponentBoundEvent_1_OnEditableTextChangedEvent__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct BP_MordhauSlider_C_BndEvt__NumericDisplay_K2Node_ComponentBoundEvent_1_OnEditableTextChangedEvent__DelegateSignature final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_MordhauSlider_C_BndEvt__NumericDisplay_K2Node_ComponentBoundEvent_1_OnEditableTextChangedEvent__DelegateSignature) == 0x000008, "Wrong alignment on BP_MordhauSlider_C_BndEvt__NumericDisplay_K2Node_ComponentBoundEvent_1_OnEditableTextChangedEvent__DelegateSignature");
static_assert(sizeof(BP_MordhauSlider_C_BndEvt__NumericDisplay_K2Node_ComponentBoundEvent_1_OnEditableTextChangedEvent__DelegateSignature) == 0x000018, "Wrong size on BP_MordhauSlider_C_BndEvt__NumericDisplay_K2Node_ComponentBoundEvent_1_OnEditableTextChangedEvent__DelegateSignature");
static_assert(offsetof(BP_MordhauSlider_C_BndEvt__NumericDisplay_K2Node_ComponentBoundEvent_1_OnEditableTextChangedEvent__DelegateSignature, Text) == 0x000000, "Member 'BP_MordhauSlider_C_BndEvt__NumericDisplay_K2Node_ComponentBoundEvent_1_OnEditableTextChangedEvent__DelegateSignature::Text' has a wrong offset!");

// Function BP_MordhauSlider.BP_MordhauSlider_C.BndEvt__Slider_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BP_MordhauSlider_C_BndEvt__Slider_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MordhauSlider_C_BndEvt__Slider_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature) == 0x000004, "Wrong alignment on BP_MordhauSlider_C_BndEvt__Slider_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature");
static_assert(sizeof(BP_MordhauSlider_C_BndEvt__Slider_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature) == 0x000004, "Wrong size on BP_MordhauSlider_C_BndEvt__Slider_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature");
static_assert(offsetof(BP_MordhauSlider_C_BndEvt__Slider_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature, Value) == 0x000000, "Member 'BP_MordhauSlider_C_BndEvt__Slider_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature::Value' has a wrong offset!");

// Function BP_MordhauSlider.BP_MordhauSlider_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_MordhauSlider_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MordhauSlider_C_Tick) == 0x000004, "Wrong alignment on BP_MordhauSlider_C_Tick");
static_assert(sizeof(BP_MordhauSlider_C_Tick) == 0x00003C, "Wrong size on BP_MordhauSlider_C_Tick");
static_assert(offsetof(BP_MordhauSlider_C_Tick, MyGeometry) == 0x000000, "Member 'BP_MordhauSlider_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_MordhauSlider_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_MordhauSlider.BP_MordhauSlider_C.Get Numeric Value
// 0x0060 (0x0060 - 0x0000)
struct BP_MordhauSlider_C_Get_Numeric_Value final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	float                                         CallFunc_Get_Slider_Value_Value;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue;             // 0x0030(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0048(0x0018)()
};
static_assert(alignof(BP_MordhauSlider_C_Get_Numeric_Value) == 0x000008, "Wrong alignment on BP_MordhauSlider_C_Get_Numeric_Value");
static_assert(sizeof(BP_MordhauSlider_C_Get_Numeric_Value) == 0x000060, "Wrong size on BP_MordhauSlider_C_Get_Numeric_Value");
static_assert(offsetof(BP_MordhauSlider_C_Get_Numeric_Value, ReturnValue) == 0x000000, "Member 'BP_MordhauSlider_C_Get_Numeric_Value::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Get_Numeric_Value, CallFunc_Get_Slider_Value_Value) == 0x000018, "Member 'BP_MordhauSlider_C_Get_Numeric_Value::CallFunc_Get_Slider_Value_Value' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Get_Numeric_Value, CallFunc_BreakVector2D_X) == 0x00001C, "Member 'BP_MordhauSlider_C_Get_Numeric_Value::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Get_Numeric_Value, CallFunc_BreakVector2D_Y) == 0x000020, "Member 'BP_MordhauSlider_C_Get_Numeric_Value::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Get_Numeric_Value, CallFunc_MapRangeClamped_ReturnValue) == 0x000024, "Member 'BP_MordhauSlider_C_Get_Numeric_Value::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Get_Numeric_Value, CallFunc_Round_ReturnValue) == 0x000028, "Member 'BP_MordhauSlider_C_Get_Numeric_Value::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Get_Numeric_Value, CallFunc_Conv_FloatToText_ReturnValue) == 0x000030, "Member 'BP_MordhauSlider_C_Get_Numeric_Value::CallFunc_Conv_FloatToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Get_Numeric_Value, CallFunc_Conv_IntToText_ReturnValue) == 0x000048, "Member 'BP_MordhauSlider_C_Get_Numeric_Value::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function BP_MordhauSlider.BP_MordhauSlider_C.Get_NumericDisplay_Visibility_0
// 0x0005 (0x0005 - 0x0000)
struct BP_MordhauSlider_C_Get_NumericDisplay_Visibility_0 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MordhauSlider_C_Get_NumericDisplay_Visibility_0) == 0x000001, "Wrong alignment on BP_MordhauSlider_C_Get_NumericDisplay_Visibility_0");
static_assert(sizeof(BP_MordhauSlider_C_Get_NumericDisplay_Visibility_0) == 0x000005, "Wrong size on BP_MordhauSlider_C_Get_NumericDisplay_Visibility_0");
static_assert(offsetof(BP_MordhauSlider_C_Get_NumericDisplay_Visibility_0, ReturnValue) == 0x000000, "Member 'BP_MordhauSlider_C_Get_NumericDisplay_Visibility_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Get_NumericDisplay_Visibility_0, Temp_bool_Variable) == 0x000001, "Member 'BP_MordhauSlider_C_Get_NumericDisplay_Visibility_0::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Get_NumericDisplay_Visibility_0, Temp_byte_Variable) == 0x000002, "Member 'BP_MordhauSlider_C_Get_NumericDisplay_Visibility_0::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Get_NumericDisplay_Visibility_0, Temp_byte_Variable_1) == 0x000003, "Member 'BP_MordhauSlider_C_Get_NumericDisplay_Visibility_0::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Get_NumericDisplay_Visibility_0, K2Node_Select_Default) == 0x000004, "Member 'BP_MordhauSlider_C_Get_NumericDisplay_Visibility_0::K2Node_Select_Default' has a wrong offset!");

// Function BP_MordhauSlider.BP_MordhauSlider_C.Set Value
// 0x0048 (0x0048 - 0x0000)
struct BP_MordhauSlider_C_Set_Value final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Get_Numeric_Value_ReturnValue;            // 0x0008(0x0018)()
	int32                                         CallFunc_Discretize_Value_Discretized_Value;       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Continualize_Value_ContinualizedValue;    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Get_Numeric_Value_ReturnValue_1;          // 0x0030(0x0018)()
};
static_assert(alignof(BP_MordhauSlider_C_Set_Value) == 0x000008, "Wrong alignment on BP_MordhauSlider_C_Set_Value");
static_assert(sizeof(BP_MordhauSlider_C_Set_Value) == 0x000048, "Wrong size on BP_MordhauSlider_C_Set_Value");
static_assert(offsetof(BP_MordhauSlider_C_Set_Value, Value) == 0x000000, "Member 'BP_MordhauSlider_C_Set_Value::Value' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Set_Value, CallFunc_Get_Numeric_Value_ReturnValue) == 0x000008, "Member 'BP_MordhauSlider_C_Set_Value::CallFunc_Get_Numeric_Value_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Set_Value, CallFunc_Discretize_Value_Discretized_Value) == 0x000020, "Member 'BP_MordhauSlider_C_Set_Value::CallFunc_Discretize_Value_Discretized_Value' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Set_Value, CallFunc_FClamp_ReturnValue) == 0x000024, "Member 'BP_MordhauSlider_C_Set_Value::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Set_Value, CallFunc_Continualize_Value_ContinualizedValue) == 0x000028, "Member 'BP_MordhauSlider_C_Set_Value::CallFunc_Continualize_Value_ContinualizedValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Set_Value, CallFunc_FClamp_ReturnValue_1) == 0x00002C, "Member 'BP_MordhauSlider_C_Set_Value::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Set_Value, CallFunc_Get_Numeric_Value_ReturnValue_1) == 0x000030, "Member 'BP_MordhauSlider_C_Set_Value::CallFunc_Get_Numeric_Value_ReturnValue_1' has a wrong offset!");

// Function BP_MordhauSlider.BP_MordhauSlider_C.Get Slider Value
// 0x0008 (0x0008 - 0x0000)
struct BP_MordhauSlider_C_Get_Slider_Value final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_ReturnValue;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MordhauSlider_C_Get_Slider_Value) == 0x000004, "Wrong alignment on BP_MordhauSlider_C_Get_Slider_Value");
static_assert(sizeof(BP_MordhauSlider_C_Get_Slider_Value) == 0x000008, "Wrong size on BP_MordhauSlider_C_Get_Slider_Value");
static_assert(offsetof(BP_MordhauSlider_C_Get_Slider_Value, Value) == 0x000000, "Member 'BP_MordhauSlider_C_Get_Slider_Value::Value' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Get_Slider_Value, CallFunc_GetValue_ReturnValue) == 0x000004, "Member 'BP_MordhauSlider_C_Get_Slider_Value::CallFunc_GetValue_ReturnValue' has a wrong offset!");

// Function BP_MordhauSlider.BP_MordhauSlider_C.Initialize
// 0x0034 (0x0034 - 0x0000)
struct BP_MordhauSlider_C_Initialize final
{
public:
	struct FS_MordhauSlider                       Slider_Struct;                                     // 0x0000(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Skip_set_value;                                    // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MordhauSlider_C_Initialize) == 0x000004, "Wrong alignment on BP_MordhauSlider_C_Initialize");
static_assert(sizeof(BP_MordhauSlider_C_Initialize) == 0x000034, "Wrong size on BP_MordhauSlider_C_Initialize");
static_assert(offsetof(BP_MordhauSlider_C_Initialize, Slider_Struct) == 0x000000, "Member 'BP_MordhauSlider_C_Initialize::Slider_Struct' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Initialize, Skip_set_value) == 0x000014, "Member 'BP_MordhauSlider_C_Initialize::Skip_set_value' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Initialize, Temp_bool_Variable) == 0x000015, "Member 'BP_MordhauSlider_C_Initialize::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Initialize, Temp_byte_Variable) == 0x000016, "Member 'BP_MordhauSlider_C_Initialize::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Initialize, Temp_byte_Variable_1) == 0x000017, "Member 'BP_MordhauSlider_C_Initialize::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Initialize, Temp_bool_Variable_1) == 0x000018, "Member 'BP_MordhauSlider_C_Initialize::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Initialize, Temp_byte_Variable_2) == 0x000019, "Member 'BP_MordhauSlider_C_Initialize::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Initialize, Temp_byte_Variable_3) == 0x00001A, "Member 'BP_MordhauSlider_C_Initialize::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Initialize, K2Node_Select_Default) == 0x00001B, "Member 'BP_MordhauSlider_C_Initialize::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Initialize, K2Node_Select_Default_1) == 0x00001C, "Member 'BP_MordhauSlider_C_Initialize::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Initialize, CallFunc_BreakVector2D_X) == 0x000020, "Member 'BP_MordhauSlider_C_Initialize::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Initialize, CallFunc_BreakVector2D_Y) == 0x000024, "Member 'BP_MordhauSlider_C_Initialize::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Initialize, CallFunc_FMax_ReturnValue) == 0x000028, "Member 'BP_MordhauSlider_C_Initialize::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Initialize, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_MordhauSlider_C_Initialize::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Initialize, CallFunc_SelectFloat_ReturnValue) == 0x000030, "Member 'BP_MordhauSlider_C_Initialize::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function BP_MordhauSlider.BP_MordhauSlider_C.Get_ProgressBar_1_Percent_0
// 0x0008 (0x0008 - 0x0000)
struct BP_MordhauSlider_C_Get_ProgressBar_1_Percent_0 final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_ReturnValue;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MordhauSlider_C_Get_ProgressBar_1_Percent_0) == 0x000004, "Wrong alignment on BP_MordhauSlider_C_Get_ProgressBar_1_Percent_0");
static_assert(sizeof(BP_MordhauSlider_C_Get_ProgressBar_1_Percent_0) == 0x000008, "Wrong size on BP_MordhauSlider_C_Get_ProgressBar_1_Percent_0");
static_assert(offsetof(BP_MordhauSlider_C_Get_ProgressBar_1_Percent_0, ReturnValue) == 0x000000, "Member 'BP_MordhauSlider_C_Get_ProgressBar_1_Percent_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Get_ProgressBar_1_Percent_0, CallFunc_GetValue_ReturnValue) == 0x000004, "Member 'BP_MordhauSlider_C_Get_ProgressBar_1_Percent_0::CallFunc_GetValue_ReturnValue' has a wrong offset!");

// Function BP_MordhauSlider.BP_MordhauSlider_C.Shift slider step
// 0x0050 (0x0050 - 0x0000)
struct BP_MordhauSlider_C_Shift_slider_step final
{
public:
	int32                                         Direction;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Direction_;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Step_Amount;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Get_Slider_Value_Value;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Get_Slider_Value_Value_1;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Get_Slider_Value_Value_2;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Get_Slider_Value_Value_3;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MordhauSlider_C_Shift_slider_step) == 0x000004, "Wrong alignment on BP_MordhauSlider_C_Shift_slider_step");
static_assert(sizeof(BP_MordhauSlider_C_Shift_slider_step) == 0x000050, "Wrong size on BP_MordhauSlider_C_Shift_slider_step");
static_assert(offsetof(BP_MordhauSlider_C_Shift_slider_step, Direction) == 0x000000, "Member 'BP_MordhauSlider_C_Shift_slider_step::Direction' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Shift_slider_step, Direction_) == 0x000004, "Member 'BP_MordhauSlider_C_Shift_slider_step::Direction_' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Shift_slider_step, Step_Amount) == 0x000008, "Member 'BP_MordhauSlider_C_Shift_slider_step::Step_Amount' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Shift_slider_step, Temp_int_Variable) == 0x00000C, "Member 'BP_MordhauSlider_C_Shift_slider_step::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Shift_slider_step, Temp_int_Variable_1) == 0x000010, "Member 'BP_MordhauSlider_C_Shift_slider_step::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Shift_slider_step, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_MordhauSlider_C_Shift_slider_step::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Shift_slider_step, CallFunc_BreakVector2D_X) == 0x000018, "Member 'BP_MordhauSlider_C_Shift_slider_step::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Shift_slider_step, CallFunc_BreakVector2D_Y) == 0x00001C, "Member 'BP_MordhauSlider_C_Shift_slider_step::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Shift_slider_step, CallFunc_Get_Slider_Value_Value) == 0x000020, "Member 'BP_MordhauSlider_C_Shift_slider_step::CallFunc_Get_Slider_Value_Value' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Shift_slider_step, CallFunc_FMax_ReturnValue) == 0x000024, "Member 'BP_MordhauSlider_C_Shift_slider_step::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Shift_slider_step, CallFunc_Add_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_MordhauSlider_C_Shift_slider_step::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Shift_slider_step, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'BP_MordhauSlider_C_Shift_slider_step::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Shift_slider_step, CallFunc_Get_Slider_Value_Value_1) == 0x000030, "Member 'BP_MordhauSlider_C_Shift_slider_step::CallFunc_Get_Slider_Value_Value_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Shift_slider_step, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_MordhauSlider_C_Shift_slider_step::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Shift_slider_step, K2Node_Select_Default) == 0x000038, "Member 'BP_MordhauSlider_C_Shift_slider_step::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Shift_slider_step, CallFunc_Get_Slider_Value_Value_2) == 0x00003C, "Member 'BP_MordhauSlider_C_Shift_slider_step::CallFunc_Get_Slider_Value_Value_2' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Shift_slider_step, CallFunc_Get_Slider_Value_Value_3) == 0x000040, "Member 'BP_MordhauSlider_C_Shift_slider_step::CallFunc_Get_Slider_Value_Value_3' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Shift_slider_step, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000044, "Member 'BP_MordhauSlider_C_Shift_slider_step::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Shift_slider_step, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000048, "Member 'BP_MordhauSlider_C_Shift_slider_step::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Shift_slider_step, K2Node_Select_Default_1) == 0x00004C, "Member 'BP_MordhauSlider_C_Shift_slider_step::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_MordhauSlider.BP_MordhauSlider_C.Discretize Value
// 0x0028 (0x0028 - 0x0000)
struct BP_MordhauSlider_C_Discretize_Value final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Discretized_Value;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MordhauSlider_C_Discretize_Value) == 0x000004, "Wrong alignment on BP_MordhauSlider_C_Discretize_Value");
static_assert(sizeof(BP_MordhauSlider_C_Discretize_Value) == 0x000028, "Wrong size on BP_MordhauSlider_C_Discretize_Value");
static_assert(offsetof(BP_MordhauSlider_C_Discretize_Value, Value) == 0x000000, "Member 'BP_MordhauSlider_C_Discretize_Value::Value' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Discretize_Value, Discretized_Value) == 0x000004, "Member 'BP_MordhauSlider_C_Discretize_Value::Discretized_Value' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Discretize_Value, CallFunc_BreakVector2D_X) == 0x000008, "Member 'BP_MordhauSlider_C_Discretize_Value::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Discretize_Value, CallFunc_BreakVector2D_Y) == 0x00000C, "Member 'BP_MordhauSlider_C_Discretize_Value::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Discretize_Value, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_MordhauSlider_C_Discretize_Value::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Discretize_Value, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_MordhauSlider_C_Discretize_Value::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Discretize_Value, CallFunc_FTrunc_ReturnValue) == 0x000018, "Member 'BP_MordhauSlider_C_Discretize_Value::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Discretize_Value, CallFunc_Round_ReturnValue) == 0x00001C, "Member 'BP_MordhauSlider_C_Discretize_Value::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Discretize_Value, CallFunc_Max_ReturnValue) == 0x000020, "Member 'BP_MordhauSlider_C_Discretize_Value::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Discretize_Value, CallFunc_Clamp_ReturnValue) == 0x000024, "Member 'BP_MordhauSlider_C_Discretize_Value::CallFunc_Clamp_ReturnValue' has a wrong offset!");

// Function BP_MordhauSlider.BP_MordhauSlider_C.Continualize Value
// 0x0028 (0x0028 - 0x0000)
struct BP_MordhauSlider_C_Continualize_Value final
{
public:
	int32                                         Discrete_Value;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ContinualizedValue;                                // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MordhauSlider_C_Continualize_Value) == 0x000004, "Wrong alignment on BP_MordhauSlider_C_Continualize_Value");
static_assert(sizeof(BP_MordhauSlider_C_Continualize_Value) == 0x000028, "Wrong size on BP_MordhauSlider_C_Continualize_Value");
static_assert(offsetof(BP_MordhauSlider_C_Continualize_Value, Discrete_Value) == 0x000000, "Member 'BP_MordhauSlider_C_Continualize_Value::Discrete_Value' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Continualize_Value, ContinualizedValue) == 0x000004, "Member 'BP_MordhauSlider_C_Continualize_Value::ContinualizedValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Continualize_Value, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000008, "Member 'BP_MordhauSlider_C_Continualize_Value::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Continualize_Value, CallFunc_BreakVector2D_X) == 0x00000C, "Member 'BP_MordhauSlider_C_Continualize_Value::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Continualize_Value, CallFunc_BreakVector2D_Y) == 0x000010, "Member 'BP_MordhauSlider_C_Continualize_Value::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Continualize_Value, CallFunc_FTrunc_ReturnValue) == 0x000014, "Member 'BP_MordhauSlider_C_Continualize_Value::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Continualize_Value, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'BP_MordhauSlider_C_Continualize_Value::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Continualize_Value, CallFunc_Subtract_IntInt_ReturnValue) == 0x00001C, "Member 'BP_MordhauSlider_C_Continualize_Value::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Continualize_Value, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000020, "Member 'BP_MordhauSlider_C_Continualize_Value::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Continualize_Value, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_MordhauSlider_C_Continualize_Value::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_MordhauSlider.BP_MordhauSlider_C.Get Discrete Slider Value
// 0x000C (0x000C - 0x0000)
struct BP_MordhauSlider_C_Get_Discrete_Slider_Value final
{
public:
	int32                                         Discretized_Value;                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Get_Slider_Value_Value;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Discretize_Value_Discretized_Value;       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MordhauSlider_C_Get_Discrete_Slider_Value) == 0x000004, "Wrong alignment on BP_MordhauSlider_C_Get_Discrete_Slider_Value");
static_assert(sizeof(BP_MordhauSlider_C_Get_Discrete_Slider_Value) == 0x00000C, "Wrong size on BP_MordhauSlider_C_Get_Discrete_Slider_Value");
static_assert(offsetof(BP_MordhauSlider_C_Get_Discrete_Slider_Value, Discretized_Value) == 0x000000, "Member 'BP_MordhauSlider_C_Get_Discrete_Slider_Value::Discretized_Value' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Get_Discrete_Slider_Value, CallFunc_Get_Slider_Value_Value) == 0x000004, "Member 'BP_MordhauSlider_C_Get_Discrete_Slider_Value::CallFunc_Get_Slider_Value_Value' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Get_Discrete_Slider_Value, CallFunc_Discretize_Value_Discretized_Value) == 0x000008, "Member 'BP_MordhauSlider_C_Get_Discrete_Slider_Value::CallFunc_Discretize_Value_Discretized_Value' has a wrong offset!");

// Function BP_MordhauSlider.BP_MordhauSlider_C.Create Divisions
// 0x0090 (0x0090 - 0x0000)
struct BP_MordhauSlider_C_Create_Divisions final
{
public:
	bool                                          IsFirstOrLastIndex;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EHorizontalAlignment                          Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHorizontalAlignment                          Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateSizeRule                                Temp_byte_Variable_3;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateSizeRule                                Temp_byte_Variable_4;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MordhauSliderDivision_C*            CallFunc_Create_ReturnValue;                       // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          K2Node_Select_Default;                             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     K2Node_DynamicCast_AsHorizontal_Box_Slot;          // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHorizontalAlignment                          K2Node_Select_Default_1;                           // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue_1;             // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default_2;                           // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateSizeRule                                K2Node_Select_Default_3;                           // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F[0x1];                                       // 0x007F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateChildSize                        K2Node_MakeStruct_SlateChildSize;                  // 0x0080(0x0008)(NoDestructor, UObjectWrapper)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MordhauSlider_C_Create_Divisions) == 0x000008, "Wrong alignment on BP_MordhauSlider_C_Create_Divisions");
static_assert(sizeof(BP_MordhauSlider_C_Create_Divisions) == 0x000090, "Wrong size on BP_MordhauSlider_C_Create_Divisions");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, IsFirstOrLastIndex) == 0x000000, "Member 'BP_MordhauSlider_C_Create_Divisions::IsFirstOrLastIndex' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, Temp_byte_Variable) == 0x000001, "Member 'BP_MordhauSlider_C_Create_Divisions::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, Temp_byte_Variable_1) == 0x000002, "Member 'BP_MordhauSlider_C_Create_Divisions::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, Temp_bool_Variable) == 0x000003, "Member 'BP_MordhauSlider_C_Create_Divisions::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, Temp_byte_Variable_2) == 0x000004, "Member 'BP_MordhauSlider_C_Create_Divisions::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, Temp_bool_Variable_1) == 0x000005, "Member 'BP_MordhauSlider_C_Create_Divisions::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, Temp_bool_Variable_2) == 0x000006, "Member 'BP_MordhauSlider_C_Create_Divisions::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, Temp_bool_Variable_3) == 0x000007, "Member 'BP_MordhauSlider_C_Create_Divisions::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, Temp_byte_Variable_3) == 0x000008, "Member 'BP_MordhauSlider_C_Create_Divisions::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, Temp_byte_Variable_4) == 0x000009, "Member 'BP_MordhauSlider_C_Create_Divisions::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_Create_ReturnValue) == 0x000010, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, Temp_int_Variable) == 0x000018, "Member 'BP_MordhauSlider_C_Create_Divisions::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00001C, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_SelectFloat_ReturnValue) == 0x000024, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, Temp_bool_Variable_4) == 0x000028, "Member 'BP_MordhauSlider_C_Create_Divisions::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_AddChild_ReturnValue) == 0x000030, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_AddChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, K2Node_Select_Default) == 0x000038, "Member 'BP_MordhauSlider_C_Create_Divisions::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, K2Node_DynamicCast_AsHorizontal_Box_Slot) == 0x000040, "Member 'BP_MordhauSlider_C_Create_Divisions::K2Node_DynamicCast_AsHorizontal_Box_Slot' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_MordhauSlider_C_Create_Divisions::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, K2Node_Select_Default_1) == 0x000049, "Member 'BP_MordhauSlider_C_Create_Divisions::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_BreakVector2D_X) == 0x00004C, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_BreakVector2D_Y) == 0x000050, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_FFloor_ReturnValue) == 0x000054, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_Subtract_IntInt_ReturnValue) == 0x000058, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_Percent_IntInt_ReturnValue) == 0x00005C, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_Greater_IntInt_ReturnValue) == 0x000060, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000061, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000064, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_SelectInt_ReturnValue) == 0x000068, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00006C, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_Percent_IntInt_ReturnValue_1) == 0x000070, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_Percent_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_Round_ReturnValue) == 0x000074, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x000078, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000079, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_BooleanAND_ReturnValue) == 0x00007A, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, K2Node_Select_Default_2) == 0x00007B, "Member 'BP_MordhauSlider_C_Create_Divisions::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00007C, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, K2Node_Select_Default_3) == 0x00007D, "Member 'BP_MordhauSlider_C_Create_Divisions::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x00007E, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, K2Node_MakeStruct_SlateChildSize) == 0x000080, "Member 'BP_MordhauSlider_C_Create_Divisions::K2Node_MakeStruct_SlateChildSize' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_BooleanOR_ReturnValue) == 0x000088, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000089, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MordhauSlider_C_Create_Divisions, CallFunc_BooleanAND_ReturnValue_1) == 0x00008A, "Member 'BP_MordhauSlider_C_Create_Divisions::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

}

