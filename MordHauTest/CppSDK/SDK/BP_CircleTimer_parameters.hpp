#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CircleTimer

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_CircleTimer.BP_CircleTimer_C.ExecuteUbergraph_BP_CircleTimer
// 0x00E8 (0x00E8 - 0x0000)
struct BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Duration;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateBrush                            CallFunc_MakeBrushFromMaterial_ReturnValue;        // 0x0008(0x0088)()
	float                                         CallFunc_MapRangeUnclamped_ReturnValue;            // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x00A4(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer) == 0x000008, "Wrong alignment on BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer");
static_assert(sizeof(BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer) == 0x0000E8, "Wrong size on BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer");
static_assert(offsetof(BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer, EntryPoint) == 0x000000, "Member 'BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer, K2Node_CustomEvent_Duration) == 0x000004, "Member 'BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer::K2Node_CustomEvent_Duration' has a wrong offset!");
static_assert(offsetof(BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer, CallFunc_MakeBrushFromMaterial_ReturnValue) == 0x000008, "Member 'BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer::CallFunc_MakeBrushFromMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer, CallFunc_MapRangeUnclamped_ReturnValue) == 0x000090, "Member 'BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer::CallFunc_MapRangeUnclamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer, CallFunc_Less_FloatFloat_ReturnValue) == 0x000094, "Member 'BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer, CallFunc_Lerp_ReturnValue) == 0x000098, "Member 'BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x00009C, "Member 'BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000A0, "Member 'BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer, K2Node_Event_MyGeometry) == 0x0000A4, "Member 'BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer, K2Node_Event_InDeltaTime) == 0x0000DC, "Member 'BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x0000E0, "Member 'BP_CircleTimer_C_ExecuteUbergraph_BP_CircleTimer::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function BP_CircleTimer.BP_CircleTimer_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_CircleTimer_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CircleTimer_C_Tick) == 0x000004, "Wrong alignment on BP_CircleTimer_C_Tick");
static_assert(sizeof(BP_CircleTimer_C_Tick) == 0x00003C, "Wrong size on BP_CircleTimer_C_Tick");
static_assert(offsetof(BP_CircleTimer_C_Tick, MyGeometry) == 0x000000, "Member 'BP_CircleTimer_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_CircleTimer_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_CircleTimer_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_CircleTimer.BP_CircleTimer_C.Start Countdown
// 0x0004 (0x0004 - 0x0000)
struct BP_CircleTimer_C_Start_Countdown final
{
public:
	float                                         Duration_0;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CircleTimer_C_Start_Countdown) == 0x000004, "Wrong alignment on BP_CircleTimer_C_Start_Countdown");
static_assert(sizeof(BP_CircleTimer_C_Start_Countdown) == 0x000004, "Wrong size on BP_CircleTimer_C_Start_Countdown");
static_assert(offsetof(BP_CircleTimer_C_Start_Countdown, Duration_0) == 0x000000, "Member 'BP_CircleTimer_C_Start_Countdown::Duration_0' has a wrong offset!");

// Function BP_CircleTimer.BP_CircleTimer_C.GetPercent_0
// 0x0004 (0x0004 - 0x0000)
struct BP_CircleTimer_C_GetPercent_0 final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CircleTimer_C_GetPercent_0) == 0x000004, "Wrong alignment on BP_CircleTimer_C_GetPercent_0");
static_assert(sizeof(BP_CircleTimer_C_GetPercent_0) == 0x000004, "Wrong size on BP_CircleTimer_C_GetPercent_0");
static_assert(offsetof(BP_CircleTimer_C_GetPercent_0, ReturnValue) == 0x000000, "Member 'BP_CircleTimer_C_GetPercent_0::ReturnValue' has a wrong offset!");

// Function BP_CircleTimer.BP_CircleTimer_C.GetVisibility_0
// 0x0005 (0x0005 - 0x0000)
struct BP_CircleTimer_C_GetVisibility_0 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CircleTimer_C_GetVisibility_0) == 0x000001, "Wrong alignment on BP_CircleTimer_C_GetVisibility_0");
static_assert(sizeof(BP_CircleTimer_C_GetVisibility_0) == 0x000005, "Wrong size on BP_CircleTimer_C_GetVisibility_0");
static_assert(offsetof(BP_CircleTimer_C_GetVisibility_0, ReturnValue) == 0x000000, "Member 'BP_CircleTimer_C_GetVisibility_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CircleTimer_C_GetVisibility_0, Temp_bool_Variable) == 0x000001, "Member 'BP_CircleTimer_C_GetVisibility_0::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CircleTimer_C_GetVisibility_0, Temp_byte_Variable) == 0x000002, "Member 'BP_CircleTimer_C_GetVisibility_0::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CircleTimer_C_GetVisibility_0, Temp_byte_Variable_1) == 0x000003, "Member 'BP_CircleTimer_C_GetVisibility_0::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CircleTimer_C_GetVisibility_0, K2Node_Select_Default) == 0x000004, "Member 'BP_CircleTimer_C_GetVisibility_0::K2Node_Select_Default' has a wrong offset!");

}

