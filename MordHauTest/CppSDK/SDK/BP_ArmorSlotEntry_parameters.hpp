#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ArmorSlotEntry

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "Mordhau_structs.hpp"


namespace SDK::Params
{

// Function BP_ArmorSlotEntry.BP_ArmorSlotEntry_C.ExecuteUbergraph_BP_ArmorSlotEntry
// 0x0004 (0x0004 - 0x0000)
struct BP_ArmorSlotEntry_C_ExecuteUbergraph_BP_ArmorSlotEntry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ArmorSlotEntry_C_ExecuteUbergraph_BP_ArmorSlotEntry) == 0x000004, "Wrong alignment on BP_ArmorSlotEntry_C_ExecuteUbergraph_BP_ArmorSlotEntry");
static_assert(sizeof(BP_ArmorSlotEntry_C_ExecuteUbergraph_BP_ArmorSlotEntry) == 0x000004, "Wrong size on BP_ArmorSlotEntry_C_ExecuteUbergraph_BP_ArmorSlotEntry");
static_assert(offsetof(BP_ArmorSlotEntry_C_ExecuteUbergraph_BP_ArmorSlotEntry, EntryPoint) == 0x000000, "Member 'BP_ArmorSlotEntry_C_ExecuteUbergraph_BP_ArmorSlotEntry::EntryPoint' has a wrong offset!");

// Function BP_ArmorSlotEntry.BP_ArmorSlotEntry_C.Update
// 0x0050 (0x0050 - 0x0000)
struct BP_ArmorSlotEntry_C_Update final
{
public:
	struct FCharacterGearCustomization            Character_Gear_Customization;                      // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm)
	TSubclassOf<class UMordhauWearable>           CallFunc_GetWearableClass_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0038(0x0018)()
};
static_assert(alignof(BP_ArmorSlotEntry_C_Update) == 0x000008, "Wrong alignment on BP_ArmorSlotEntry_C_Update");
static_assert(sizeof(BP_ArmorSlotEntry_C_Update) == 0x000050, "Wrong size on BP_ArmorSlotEntry_C_Update");
static_assert(offsetof(BP_ArmorSlotEntry_C_Update, Character_Gear_Customization) == 0x000000, "Member 'BP_ArmorSlotEntry_C_Update::Character_Gear_Customization' has a wrong offset!");
static_assert(offsetof(BP_ArmorSlotEntry_C_Update, CallFunc_GetWearableClass_ReturnValue) == 0x000020, "Member 'BP_ArmorSlotEntry_C_Update::CallFunc_GetWearableClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ArmorSlotEntry_C_Update, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000028, "Member 'BP_ArmorSlotEntry_C_Update::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ArmorSlotEntry_C_Update, CallFunc_Conv_StringToText_ReturnValue) == 0x000038, "Member 'BP_ArmorSlotEntry_C_Update::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function BP_ArmorSlotEntry.BP_ArmorSlotEntry_C.HideIfMinimal_Visibility
// 0x0005 (0x0005 - 0x0000)
struct BP_ArmorSlotEntry_C_HideIfMinimal_Visibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ArmorSlotEntry_C_HideIfMinimal_Visibility) == 0x000001, "Wrong alignment on BP_ArmorSlotEntry_C_HideIfMinimal_Visibility");
static_assert(sizeof(BP_ArmorSlotEntry_C_HideIfMinimal_Visibility) == 0x000005, "Wrong size on BP_ArmorSlotEntry_C_HideIfMinimal_Visibility");
static_assert(offsetof(BP_ArmorSlotEntry_C_HideIfMinimal_Visibility, ReturnValue) == 0x000000, "Member 'BP_ArmorSlotEntry_C_HideIfMinimal_Visibility::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ArmorSlotEntry_C_HideIfMinimal_Visibility, Temp_bool_Variable) == 0x000001, "Member 'BP_ArmorSlotEntry_C_HideIfMinimal_Visibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ArmorSlotEntry_C_HideIfMinimal_Visibility, Temp_byte_Variable) == 0x000002, "Member 'BP_ArmorSlotEntry_C_HideIfMinimal_Visibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_ArmorSlotEntry_C_HideIfMinimal_Visibility, Temp_byte_Variable_1) == 0x000003, "Member 'BP_ArmorSlotEntry_C_HideIfMinimal_Visibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ArmorSlotEntry_C_HideIfMinimal_Visibility, K2Node_Select_Default) == 0x000004, "Member 'BP_ArmorSlotEntry_C_HideIfMinimal_Visibility::K2Node_Select_Default' has a wrong offset!");

}

