#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VehicleCatapult2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_VehicleCatapult2.BP_VehicleCatapult2_C.ExecuteUbergraph_BP_VehicleCatapult2
// 0x0028 (0x0028 - 0x0000)
struct BP_VehicleCatapult2_C_ExecuteUbergraph_BP_VehicleCatapult2 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AMordhauCharacter*                      K2Node_Event_Character;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bRotationOnly;                        // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLookUpValue_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VehicleCatapult2_C_ExecuteUbergraph_BP_VehicleCatapult2) == 0x000008, "Wrong alignment on BP_VehicleCatapult2_C_ExecuteUbergraph_BP_VehicleCatapult2");
static_assert(sizeof(BP_VehicleCatapult2_C_ExecuteUbergraph_BP_VehicleCatapult2) == 0x000028, "Wrong size on BP_VehicleCatapult2_C_ExecuteUbergraph_BP_VehicleCatapult2");
static_assert(offsetof(BP_VehicleCatapult2_C_ExecuteUbergraph_BP_VehicleCatapult2, EntryPoint) == 0x000000, "Member 'BP_VehicleCatapult2_C_ExecuteUbergraph_BP_VehicleCatapult2::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_VehicleCatapult2_C_ExecuteUbergraph_BP_VehicleCatapult2, CallFunc_MakeRotator_ReturnValue) == 0x000004, "Member 'BP_VehicleCatapult2_C_ExecuteUbergraph_BP_VehicleCatapult2::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleCatapult2_C_ExecuteUbergraph_BP_VehicleCatapult2, K2Node_Event_Character) == 0x000010, "Member 'BP_VehicleCatapult2_C_ExecuteUbergraph_BP_VehicleCatapult2::K2Node_Event_Character' has a wrong offset!");
static_assert(offsetof(BP_VehicleCatapult2_C_ExecuteUbergraph_BP_VehicleCatapult2, K2Node_Event_DeltaSeconds) == 0x000018, "Member 'BP_VehicleCatapult2_C_ExecuteUbergraph_BP_VehicleCatapult2::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_VehicleCatapult2_C_ExecuteUbergraph_BP_VehicleCatapult2, K2Node_Event_bRotationOnly) == 0x00001C, "Member 'BP_VehicleCatapult2_C_ExecuteUbergraph_BP_VehicleCatapult2::K2Node_Event_bRotationOnly' has a wrong offset!");
static_assert(offsetof(BP_VehicleCatapult2_C_ExecuteUbergraph_BP_VehicleCatapult2, CallFunc_GetLookUpValue_ReturnValue) == 0x000020, "Member 'BP_VehicleCatapult2_C_ExecuteUbergraph_BP_VehicleCatapult2::CallFunc_GetLookUpValue_ReturnValue' has a wrong offset!");

// Function BP_VehicleCatapult2.BP_VehicleCatapult2_C.UpdateFPCameraFor
// 0x0010 (0x0010 - 0x0000)
struct BP_VehicleCatapult2_C_UpdateFPCameraFor final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRotationOnly;                                     // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VehicleCatapult2_C_UpdateFPCameraFor) == 0x000008, "Wrong alignment on BP_VehicleCatapult2_C_UpdateFPCameraFor");
static_assert(sizeof(BP_VehicleCatapult2_C_UpdateFPCameraFor) == 0x000010, "Wrong size on BP_VehicleCatapult2_C_UpdateFPCameraFor");
static_assert(offsetof(BP_VehicleCatapult2_C_UpdateFPCameraFor, Character) == 0x000000, "Member 'BP_VehicleCatapult2_C_UpdateFPCameraFor::Character' has a wrong offset!");
static_assert(offsetof(BP_VehicleCatapult2_C_UpdateFPCameraFor, DeltaSeconds) == 0x000008, "Member 'BP_VehicleCatapult2_C_UpdateFPCameraFor::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_VehicleCatapult2_C_UpdateFPCameraFor, bRotationOnly) == 0x00000C, "Member 'BP_VehicleCatapult2_C_UpdateFPCameraFor::bRotationOnly' has a wrong offset!");

// Function BP_VehicleCatapult2.BP_VehicleCatapult2_C.PostProcessCameraPOV
// 0x00D0 (0x00D0 - 0x0000)
struct BP_VehicleCatapult2_C_PostProcessCameraPOV final
{
public:
	struct FPOV                                   InPOV;                                             // 0x0000(0x001C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      Character;                                         // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPOV                                   ReturnValue;                                       // 0x0028(0x001C)(Parm, OutParm, ReturnParm, NoDestructor)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetMesh_ReturnValue;                      // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0xF];                                       // 0x0051(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPOV                                   K2Node_MakeStruct_POV;                             // 0x00B4(0x001C)(NoDestructor)
};
static_assert(alignof(BP_VehicleCatapult2_C_PostProcessCameraPOV) == 0x000010, "Wrong alignment on BP_VehicleCatapult2_C_PostProcessCameraPOV");
static_assert(sizeof(BP_VehicleCatapult2_C_PostProcessCameraPOV) == 0x0000D0, "Wrong size on BP_VehicleCatapult2_C_PostProcessCameraPOV");
static_assert(offsetof(BP_VehicleCatapult2_C_PostProcessCameraPOV, InPOV) == 0x000000, "Member 'BP_VehicleCatapult2_C_PostProcessCameraPOV::InPOV' has a wrong offset!");
static_assert(offsetof(BP_VehicleCatapult2_C_PostProcessCameraPOV, Character) == 0x000020, "Member 'BP_VehicleCatapult2_C_PostProcessCameraPOV::Character' has a wrong offset!");
static_assert(offsetof(BP_VehicleCatapult2_C_PostProcessCameraPOV, ReturnValue) == 0x000028, "Member 'BP_VehicleCatapult2_C_PostProcessCameraPOV::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleCatapult2_C_PostProcessCameraPOV, CallFunc_GetMesh_ReturnValue) == 0x000048, "Member 'BP_VehicleCatapult2_C_PostProcessCameraPOV::CallFunc_GetMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleCatapult2_C_PostProcessCameraPOV, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'BP_VehicleCatapult2_C_PostProcessCameraPOV::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleCatapult2_C_PostProcessCameraPOV, CallFunc_GetSocketTransform_ReturnValue) == 0x000060, "Member 'BP_VehicleCatapult2_C_PostProcessCameraPOV::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VehicleCatapult2_C_PostProcessCameraPOV, CallFunc_BreakTransform_Location) == 0x000090, "Member 'BP_VehicleCatapult2_C_PostProcessCameraPOV::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_VehicleCatapult2_C_PostProcessCameraPOV, CallFunc_BreakTransform_Rotation) == 0x00009C, "Member 'BP_VehicleCatapult2_C_PostProcessCameraPOV::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_VehicleCatapult2_C_PostProcessCameraPOV, CallFunc_BreakTransform_Scale) == 0x0000A8, "Member 'BP_VehicleCatapult2_C_PostProcessCameraPOV::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_VehicleCatapult2_C_PostProcessCameraPOV, K2Node_MakeStruct_POV) == 0x0000B4, "Member 'BP_VehicleCatapult2_C_PostProcessCameraPOV::K2Node_MakeStruct_POV' has a wrong offset!");

}

