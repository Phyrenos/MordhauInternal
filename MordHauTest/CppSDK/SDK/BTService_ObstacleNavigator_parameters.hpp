#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTService_ObstacleNavigator

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Mordhau_structs.hpp"


namespace SDK::Params
{

// Function BTService_ObstacleNavigator.BTService_ObstacleNavigator_C.ExecuteUbergraph_BTService_ObstacleNavigator
// 0x01A0 (0x01A0 - 0x0000)
struct BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttackMove                                   Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttackMove                                   Temp_byte_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      K2Node_DynamicCast_AsMordhau_Character;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauAIController*                   K2Node_DynamicCast_AsMordhau_AIController;         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauMotion*                         CallFunc_GetMotion_ReturnValue;                    // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasPartialPath_ReturnValue;               // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UIdleMotion*                            K2Node_DynamicCast_AsIdle_Motion;                  // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetAllyClearanceSides_ReturnValue;        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauEquipment*                      CallFunc_DropSlot_ReturnValue;                     // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EAttackMove                                   K2Node_Select_Default;                             // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauEquipment*                      CallFunc_Array_Get_Item;                           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauEquipment*                      CallFunc_Array_Get_Item_1;                         // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Turd_C*                             K2Node_DynamicCast_AsBP_Turd;                      // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Turd_C*                             K2Node_DynamicCast_AsBP_Turd_1;                    // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetLastMovementFrontalHitActor_ReturnValue; // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_DestroyableActor_C*                 K2Node_DynamicCast_AsBP_Destroyable_Actor;         // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorBounds_Origin;                    // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorBounds_BoxExtent;                 // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Door_C*                             K2Node_DynamicCast_AsBP_Door;                      // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeSeconds_ReturnValue;               // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0140(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_TurdHordeBot_C*                     CallFunc_FinishSpawningActor_ReturnValue;          // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PickUp_ReturnValue;                       // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_191[0x3];                                      // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator) == 0x000010, "Wrong alignment on BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator");
static_assert(sizeof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator) == 0x0001A0, "Wrong size on BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, EntryPoint) == 0x000000, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, Temp_byte_Variable) == 0x000004, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_Conv_IntToByte_ReturnValue) == 0x000005, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000006, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, Temp_byte_Variable_1) == 0x00000C, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, Temp_bool_True_if_break_was_hit_Variable) == 0x00000D, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00000E, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_Not_PreBool_ReturnValue) == 0x00000F, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, Temp_bool_True_if_break_was_hit_Variable_1) == 0x000018, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, Temp_int_Array_Index_Variable_1) == 0x00001C, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_Not_PreBool_ReturnValue_1) == 0x000020, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_MakeLiteralByte_ReturnValue) == 0x000021, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, K2Node_Event_OwnerController) == 0x000028, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, K2Node_Event_ControlledPawn) == 0x000030, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, K2Node_Event_DeltaSeconds) == 0x000038, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, Temp_int_Variable) == 0x00003C, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, K2Node_DynamicCast_AsMordhau_Character) == 0x000040, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::K2Node_DynamicCast_AsMordhau_Character' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, K2Node_DynamicCast_AsMordhau_AIController) == 0x000050, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::K2Node_DynamicCast_AsMordhau_AIController' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_GetMotion_ReturnValue) == 0x000060, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_GetMotion_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_HasPartialPath_ReturnValue) == 0x000068, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_HasPartialPath_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, K2Node_DynamicCast_AsIdle_Motion) == 0x000070, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::K2Node_DynamicCast_AsIdle_Motion' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, K2Node_DynamicCast_bSuccess_2) == 0x000078, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_GetAllyClearanceSides_ReturnValue) == 0x00007C, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_GetAllyClearanceSides_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_DropSlot_ReturnValue) == 0x000080, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_DropSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_IsValid_ReturnValue) == 0x000088, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, K2Node_Select_Default) == 0x000089, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_Array_Get_Item) == 0x000090, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_Array_Get_Item_1) == 0x000098, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, K2Node_DynamicCast_AsBP_Turd) == 0x0000A0, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::K2Node_DynamicCast_AsBP_Turd' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, K2Node_DynamicCast_bSuccess_3) == 0x0000A8, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_IsValid_ReturnValue_1) == 0x0000A9, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, K2Node_DynamicCast_AsBP_Turd_1) == 0x0000B0, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::K2Node_DynamicCast_AsBP_Turd_1' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, K2Node_DynamicCast_bSuccess_4) == 0x0000B8, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_Array_Length_ReturnValue) == 0x0000BC, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_Array_Length_ReturnValue_1) == 0x0000C0, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_Less_IntInt_ReturnValue) == 0x0000C4, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_GetLastMovementFrontalHitActor_ReturnValue) == 0x0000C8, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_GetLastMovementFrontalHitActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_BooleanAND_ReturnValue) == 0x0000D0, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, K2Node_DynamicCast_AsBP_Destroyable_Actor) == 0x0000D8, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::K2Node_DynamicCast_AsBP_Destroyable_Actor' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, K2Node_DynamicCast_bSuccess_5) == 0x0000E0, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_GetActorBounds_Origin) == 0x0000E4, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_GetActorBounds_Origin' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_GetActorBounds_BoxExtent) == 0x0000F0, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_GetActorBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, K2Node_DynamicCast_AsBP_Door) == 0x000100, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::K2Node_DynamicCast_AsBP_Door' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, K2Node_DynamicCast_bSuccess_6) == 0x000108, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_Add_FloatFloat_ReturnValue) == 0x00010C, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000110, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00011C, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_VSize_ReturnValue) == 0x000128, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00012C, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_GetTimeSeconds_ReturnValue) == 0x000130, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_GetTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_Less_FloatFloat_ReturnValue) == 0x000134, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_RandomFloatInRange_ReturnValue) == 0x000138, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_MakeTransform_ReturnValue) == 0x000140, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000170, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000178, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_FinishSpawningActor_ReturnValue) == 0x000180, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_PickUp_ReturnValue) == 0x000188, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_PickUp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, Temp_int_Loop_Counter_Variable_1) == 0x00018C, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_Less_IntInt_ReturnValue_1) == 0x000190, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_Add_IntInt_ReturnValue_1) == 0x000194, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator, CallFunc_BooleanAND_ReturnValue_1) == 0x000198, "Member 'BTService_ObstacleNavigator_C_ExecuteUbergraph_BTService_ObstacleNavigator::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BTService_ObstacleNavigator.BTService_ObstacleNavigator_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct BTService_ObstacleNavigator_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTService_ObstacleNavigator_C_ReceiveTickAI) == 0x000008, "Wrong alignment on BTService_ObstacleNavigator_C_ReceiveTickAI");
static_assert(sizeof(BTService_ObstacleNavigator_C_ReceiveTickAI) == 0x000018, "Wrong size on BTService_ObstacleNavigator_C_ReceiveTickAI");
static_assert(offsetof(BTService_ObstacleNavigator_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'BTService_ObstacleNavigator_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ReceiveTickAI, ControlledPawn) == 0x000008, "Member 'BTService_ObstacleNavigator_C_ReceiveTickAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTService_ObstacleNavigator_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'BTService_ObstacleNavigator_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

}

