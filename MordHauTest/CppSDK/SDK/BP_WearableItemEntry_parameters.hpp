#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WearableItemEntry

#include "Basic.hpp"

#include "S_WearableData_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Mordhau_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_WearableItemEntry.BP_WearableItemEntry_C.ExecuteUbergraph_BP_WearableItemEntry
// 0x00C8 (0x00C8 - 0x0000)
struct BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ArmorTooltip_C*                     CallFunc_Create_ReturnValue;                       // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0030(0x0010)(ZeroConstructor, NoDestructor)
	class UObject*                                K2Node_Event_ListItemObject;                       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_WearableData_C*                     K2Node_DynamicCast_AsBP_Wearable_Data;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsSelected;                          // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x0058(0x0070)(ConstParm)
};
static_assert(alignof(BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry) == 0x000008, "Wrong alignment on BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry");
static_assert(sizeof(BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry) == 0x0000C8, "Wrong size on BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry");
static_assert(offsetof(BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry, EntryPoint) == 0x000000, "Member 'BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry, CallFunc_Create_ReturnValue) == 0x000028, "Member 'BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry, K2Node_CreateDelegate_OutputDelegate_2) == 0x000030, "Member 'BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry, K2Node_Event_ListItemObject) == 0x000040, "Member 'BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry::K2Node_Event_ListItemObject' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry, K2Node_DynamicCast_AsBP_Wearable_Data) == 0x000048, "Member 'BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry::K2Node_DynamicCast_AsBP_Wearable_Data' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry, K2Node_Event_bIsSelected) == 0x000051, "Member 'BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry::K2Node_Event_bIsSelected' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry, K2Node_Event_MouseEvent) == 0x000058, "Member 'BP_WearableItemEntry_C_ExecuteUbergraph_BP_WearableItemEntry::K2Node_Event_MouseEvent' has a wrong offset!");

// Function BP_WearableItemEntry.BP_WearableItemEntry_C.OnMouseLeave
// 0x0070 (0x0070 - 0x0000)
struct BP_WearableItemEntry_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_WearableItemEntry_C_OnMouseLeave) == 0x000008, "Wrong alignment on BP_WearableItemEntry_C_OnMouseLeave");
static_assert(sizeof(BP_WearableItemEntry_C_OnMouseLeave) == 0x000070, "Wrong size on BP_WearableItemEntry_C_OnMouseLeave");
static_assert(offsetof(BP_WearableItemEntry_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'BP_WearableItemEntry_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function BP_WearableItemEntry.BP_WearableItemEntry_C.Initialize Wearable Entry
// 0x0120 (0x0120 - 0x0000)
struct BP_WearableItemEntry_C_Initialize_Wearable_Entry final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EWearableSlot                                 Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_4;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_5;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_6;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_7;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_8;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_9;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_10;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_11;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0078(0x0018)()
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A3[0x5];                                       // 0x00A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x00A8(0x0010)(ReferenceParm)
	int32                                         CallFunc_GetGoldAndRankUnlockRequirement_Gold;     // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGoldAndRankUnlockRequirement_Rank;     // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetUnlockTooltipText_TooltipText;         // 0x00C8(0x0018)()
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_2;                           // 0x00E8(0x0018)()
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_102[0x6];                                      // 0x0102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_3;                           // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_4;                           // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WearableItemEntry_C_Initialize_Wearable_Entry) == 0x000008, "Wrong alignment on BP_WearableItemEntry_C_Initialize_Wearable_Entry");
static_assert(sizeof(BP_WearableItemEntry_C_Initialize_Wearable_Entry) == 0x000120, "Wrong size on BP_WearableItemEntry_C_Initialize_Wearable_Entry");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, Temp_bool_Variable) == 0x000000, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, Temp_byte_Variable) == 0x000001, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, Temp_object_Variable) == 0x000008, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, Temp_object_Variable_1) == 0x000010, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, Temp_object_Variable_2) == 0x000018, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, Temp_object_Variable_3) == 0x000020, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, Temp_object_Variable_4) == 0x000028, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, Temp_object_Variable_5) == 0x000030, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, Temp_object_Variable_6) == 0x000038, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, Temp_object_Variable_7) == 0x000040, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, Temp_object_Variable_8) == 0x000048, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, Temp_object_Variable_9) == 0x000050, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, Temp_object_Variable_10) == 0x000058, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, Temp_bool_Variable_1) == 0x000060, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, Temp_object_Variable_11) == 0x000068, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, CallFunc_Not_PreBool_ReturnValue) == 0x000070, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, Temp_bool_Variable_2) == 0x000071, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, Temp_byte_Variable_1) == 0x000072, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, Temp_byte_Variable_2) == 0x000073, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, Temp_bool_Variable_3) == 0x000074, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, Temp_text_Variable) == 0x000078, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, K2Node_Select_Default) == 0x000090, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, CallFunc_PlayAnimation_ReturnValue) == 0x000098, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, CallFunc_IsValid_ReturnValue) == 0x0000A0, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, CallFunc_IsValid_ReturnValue_1) == 0x0000A1, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, CallFunc_IsValid_ReturnValue_2) == 0x0000A2, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, K2Node_MakeArray_Array) == 0x0000A8, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, CallFunc_GetGoldAndRankUnlockRequirement_Gold) == 0x0000B8, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::CallFunc_GetGoldAndRankUnlockRequirement_Gold' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, CallFunc_GetGoldAndRankUnlockRequirement_Rank) == 0x0000BC, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::CallFunc_GetGoldAndRankUnlockRequirement_Rank' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, CallFunc_BooleanOR_ReturnValue) == 0x0000C0, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, CallFunc_GetUnlockTooltipText_TooltipText) == 0x0000C8, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::CallFunc_GetUnlockTooltipText_TooltipText' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, K2Node_Select_Default_1) == 0x0000E0, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000E1, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, K2Node_Select_Default_2) == 0x0000E8, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000100, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, CallFunc_IsValid_ReturnValue_3) == 0x000101, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, K2Node_Select_Default_3) == 0x000108, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, K2Node_Select_Default_4) == 0x000110, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Initialize_Wearable_Entry, CallFunc_IsValidClass_ReturnValue) == 0x000118, "Member 'BP_WearableItemEntry_C_Initialize_Wearable_Entry::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");

// Function BP_WearableItemEntry.BP_WearableItemEntry_C.Get_CostAndIconBox_Visibility_0
// 0x0006 (0x0006 - 0x0000)
struct BP_WearableItemEntry_C_Get_CostAndIconBox_Visibility_0 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WearableItemEntry_C_Get_CostAndIconBox_Visibility_0) == 0x000001, "Wrong alignment on BP_WearableItemEntry_C_Get_CostAndIconBox_Visibility_0");
static_assert(sizeof(BP_WearableItemEntry_C_Get_CostAndIconBox_Visibility_0) == 0x000006, "Wrong size on BP_WearableItemEntry_C_Get_CostAndIconBox_Visibility_0");
static_assert(offsetof(BP_WearableItemEntry_C_Get_CostAndIconBox_Visibility_0, ReturnValue) == 0x000000, "Member 'BP_WearableItemEntry_C_Get_CostAndIconBox_Visibility_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_CostAndIconBox_Visibility_0, Temp_bool_Variable) == 0x000001, "Member 'BP_WearableItemEntry_C_Get_CostAndIconBox_Visibility_0::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_CostAndIconBox_Visibility_0, Temp_byte_Variable) == 0x000002, "Member 'BP_WearableItemEntry_C_Get_CostAndIconBox_Visibility_0::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_CostAndIconBox_Visibility_0, Temp_byte_Variable_1) == 0x000003, "Member 'BP_WearableItemEntry_C_Get_CostAndIconBox_Visibility_0::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_CostAndIconBox_Visibility_0, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000004, "Member 'BP_WearableItemEntry_C_Get_CostAndIconBox_Visibility_0::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_CostAndIconBox_Visibility_0, K2Node_Select_Default) == 0x000005, "Member 'BP_WearableItemEntry_C_Get_CostAndIconBox_Visibility_0::K2Node_Select_Default' has a wrong offset!");

// Function BP_WearableItemEntry.BP_WearableItemEntry_C.Get Selected Visibility 0
// 0x0005 (0x0005 - 0x0000)
struct BP_WearableItemEntry_C_Get_Selected_Visibility_0 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WearableItemEntry_C_Get_Selected_Visibility_0) == 0x000001, "Wrong alignment on BP_WearableItemEntry_C_Get_Selected_Visibility_0");
static_assert(sizeof(BP_WearableItemEntry_C_Get_Selected_Visibility_0) == 0x000005, "Wrong size on BP_WearableItemEntry_C_Get_Selected_Visibility_0");
static_assert(offsetof(BP_WearableItemEntry_C_Get_Selected_Visibility_0, ReturnValue) == 0x000000, "Member 'BP_WearableItemEntry_C_Get_Selected_Visibility_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_Selected_Visibility_0, Temp_bool_Variable) == 0x000001, "Member 'BP_WearableItemEntry_C_Get_Selected_Visibility_0::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_Selected_Visibility_0, Temp_byte_Variable) == 0x000002, "Member 'BP_WearableItemEntry_C_Get_Selected_Visibility_0::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_Selected_Visibility_0, Temp_byte_Variable_1) == 0x000003, "Member 'BP_WearableItemEntry_C_Get_Selected_Visibility_0::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_Selected_Visibility_0, K2Node_Select_Default) == 0x000004, "Member 'BP_WearableItemEntry_C_Get_Selected_Visibility_0::K2Node_Select_Default' has a wrong offset!");

// Function BP_WearableItemEntry.BP_WearableItemEntry_C.Get_ic_locked_Visibility_0
// 0x0005 (0x0005 - 0x0000)
struct BP_WearableItemEntry_C_Get_ic_locked_Visibility_0 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WearableItemEntry_C_Get_ic_locked_Visibility_0) == 0x000001, "Wrong alignment on BP_WearableItemEntry_C_Get_ic_locked_Visibility_0");
static_assert(sizeof(BP_WearableItemEntry_C_Get_ic_locked_Visibility_0) == 0x000005, "Wrong size on BP_WearableItemEntry_C_Get_ic_locked_Visibility_0");
static_assert(offsetof(BP_WearableItemEntry_C_Get_ic_locked_Visibility_0, ReturnValue) == 0x000000, "Member 'BP_WearableItemEntry_C_Get_ic_locked_Visibility_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_ic_locked_Visibility_0, Temp_bool_Variable) == 0x000001, "Member 'BP_WearableItemEntry_C_Get_ic_locked_Visibility_0::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_ic_locked_Visibility_0, Temp_byte_Variable) == 0x000002, "Member 'BP_WearableItemEntry_C_Get_ic_locked_Visibility_0::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_ic_locked_Visibility_0, Temp_byte_Variable_1) == 0x000003, "Member 'BP_WearableItemEntry_C_Get_ic_locked_Visibility_0::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_ic_locked_Visibility_0, K2Node_Select_Default) == 0x000004, "Member 'BP_WearableItemEntry_C_Get_ic_locked_Visibility_0::K2Node_Select_Default' has a wrong offset!");

// Function BP_WearableItemEntry.BP_WearableItemEntry_C.GetVisibility_0
// 0x0007 (0x0007 - 0x0000)
struct BP_WearableItemEntry_C_GetVisibility_0 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsPeasant_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WearableItemEntry_C_GetVisibility_0) == 0x000001, "Wrong alignment on BP_WearableItemEntry_C_GetVisibility_0");
static_assert(sizeof(BP_WearableItemEntry_C_GetVisibility_0) == 0x000007, "Wrong size on BP_WearableItemEntry_C_GetVisibility_0");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_0, ReturnValue) == 0x000000, "Member 'BP_WearableItemEntry_C_GetVisibility_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_0, Temp_bool_Variable) == 0x000001, "Member 'BP_WearableItemEntry_C_GetVisibility_0::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_0, Temp_byte_Variable) == 0x000002, "Member 'BP_WearableItemEntry_C_GetVisibility_0::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_0, Temp_byte_Variable_1) == 0x000003, "Member 'BP_WearableItemEntry_C_GetVisibility_0::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_0, CallFunc_GetIsPeasant_ReturnValue) == 0x000004, "Member 'BP_WearableItemEntry_C_GetVisibility_0::CallFunc_GetIsPeasant_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_0, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000005, "Member 'BP_WearableItemEntry_C_GetVisibility_0::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_0, K2Node_Select_Default) == 0x000006, "Member 'BP_WearableItemEntry_C_GetVisibility_0::K2Node_Select_Default' has a wrong offset!");

// Function BP_WearableItemEntry.BP_WearableItemEntry_C.GetVisibility_1
// 0x0006 (0x0006 - 0x0000)
struct BP_WearableItemEntry_C_GetVisibility_1 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHovered_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WearableItemEntry_C_GetVisibility_1) == 0x000001, "Wrong alignment on BP_WearableItemEntry_C_GetVisibility_1");
static_assert(sizeof(BP_WearableItemEntry_C_GetVisibility_1) == 0x000006, "Wrong size on BP_WearableItemEntry_C_GetVisibility_1");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_1, ReturnValue) == 0x000000, "Member 'BP_WearableItemEntry_C_GetVisibility_1::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_1, Temp_bool_Variable) == 0x000001, "Member 'BP_WearableItemEntry_C_GetVisibility_1::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_1, Temp_byte_Variable) == 0x000002, "Member 'BP_WearableItemEntry_C_GetVisibility_1::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_1, Temp_byte_Variable_1) == 0x000003, "Member 'BP_WearableItemEntry_C_GetVisibility_1::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_1, CallFunc_IsHovered_ReturnValue) == 0x000004, "Member 'BP_WearableItemEntry_C_GetVisibility_1::CallFunc_IsHovered_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_1, K2Node_Select_Default) == 0x000005, "Member 'BP_WearableItemEntry_C_GetVisibility_1::K2Node_Select_Default' has a wrong offset!");

// Function BP_WearableItemEntry.BP_WearableItemEntry_C.Update Entry Name
// 0x00D8 (0x00D8 - 0x0000)
struct BP_WearableItemEntry_C_Update_Entry_Name final
{
public:
	class FText                                   Param_Name_0;                                      // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Len_ReturnValue;                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Contains_ReturnValue;                     // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Split_LeftS;                              // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_RightS;                             // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Split_ReturnValue;                        // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindSubstring_ReturnValue;                // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetSubstring_ReturnValue;                 // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00C0(0x0018)()
};
static_assert(alignof(BP_WearableItemEntry_C_Update_Entry_Name) == 0x000008, "Wrong alignment on BP_WearableItemEntry_C_Update_Entry_Name");
static_assert(sizeof(BP_WearableItemEntry_C_Update_Entry_Name) == 0x0000D8, "Wrong size on BP_WearableItemEntry_C_Update_Entry_Name");
static_assert(offsetof(BP_WearableItemEntry_C_Update_Entry_Name, Param_Name_0) == 0x000000, "Member 'BP_WearableItemEntry_C_Update_Entry_Name::Param_Name_0' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Update_Entry_Name, CallFunc_Conv_TextToString_ReturnValue) == 0x000018, "Member 'BP_WearableItemEntry_C_Update_Entry_Name::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Update_Entry_Name, CallFunc_Conv_TextToString_ReturnValue_1) == 0x000028, "Member 'BP_WearableItemEntry_C_Update_Entry_Name::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Update_Entry_Name, CallFunc_Len_ReturnValue) == 0x000038, "Member 'BP_WearableItemEntry_C_Update_Entry_Name::CallFunc_Len_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Update_Entry_Name, CallFunc_Contains_ReturnValue) == 0x00003C, "Member 'BP_WearableItemEntry_C_Update_Entry_Name::CallFunc_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Update_Entry_Name, CallFunc_Split_LeftS) == 0x000040, "Member 'BP_WearableItemEntry_C_Update_Entry_Name::CallFunc_Split_LeftS' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Update_Entry_Name, CallFunc_Split_RightS) == 0x000050, "Member 'BP_WearableItemEntry_C_Update_Entry_Name::CallFunc_Split_RightS' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Update_Entry_Name, CallFunc_Split_ReturnValue) == 0x000060, "Member 'BP_WearableItemEntry_C_Update_Entry_Name::CallFunc_Split_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Update_Entry_Name, CallFunc_Concat_StrStr_ReturnValue) == 0x000068, "Member 'BP_WearableItemEntry_C_Update_Entry_Name::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Update_Entry_Name, CallFunc_FindSubstring_ReturnValue) == 0x000078, "Member 'BP_WearableItemEntry_C_Update_Entry_Name::CallFunc_FindSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Update_Entry_Name, CallFunc_GetSubstring_ReturnValue) == 0x000080, "Member 'BP_WearableItemEntry_C_Update_Entry_Name::CallFunc_GetSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Update_Entry_Name, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000090, "Member 'BP_WearableItemEntry_C_Update_Entry_Name::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Update_Entry_Name, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000A0, "Member 'BP_WearableItemEntry_C_Update_Entry_Name::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Update_Entry_Name, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000B0, "Member 'BP_WearableItemEntry_C_Update_Entry_Name::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Update_Entry_Name, CallFunc_Conv_StringToText_ReturnValue) == 0x0000C0, "Member 'BP_WearableItemEntry_C_Update_Entry_Name::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function BP_WearableItemEntry.BP_WearableItemEntry_C.Get_Image_10_ColorAndOpacity_0
// 0x006C (0x006C - 0x0000)
struct BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0 final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHovered_ReturnValue;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x005C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0) == 0x000004, "Wrong alignment on BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0");
static_assert(sizeof(BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0) == 0x00006C, "Wrong size on BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0");
static_assert(offsetof(BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0, ReturnValue) == 0x000000, "Member 'BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0, Temp_bool_Variable) == 0x000010, "Member 'BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0, Temp_struct_Variable) == 0x000014, "Member 'BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0, Temp_struct_Variable_1) == 0x000024, "Member 'BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0, Temp_bool_Variable_1) == 0x000034, "Member 'BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0, Temp_struct_Variable_2) == 0x000038, "Member 'BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0, CallFunc_IsHovered_ReturnValue) == 0x000048, "Member 'BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0::CallFunc_IsHovered_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0, K2Node_Select_Default) == 0x00004C, "Member 'BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0, K2Node_Select_Default_1) == 0x00005C, "Member 'BP_WearableItemEntry_C_Get_Image_10_ColorAndOpacity_0::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_WearableItemEntry.BP_WearableItemEntry_C.GetData
// 0x0038 (0x0038 - 0x0000)
struct BP_WearableItemEntry_C_GetData final
{
public:
	struct FS_WearableData                        WearableData_0;                                    // 0x0000(0x0038)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_WearableItemEntry_C_GetData) == 0x000008, "Wrong alignment on BP_WearableItemEntry_C_GetData");
static_assert(sizeof(BP_WearableItemEntry_C_GetData) == 0x000038, "Wrong size on BP_WearableItemEntry_C_GetData");
static_assert(offsetof(BP_WearableItemEntry_C_GetData, WearableData_0) == 0x000000, "Member 'BP_WearableItemEntry_C_GetData::WearableData_0' has a wrong offset!");

// Function BP_WearableItemEntry.BP_WearableItemEntry_C.GetVisibility_2
// 0x0008 (0x0008 - 0x0000)
struct BP_WearableItemEntry_C_GetVisibility_2 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHovered_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WearableItemEntry_C_GetVisibility_2) == 0x000001, "Wrong alignment on BP_WearableItemEntry_C_GetVisibility_2");
static_assert(sizeof(BP_WearableItemEntry_C_GetVisibility_2) == 0x000008, "Wrong size on BP_WearableItemEntry_C_GetVisibility_2");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_2, ReturnValue) == 0x000000, "Member 'BP_WearableItemEntry_C_GetVisibility_2::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_2, Temp_bool_Variable) == 0x000001, "Member 'BP_WearableItemEntry_C_GetVisibility_2::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_2, Temp_byte_Variable) == 0x000002, "Member 'BP_WearableItemEntry_C_GetVisibility_2::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_2, Temp_byte_Variable_1) == 0x000003, "Member 'BP_WearableItemEntry_C_GetVisibility_2::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_2, CallFunc_IsHovered_ReturnValue) == 0x000004, "Member 'BP_WearableItemEntry_C_GetVisibility_2::CallFunc_IsHovered_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_2, CallFunc_Not_PreBool_ReturnValue) == 0x000005, "Member 'BP_WearableItemEntry_C_GetVisibility_2::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_2, CallFunc_BooleanAND_ReturnValue) == 0x000006, "Member 'BP_WearableItemEntry_C_GetVisibility_2::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_2, K2Node_Select_Default) == 0x000007, "Member 'BP_WearableItemEntry_C_GetVisibility_2::K2Node_Select_Default' has a wrong offset!");

// Function BP_WearableItemEntry.BP_WearableItemEntry_C.Get BP New Unlock Indicator 1 Visibility 0
// 0x0006 (0x0006 - 0x0000)
struct BP_WearableItemEntry_C_Get_BP_New_Unlock_Indicator_1_Visibility_0 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Was_Seen_WasSeen;                     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WearableItemEntry_C_Get_BP_New_Unlock_Indicator_1_Visibility_0) == 0x000001, "Wrong alignment on BP_WearableItemEntry_C_Get_BP_New_Unlock_Indicator_1_Visibility_0");
static_assert(sizeof(BP_WearableItemEntry_C_Get_BP_New_Unlock_Indicator_1_Visibility_0) == 0x000006, "Wrong size on BP_WearableItemEntry_C_Get_BP_New_Unlock_Indicator_1_Visibility_0");
static_assert(offsetof(BP_WearableItemEntry_C_Get_BP_New_Unlock_Indicator_1_Visibility_0, ReturnValue) == 0x000000, "Member 'BP_WearableItemEntry_C_Get_BP_New_Unlock_Indicator_1_Visibility_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_BP_New_Unlock_Indicator_1_Visibility_0, Temp_bool_Variable) == 0x000001, "Member 'BP_WearableItemEntry_C_Get_BP_New_Unlock_Indicator_1_Visibility_0::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_BP_New_Unlock_Indicator_1_Visibility_0, Temp_byte_Variable) == 0x000002, "Member 'BP_WearableItemEntry_C_Get_BP_New_Unlock_Indicator_1_Visibility_0::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_BP_New_Unlock_Indicator_1_Visibility_0, Temp_byte_Variable_1) == 0x000003, "Member 'BP_WearableItemEntry_C_Get_BP_New_Unlock_Indicator_1_Visibility_0::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_BP_New_Unlock_Indicator_1_Visibility_0, CallFunc_Get_Was_Seen_WasSeen) == 0x000004, "Member 'BP_WearableItemEntry_C_Get_BP_New_Unlock_Indicator_1_Visibility_0::CallFunc_Get_Was_Seen_WasSeen' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_BP_New_Unlock_Indicator_1_Visibility_0, K2Node_Select_Default) == 0x000005, "Member 'BP_WearableItemEntry_C_Get_BP_New_Unlock_Indicator_1_Visibility_0::K2Node_Select_Default' has a wrong offset!");

// Function BP_WearableItemEntry.BP_WearableItemEntry_C.VisibleIfDLC
// 0x0009 (0x0009 - 0x0000)
struct BP_WearableItemEntry_C_VisibleIfDLC final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EItemRarity                                   Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WearableItemEntry_C_VisibleIfDLC) == 0x000001, "Wrong alignment on BP_WearableItemEntry_C_VisibleIfDLC");
static_assert(sizeof(BP_WearableItemEntry_C_VisibleIfDLC) == 0x000009, "Wrong size on BP_WearableItemEntry_C_VisibleIfDLC");
static_assert(offsetof(BP_WearableItemEntry_C_VisibleIfDLC, ReturnValue) == 0x000000, "Member 'BP_WearableItemEntry_C_VisibleIfDLC::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_VisibleIfDLC, Temp_byte_Variable) == 0x000001, "Member 'BP_WearableItemEntry_C_VisibleIfDLC::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_VisibleIfDLC, Temp_byte_Variable_1) == 0x000002, "Member 'BP_WearableItemEntry_C_VisibleIfDLC::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_VisibleIfDLC, Temp_byte_Variable_2) == 0x000003, "Member 'BP_WearableItemEntry_C_VisibleIfDLC::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_VisibleIfDLC, Temp_byte_Variable_3) == 0x000004, "Member 'BP_WearableItemEntry_C_VisibleIfDLC::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_VisibleIfDLC, Temp_byte_Variable_4) == 0x000005, "Member 'BP_WearableItemEntry_C_VisibleIfDLC::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_VisibleIfDLC, Temp_byte_Variable_5) == 0x000006, "Member 'BP_WearableItemEntry_C_VisibleIfDLC::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_VisibleIfDLC, Temp_byte_Variable_6) == 0x000007, "Member 'BP_WearableItemEntry_C_VisibleIfDLC::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_VisibleIfDLC, K2Node_Select_Default) == 0x000008, "Member 'BP_WearableItemEntry_C_VisibleIfDLC::K2Node_Select_Default' has a wrong offset!");

// Function BP_WearableItemEntry.BP_WearableItemEntry_C.GetToolTipWidget_0
// 0x0010 (0x0010 - 0x0000)
struct BP_WearableItemEntry_C_GetToolTipWidget_0 final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WearableItemEntry_C_GetToolTipWidget_0) == 0x000008, "Wrong alignment on BP_WearableItemEntry_C_GetToolTipWidget_0");
static_assert(sizeof(BP_WearableItemEntry_C_GetToolTipWidget_0) == 0x000010, "Wrong size on BP_WearableItemEntry_C_GetToolTipWidget_0");
static_assert(offsetof(BP_WearableItemEntry_C_GetToolTipWidget_0, ReturnValue) == 0x000000, "Member 'BP_WearableItemEntry_C_GetToolTipWidget_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetToolTipWidget_0, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000008, "Member 'BP_WearableItemEntry_C_GetToolTipWidget_0::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetToolTipWidget_0, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'BP_WearableItemEntry_C_GetToolTipWidget_0::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetToolTipWidget_0, CallFunc_SelectInt_ReturnValue) == 0x00000C, "Member 'BP_WearableItemEntry_C_GetToolTipWidget_0::CallFunc_SelectInt_ReturnValue' has a wrong offset!");

// Function BP_WearableItemEntry.BP_WearableItemEntry_C.GetbIsEnabled_0
// 0x0001 (0x0001 - 0x0000)
struct BP_WearableItemEntry_C_GetbIsEnabled_0 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WearableItemEntry_C_GetbIsEnabled_0) == 0x000001, "Wrong alignment on BP_WearableItemEntry_C_GetbIsEnabled_0");
static_assert(sizeof(BP_WearableItemEntry_C_GetbIsEnabled_0) == 0x000001, "Wrong size on BP_WearableItemEntry_C_GetbIsEnabled_0");
static_assert(offsetof(BP_WearableItemEntry_C_GetbIsEnabled_0, ReturnValue) == 0x000000, "Member 'BP_WearableItemEntry_C_GetbIsEnabled_0::ReturnValue' has a wrong offset!");

// Function BP_WearableItemEntry.BP_WearableItemEntry_C.SetSelected
// 0x0080 (0x0080 - 0x0000)
struct BP_WearableItemEntry_C_SetSelected final
{
public:
	bool                                          isSelected_0;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UListViewBase*                          CallFunc_GetOwningListView_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTileView*                              K2Node_DynamicCast_AsTile_View;                    // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_BP_GetSelectedItem_ReturnValue;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UBP_WearableData_C*                     K2Node_DynamicCast_AsBP_Wearable_Data;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WearableItemEntry_C_SetSelected) == 0x000008, "Wrong alignment on BP_WearableItemEntry_C_SetSelected");
static_assert(sizeof(BP_WearableItemEntry_C_SetSelected) == 0x000080, "Wrong size on BP_WearableItemEntry_C_SetSelected");
static_assert(offsetof(BP_WearableItemEntry_C_SetSelected, isSelected_0) == 0x000000, "Member 'BP_WearableItemEntry_C_SetSelected::isSelected_0' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_SetSelected, CallFunc_Conv_BoolToString_ReturnValue) == 0x000008, "Member 'BP_WearableItemEntry_C_SetSelected::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_SetSelected, CallFunc_GetOwningListView_ReturnValue) == 0x000018, "Member 'BP_WearableItemEntry_C_SetSelected::CallFunc_GetOwningListView_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_SetSelected, K2Node_DynamicCast_AsTile_View) == 0x000020, "Member 'BP_WearableItemEntry_C_SetSelected::K2Node_DynamicCast_AsTile_View' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_SetSelected, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_WearableItemEntry_C_SetSelected::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_SetSelected, CallFunc_Conv_IntToString_ReturnValue) == 0x000030, "Member 'BP_WearableItemEntry_C_SetSelected::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_SetSelected, CallFunc_BP_GetSelectedItem_ReturnValue) == 0x000040, "Member 'BP_WearableItemEntry_C_SetSelected::CallFunc_BP_GetSelectedItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_SetSelected, CallFunc_Concat_StrStr_ReturnValue) == 0x000048, "Member 'BP_WearableItemEntry_C_SetSelected::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_SetSelected, K2Node_DynamicCast_AsBP_Wearable_Data) == 0x000058, "Member 'BP_WearableItemEntry_C_SetSelected::K2Node_DynamicCast_AsBP_Wearable_Data' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_SetSelected, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'BP_WearableItemEntry_C_SetSelected::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_SetSelected, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000068, "Member 'BP_WearableItemEntry_C_SetSelected::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_SetSelected, CallFunc_BooleanAND_ReturnValue) == 0x000078, "Member 'BP_WearableItemEntry_C_SetSelected::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_WearableItemEntry.BP_WearableItemEntry_C.Get_Image_2_Visibility_0
// 0x0005 (0x0005 - 0x0000)
struct BP_WearableItemEntry_C_Get_Image_2_Visibility_0 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WearableItemEntry_C_Get_Image_2_Visibility_0) == 0x000001, "Wrong alignment on BP_WearableItemEntry_C_Get_Image_2_Visibility_0");
static_assert(sizeof(BP_WearableItemEntry_C_Get_Image_2_Visibility_0) == 0x000005, "Wrong size on BP_WearableItemEntry_C_Get_Image_2_Visibility_0");
static_assert(offsetof(BP_WearableItemEntry_C_Get_Image_2_Visibility_0, ReturnValue) == 0x000000, "Member 'BP_WearableItemEntry_C_Get_Image_2_Visibility_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_Image_2_Visibility_0, Temp_bool_Variable) == 0x000001, "Member 'BP_WearableItemEntry_C_Get_Image_2_Visibility_0::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_Image_2_Visibility_0, Temp_byte_Variable) == 0x000002, "Member 'BP_WearableItemEntry_C_Get_Image_2_Visibility_0::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_Image_2_Visibility_0, Temp_byte_Variable_1) == 0x000003, "Member 'BP_WearableItemEntry_C_Get_Image_2_Visibility_0::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_Get_Image_2_Visibility_0, K2Node_Select_Default) == 0x000004, "Member 'BP_WearableItemEntry_C_Get_Image_2_Visibility_0::K2Node_Select_Default' has a wrong offset!");

// Function BP_WearableItemEntry.BP_WearableItemEntry_C.GetVisibility_3
// 0x0006 (0x0006 - 0x0000)
struct BP_WearableItemEntry_C_GetVisibility_3 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WearableItemEntry_C_GetVisibility_3) == 0x000001, "Wrong alignment on BP_WearableItemEntry_C_GetVisibility_3");
static_assert(sizeof(BP_WearableItemEntry_C_GetVisibility_3) == 0x000006, "Wrong size on BP_WearableItemEntry_C_GetVisibility_3");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_3, ReturnValue) == 0x000000, "Member 'BP_WearableItemEntry_C_GetVisibility_3::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_3, Temp_bool_Variable) == 0x000001, "Member 'BP_WearableItemEntry_C_GetVisibility_3::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_3, Temp_byte_Variable) == 0x000002, "Member 'BP_WearableItemEntry_C_GetVisibility_3::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_3, Temp_byte_Variable_1) == 0x000003, "Member 'BP_WearableItemEntry_C_GetVisibility_3::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_3, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000004, "Member 'BP_WearableItemEntry_C_GetVisibility_3::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WearableItemEntry_C_GetVisibility_3, K2Node_Select_Default) == 0x000005, "Member 'BP_WearableItemEntry_C_GetVisibility_3::K2Node_Select_Default' has a wrong offset!");

// Function BP_WearableItemEntry.BP_WearableItemEntry_C.BP_OnItemSelectionChanged
// 0x0001 (0x0001 - 0x0000)
struct BP_WearableItemEntry_C_BP_OnItemSelectionChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WearableItemEntry_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong alignment on BP_WearableItemEntry_C_BP_OnItemSelectionChanged");
static_assert(sizeof(BP_WearableItemEntry_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong size on BP_WearableItemEntry_C_BP_OnItemSelectionChanged");
static_assert(offsetof(BP_WearableItemEntry_C_BP_OnItemSelectionChanged, bIsSelected) == 0x000000, "Member 'BP_WearableItemEntry_C_BP_OnItemSelectionChanged::bIsSelected' has a wrong offset!");

// Function BP_WearableItemEntry.BP_WearableItemEntry_C.OnListItemObjectSet
// 0x0008 (0x0008 - 0x0000)
struct BP_WearableItemEntry_C_OnListItemObjectSet final
{
public:
	class UObject*                                ListItemObject;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WearableItemEntry_C_OnListItemObjectSet) == 0x000008, "Wrong alignment on BP_WearableItemEntry_C_OnListItemObjectSet");
static_assert(sizeof(BP_WearableItemEntry_C_OnListItemObjectSet) == 0x000008, "Wrong size on BP_WearableItemEntry_C_OnListItemObjectSet");
static_assert(offsetof(BP_WearableItemEntry_C_OnListItemObjectSet, ListItemObject) == 0x000000, "Member 'BP_WearableItemEntry_C_OnListItemObjectSet::ListItemObject' has a wrong offset!");

}

