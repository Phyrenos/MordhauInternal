#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SellableWidget

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function BP_SellableWidget.BP_SellableWidget_C.ExecuteUbergraph_BP_SellableWidget
// 0x0020 (0x0020 - 0x0000)
struct BP_SellableWidget_C_ExecuteUbergraph_BP_SellableWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Get_Title_ReturnValue;                    // 0x0008(0x0018)()
};
static_assert(alignof(BP_SellableWidget_C_ExecuteUbergraph_BP_SellableWidget) == 0x000008, "Wrong alignment on BP_SellableWidget_C_ExecuteUbergraph_BP_SellableWidget");
static_assert(sizeof(BP_SellableWidget_C_ExecuteUbergraph_BP_SellableWidget) == 0x000020, "Wrong size on BP_SellableWidget_C_ExecuteUbergraph_BP_SellableWidget");
static_assert(offsetof(BP_SellableWidget_C_ExecuteUbergraph_BP_SellableWidget, EntryPoint) == 0x000000, "Member 'BP_SellableWidget_C_ExecuteUbergraph_BP_SellableWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_ExecuteUbergraph_BP_SellableWidget, CallFunc_Get_Title_ReturnValue) == 0x000008, "Member 'BP_SellableWidget_C_ExecuteUbergraph_BP_SellableWidget::CallFunc_Get_Title_ReturnValue' has a wrong offset!");

// Function BP_SellableWidget.BP_SellableWidget_C.GetPriceText
// 0x0070 (0x0070 - 0x0000)
struct BP_SellableWidget_C_GetPriceText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	int32                                         RoundedDiscountedCost;                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FoundCost;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HordePlayerController_C*            K2Node_DynamicCast_AsBP_Horde_Player_Controller;   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HordeSellVendorBase_C*              K2Node_DynamicCast_AsBP_Horde_Sell_Vendor_Base;    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetEquippedItemPrice_Price;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0058(0x0018)()
};
static_assert(alignof(BP_SellableWidget_C_GetPriceText) == 0x000008, "Wrong alignment on BP_SellableWidget_C_GetPriceText");
static_assert(sizeof(BP_SellableWidget_C_GetPriceText) == 0x000070, "Wrong size on BP_SellableWidget_C_GetPriceText");
static_assert(offsetof(BP_SellableWidget_C_GetPriceText, ReturnValue) == 0x000000, "Member 'BP_SellableWidget_C_GetPriceText::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_GetPriceText, RoundedDiscountedCost) == 0x000018, "Member 'BP_SellableWidget_C_GetPriceText::RoundedDiscountedCost' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_GetPriceText, FoundCost) == 0x00001C, "Member 'BP_SellableWidget_C_GetPriceText::FoundCost' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_GetPriceText, CallFunc_GetPlayerController_ReturnValue) == 0x000020, "Member 'BP_SellableWidget_C_GetPriceText::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_GetPriceText, K2Node_DynamicCast_AsBP_Horde_Player_Controller) == 0x000028, "Member 'BP_SellableWidget_C_GetPriceText::K2Node_DynamicCast_AsBP_Horde_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_GetPriceText, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_SellableWidget_C_GetPriceText::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_GetPriceText, CallFunc_GetOwner_ReturnValue) == 0x000038, "Member 'BP_SellableWidget_C_GetPriceText::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_GetPriceText, K2Node_DynamicCast_AsBP_Horde_Sell_Vendor_Base) == 0x000040, "Member 'BP_SellableWidget_C_GetPriceText::K2Node_DynamicCast_AsBP_Horde_Sell_Vendor_Base' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_GetPriceText, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'BP_SellableWidget_C_GetPriceText::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_GetPriceText, CallFunc_GetEquippedItemPrice_Price) == 0x00004C, "Member 'BP_SellableWidget_C_GetPriceText::CallFunc_GetEquippedItemPrice_Price' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_GetPriceText, CallFunc_Greater_IntInt_ReturnValue) == 0x000050, "Member 'BP_SellableWidget_C_GetPriceText::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_GetPriceText, CallFunc_Conv_IntToText_ReturnValue) == 0x000058, "Member 'BP_SellableWidget_C_GetPriceText::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function BP_SellableWidget.BP_SellableWidget_C.Get Text Color And Opacity
// 0x0080 (0x0080 - 0x0000)
struct BP_SellableWidget_C_Get_Text_Color_And_Opacity final
{
public:
	struct FSlateColor                            ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm)
	bool                                          CallFunc_IsEquipmentSellable_IsEquipmentSellable;  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0030(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0058(0x0028)(UObjectWrapper)
};
static_assert(alignof(BP_SellableWidget_C_Get_Text_Color_And_Opacity) == 0x000008, "Wrong alignment on BP_SellableWidget_C_Get_Text_Color_And_Opacity");
static_assert(sizeof(BP_SellableWidget_C_Get_Text_Color_And_Opacity) == 0x000080, "Wrong size on BP_SellableWidget_C_Get_Text_Color_And_Opacity");
static_assert(offsetof(BP_SellableWidget_C_Get_Text_Color_And_Opacity, ReturnValue) == 0x000000, "Member 'BP_SellableWidget_C_Get_Text_Color_And_Opacity::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_Get_Text_Color_And_Opacity, CallFunc_IsEquipmentSellable_IsEquipmentSellable) == 0x000028, "Member 'BP_SellableWidget_C_Get_Text_Color_And_Opacity::CallFunc_IsEquipmentSellable_IsEquipmentSellable' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_Get_Text_Color_And_Opacity, K2Node_MakeStruct_SlateColor) == 0x000030, "Member 'BP_SellableWidget_C_Get_Text_Color_And_Opacity::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_Get_Text_Color_And_Opacity, K2Node_MakeStruct_SlateColor_1) == 0x000058, "Member 'BP_SellableWidget_C_Get_Text_Color_And_Opacity::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");

// Function BP_SellableWidget.BP_SellableWidget_C.GetVisibility_0
// 0x0018 (0x0018 - 0x0000)
struct BP_SellableWidget_C_GetVisibility_0 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauEquipment*                      CallFunc_GetFirstSellableEquipment_MordhauEquipment; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SellableWidget_C_GetVisibility_0) == 0x000008, "Wrong alignment on BP_SellableWidget_C_GetVisibility_0");
static_assert(sizeof(BP_SellableWidget_C_GetVisibility_0) == 0x000018, "Wrong size on BP_SellableWidget_C_GetVisibility_0");
static_assert(offsetof(BP_SellableWidget_C_GetVisibility_0, ReturnValue) == 0x000000, "Member 'BP_SellableWidget_C_GetVisibility_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_GetVisibility_0, CallFunc_GetFirstSellableEquipment_MordhauEquipment) == 0x000008, "Member 'BP_SellableWidget_C_GetVisibility_0::CallFunc_GetFirstSellableEquipment_MordhauEquipment' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_GetVisibility_0, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_SellableWidget_C_GetVisibility_0::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_SellableWidget.BP_SellableWidget_C.GetVisibleIfEquipmentIsSellable
// 0x0002 (0x0002 - 0x0000)
struct BP_SellableWidget_C_GetVisibleIfEquipmentIsSellable final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipmentSellable_IsEquipmentSellable;  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SellableWidget_C_GetVisibleIfEquipmentIsSellable) == 0x000001, "Wrong alignment on BP_SellableWidget_C_GetVisibleIfEquipmentIsSellable");
static_assert(sizeof(BP_SellableWidget_C_GetVisibleIfEquipmentIsSellable) == 0x000002, "Wrong size on BP_SellableWidget_C_GetVisibleIfEquipmentIsSellable");
static_assert(offsetof(BP_SellableWidget_C_GetVisibleIfEquipmentIsSellable, ReturnValue) == 0x000000, "Member 'BP_SellableWidget_C_GetVisibleIfEquipmentIsSellable::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_GetVisibleIfEquipmentIsSellable, CallFunc_IsEquipmentSellable_IsEquipmentSellable) == 0x000001, "Member 'BP_SellableWidget_C_GetVisibleIfEquipmentIsSellable::CallFunc_IsEquipmentSellable_IsEquipmentSellable' has a wrong offset!");

// Function BP_SellableWidget.BP_SellableWidget_C.GetEquipmentText
// 0x0028 (0x0028 - 0x0000)
struct BP_SellableWidget_C_GetEquipmentText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	class AMordhauEquipment*                      CallFunc_GetFirstSellableEquipment_MordhauEquipment; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SellableWidget_C_GetEquipmentText) == 0x000008, "Wrong alignment on BP_SellableWidget_C_GetEquipmentText");
static_assert(sizeof(BP_SellableWidget_C_GetEquipmentText) == 0x000028, "Wrong size on BP_SellableWidget_C_GetEquipmentText");
static_assert(offsetof(BP_SellableWidget_C_GetEquipmentText, ReturnValue) == 0x000000, "Member 'BP_SellableWidget_C_GetEquipmentText::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_GetEquipmentText, CallFunc_GetFirstSellableEquipment_MordhauEquipment) == 0x000018, "Member 'BP_SellableWidget_C_GetEquipmentText::CallFunc_GetFirstSellableEquipment_MordhauEquipment' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_GetEquipmentText, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_SellableWidget_C_GetEquipmentText::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_SellableWidget.BP_SellableWidget_C.GetFirstSellableEquipment
// 0x0028 (0x0028 - 0x0000)
struct BP_SellableWidget_C_GetFirstSellableEquipment final
{
public:
	class AMordhauEquipment*                      MordhauEquipment;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HordeSellVendorBase_C*              K2Node_DynamicCast_AsBP_Horde_Sell_Vendor_Base;    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauEquipment*                      CallFunc_Get_First_Equipment_Item_MordhauEquipment; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SellableWidget_C_GetFirstSellableEquipment) == 0x000008, "Wrong alignment on BP_SellableWidget_C_GetFirstSellableEquipment");
static_assert(sizeof(BP_SellableWidget_C_GetFirstSellableEquipment) == 0x000028, "Wrong size on BP_SellableWidget_C_GetFirstSellableEquipment");
static_assert(offsetof(BP_SellableWidget_C_GetFirstSellableEquipment, MordhauEquipment) == 0x000000, "Member 'BP_SellableWidget_C_GetFirstSellableEquipment::MordhauEquipment' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_GetFirstSellableEquipment, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_SellableWidget_C_GetFirstSellableEquipment::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_GetFirstSellableEquipment, K2Node_DynamicCast_AsBP_Horde_Sell_Vendor_Base) == 0x000010, "Member 'BP_SellableWidget_C_GetFirstSellableEquipment::K2Node_DynamicCast_AsBP_Horde_Sell_Vendor_Base' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_GetFirstSellableEquipment, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_SellableWidget_C_GetFirstSellableEquipment::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_GetFirstSellableEquipment, CallFunc_Get_First_Equipment_Item_MordhauEquipment) == 0x000020, "Member 'BP_SellableWidget_C_GetFirstSellableEquipment::CallFunc_Get_First_Equipment_Item_MordhauEquipment' has a wrong offset!");

// Function BP_SellableWidget.BP_SellableWidget_C.IsEquipmentNotInBanList
// 0x0038 (0x0038 - 0x0000)
struct BP_SellableWidget_C_IsEquipmentNotInBanList final
{
public:
	class FText                                   EquipmentName;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          IsEquipmentSellable_0;                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HordeSellVendorBase_C*              K2Node_DynamicCast_AsBP_Horde_Sell_Vendor_Base;    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SellableWidget_C_IsEquipmentNotInBanList) == 0x000008, "Wrong alignment on BP_SellableWidget_C_IsEquipmentNotInBanList");
static_assert(sizeof(BP_SellableWidget_C_IsEquipmentNotInBanList) == 0x000038, "Wrong size on BP_SellableWidget_C_IsEquipmentNotInBanList");
static_assert(offsetof(BP_SellableWidget_C_IsEquipmentNotInBanList, EquipmentName) == 0x000000, "Member 'BP_SellableWidget_C_IsEquipmentNotInBanList::EquipmentName' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_IsEquipmentNotInBanList, IsEquipmentSellable_0) == 0x000018, "Member 'BP_SellableWidget_C_IsEquipmentNotInBanList::IsEquipmentSellable_0' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_IsEquipmentNotInBanList, CallFunc_GetOwner_ReturnValue) == 0x000020, "Member 'BP_SellableWidget_C_IsEquipmentNotInBanList::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_IsEquipmentNotInBanList, K2Node_DynamicCast_AsBP_Horde_Sell_Vendor_Base) == 0x000028, "Member 'BP_SellableWidget_C_IsEquipmentNotInBanList::K2Node_DynamicCast_AsBP_Horde_Sell_Vendor_Base' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_IsEquipmentNotInBanList, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_SellableWidget_C_IsEquipmentNotInBanList::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_IsEquipmentNotInBanList, CallFunc_Array_Contains_ReturnValue) == 0x000031, "Member 'BP_SellableWidget_C_IsEquipmentNotInBanList::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_IsEquipmentNotInBanList, CallFunc_Not_PreBool_ReturnValue) == 0x000032, "Member 'BP_SellableWidget_C_IsEquipmentNotInBanList::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_SellableWidget.BP_SellableWidget_C.Get_Title
// 0x0048 (0x0048 - 0x0000)
struct BP_SellableWidget_C_Get_Title final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HordeSellVendorBase_C*              K2Node_DynamicCast_AsBP_Horde_Sell_Vendor_Base;    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_NameToText_ReturnValue;              // 0x0030(0x0018)()
};
static_assert(alignof(BP_SellableWidget_C_Get_Title) == 0x000008, "Wrong alignment on BP_SellableWidget_C_Get_Title");
static_assert(sizeof(BP_SellableWidget_C_Get_Title) == 0x000048, "Wrong size on BP_SellableWidget_C_Get_Title");
static_assert(offsetof(BP_SellableWidget_C_Get_Title, ReturnValue) == 0x000000, "Member 'BP_SellableWidget_C_Get_Title::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_Get_Title, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_SellableWidget_C_Get_Title::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_Get_Title, K2Node_DynamicCast_AsBP_Horde_Sell_Vendor_Base) == 0x000020, "Member 'BP_SellableWidget_C_Get_Title::K2Node_DynamicCast_AsBP_Horde_Sell_Vendor_Base' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_Get_Title, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_SellableWidget_C_Get_Title::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_Get_Title, CallFunc_Conv_NameToText_ReturnValue) == 0x000030, "Member 'BP_SellableWidget_C_Get_Title::CallFunc_Conv_NameToText_ReturnValue' has a wrong offset!");

// Function BP_SellableWidget.BP_SellableWidget_C.IsEquipmentSellable
// 0x0020 (0x0020 - 0x0000)
struct BP_SellableWidget_C_IsEquipmentSellable final
{
public:
	bool                                          IsEquipmentSellable_0;                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HordeSellVendorBase_C*              K2Node_DynamicCast_AsBP_Horde_Sell_Vendor_Base;    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEquipmentSellable_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SellableWidget_C_IsEquipmentSellable) == 0x000008, "Wrong alignment on BP_SellableWidget_C_IsEquipmentSellable");
static_assert(sizeof(BP_SellableWidget_C_IsEquipmentSellable) == 0x000020, "Wrong size on BP_SellableWidget_C_IsEquipmentSellable");
static_assert(offsetof(BP_SellableWidget_C_IsEquipmentSellable, IsEquipmentSellable_0) == 0x000000, "Member 'BP_SellableWidget_C_IsEquipmentSellable::IsEquipmentSellable_0' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_IsEquipmentSellable, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_SellableWidget_C_IsEquipmentSellable::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_IsEquipmentSellable, K2Node_DynamicCast_AsBP_Horde_Sell_Vendor_Base) == 0x000010, "Member 'BP_SellableWidget_C_IsEquipmentSellable::K2Node_DynamicCast_AsBP_Horde_Sell_Vendor_Base' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_IsEquipmentSellable, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_SellableWidget_C_IsEquipmentSellable::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_IsEquipmentSellable, CallFunc_IsEquipmentSellable_ReturnValue) == 0x000019, "Member 'BP_SellableWidget_C_IsEquipmentSellable::CallFunc_IsEquipmentSellable_ReturnValue' has a wrong offset!");

// Function BP_SellableWidget.BP_SellableWidget_C.Get Marker Color And Opacity
// 0x0080 (0x0080 - 0x0000)
struct BP_SellableWidget_C_Get_Marker_Color_And_Opacity final
{
public:
	struct FSlateColor                            ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm)
	bool                                          CallFunc_IsEquipmentSellable_IsEquipmentSellable;  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0030(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0058(0x0028)(UObjectWrapper)
};
static_assert(alignof(BP_SellableWidget_C_Get_Marker_Color_And_Opacity) == 0x000008, "Wrong alignment on BP_SellableWidget_C_Get_Marker_Color_And_Opacity");
static_assert(sizeof(BP_SellableWidget_C_Get_Marker_Color_And_Opacity) == 0x000080, "Wrong size on BP_SellableWidget_C_Get_Marker_Color_And_Opacity");
static_assert(offsetof(BP_SellableWidget_C_Get_Marker_Color_And_Opacity, ReturnValue) == 0x000000, "Member 'BP_SellableWidget_C_Get_Marker_Color_And_Opacity::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_Get_Marker_Color_And_Opacity, CallFunc_IsEquipmentSellable_IsEquipmentSellable) == 0x000028, "Member 'BP_SellableWidget_C_Get_Marker_Color_And_Opacity::CallFunc_IsEquipmentSellable_IsEquipmentSellable' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_Get_Marker_Color_And_Opacity, K2Node_MakeStruct_SlateColor) == 0x000030, "Member 'BP_SellableWidget_C_Get_Marker_Color_And_Opacity::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_SellableWidget_C_Get_Marker_Color_And_Opacity, K2Node_MakeStruct_SlateColor_1) == 0x000058, "Member 'BP_SellableWidget_C_Get_Marker_Color_And_Opacity::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");

}

