#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EquipmentTypeIndicator

#include "Basic.hpp"

#include "Mordhau_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_EquipmentTypeIndicator.BP_EquipmentTypeIndicator_C.ExecuteUbergraph_BP_EquipmentTypeIndicator
// 0x0014 (0x0014 - 0x0000)
struct BP_EquipmentTypeIndicator_C_ExecuteUbergraph_BP_EquipmentTypeIndicator final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EquipmentTypeIndicator_C_ExecuteUbergraph_BP_EquipmentTypeIndicator) == 0x000004, "Wrong alignment on BP_EquipmentTypeIndicator_C_ExecuteUbergraph_BP_EquipmentTypeIndicator");
static_assert(sizeof(BP_EquipmentTypeIndicator_C_ExecuteUbergraph_BP_EquipmentTypeIndicator) == 0x000014, "Wrong size on BP_EquipmentTypeIndicator_C_ExecuteUbergraph_BP_EquipmentTypeIndicator");
static_assert(offsetof(BP_EquipmentTypeIndicator_C_ExecuteUbergraph_BP_EquipmentTypeIndicator, EntryPoint) == 0x000000, "Member 'BP_EquipmentTypeIndicator_C_ExecuteUbergraph_BP_EquipmentTypeIndicator::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTypeIndicator_C_ExecuteUbergraph_BP_EquipmentTypeIndicator, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000004, "Member 'BP_EquipmentTypeIndicator_C_ExecuteUbergraph_BP_EquipmentTypeIndicator::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTypeIndicator_C_ExecuteUbergraph_BP_EquipmentTypeIndicator, CallFunc_BreakVector2D_X) == 0x000008, "Member 'BP_EquipmentTypeIndicator_C_ExecuteUbergraph_BP_EquipmentTypeIndicator::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTypeIndicator_C_ExecuteUbergraph_BP_EquipmentTypeIndicator, CallFunc_BreakVector2D_Y) == 0x00000C, "Member 'BP_EquipmentTypeIndicator_C_ExecuteUbergraph_BP_EquipmentTypeIndicator::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTypeIndicator_C_ExecuteUbergraph_BP_EquipmentTypeIndicator, K2Node_Event_IsDesignTime) == 0x000010, "Member 'BP_EquipmentTypeIndicator_C_ExecuteUbergraph_BP_EquipmentTypeIndicator::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function BP_EquipmentTypeIndicator.BP_EquipmentTypeIndicator_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_EquipmentTypeIndicator_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EquipmentTypeIndicator_C_PreConstruct) == 0x000001, "Wrong alignment on BP_EquipmentTypeIndicator_C_PreConstruct");
static_assert(sizeof(BP_EquipmentTypeIndicator_C_PreConstruct) == 0x000001, "Wrong size on BP_EquipmentTypeIndicator_C_PreConstruct");
static_assert(offsetof(BP_EquipmentTypeIndicator_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_EquipmentTypeIndicator_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_EquipmentTypeIndicator.BP_EquipmentTypeIndicator_C.Update
// 0x0040 (0x0040 - 0x0000)
struct BP_EquipmentTypeIndicator_C_Update final
{
public:
	EEquipmentCategory                            Type_0;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Show_All_Types;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EEquipmentCategory                            Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_4;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_5;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EquipmentTypeIndicator_C_Update) == 0x000008, "Wrong alignment on BP_EquipmentTypeIndicator_C_Update");
static_assert(sizeof(BP_EquipmentTypeIndicator_C_Update) == 0x000040, "Wrong size on BP_EquipmentTypeIndicator_C_Update");
static_assert(offsetof(BP_EquipmentTypeIndicator_C_Update, Type_0) == 0x000000, "Member 'BP_EquipmentTypeIndicator_C_Update::Type_0' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTypeIndicator_C_Update, Show_All_Types) == 0x000001, "Member 'BP_EquipmentTypeIndicator_C_Update::Show_All_Types' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTypeIndicator_C_Update, Temp_byte_Variable) == 0x000002, "Member 'BP_EquipmentTypeIndicator_C_Update::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTypeIndicator_C_Update, Temp_object_Variable) == 0x000008, "Member 'BP_EquipmentTypeIndicator_C_Update::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTypeIndicator_C_Update, Temp_object_Variable_1) == 0x000010, "Member 'BP_EquipmentTypeIndicator_C_Update::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTypeIndicator_C_Update, Temp_object_Variable_2) == 0x000018, "Member 'BP_EquipmentTypeIndicator_C_Update::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTypeIndicator_C_Update, Temp_object_Variable_3) == 0x000020, "Member 'BP_EquipmentTypeIndicator_C_Update::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTypeIndicator_C_Update, Temp_object_Variable_4) == 0x000028, "Member 'BP_EquipmentTypeIndicator_C_Update::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTypeIndicator_C_Update, Temp_object_Variable_5) == 0x000030, "Member 'BP_EquipmentTypeIndicator_C_Update::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTypeIndicator_C_Update, K2Node_Select_Default) == 0x000038, "Member 'BP_EquipmentTypeIndicator_C_Update::K2Node_Select_Default' has a wrong offset!");

// Function BP_EquipmentTypeIndicator.BP_EquipmentTypeIndicator_C.Set Icon Color
// 0x0010 (0x0010 - 0x0000)
struct BP_EquipmentTypeIndicator_C_Set_Icon_Color final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EquipmentTypeIndicator_C_Set_Icon_Color) == 0x000004, "Wrong alignment on BP_EquipmentTypeIndicator_C_Set_Icon_Color");
static_assert(sizeof(BP_EquipmentTypeIndicator_C_Set_Icon_Color) == 0x000010, "Wrong size on BP_EquipmentTypeIndicator_C_Set_Icon_Color");
static_assert(offsetof(BP_EquipmentTypeIndicator_C_Set_Icon_Color, InColorAndOpacity) == 0x000000, "Member 'BP_EquipmentTypeIndicator_C_Set_Icon_Color::InColorAndOpacity' has a wrong offset!");

}

