#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapVote

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_MapVote.BP_MapVote_C
// 0x0060 (0x02C0 - 0x0260)
class UBP_MapVote_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UBP_MapEntry_C*                         BP_MapEntry;                                       // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_MapEntry_C*                         BP_MapEntry_0;                                     // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_MapEntry_C*                         BP_MapEntry_1;                                     // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_MapEntry_C*                         BP_MapEntry_C_2;                                   // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_MapEntry_C*                         BP_MapEntry_C_3;                                   // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_MapEntry_C*                         BP_MapEntry_C_4;                                   // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWrapBox*                               EntryGrid;                                         // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_MapEntry_C*                         SelectedEntry;                                     // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              Voted;                                             // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         RpcStartTime;                                      // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WaitingForResponse;                                // 0x02BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_MapVote(int32 EntryPoint);
	void UpdateVotes();
	void Init();
	void ClearEntries();
	void AddEntry(const class FString& GameModeMapName, class UGameModeMetadata* GameModeMetadata, class UMapMetadata* MapMetadata);
	void OnEntrySelected(class UBP_MapEntry_C* Entry);
	void UpdateVoteCount(uint8 Count, int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MapVote_C">();
	}
	static class UBP_MapVote_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MapVote_C>();
	}
};
static_assert(alignof(UBP_MapVote_C) == 0x000008, "Wrong alignment on UBP_MapVote_C");
static_assert(sizeof(UBP_MapVote_C) == 0x0002C0, "Wrong size on UBP_MapVote_C");
static_assert(offsetof(UBP_MapVote_C, UberGraphFrame) == 0x000260, "Member 'UBP_MapVote_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_MapVote_C, BP_MapEntry) == 0x000268, "Member 'UBP_MapVote_C::BP_MapEntry' has a wrong offset!");
static_assert(offsetof(UBP_MapVote_C, BP_MapEntry_0) == 0x000270, "Member 'UBP_MapVote_C::BP_MapEntry_0' has a wrong offset!");
static_assert(offsetof(UBP_MapVote_C, BP_MapEntry_1) == 0x000278, "Member 'UBP_MapVote_C::BP_MapEntry_1' has a wrong offset!");
static_assert(offsetof(UBP_MapVote_C, BP_MapEntry_C_2) == 0x000280, "Member 'UBP_MapVote_C::BP_MapEntry_C_2' has a wrong offset!");
static_assert(offsetof(UBP_MapVote_C, BP_MapEntry_C_3) == 0x000288, "Member 'UBP_MapVote_C::BP_MapEntry_C_3' has a wrong offset!");
static_assert(offsetof(UBP_MapVote_C, BP_MapEntry_C_4) == 0x000290, "Member 'UBP_MapVote_C::BP_MapEntry_C_4' has a wrong offset!");
static_assert(offsetof(UBP_MapVote_C, EntryGrid) == 0x000298, "Member 'UBP_MapVote_C::EntryGrid' has a wrong offset!");
static_assert(offsetof(UBP_MapVote_C, SelectedEntry) == 0x0002A0, "Member 'UBP_MapVote_C::SelectedEntry' has a wrong offset!");
static_assert(offsetof(UBP_MapVote_C, Voted) == 0x0002A8, "Member 'UBP_MapVote_C::Voted' has a wrong offset!");
static_assert(offsetof(UBP_MapVote_C, RpcStartTime) == 0x0002B8, "Member 'UBP_MapVote_C::RpcStartTime' has a wrong offset!");
static_assert(offsetof(UBP_MapVote_C, WaitingForResponse) == 0x0002BC, "Member 'UBP_MapVote_C::WaitingForResponse' has a wrong offset!");

}

