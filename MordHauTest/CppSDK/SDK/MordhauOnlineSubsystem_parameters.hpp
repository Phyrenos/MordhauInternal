#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MordhauOnlineSubsystem

#include "Basic.hpp"

#include "MordhauOnlineSubsystem_structs.hpp"


namespace SDK::Params
{

// Function MordhauOnlineSubsystem.OnlineUtilities.CanCrossplayWith
// 0x0002 (0x0002 - 0x0000)
struct OnlineUtilities_CanCrossplayWith final
{
public:
	EPlatform                                     OtherPlatform;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_CanCrossplayWith) == 0x000001, "Wrong alignment on OnlineUtilities_CanCrossplayWith");
static_assert(sizeof(OnlineUtilities_CanCrossplayWith) == 0x000002, "Wrong size on OnlineUtilities_CanCrossplayWith");
static_assert(offsetof(OnlineUtilities_CanCrossplayWith, OtherPlatform) == 0x000000, "Member 'OnlineUtilities_CanCrossplayWith::OtherPlatform' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_CanCrossplayWith, ReturnValue) == 0x000001, "Member 'OnlineUtilities_CanCrossplayWith::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetBuildVersion
// 0x0004 (0x0004 - 0x0000)
struct OnlineUtilities_GetBuildVersion final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_GetBuildVersion) == 0x000004, "Wrong alignment on OnlineUtilities_GetBuildVersion");
static_assert(sizeof(OnlineUtilities_GetBuildVersion) == 0x000004, "Wrong size on OnlineUtilities_GetBuildVersion");
static_assert(offsetof(OnlineUtilities_GetBuildVersion, ReturnValue) == 0x000000, "Member 'OnlineUtilities_GetBuildVersion::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetCurrentPlatformName
// 0x0010 (0x0010 - 0x0000)
struct OnlineUtilities_GetCurrentPlatformName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_GetCurrentPlatformName) == 0x000008, "Wrong alignment on OnlineUtilities_GetCurrentPlatformName");
static_assert(sizeof(OnlineUtilities_GetCurrentPlatformName) == 0x000010, "Wrong size on OnlineUtilities_GetCurrentPlatformName");
static_assert(offsetof(OnlineUtilities_GetCurrentPlatformName, ReturnValue) == 0x000000, "Member 'OnlineUtilities_GetCurrentPlatformName::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetEnumKey
// 0x0028 (0x0028 - 0x0000)
struct OnlineUtilities_GetEnumKey final
{
public:
	class FString                                 EnumName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnumValue;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_GetEnumKey) == 0x000008, "Wrong alignment on OnlineUtilities_GetEnumKey");
static_assert(sizeof(OnlineUtilities_GetEnumKey) == 0x000028, "Wrong size on OnlineUtilities_GetEnumKey");
static_assert(offsetof(OnlineUtilities_GetEnumKey, EnumName) == 0x000000, "Member 'OnlineUtilities_GetEnumKey::EnumName' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_GetEnumKey, EnumValue) == 0x000010, "Member 'OnlineUtilities_GetEnumKey::EnumValue' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_GetEnumKey, ReturnValue) == 0x000018, "Member 'OnlineUtilities_GetEnumKey::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetEnumValue
// 0x0028 (0x0028 - 0x0000)
struct OnlineUtilities_GetEnumValue final
{
public:
	class FString                                 EnumName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnumKey;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineUtilities_GetEnumValue) == 0x000008, "Wrong alignment on OnlineUtilities_GetEnumValue");
static_assert(sizeof(OnlineUtilities_GetEnumValue) == 0x000028, "Wrong size on OnlineUtilities_GetEnumValue");
static_assert(offsetof(OnlineUtilities_GetEnumValue, EnumName) == 0x000000, "Member 'OnlineUtilities_GetEnumValue::EnumName' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_GetEnumValue, EnumKey) == 0x000010, "Member 'OnlineUtilities_GetEnumValue::EnumKey' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_GetEnumValue, ReturnValue) == 0x000020, "Member 'OnlineUtilities_GetEnumValue::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetGameServerGamePort
// 0x0004 (0x0004 - 0x0000)
struct OnlineUtilities_GetGameServerGamePort final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_GetGameServerGamePort) == 0x000004, "Wrong alignment on OnlineUtilities_GetGameServerGamePort");
static_assert(sizeof(OnlineUtilities_GetGameServerGamePort) == 0x000004, "Wrong size on OnlineUtilities_GetGameServerGamePort");
static_assert(offsetof(OnlineUtilities_GetGameServerGamePort, ReturnValue) == 0x000000, "Member 'OnlineUtilities_GetGameServerGamePort::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetLocalNetworkVersion
// 0x0004 (0x0004 - 0x0000)
struct OnlineUtilities_GetLocalNetworkVersion final
{
public:
	uint32                                        ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_GetLocalNetworkVersion) == 0x000004, "Wrong alignment on OnlineUtilities_GetLocalNetworkVersion");
static_assert(sizeof(OnlineUtilities_GetLocalNetworkVersion) == 0x000004, "Wrong size on OnlineUtilities_GetLocalNetworkVersion");
static_assert(offsetof(OnlineUtilities_GetLocalNetworkVersion, ReturnValue) == 0x000000, "Member 'OnlineUtilities_GetLocalNetworkVersion::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetLocation
// 0x0018 (0x0018 - 0x0000)
struct OnlineUtilities_GetLocation final
{
public:
	class FString                                 LocationName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EServerLocation                               ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineUtilities_GetLocation) == 0x000008, "Wrong alignment on OnlineUtilities_GetLocation");
static_assert(sizeof(OnlineUtilities_GetLocation) == 0x000018, "Wrong size on OnlineUtilities_GetLocation");
static_assert(offsetof(OnlineUtilities_GetLocation, LocationName) == 0x000000, "Member 'OnlineUtilities_GetLocation::LocationName' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_GetLocation, ReturnValue) == 0x000010, "Member 'OnlineUtilities_GetLocation::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetLocationDisplayName
// 0x0020 (0x0020 - 0x0000)
struct OnlineUtilities_GetLocationDisplayName final
{
public:
	EServerLocation                               Location;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_GetLocationDisplayName) == 0x000008, "Wrong alignment on OnlineUtilities_GetLocationDisplayName");
static_assert(sizeof(OnlineUtilities_GetLocationDisplayName) == 0x000020, "Wrong size on OnlineUtilities_GetLocationDisplayName");
static_assert(offsetof(OnlineUtilities_GetLocationDisplayName, Location) == 0x000000, "Member 'OnlineUtilities_GetLocationDisplayName::Location' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_GetLocationDisplayName, ReturnValue) == 0x000008, "Member 'OnlineUtilities_GetLocationDisplayName::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetLocationName
// 0x0018 (0x0018 - 0x0000)
struct OnlineUtilities_GetLocationName final
{
public:
	EServerLocation                               Location;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_GetLocationName) == 0x000008, "Wrong alignment on OnlineUtilities_GetLocationName");
static_assert(sizeof(OnlineUtilities_GetLocationName) == 0x000018, "Wrong size on OnlineUtilities_GetLocationName");
static_assert(offsetof(OnlineUtilities_GetLocationName, Location) == 0x000000, "Member 'OnlineUtilities_GetLocationName::Location' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_GetLocationName, ReturnValue) == 0x000008, "Member 'OnlineUtilities_GetLocationName::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetOSVersion
// 0x0010 (0x0010 - 0x0000)
struct OnlineUtilities_GetOSVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_GetOSVersion) == 0x000008, "Wrong alignment on OnlineUtilities_GetOSVersion");
static_assert(sizeof(OnlineUtilities_GetOSVersion) == 0x000010, "Wrong size on OnlineUtilities_GetOSVersion");
static_assert(offsetof(OnlineUtilities_GetOSVersion, ReturnValue) == 0x000000, "Member 'OnlineUtilities_GetOSVersion::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetPerforceRevision
// 0x0004 (0x0004 - 0x0000)
struct OnlineUtilities_GetPerforceRevision final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_GetPerforceRevision) == 0x000004, "Wrong alignment on OnlineUtilities_GetPerforceRevision");
static_assert(sizeof(OnlineUtilities_GetPerforceRevision) == 0x000004, "Wrong size on OnlineUtilities_GetPerforceRevision");
static_assert(offsetof(OnlineUtilities_GetPerforceRevision, ReturnValue) == 0x000000, "Member 'OnlineUtilities_GetPerforceRevision::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetPerforceRevisionEnforced
// 0x0004 (0x0004 - 0x0000)
struct OnlineUtilities_GetPerforceRevisionEnforced final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_GetPerforceRevisionEnforced) == 0x000004, "Wrong alignment on OnlineUtilities_GetPerforceRevisionEnforced");
static_assert(sizeof(OnlineUtilities_GetPerforceRevisionEnforced) == 0x000004, "Wrong size on OnlineUtilities_GetPerforceRevisionEnforced");
static_assert(offsetof(OnlineUtilities_GetPerforceRevisionEnforced, ReturnValue) == 0x000000, "Member 'OnlineUtilities_GetPerforceRevisionEnforced::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetPlatform
// 0x0001 (0x0001 - 0x0000)
struct OnlineUtilities_GetPlatform final
{
public:
	EPlatform                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_GetPlatform) == 0x000001, "Wrong alignment on OnlineUtilities_GetPlatform");
static_assert(sizeof(OnlineUtilities_GetPlatform) == 0x000001, "Wrong size on OnlineUtilities_GetPlatform");
static_assert(offsetof(OnlineUtilities_GetPlatform, ReturnValue) == 0x000000, "Member 'OnlineUtilities_GetPlatform::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetPlatformByName
// 0x0018 (0x0018 - 0x0000)
struct OnlineUtilities_GetPlatformByName final
{
public:
	class FString                                 PlatformName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlatform                                     ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineUtilities_GetPlatformByName) == 0x000008, "Wrong alignment on OnlineUtilities_GetPlatformByName");
static_assert(sizeof(OnlineUtilities_GetPlatformByName) == 0x000018, "Wrong size on OnlineUtilities_GetPlatformByName");
static_assert(offsetof(OnlineUtilities_GetPlatformByName, PlatformName) == 0x000000, "Member 'OnlineUtilities_GetPlatformByName::PlatformName' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_GetPlatformByName, ReturnValue) == 0x000010, "Member 'OnlineUtilities_GetPlatformByName::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetPlatformName
// 0x0018 (0x0018 - 0x0000)
struct OnlineUtilities_GetPlatformName final
{
public:
	EPlatform                                     Platform;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_GetPlatformName) == 0x000008, "Wrong alignment on OnlineUtilities_GetPlatformName");
static_assert(sizeof(OnlineUtilities_GetPlatformName) == 0x000018, "Wrong size on OnlineUtilities_GetPlatformName");
static_assert(offsetof(OnlineUtilities_GetPlatformName, Platform) == 0x000000, "Member 'OnlineUtilities_GetPlatformName::Platform' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_GetPlatformName, ReturnValue) == 0x000008, "Member 'OnlineUtilities_GetPlatformName::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetPlatformSpecific
// 0x0001 (0x0001 - 0x0000)
struct OnlineUtilities_GetPlatformSpecific final
{
public:
	EPlatformSpecific                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_GetPlatformSpecific) == 0x000001, "Wrong alignment on OnlineUtilities_GetPlatformSpecific");
static_assert(sizeof(OnlineUtilities_GetPlatformSpecific) == 0x000001, "Wrong size on OnlineUtilities_GetPlatformSpecific");
static_assert(offsetof(OnlineUtilities_GetPlatformSpecific, ReturnValue) == 0x000000, "Member 'OnlineUtilities_GetPlatformSpecific::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetPlatformSpecificName
// 0x0018 (0x0018 - 0x0000)
struct OnlineUtilities_GetPlatformSpecificName final
{
public:
	EPlatformSpecific                             Platform;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_GetPlatformSpecificName) == 0x000008, "Wrong alignment on OnlineUtilities_GetPlatformSpecificName");
static_assert(sizeof(OnlineUtilities_GetPlatformSpecificName) == 0x000018, "Wrong size on OnlineUtilities_GetPlatformSpecificName");
static_assert(offsetof(OnlineUtilities_GetPlatformSpecificName, Platform) == 0x000000, "Member 'OnlineUtilities_GetPlatformSpecificName::Platform' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_GetPlatformSpecificName, ReturnValue) == 0x000008, "Member 'OnlineUtilities_GetPlatformSpecificName::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetPlayFabAPI
// 0x0008 (0x0008 - 0x0000)
struct OnlineUtilities_GetPlayFabAPI final
{
public:
	class UPlayFabAPI*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_GetPlayFabAPI) == 0x000008, "Wrong alignment on OnlineUtilities_GetPlayFabAPI");
static_assert(sizeof(OnlineUtilities_GetPlayFabAPI) == 0x000008, "Wrong size on OnlineUtilities_GetPlayFabAPI");
static_assert(offsetof(OnlineUtilities_GetPlayFabAPI, ReturnValue) == 0x000000, "Member 'OnlineUtilities_GetPlayFabAPI::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetPlayFabPlayer
// 0x0060 (0x0060 - 0x0000)
struct OnlineUtilities_GetPlayFabPlayer final
{
public:
	struct FPlayFabPlayer                         ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_GetPlayFabPlayer) == 0x000008, "Wrong alignment on OnlineUtilities_GetPlayFabPlayer");
static_assert(sizeof(OnlineUtilities_GetPlayFabPlayer) == 0x000060, "Wrong size on OnlineUtilities_GetPlayFabPlayer");
static_assert(offsetof(OnlineUtilities_GetPlayFabPlayer, ReturnValue) == 0x000000, "Member 'OnlineUtilities_GetPlayFabPlayer::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetPlayFabServer
// 0x0050 (0x0050 - 0x0000)
struct OnlineUtilities_GetPlayFabServer final
{
public:
	struct FPlayFabServer                         ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_GetPlayFabServer) == 0x000008, "Wrong alignment on OnlineUtilities_GetPlayFabServer");
static_assert(sizeof(OnlineUtilities_GetPlayFabServer) == 0x000050, "Wrong size on OnlineUtilities_GetPlayFabServer");
static_assert(offsetof(OnlineUtilities_GetPlayFabServer, ReturnValue) == 0x000000, "Member 'OnlineUtilities_GetPlayFabServer::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetRegion
// 0x0018 (0x0018 - 0x0000)
struct OnlineUtilities_GetRegion final
{
public:
	class FString                                 RegionName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EServerRegion                                 ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineUtilities_GetRegion) == 0x000008, "Wrong alignment on OnlineUtilities_GetRegion");
static_assert(sizeof(OnlineUtilities_GetRegion) == 0x000018, "Wrong size on OnlineUtilities_GetRegion");
static_assert(offsetof(OnlineUtilities_GetRegion, RegionName) == 0x000000, "Member 'OnlineUtilities_GetRegion::RegionName' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_GetRegion, ReturnValue) == 0x000010, "Member 'OnlineUtilities_GetRegion::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetRegionDisplayName
// 0x0020 (0x0020 - 0x0000)
struct OnlineUtilities_GetRegionDisplayName final
{
public:
	EServerRegion                                 Region;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_GetRegionDisplayName) == 0x000008, "Wrong alignment on OnlineUtilities_GetRegionDisplayName");
static_assert(sizeof(OnlineUtilities_GetRegionDisplayName) == 0x000020, "Wrong size on OnlineUtilities_GetRegionDisplayName");
static_assert(offsetof(OnlineUtilities_GetRegionDisplayName, Region) == 0x000000, "Member 'OnlineUtilities_GetRegionDisplayName::Region' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_GetRegionDisplayName, ReturnValue) == 0x000008, "Member 'OnlineUtilities_GetRegionDisplayName::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetRegionName
// 0x0018 (0x0018 - 0x0000)
struct OnlineUtilities_GetRegionName final
{
public:
	EServerRegion                                 Region;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_GetRegionName) == 0x000008, "Wrong alignment on OnlineUtilities_GetRegionName");
static_assert(sizeof(OnlineUtilities_GetRegionName) == 0x000018, "Wrong size on OnlineUtilities_GetRegionName");
static_assert(offsetof(OnlineUtilities_GetRegionName, Region) == 0x000000, "Member 'OnlineUtilities_GetRegionName::Region' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_GetRegionName, ReturnValue) == 0x000008, "Member 'OnlineUtilities_GetRegionName::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetReleaseVersion
// 0x0004 (0x0004 - 0x0000)
struct OnlineUtilities_GetReleaseVersion final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_GetReleaseVersion) == 0x000004, "Wrong alignment on OnlineUtilities_GetReleaseVersion");
static_assert(sizeof(OnlineUtilities_GetReleaseVersion) == 0x000004, "Wrong size on OnlineUtilities_GetReleaseVersion");
static_assert(offsetof(OnlineUtilities_GetReleaseVersion, ReturnValue) == 0x000000, "Member 'OnlineUtilities_GetReleaseVersion::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.GetUseLegacyPakMounting
// 0x0001 (0x0001 - 0x0000)
struct OnlineUtilities_GetUseLegacyPakMounting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_GetUseLegacyPakMounting) == 0x000001, "Wrong alignment on OnlineUtilities_GetUseLegacyPakMounting");
static_assert(sizeof(OnlineUtilities_GetUseLegacyPakMounting) == 0x000001, "Wrong size on OnlineUtilities_GetUseLegacyPakMounting");
static_assert(offsetof(OnlineUtilities_GetUseLegacyPakMounting, ReturnValue) == 0x000000, "Member 'OnlineUtilities_GetUseLegacyPakMounting::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.IsDedicatedServer
// 0x0001 (0x0001 - 0x0000)
struct OnlineUtilities_IsDedicatedServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_IsDedicatedServer) == 0x000001, "Wrong alignment on OnlineUtilities_IsDedicatedServer");
static_assert(sizeof(OnlineUtilities_IsDedicatedServer) == 0x000001, "Wrong size on OnlineUtilities_IsDedicatedServer");
static_assert(offsetof(OnlineUtilities_IsDedicatedServer, ReturnValue) == 0x000000, "Member 'OnlineUtilities_IsDedicatedServer::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.IsDevelopmentBranch
// 0x0001 (0x0001 - 0x0000)
struct OnlineUtilities_IsDevelopmentBranch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_IsDevelopmentBranch) == 0x000001, "Wrong alignment on OnlineUtilities_IsDevelopmentBranch");
static_assert(sizeof(OnlineUtilities_IsDevelopmentBranch) == 0x000001, "Wrong size on OnlineUtilities_IsDevelopmentBranch");
static_assert(offsetof(OnlineUtilities_IsDevelopmentBranch, ReturnValue) == 0x000000, "Member 'OnlineUtilities_IsDevelopmentBranch::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.IsDevelopmentBuild
// 0x0001 (0x0001 - 0x0000)
struct OnlineUtilities_IsDevelopmentBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_IsDevelopmentBuild) == 0x000001, "Wrong alignment on OnlineUtilities_IsDevelopmentBuild");
static_assert(sizeof(OnlineUtilities_IsDevelopmentBuild) == 0x000001, "Wrong size on OnlineUtilities_IsDevelopmentBuild");
static_assert(offsetof(OnlineUtilities_IsDevelopmentBuild, ReturnValue) == 0x000000, "Member 'OnlineUtilities_IsDevelopmentBuild::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.IsDevelopmentEnvironment
// 0x0001 (0x0001 - 0x0000)
struct OnlineUtilities_IsDevelopmentEnvironment final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_IsDevelopmentEnvironment) == 0x000001, "Wrong alignment on OnlineUtilities_IsDevelopmentEnvironment");
static_assert(sizeof(OnlineUtilities_IsDevelopmentEnvironment) == 0x000001, "Wrong size on OnlineUtilities_IsDevelopmentEnvironment");
static_assert(offsetof(OnlineUtilities_IsDevelopmentEnvironment, ReturnValue) == 0x000000, "Member 'OnlineUtilities_IsDevelopmentEnvironment::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.IsOfficialServer
// 0x0001 (0x0001 - 0x0000)
struct OnlineUtilities_IsOfficialServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_IsOfficialServer) == 0x000001, "Wrong alignment on OnlineUtilities_IsOfficialServer");
static_assert(sizeof(OnlineUtilities_IsOfficialServer) == 0x000001, "Wrong size on OnlineUtilities_IsOfficialServer");
static_assert(offsetof(OnlineUtilities_IsOfficialServer, ReturnValue) == 0x000000, "Member 'OnlineUtilities_IsOfficialServer::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.IsPlayInEditor
// 0x0001 (0x0001 - 0x0000)
struct OnlineUtilities_IsPlayInEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_IsPlayInEditor) == 0x000001, "Wrong alignment on OnlineUtilities_IsPlayInEditor");
static_assert(sizeof(OnlineUtilities_IsPlayInEditor) == 0x000001, "Wrong size on OnlineUtilities_IsPlayInEditor");
static_assert(offsetof(OnlineUtilities_IsPlayInEditor, ReturnValue) == 0x000000, "Member 'OnlineUtilities_IsPlayInEditor::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.IsPrivateIPAddress
// 0x0018 (0x0018 - 0x0000)
struct OnlineUtilities_IsPrivateIPAddress final
{
public:
	class FString                                 IPAddress;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineUtilities_IsPrivateIPAddress) == 0x000008, "Wrong alignment on OnlineUtilities_IsPrivateIPAddress");
static_assert(sizeof(OnlineUtilities_IsPrivateIPAddress) == 0x000018, "Wrong size on OnlineUtilities_IsPrivateIPAddress");
static_assert(offsetof(OnlineUtilities_IsPrivateIPAddress, IPAddress) == 0x000000, "Member 'OnlineUtilities_IsPrivateIPAddress::IPAddress' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_IsPrivateIPAddress, ReturnValue) == 0x000010, "Member 'OnlineUtilities_IsPrivateIPAddress::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.IsPublicIPAddress
// 0x0018 (0x0018 - 0x0000)
struct OnlineUtilities_IsPublicIPAddress final
{
public:
	class FString                                 IPAddress;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineUtilities_IsPublicIPAddress) == 0x000008, "Wrong alignment on OnlineUtilities_IsPublicIPAddress");
static_assert(sizeof(OnlineUtilities_IsPublicIPAddress) == 0x000018, "Wrong size on OnlineUtilities_IsPublicIPAddress");
static_assert(offsetof(OnlineUtilities_IsPublicIPAddress, IPAddress) == 0x000000, "Member 'OnlineUtilities_IsPublicIPAddress::IPAddress' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_IsPublicIPAddress, ReturnValue) == 0x000010, "Member 'OnlineUtilities_IsPublicIPAddress::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.IsValidIPAddress
// 0x0018 (0x0018 - 0x0000)
struct OnlineUtilities_IsValidIPAddress final
{
public:
	class FString                                 IPAddress;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineUtilities_IsValidIPAddress) == 0x000008, "Wrong alignment on OnlineUtilities_IsValidIPAddress");
static_assert(sizeof(OnlineUtilities_IsValidIPAddress) == 0x000018, "Wrong size on OnlineUtilities_IsValidIPAddress");
static_assert(offsetof(OnlineUtilities_IsValidIPAddress, IPAddress) == 0x000000, "Member 'OnlineUtilities_IsValidIPAddress::IPAddress' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_IsValidIPAddress, ReturnValue) == 0x000010, "Member 'OnlineUtilities_IsValidIPAddress::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.IsWindowsVersionOrGreater
// 0x0010 (0x0010 - 0x0000)
struct OnlineUtilities_IsWindowsVersionOrGreater final
{
public:
	int32                                         MajorVersion;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinorVersion;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServicePackMajor;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineUtilities_IsWindowsVersionOrGreater) == 0x000004, "Wrong alignment on OnlineUtilities_IsWindowsVersionOrGreater");
static_assert(sizeof(OnlineUtilities_IsWindowsVersionOrGreater) == 0x000010, "Wrong size on OnlineUtilities_IsWindowsVersionOrGreater");
static_assert(offsetof(OnlineUtilities_IsWindowsVersionOrGreater, MajorVersion) == 0x000000, "Member 'OnlineUtilities_IsWindowsVersionOrGreater::MajorVersion' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_IsWindowsVersionOrGreater, MinorVersion) == 0x000004, "Member 'OnlineUtilities_IsWindowsVersionOrGreater::MinorVersion' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_IsWindowsVersionOrGreater, ServicePackMajor) == 0x000008, "Member 'OnlineUtilities_IsWindowsVersionOrGreater::ServicePackMajor' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_IsWindowsVersionOrGreater, ReturnValue) == 0x00000C, "Member 'OnlineUtilities_IsWindowsVersionOrGreater::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.MountPak
// 0x0018 (0x0018 - 0x0000)
struct OnlineUtilities_MountPak final
{
public:
	class FString                                 PakPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineUtilities_MountPak) == 0x000008, "Wrong alignment on OnlineUtilities_MountPak");
static_assert(sizeof(OnlineUtilities_MountPak) == 0x000018, "Wrong size on OnlineUtilities_MountPak");
static_assert(offsetof(OnlineUtilities_MountPak, PakPath) == 0x000000, "Member 'OnlineUtilities_MountPak::PakPath' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_MountPak, ReturnValue) == 0x000010, "Member 'OnlineUtilities_MountPak::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.RandomRangeExclude
// 0x0010 (0x0010 - 0x0000)
struct OnlineUtilities_RandomRangeExclude final
{
public:
	int32                                         Min;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exclude;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_RandomRangeExclude) == 0x000004, "Wrong alignment on OnlineUtilities_RandomRangeExclude");
static_assert(sizeof(OnlineUtilities_RandomRangeExclude) == 0x000010, "Wrong size on OnlineUtilities_RandomRangeExclude");
static_assert(offsetof(OnlineUtilities_RandomRangeExclude, Min) == 0x000000, "Member 'OnlineUtilities_RandomRangeExclude::Min' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_RandomRangeExclude, Max) == 0x000004, "Member 'OnlineUtilities_RandomRangeExclude::Max' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_RandomRangeExclude, Exclude) == 0x000008, "Member 'OnlineUtilities_RandomRangeExclude::Exclude' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_RandomRangeExclude, ReturnValue) == 0x00000C, "Member 'OnlineUtilities_RandomRangeExclude::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.ReportError
// 0x0020 (0x0020 - 0x0000)
struct OnlineUtilities_ReportError final
{
public:
	EReportErrorType                              ErrorType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineUtilities_ReportError) == 0x000008, "Wrong alignment on OnlineUtilities_ReportError");
static_assert(sizeof(OnlineUtilities_ReportError) == 0x000020, "Wrong size on OnlineUtilities_ReportError");
static_assert(offsetof(OnlineUtilities_ReportError, ErrorType) == 0x000000, "Member 'OnlineUtilities_ReportError::ErrorType' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_ReportError, ErrorMessage) == 0x000008, "Member 'OnlineUtilities_ReportError::ErrorMessage' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_ReportError, ReturnValue) == 0x000018, "Member 'OnlineUtilities_ReportError::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.ReportUser
// 0x0058 (0x0058 - 0x0000)
struct OnlineUtilities_ReportUser final
{
public:
	EPlayerReportType                             PlayerReportType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Platform;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReporterId;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OffenderId;                                        // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerId;                                          // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_ReportUser) == 0x000008, "Wrong alignment on OnlineUtilities_ReportUser");
static_assert(sizeof(OnlineUtilities_ReportUser) == 0x000058, "Wrong size on OnlineUtilities_ReportUser");
static_assert(offsetof(OnlineUtilities_ReportUser, PlayerReportType) == 0x000000, "Member 'OnlineUtilities_ReportUser::PlayerReportType' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_ReportUser, Platform) == 0x000008, "Member 'OnlineUtilities_ReportUser::Platform' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_ReportUser, ReporterId) == 0x000018, "Member 'OnlineUtilities_ReportUser::ReporterId' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_ReportUser, OffenderId) == 0x000028, "Member 'OnlineUtilities_ReportUser::OffenderId' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_ReportUser, ErrorMessage) == 0x000038, "Member 'OnlineUtilities_ReportUser::ErrorMessage' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_ReportUser, ServerId) == 0x000048, "Member 'OnlineUtilities_ReportUser::ServerId' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.SanitizePlayerName
// 0x0030 (0x0030 - 0x0000)
struct OnlineUtilities_SanitizePlayerName final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InFallback;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUtilities_SanitizePlayerName) == 0x000008, "Wrong alignment on OnlineUtilities_SanitizePlayerName");
static_assert(sizeof(OnlineUtilities_SanitizePlayerName) == 0x000030, "Wrong size on OnlineUtilities_SanitizePlayerName");
static_assert(offsetof(OnlineUtilities_SanitizePlayerName, InName) == 0x000000, "Member 'OnlineUtilities_SanitizePlayerName::InName' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_SanitizePlayerName, InFallback) == 0x000010, "Member 'OnlineUtilities_SanitizePlayerName::InFallback' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_SanitizePlayerName, ReturnValue) == 0x000020, "Member 'OnlineUtilities_SanitizePlayerName::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.OnlineUtilities.UnmountPak
// 0x0018 (0x0018 - 0x0000)
struct OnlineUtilities_UnmountPak final
{
public:
	class FString                                 PakPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineUtilities_UnmountPak) == 0x000008, "Wrong alignment on OnlineUtilities_UnmountPak");
static_assert(sizeof(OnlineUtilities_UnmountPak) == 0x000018, "Wrong size on OnlineUtilities_UnmountPak");
static_assert(offsetof(OnlineUtilities_UnmountPak, PakPath) == 0x000000, "Member 'OnlineUtilities_UnmountPak::PakPath' has a wrong offset!");
static_assert(offsetof(OnlineUtilities_UnmountPak, ReturnValue) == 0x000010, "Member 'OnlineUtilities_UnmountPak::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.PlayFabAPI.GetLeaderboard
// 0x0010 (0x0010 - 0x0000)
struct PlayFabAPI_GetLeaderboard final
{
public:
	class FString                                 LeaderboardName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayFabAPI_GetLeaderboard) == 0x000008, "Wrong alignment on PlayFabAPI_GetLeaderboard");
static_assert(sizeof(PlayFabAPI_GetLeaderboard) == 0x000010, "Wrong size on PlayFabAPI_GetLeaderboard");
static_assert(offsetof(PlayFabAPI_GetLeaderboard, LeaderboardName) == 0x000000, "Member 'PlayFabAPI_GetLeaderboard::LeaderboardName' has a wrong offset!");

// Function MordhauOnlineSubsystem.PlayFabAPI.GetPlayerByShortId
// 0x0018 (0x0018 - 0x0000)
struct PlayFabAPI_GetPlayerByShortId final
{
public:
	TArray<class FString>                         ShortId;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EPlatform                                     PlatformFilter;                                    // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayFabAPI_GetPlayerByShortId) == 0x000008, "Wrong alignment on PlayFabAPI_GetPlayerByShortId");
static_assert(sizeof(PlayFabAPI_GetPlayerByShortId) == 0x000018, "Wrong size on PlayFabAPI_GetPlayerByShortId");
static_assert(offsetof(PlayFabAPI_GetPlayerByShortId, ShortId) == 0x000000, "Member 'PlayFabAPI_GetPlayerByShortId::ShortId' has a wrong offset!");
static_assert(offsetof(PlayFabAPI_GetPlayerByShortId, PlatformFilter) == 0x000010, "Member 'PlayFabAPI_GetPlayerByShortId::PlatformFilter' has a wrong offset!");

// Function MordhauOnlineSubsystem.PlayFabAPI.GetShortID
// 0x0010 (0x0010 - 0x0000)
struct PlayFabAPI_GetShortID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayFabAPI_GetShortID) == 0x000008, "Wrong alignment on PlayFabAPI_GetShortID");
static_assert(sizeof(PlayFabAPI_GetShortID) == 0x000010, "Wrong size on PlayFabAPI_GetShortID");
static_assert(offsetof(PlayFabAPI_GetShortID, ReturnValue) == 0x000000, "Member 'PlayFabAPI_GetShortID::ReturnValue' has a wrong offset!");

// Function MordhauOnlineSubsystem.PlayFabAPI.IsPlayerLoggedIn
// 0x0001 (0x0001 - 0x0000)
struct PlayFabAPI_IsPlayerLoggedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayFabAPI_IsPlayerLoggedIn) == 0x000001, "Wrong alignment on PlayFabAPI_IsPlayerLoggedIn");
static_assert(sizeof(PlayFabAPI_IsPlayerLoggedIn) == 0x000001, "Wrong size on PlayFabAPI_IsPlayerLoggedIn");
static_assert(offsetof(PlayFabAPI_IsPlayerLoggedIn, ReturnValue) == 0x000000, "Member 'PlayFabAPI_IsPlayerLoggedIn::ReturnValue' has a wrong offset!");

}

