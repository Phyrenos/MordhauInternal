#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VehicleHorse

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mordhau_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VehicleHorse.BP_VehicleHorse_C
// 0x0020 (0x01E0 - 0x01C0)
class UBP_VehicleHorse_C final : public UHorseVehicleComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class ABP_Horse_C*                            Horse;                                             // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            AttackAngleCurve;                                  // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_VehicleHorse(int32 EntryPoint);
	void OnDriverChanged();
	void ReceiveBeginPlay();
	struct FVehicleTransitionInfo GetVehicleEnterInfo(class AMordhauCharacter* Character, const struct FTransform& FromTransform);
	struct FVehicleTransitionInfo GetVehicleLeaveInfo(class AMordhauCharacter* Character, const struct FTransform& FromTransform);
	float OverrideAttackAngle(class UAttackMotion* Motion);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VehicleHorse_C">();
	}
	static class UBP_VehicleHorse_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_VehicleHorse_C>();
	}
};
static_assert(alignof(UBP_VehicleHorse_C) == 0x000010, "Wrong alignment on UBP_VehicleHorse_C");
static_assert(sizeof(UBP_VehicleHorse_C) == 0x0001E0, "Wrong size on UBP_VehicleHorse_C");
static_assert(offsetof(UBP_VehicleHorse_C, UberGraphFrame) == 0x0001C0, "Member 'UBP_VehicleHorse_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_VehicleHorse_C, Horse) == 0x0001C8, "Member 'UBP_VehicleHorse_C::Horse' has a wrong offset!");
static_assert(offsetof(UBP_VehicleHorse_C, AttackAngleCurve) == 0x0001D0, "Member 'UBP_VehicleHorse_C::AttackAngleCurve' has a wrong offset!");

}

