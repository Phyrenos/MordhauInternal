#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DemonHordeEnemy_Special_Gremlin

#include "Basic.hpp"

#include "BP_DemonHordeEnemy_Special_Gremlin_classes.hpp"
#include "BP_DemonHordeEnemy_Special_Gremlin_parameters.hpp"


namespace SDK
{

// Function BP_DemonHordeEnemy_Special_Gremlin.BP_DemonHordeEnemy_Special_Gremlin_C.ExecuteUbergraph_BP_DemonHordeEnemy_Special_Gremlin
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DemonHordeEnemy_Special_Gremlin_C::ExecuteUbergraph_BP_DemonHordeEnemy_Special_Gremlin(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DemonHordeEnemy_Special_Gremlin_C", "ExecuteUbergraph_BP_DemonHordeEnemy_Special_Gremlin");

	Params::BP_DemonHordeEnemy_Special_Gremlin_C_ExecuteUbergraph_BP_DemonHordeEnemy_Special_Gremlin Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DemonHordeEnemy_Special_Gremlin.BP_DemonHordeEnemy_Special_Gremlin_C.DisableCollisionMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_DemonHordeEnemy_Special_Gremlin_C::DisableCollisionMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DemonHordeEnemy_Special_Gremlin_C", "DisableCollisionMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DemonHordeEnemy_Special_Gremlin.BP_DemonHordeEnemy_Special_Gremlin_C.BndEvt__BP_DemonHordeEnemy_Special_Gremlin_GrappleSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_DemonHordeEnemy_Special_Gremlin_C::BndEvt__BP_DemonHordeEnemy_Special_Gremlin_GrappleSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DemonHordeEnemy_Special_Gremlin_C", "BndEvt__BP_DemonHordeEnemy_Special_Gremlin_GrappleSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_DemonHordeEnemy_Special_Gremlin_C_BndEvt__BP_DemonHordeEnemy_Special_Gremlin_GrappleSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DemonHordeEnemy_Special_Gremlin.BP_DemonHordeEnemy_Special_Gremlin_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DemonHordeEnemy_Special_Gremlin_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DemonHordeEnemy_Special_Gremlin_C", "ReceiveTick");

	Params::BP_DemonHordeEnemy_Special_Gremlin_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DemonHordeEnemy_Special_Gremlin.BP_DemonHordeEnemy_Special_Gremlin_C.OnLanded
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_DemonHordeEnemy_Special_Gremlin_C::OnLanded(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DemonHordeEnemy_Special_Gremlin_C", "OnLanded");

	Params::BP_DemonHordeEnemy_Special_Gremlin_C_OnLanded Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DemonHordeEnemy_Special_Gremlin.BP_DemonHordeEnemy_Special_Gremlin_C.LeapLoop
// (BlueprintCallable, BlueprintEvent)

void ABP_DemonHordeEnemy_Special_Gremlin_C::LeapLoop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DemonHordeEnemy_Special_Gremlin_C", "LeapLoop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DemonHordeEnemy_Special_Gremlin.BP_DemonHordeEnemy_Special_Gremlin_C.ModifyDamage
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DamageAmount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FMordhauDamageInfo               DamageInfo                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
// class AController*                      EventInstigator                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ABP_DemonHordeEnemy_Special_Gremlin_C::ModifyDamage(float DamageAmount, const struct FMordhauDamageInfo& DamageInfo, class AController* EventInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DemonHordeEnemy_Special_Gremlin_C", "ModifyDamage");

	Params::BP_DemonHordeEnemy_Special_Gremlin_C_ModifyDamage Parms{};

	Parms.DamageAmount = DamageAmount;
	Parms.DamageInfo = std::move(DamageInfo);
	Parms.EventInstigator = EventInstigator;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_DemonHordeEnemy_Special_Gremlin.BP_DemonHordeEnemy_Special_Gremlin_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_DemonHordeEnemy_Special_Gremlin_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DemonHordeEnemy_Special_Gremlin_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DemonHordeEnemy_Special_Gremlin.BP_DemonHordeEnemy_Special_Gremlin_C.OnDied
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMordhauDamageType                      Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   SubType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             bone                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Point                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Agent                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DemonHordeEnemy_Special_Gremlin_C::OnDied(float Angle, EMordhauDamageType Type, uint8 SubType, class FName bone, const struct FVector& Point, class AActor* Source, class AActor* Agent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DemonHordeEnemy_Special_Gremlin_C", "OnDied");

	Params::BP_DemonHordeEnemy_Special_Gremlin_C_OnDied Parms{};

	Parms.Angle = Angle;
	Parms.Type = Type;
	Parms.SubType = SubType;
	Parms.bone = bone;
	Parms.Point = std::move(Point);
	Parms.Source = Source;
	Parms.Agent = Agent;

	UObject::ProcessEvent(Func, &Parms);
}

}

