#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ColorPatternWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_ColorPatternWidget.BP_ColorPatternWidget_C
// 0x00A0 (0x0300 - 0x0260)
class UBP_ColorPatternWidget_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UBP_ColorEntry_C*                       BP_ColorEntry_1;                                   // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_ColorEntry_C*                       BP_ColorEntry_2;                                   // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_MordhauSlider_C*                    BP_MordhauSlider;                                  // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_PatternEntry_C*                     BP_PatternEntry;                                   // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_SmallTopLabel_C*                    BP_SmallTopLabel;                                  // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_SmallTopLabel_C*                    BP_SmallTopLabel_1;                                // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_1;                                   // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_Colors;                                // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_Pattern;                               // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(int32 Value)>   PatternValueChanged;                               // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 Color_Slot)> Color_Entry_Clicked;                               // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UBP_ColorEntry_C*>               Color_Entries;                                     // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          HasPattern;                                        // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasColors;                                         // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E2[0x6];                                      // 0x02E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 Pattern_Id)> Pattern_Entry_Clicked;                             // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Pattern_Id;                                        // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_ColorPatternWidget(int32 EntryPoint);
	void BndEvt__BP_ColorPatternWidget_BP_PatternEntry_K2Node_ComponentBoundEvent_0_OnClick__DelegateSignature(class UBP_CustomizationItemEntry_C* Entry);
	void BndEvt__BP_ColorPatternWidget_BP_MordhauSlider_K2Node_ComponentBoundEvent_1_OnValueChanged__DelegateSignature(float Value);
	void Update_(const TArray<struct FS_ArmorySlotColorInfo>& Colors, const TArray<int32>& Pattern_Values, const struct FPatternInfo& Selected_Pattern);
	void Construct();
	void EntryClicked(class UBP_CustomizationItemEntry_C* Entry);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ColorPatternWidget_C">();
	}
	static class UBP_ColorPatternWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_ColorPatternWidget_C>();
	}
};
static_assert(alignof(UBP_ColorPatternWidget_C) == 0x000008, "Wrong alignment on UBP_ColorPatternWidget_C");
static_assert(sizeof(UBP_ColorPatternWidget_C) == 0x000300, "Wrong size on UBP_ColorPatternWidget_C");
static_assert(offsetof(UBP_ColorPatternWidget_C, UberGraphFrame) == 0x000260, "Member 'UBP_ColorPatternWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_ColorPatternWidget_C, BP_ColorEntry_1) == 0x000268, "Member 'UBP_ColorPatternWidget_C::BP_ColorEntry_1' has a wrong offset!");
static_assert(offsetof(UBP_ColorPatternWidget_C, BP_ColorEntry_2) == 0x000270, "Member 'UBP_ColorPatternWidget_C::BP_ColorEntry_2' has a wrong offset!");
static_assert(offsetof(UBP_ColorPatternWidget_C, BP_MordhauSlider) == 0x000278, "Member 'UBP_ColorPatternWidget_C::BP_MordhauSlider' has a wrong offset!");
static_assert(offsetof(UBP_ColorPatternWidget_C, BP_PatternEntry) == 0x000280, "Member 'UBP_ColorPatternWidget_C::BP_PatternEntry' has a wrong offset!");
static_assert(offsetof(UBP_ColorPatternWidget_C, BP_SmallTopLabel) == 0x000288, "Member 'UBP_ColorPatternWidget_C::BP_SmallTopLabel' has a wrong offset!");
static_assert(offsetof(UBP_ColorPatternWidget_C, BP_SmallTopLabel_1) == 0x000290, "Member 'UBP_ColorPatternWidget_C::BP_SmallTopLabel_1' has a wrong offset!");
static_assert(offsetof(UBP_ColorPatternWidget_C, HorizontalBox_1) == 0x000298, "Member 'UBP_ColorPatternWidget_C::HorizontalBox_1' has a wrong offset!");
static_assert(offsetof(UBP_ColorPatternWidget_C, VerticalBox_Colors) == 0x0002A0, "Member 'UBP_ColorPatternWidget_C::VerticalBox_Colors' has a wrong offset!");
static_assert(offsetof(UBP_ColorPatternWidget_C, VerticalBox_Pattern) == 0x0002A8, "Member 'UBP_ColorPatternWidget_C::VerticalBox_Pattern' has a wrong offset!");
static_assert(offsetof(UBP_ColorPatternWidget_C, PatternValueChanged) == 0x0002B0, "Member 'UBP_ColorPatternWidget_C::PatternValueChanged' has a wrong offset!");
static_assert(offsetof(UBP_ColorPatternWidget_C, Color_Entry_Clicked) == 0x0002C0, "Member 'UBP_ColorPatternWidget_C::Color_Entry_Clicked' has a wrong offset!");
static_assert(offsetof(UBP_ColorPatternWidget_C, Color_Entries) == 0x0002D0, "Member 'UBP_ColorPatternWidget_C::Color_Entries' has a wrong offset!");
static_assert(offsetof(UBP_ColorPatternWidget_C, HasPattern) == 0x0002E0, "Member 'UBP_ColorPatternWidget_C::HasPattern' has a wrong offset!");
static_assert(offsetof(UBP_ColorPatternWidget_C, HasColors) == 0x0002E1, "Member 'UBP_ColorPatternWidget_C::HasColors' has a wrong offset!");
static_assert(offsetof(UBP_ColorPatternWidget_C, Pattern_Entry_Clicked) == 0x0002E8, "Member 'UBP_ColorPatternWidget_C::Pattern_Entry_Clicked' has a wrong offset!");
static_assert(offsetof(UBP_ColorPatternWidget_C, Pattern_Id) == 0x0002F8, "Member 'UBP_ColorPatternWidget_C::Pattern_Id' has a wrong offset!");

}

