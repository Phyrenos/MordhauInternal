#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SellableWidget

#include "Basic.hpp"

#include "BP_SellableWidget_classes.hpp"
#include "BP_SellableWidget_parameters.hpp"


namespace SDK
{

// Function BP_SellableWidget.BP_SellableWidget_C.ExecuteUbergraph_BP_SellableWidget
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SellableWidget_C::ExecuteUbergraph_BP_SellableWidget(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SellableWidget_C", "ExecuteUbergraph_BP_SellableWidget");

	Params::BP_SellableWidget_C_ExecuteUbergraph_BP_SellableWidget Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SellableWidget.BP_SellableWidget_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UBP_SellableWidget_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SellableWidget_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SellableWidget.BP_SellableWidget_C.GetPriceText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText UBP_SellableWidget_C::GetPriceText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SellableWidget_C", "GetPriceText");

	Params::BP_SellableWidget_C_GetPriceText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SellableWidget.BP_SellableWidget_C.Get Text Color And Opacity
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSlateColor                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FSlateColor UBP_SellableWidget_C::Get_Text_Color_And_Opacity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SellableWidget_C", "Get Text Color And Opacity");

	Params::BP_SellableWidget_C_Get_Text_Color_And_Opacity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SellableWidget.BP_SellableWidget_C.GetVisibility_0
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ESlateVisibility                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ESlateVisibility UBP_SellableWidget_C::GetVisibility_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SellableWidget_C", "GetVisibility_0");

	Params::BP_SellableWidget_C_GetVisibility_0 Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SellableWidget.BP_SellableWidget_C.GetVisibleIfEquipmentIsSellable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ESlateVisibility                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ESlateVisibility UBP_SellableWidget_C::GetVisibleIfEquipmentIsSellable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SellableWidget_C", "GetVisibleIfEquipmentIsSellable");

	Params::BP_SellableWidget_C_GetVisibleIfEquipmentIsSellable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SellableWidget.BP_SellableWidget_C.GetEquipmentText
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText UBP_SellableWidget_C::GetEquipmentText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SellableWidget_C", "GetEquipmentText");

	Params::BP_SellableWidget_C_GetEquipmentText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SellableWidget.BP_SellableWidget_C.GetFirstSellableEquipment
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMordhauEquipment*                MordhauEquipment                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SellableWidget_C::GetFirstSellableEquipment(class AMordhauEquipment** MordhauEquipment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SellableWidget_C", "GetFirstSellableEquipment");

	Params::BP_SellableWidget_C_GetFirstSellableEquipment Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MordhauEquipment != nullptr)
		*MordhauEquipment = Parms.MordhauEquipment;
}


// Function BP_SellableWidget.BP_SellableWidget_C.IsEquipmentNotInBanList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             EquipmentName                                          (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    IsEquipmentSellable_0                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SellableWidget_C::IsEquipmentNotInBanList(const class FText& EquipmentName, bool* IsEquipmentSellable_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SellableWidget_C", "IsEquipmentNotInBanList");

	Params::BP_SellableWidget_C_IsEquipmentNotInBanList Parms{};

	Parms.EquipmentName = std::move(EquipmentName);

	UObject::ProcessEvent(Func, &Parms);

	if (IsEquipmentSellable_0 != nullptr)
		*IsEquipmentSellable_0 = Parms.IsEquipmentSellable_0;
}


// Function BP_SellableWidget.BP_SellableWidget_C.Get_Title
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText UBP_SellableWidget_C::Get_Title()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SellableWidget_C", "Get_Title");

	Params::BP_SellableWidget_C_Get_Title Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SellableWidget.BP_SellableWidget_C.IsEquipmentSellable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEquipmentSellable_0                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SellableWidget_C::IsEquipmentSellable(bool* IsEquipmentSellable_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SellableWidget_C", "IsEquipmentSellable");

	Params::BP_SellableWidget_C_IsEquipmentSellable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEquipmentSellable_0 != nullptr)
		*IsEquipmentSellable_0 = Parms.IsEquipmentSellable_0;
}


// Function BP_SellableWidget.BP_SellableWidget_C.Get Marker Color And Opacity
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSlateColor                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FSlateColor UBP_SellableWidget_C::Get_Marker_Color_And_Opacity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SellableWidget_C", "Get Marker Color And Opacity");

	Params::BP_SellableWidget_C_Get_Marker_Color_And_Opacity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

