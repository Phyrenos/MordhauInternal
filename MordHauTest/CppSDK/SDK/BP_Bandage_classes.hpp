#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Bandage

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mordhau_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Bandage.BP_Bandage_C
// 0x0010 (0x0D40 - 0x0D30)
class ABP_Bandage_C : public AMordhauEquipment
{
public:
	uint8                                         Pad_D28[0x8];                                      // 0x0D28(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0D30(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	int32                                         HealAmount;                                        // 0x0D38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AutoRestockInterval;                               // 0x0D3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Bandage(int32 EntryPoint);
	void ReceiveBeginPlay();
	void AutoRestock();
	void FireProjectile(const struct FVector& Origin, const struct FRotator& Orientation, class AController* OwningController, float ExpectedDelay);
	void ApplyHeal();
	bool OnRequestFire(class AMordhauCharacter* Character);
	bool OnRequestModeSwitch(class AMordhauCharacter* Character);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Bandage_C">();
	}
	static class ABP_Bandage_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Bandage_C>();
	}
};
static_assert(alignof(ABP_Bandage_C) == 0x000010, "Wrong alignment on ABP_Bandage_C");
static_assert(sizeof(ABP_Bandage_C) == 0x000D40, "Wrong size on ABP_Bandage_C");
static_assert(offsetof(ABP_Bandage_C, UberGraphFrame) == 0x000D30, "Member 'ABP_Bandage_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Bandage_C, HealAmount) == 0x000D38, "Member 'ABP_Bandage_C::HealAmount' has a wrong offset!");
static_assert(offsetof(ABP_Bandage_C, AutoRestockInterval) == 0x000D3C, "Member 'ABP_Bandage_C::AutoRestockInterval' has a wrong offset!");

}

