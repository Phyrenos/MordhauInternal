#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Crosshair

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "E_CrosshairMode_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_Crosshair.BP_Crosshair_C
// 0x0230 (0x0490 - 0x0260)
class UBP_Crosshair_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UWidgetAnimation*                       DamageTakenAnim;                                   // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       HitmarkerAnim_Legs;                                // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       HitmarkerAnim_Headshot_X;                          // 0x0278(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       HitmarkerAnim_Torso_X;                             // 0x0280(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       HitmarkerAnim_Torso;                               // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       HitmarkerAnim_Headshot_old;                        // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       HitmarkerAnim_Headshot;                            // 0x0298(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ShieldEntryAnim;                                   // 0x02A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       HitmarkerAnim;                                     // 0x02A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       HitmarkerAnim_old;                                 // 0x02B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 AngleIndicator;                                    // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               AngleIndicatorContainer;                           // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BottomLeft;                                        // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BottomRight;                                       // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_CircleTimer_C*                      BP_CircleTimer;                                    // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_StatePopupText_C*                   BP_StatePopupText;                                 // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 DamageIndicator;                                   // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               DamageIndicatorContainer;                          // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Dot;                                               // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                DotContainer;                                      // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           HitmarkerContainer;                                // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Left;                                              // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               MeleeCrosshairContainer;                           // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_0;                                         // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RangeDot;                                          // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               RangeDotContainer;                                 // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Right;                                             // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               ShieldContainer;                                   // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ShieldFill;                                        // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ShieldOutline;                                     // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TopLeft;                                           // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TopRight;                                          // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FSlateBrush                            Crosshair_Dot;                                     // 0x0368(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateBrush                            Crosshair_Dot_Outline;                             // 0x03F0(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_CrosshairMode                               CrosshairMode;                                     // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_TargetInfo_C*                       TargetInfo;                                        // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         LastCrosshairTypeSettings;                         // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              ShieldContainerVisible;                            // 0x048C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              AngleIndicatorVisible;                             // 0x048D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              MeleeDotVisible;                                   // 0x048E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Crosshair(int32 EntryPoint);
	void On_Hitmarker_Animation_Finish();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	ESlateVisibility Get_Crosshair_Visibility_0();
	void ClampAngleToDirectionalZone(float Angle, float* ClampedAngle);
	void ShowHitMarker(int32 HitZoneParam);
	void ClampAngleToSide(float Angle, bool isSideLeft, float* ClampedAngle);
	void PlayHitmarkerAnimation(class UWidgetAnimation* Anim, float Speed, EUMGSequencePlayMode PlayMode);
	void UpdateCrosshair();
	void TriggerDamageIndicator(float Render_Angle);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Crosshair_C">();
	}
	static class UBP_Crosshair_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Crosshair_C>();
	}
};
static_assert(alignof(UBP_Crosshair_C) == 0x000008, "Wrong alignment on UBP_Crosshair_C");
static_assert(sizeof(UBP_Crosshair_C) == 0x000490, "Wrong size on UBP_Crosshair_C");
static_assert(offsetof(UBP_Crosshair_C, UberGraphFrame) == 0x000260, "Member 'UBP_Crosshair_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, DamageTakenAnim) == 0x000268, "Member 'UBP_Crosshair_C::DamageTakenAnim' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, HitmarkerAnim_Legs) == 0x000270, "Member 'UBP_Crosshair_C::HitmarkerAnim_Legs' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, HitmarkerAnim_Headshot_X) == 0x000278, "Member 'UBP_Crosshair_C::HitmarkerAnim_Headshot_X' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, HitmarkerAnim_Torso_X) == 0x000280, "Member 'UBP_Crosshair_C::HitmarkerAnim_Torso_X' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, HitmarkerAnim_Torso) == 0x000288, "Member 'UBP_Crosshair_C::HitmarkerAnim_Torso' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, HitmarkerAnim_Headshot_old) == 0x000290, "Member 'UBP_Crosshair_C::HitmarkerAnim_Headshot_old' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, HitmarkerAnim_Headshot) == 0x000298, "Member 'UBP_Crosshair_C::HitmarkerAnim_Headshot' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, ShieldEntryAnim) == 0x0002A0, "Member 'UBP_Crosshair_C::ShieldEntryAnim' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, HitmarkerAnim) == 0x0002A8, "Member 'UBP_Crosshair_C::HitmarkerAnim' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, HitmarkerAnim_old) == 0x0002B0, "Member 'UBP_Crosshair_C::HitmarkerAnim_old' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, AngleIndicator) == 0x0002B8, "Member 'UBP_Crosshair_C::AngleIndicator' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, AngleIndicatorContainer) == 0x0002C0, "Member 'UBP_Crosshair_C::AngleIndicatorContainer' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, BottomLeft) == 0x0002C8, "Member 'UBP_Crosshair_C::BottomLeft' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, BottomRight) == 0x0002D0, "Member 'UBP_Crosshair_C::BottomRight' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, BP_CircleTimer) == 0x0002D8, "Member 'UBP_Crosshair_C::BP_CircleTimer' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, BP_StatePopupText) == 0x0002E0, "Member 'UBP_Crosshair_C::BP_StatePopupText' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, DamageIndicator) == 0x0002E8, "Member 'UBP_Crosshair_C::DamageIndicator' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, DamageIndicatorContainer) == 0x0002F0, "Member 'UBP_Crosshair_C::DamageIndicatorContainer' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, Dot) == 0x0002F8, "Member 'UBP_Crosshair_C::Dot' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, DotContainer) == 0x000300, "Member 'UBP_Crosshair_C::DotContainer' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, HitmarkerContainer) == 0x000308, "Member 'UBP_Crosshair_C::HitmarkerContainer' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, Left) == 0x000310, "Member 'UBP_Crosshair_C::Left' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, MeleeCrosshairContainer) == 0x000318, "Member 'UBP_Crosshair_C::MeleeCrosshairContainer' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, Overlay_0) == 0x000320, "Member 'UBP_Crosshair_C::Overlay_0' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, RangeDot) == 0x000328, "Member 'UBP_Crosshair_C::RangeDot' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, RangeDotContainer) == 0x000330, "Member 'UBP_Crosshair_C::RangeDotContainer' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, Right) == 0x000338, "Member 'UBP_Crosshair_C::Right' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, ShieldContainer) == 0x000340, "Member 'UBP_Crosshair_C::ShieldContainer' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, ShieldFill) == 0x000348, "Member 'UBP_Crosshair_C::ShieldFill' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, ShieldOutline) == 0x000350, "Member 'UBP_Crosshair_C::ShieldOutline' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, TopLeft) == 0x000358, "Member 'UBP_Crosshair_C::TopLeft' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, TopRight) == 0x000360, "Member 'UBP_Crosshair_C::TopRight' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, Crosshair_Dot) == 0x000368, "Member 'UBP_Crosshair_C::Crosshair_Dot' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, Crosshair_Dot_Outline) == 0x0003F0, "Member 'UBP_Crosshair_C::Crosshair_Dot_Outline' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, CrosshairMode) == 0x000478, "Member 'UBP_Crosshair_C::CrosshairMode' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, TargetInfo) == 0x000480, "Member 'UBP_Crosshair_C::TargetInfo' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, LastCrosshairTypeSettings) == 0x000488, "Member 'UBP_Crosshair_C::LastCrosshairTypeSettings' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, ShieldContainerVisible) == 0x00048C, "Member 'UBP_Crosshair_C::ShieldContainerVisible' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, AngleIndicatorVisible) == 0x00048D, "Member 'UBP_Crosshair_C::AngleIndicatorVisible' has a wrong offset!");
static_assert(offsetof(UBP_Crosshair_C, MeleeDotVisible) == 0x00048E, "Member 'UBP_Crosshair_C::MeleeDotVisible' has a wrong offset!");

}

