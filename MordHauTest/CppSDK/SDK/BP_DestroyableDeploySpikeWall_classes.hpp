#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DestroyableDeploySpikeWall

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_DestroyableActor_classes.hpp"
#include "Mordhau_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DestroyableDeploySpikeWall.BP_DestroyableDeploySpikeWall_C
// 0x0050 (0x0530 - 0x04E0)
class ABP_DestroyableDeploySpikeWall_C : public ABP_DestroyableActor_C
{
public:
	uint8                                         Pad_4D1[0x7];                                      // 0x04D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_DestroyableDeploySpikeWall_C;    // 0x04D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UBoxComponent*                          Box;                                               // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ImpalePoint;                                       // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsHandleComponent*                PhysicsHandle;                                     // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         MinVelocityToTrigger;                              // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         MinHealthToActivate;                               // 0x04FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4FD[0x3];                                      // 0x04FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              ImpalementSound;                                   // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VelocityDamageFactor;                              // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorseDamageFactor;                                 // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            PlanterController;                                 // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LastDamagedActor;                                  // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Team;                                              // 0x0520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DestroyableDeploySpikeWall(int32 EntryPoint);
	void CheckCorrectTeam();
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnUsedToKillOther(class AAdvancedCharacter* Character, EMordhauDamageType Type, uint8 SubType, class FName bone, const struct FVector& Point, class AActor* Source);
	void Impale(class AAdvancedCharacter* Character);
	void HandleCollision(class AAdvancedCharacter* Char, float Velocity, float DamageFactor_0);
	void OnReplicatedHealthChanged();
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DestroyableDeploySpikeWall_C">();
	}
	static class ABP_DestroyableDeploySpikeWall_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DestroyableDeploySpikeWall_C>();
	}
};
static_assert(alignof(ABP_DestroyableDeploySpikeWall_C) == 0x000010, "Wrong alignment on ABP_DestroyableDeploySpikeWall_C");
static_assert(sizeof(ABP_DestroyableDeploySpikeWall_C) == 0x000530, "Wrong size on ABP_DestroyableDeploySpikeWall_C");
static_assert(offsetof(ABP_DestroyableDeploySpikeWall_C, UberGraphFrame_BP_DestroyableDeploySpikeWall_C) == 0x0004D8, "Member 'ABP_DestroyableDeploySpikeWall_C::UberGraphFrame_BP_DestroyableDeploySpikeWall_C' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableDeploySpikeWall_C, Box) == 0x0004E0, "Member 'ABP_DestroyableDeploySpikeWall_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableDeploySpikeWall_C, ImpalePoint) == 0x0004E8, "Member 'ABP_DestroyableDeploySpikeWall_C::ImpalePoint' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableDeploySpikeWall_C, PhysicsHandle) == 0x0004F0, "Member 'ABP_DestroyableDeploySpikeWall_C::PhysicsHandle' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableDeploySpikeWall_C, MinVelocityToTrigger) == 0x0004F8, "Member 'ABP_DestroyableDeploySpikeWall_C::MinVelocityToTrigger' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableDeploySpikeWall_C, MinHealthToActivate) == 0x0004FC, "Member 'ABP_DestroyableDeploySpikeWall_C::MinHealthToActivate' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableDeploySpikeWall_C, ImpalementSound) == 0x000500, "Member 'ABP_DestroyableDeploySpikeWall_C::ImpalementSound' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableDeploySpikeWall_C, VelocityDamageFactor) == 0x000508, "Member 'ABP_DestroyableDeploySpikeWall_C::VelocityDamageFactor' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableDeploySpikeWall_C, HorseDamageFactor) == 0x00050C, "Member 'ABP_DestroyableDeploySpikeWall_C::HorseDamageFactor' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableDeploySpikeWall_C, PlanterController) == 0x000510, "Member 'ABP_DestroyableDeploySpikeWall_C::PlanterController' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableDeploySpikeWall_C, LastDamagedActor) == 0x000518, "Member 'ABP_DestroyableDeploySpikeWall_C::LastDamagedActor' has a wrong offset!");
static_assert(offsetof(ABP_DestroyableDeploySpikeWall_C, Team) == 0x000520, "Member 'ABP_DestroyableDeploySpikeWall_C::Team' has a wrong offset!");

}

