#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DemonHordeEnemy_Special_Troll

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_DemonHordeEnemy_Special_classes.hpp"
#include "Mordhau_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DemonHordeEnemy_Special_Troll.BP_DemonHordeEnemy_Special_Troll_C
// 0x0080 (0x15B0 - 0x1530)
class ABP_DemonHordeEnemy_Special_Troll_C final : public ABP_DemonHordeEnemy_Special_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_DemonHordeEnemy_Special_Troll_C; // 0x1530(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UStaticMeshComponent*                   BigRockStatic;                                     // 0x1538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          KickAttackBox;                                     // 0x1540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SlamAttackSphere;                                  // 0x1548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        SlamAttack;                                        // 0x1550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SweepAttackSphere6;                                // 0x1558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SweepAttackSphere5;                                // 0x1560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SweepAttackSphere4;                                // 0x1568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SweepAttackSphere3;                                // 0x1570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SweepAttackSphere2;                                // 0x1578(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SweepAttackSphere1;                                // 0x1580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        SweepAttacks;                                      // 0x1588(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        OgreClubTip;                                       // 0x1590(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStateCooldown;                                   // 0x1598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1599[0x3];                                     // 0x1599(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StateCooldown;                                     // 0x159C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AreaDamage;                                        // 0x15A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DemonHordeEnemy_Special_Troll(int32 EntryPoint);
	void ImpactEffectsMulti(const struct FVector& Location);
	void CreateAndFireProjectile();
	void ToggleRock(bool Active);
	void SlamAttackKnockback(class AActor* ImpactTarget);
	void SlamAttackImpact();
	void SlamImpactMulti(class USceneComponent* Component);
	void AttackKnockback(class AActor* ImpactTarget);
	void SweepImpactMulti(class USceneComponent* Component);
	void BehaviourLoop();
	void StartStateCooldown();
	void ReceiveBeginPlay();
	void OnDied(float Angle, EMordhauDamageType Type, uint8 SubType, class FName bone, const struct FVector& Point, class AActor* Source, class AActor* Agent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DemonHordeEnemy_Special_Troll_C">();
	}
	static class ABP_DemonHordeEnemy_Special_Troll_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DemonHordeEnemy_Special_Troll_C>();
	}
};
static_assert(alignof(ABP_DemonHordeEnemy_Special_Troll_C) == 0x000010, "Wrong alignment on ABP_DemonHordeEnemy_Special_Troll_C");
static_assert(sizeof(ABP_DemonHordeEnemy_Special_Troll_C) == 0x0015B0, "Wrong size on ABP_DemonHordeEnemy_Special_Troll_C");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Troll_C, UberGraphFrame_BP_DemonHordeEnemy_Special_Troll_C) == 0x001530, "Member 'ABP_DemonHordeEnemy_Special_Troll_C::UberGraphFrame_BP_DemonHordeEnemy_Special_Troll_C' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Troll_C, BigRockStatic) == 0x001538, "Member 'ABP_DemonHordeEnemy_Special_Troll_C::BigRockStatic' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Troll_C, KickAttackBox) == 0x001540, "Member 'ABP_DemonHordeEnemy_Special_Troll_C::KickAttackBox' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Troll_C, SlamAttackSphere) == 0x001548, "Member 'ABP_DemonHordeEnemy_Special_Troll_C::SlamAttackSphere' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Troll_C, SlamAttack) == 0x001550, "Member 'ABP_DemonHordeEnemy_Special_Troll_C::SlamAttack' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Troll_C, SweepAttackSphere6) == 0x001558, "Member 'ABP_DemonHordeEnemy_Special_Troll_C::SweepAttackSphere6' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Troll_C, SweepAttackSphere5) == 0x001560, "Member 'ABP_DemonHordeEnemy_Special_Troll_C::SweepAttackSphere5' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Troll_C, SweepAttackSphere4) == 0x001568, "Member 'ABP_DemonHordeEnemy_Special_Troll_C::SweepAttackSphere4' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Troll_C, SweepAttackSphere3) == 0x001570, "Member 'ABP_DemonHordeEnemy_Special_Troll_C::SweepAttackSphere3' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Troll_C, SweepAttackSphere2) == 0x001578, "Member 'ABP_DemonHordeEnemy_Special_Troll_C::SweepAttackSphere2' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Troll_C, SweepAttackSphere1) == 0x001580, "Member 'ABP_DemonHordeEnemy_Special_Troll_C::SweepAttackSphere1' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Troll_C, SweepAttacks) == 0x001588, "Member 'ABP_DemonHordeEnemy_Special_Troll_C::SweepAttacks' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Troll_C, OgreClubTip) == 0x001590, "Member 'ABP_DemonHordeEnemy_Special_Troll_C::OgreClubTip' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Troll_C, IsStateCooldown) == 0x001598, "Member 'ABP_DemonHordeEnemy_Special_Troll_C::IsStateCooldown' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Troll_C, StateCooldown) == 0x00159C, "Member 'ABP_DemonHordeEnemy_Special_Troll_C::StateCooldown' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Troll_C, AreaDamage) == 0x0015A0, "Member 'ABP_DemonHordeEnemy_Special_Troll_C::AreaDamage' has a wrong offset!");

}

