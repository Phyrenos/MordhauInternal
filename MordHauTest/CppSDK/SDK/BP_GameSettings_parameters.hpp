#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameSettings

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_MordhauSlider_structs.hpp"
#include "MordhauOnlineSubsystem_structs.hpp"
#include "E_MainMenuAction_structs.hpp"


namespace SDK::Params
{

// Function BP_GameSettings.BP_GameSettings_C.ExecuteUbergraph_BP_GameSettings
// 0x0060 (0x0060 - 0x0000)
struct BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlatform                                     CallFunc_GetPlatform_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	EPlatform                                     Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_ChoiceDialog_C*                     CallFunc_CreateChoiceDialog_ChoiceDialog;          // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUD*                                   CallFunc_GetHUD_ReturnValue;                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MordhauHUD_C*                       K2Node_DynamicCast_AsBP_Mordhau_HUD;               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsConsolePlatform_ReturnValue;            // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings) == 0x000008, "Wrong alignment on BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings");
static_assert(sizeof(BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings) == 0x000060, "Wrong size on BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings");
static_assert(offsetof(BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings, EntryPoint) == 0x000000, "Member 'BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings, CallFunc_GetPlatform_ReturnValue) == 0x000004, "Member 'BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings::CallFunc_GetPlatform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings, K2Node_CreateDelegate_OutputDelegate_1) == 0x000018, "Member 'BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings, Temp_byte_Variable) == 0x000028, "Member 'BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings, Temp_byte_Variable_1) == 0x000029, "Member 'BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings, Temp_byte_Variable_2) == 0x00002A, "Member 'BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings, Temp_byte_Variable_3) == 0x00002B, "Member 'BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings, Temp_byte_Variable_4) == 0x00002C, "Member 'BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings, Temp_byte_Variable_5) == 0x00002D, "Member 'BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings, K2Node_Select_Default) == 0x00002E, "Member 'BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000030, "Member 'BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings, CallFunc_GetPlayerController_ReturnValue) == 0x000038, "Member 'BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings, CallFunc_CreateChoiceDialog_ChoiceDialog) == 0x000040, "Member 'BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings::CallFunc_CreateChoiceDialog_ChoiceDialog' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings, CallFunc_GetHUD_ReturnValue) == 0x000048, "Member 'BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings::CallFunc_GetHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings, K2Node_DynamicCast_AsBP_Mordhau_HUD) == 0x000050, "Member 'BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings::K2Node_DynamicCast_AsBP_Mordhau_HUD' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings, CallFunc_IsConsolePlatform_ReturnValue) == 0x000059, "Member 'BP_GameSettings_C_ExecuteUbergraph_BP_GameSettings::CallFunc_IsConsolePlatform_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateHideHudCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateHideHudCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHideHUD_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateHideHudCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateHideHudCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateHideHudCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateHideHudCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateHideHudCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateHideHudCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateHideHudCheckbox, CallFunc_GetHideHUD_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateHideHudCheckbox::CallFunc_GetHideHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateHideHudCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateHideHudCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateGoreDropdown
// 0x0028 (0x0028 - 0x0000)
struct BP_GameSettings_C_UpdateGoreDropdown final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGore_ReturnValue;                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetOptionAtIndex_ReturnValue;             // 0x0010(0x0018)()
};
static_assert(alignof(BP_GameSettings_C_UpdateGoreDropdown) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateGoreDropdown");
static_assert(sizeof(BP_GameSettings_C_UpdateGoreDropdown) == 0x000028, "Wrong size on BP_GameSettings_C_UpdateGoreDropdown");
static_assert(offsetof(BP_GameSettings_C_UpdateGoreDropdown, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateGoreDropdown::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateGoreDropdown, CallFunc_GetGore_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateGoreDropdown::CallFunc_GetGore_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateGoreDropdown, CallFunc_GetOptionAtIndex_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_UpdateGoreDropdown::CallFunc_GetOptionAtIndex_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateRagdollLimitSlider
// 0x0038 (0x0038 - 0x0000)
struct BP_GameSettings_C_UpdateRagdollLimitSlider final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxRagdolls_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxRagdollsLimit_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_MordhauSlider                       K2Node_MakeStruct_S_MordhauSlider;                 // 0x0024(0x0014)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_UpdateRagdollLimitSlider) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateRagdollLimitSlider");
static_assert(sizeof(BP_GameSettings_C_UpdateRagdollLimitSlider) == 0x000038, "Wrong size on BP_GameSettings_C_UpdateRagdollLimitSlider");
static_assert(offsetof(BP_GameSettings_C_UpdateRagdollLimitSlider, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateRagdollLimitSlider::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateRagdollLimitSlider, CallFunc_GetMaxRagdolls_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateRagdollLimitSlider::CallFunc_GetMaxRagdolls_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateRagdollLimitSlider, CallFunc_GetMaxRagdollsLimit_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateRagdollLimitSlider::CallFunc_GetMaxRagdollsLimit_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateRagdollLimitSlider, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_UpdateRagdollLimitSlider::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateRagdollLimitSlider, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000014, "Member 'BP_GameSettings_C_UpdateRagdollLimitSlider::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateRagdollLimitSlider, CallFunc_MapRangeClamped_ReturnValue) == 0x000018, "Member 'BP_GameSettings_C_UpdateRagdollLimitSlider::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateRagdollLimitSlider, CallFunc_MakeVector2D_ReturnValue) == 0x00001C, "Member 'BP_GameSettings_C_UpdateRagdollLimitSlider::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateRagdollLimitSlider, K2Node_MakeStruct_S_MordhauSlider) == 0x000024, "Member 'BP_GameSettings_C_UpdateRagdollLimitSlider::K2Node_MakeStruct_S_MordhauSlider' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateRagdollStayTimeSlider
// 0x0030 (0x0030 - 0x0000)
struct BP_GameSettings_C_UpdateRagdollStayTimeSlider final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRagdollStayTime_ReturnValue;           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRagdollStayTimeLimit_ReturnValue;      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_MordhauSlider                       K2Node_MakeStruct_S_MordhauSlider;                 // 0x001C(0x0014)(IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_UpdateRagdollStayTimeSlider) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateRagdollStayTimeSlider");
static_assert(sizeof(BP_GameSettings_C_UpdateRagdollStayTimeSlider) == 0x000030, "Wrong size on BP_GameSettings_C_UpdateRagdollStayTimeSlider");
static_assert(offsetof(BP_GameSettings_C_UpdateRagdollStayTimeSlider, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateRagdollStayTimeSlider::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateRagdollStayTimeSlider, CallFunc_GetRagdollStayTime_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateRagdollStayTimeSlider::CallFunc_GetRagdollStayTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateRagdollStayTimeSlider, CallFunc_GetRagdollStayTimeLimit_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateRagdollStayTimeSlider::CallFunc_GetRagdollStayTimeLimit_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateRagdollStayTimeSlider, CallFunc_MapRangeClamped_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_UpdateRagdollStayTimeSlider::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateRagdollStayTimeSlider, CallFunc_MakeVector2D_ReturnValue) == 0x000014, "Member 'BP_GameSettings_C_UpdateRagdollStayTimeSlider::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateRagdollStayTimeSlider, K2Node_MakeStruct_S_MordhauSlider) == 0x00001C, "Member 'BP_GameSettings_C_UpdateRagdollStayTimeSlider::K2Node_MakeStruct_S_MordhauSlider' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateQuickSpawnCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateQuickSpawnCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetQuickSpawn_ReturnValue;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateQuickSpawnCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateQuickSpawnCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateQuickSpawnCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateQuickSpawnCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateQuickSpawnCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateQuickSpawnCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateQuickSpawnCheckbox, CallFunc_GetQuickSpawn_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateQuickSpawnCheckbox::CallFunc_GetQuickSpawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateQuickSpawnCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateQuickSpawnCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyQuickSpawn
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyQuickSpawn final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyQuickSpawn) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyQuickSpawn");
static_assert(sizeof(BP_GameSettings_C_ApplyQuickSpawn) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyQuickSpawn");
static_assert(offsetof(BP_GameSettings_C_ApplyQuickSpawn, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplyQuickSpawn::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyQuickSpawn, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplyQuickSpawn::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyQuickSpawn, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplyQuickSpawn::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyQuickSpawn, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyQuickSpawn::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyQuickSpawn, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyQuickSpawn::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyQuickSpawn, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplyQuickSpawn::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyHideHud
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyHideHud final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyHideHud) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyHideHud");
static_assert(sizeof(BP_GameSettings_C_ApplyHideHud) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyHideHud");
static_assert(offsetof(BP_GameSettings_C_ApplyHideHud, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplyHideHud::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyHideHud, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplyHideHud::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyHideHud, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplyHideHud::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyHideHud, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyHideHud::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyHideHud, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyHideHud::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyHideHud, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplyHideHud::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyGore
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_ApplyGore final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSelectedIndex_SelectedIndex;           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyGore) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyGore");
static_assert(sizeof(BP_GameSettings_C_ApplyGore) == 0x000010, "Wrong size on BP_GameSettings_C_ApplyGore");
static_assert(offsetof(BP_GameSettings_C_ApplyGore, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_ApplyGore::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyGore, CallFunc_GetSelectedIndex_SelectedIndex) == 0x000008, "Member 'BP_GameSettings_C_ApplyGore::CallFunc_GetSelectedIndex_SelectedIndex' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyRagdollLimit
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyRagdollLimit final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_Value;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxRagdollsLimit_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyRagdollLimit) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyRagdollLimit");
static_assert(sizeof(BP_GameSettings_C_ApplyRagdollLimit) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyRagdollLimit");
static_assert(offsetof(BP_GameSettings_C_ApplyRagdollLimit, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_ApplyRagdollLimit::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyRagdollLimit, CallFunc_GetValue_Value) == 0x000008, "Member 'BP_GameSettings_C_ApplyRagdollLimit::CallFunc_GetValue_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyRagdollLimit, CallFunc_GetMaxRagdollsLimit_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_ApplyRagdollLimit::CallFunc_GetMaxRagdollsLimit_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyRagdollLimit, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyRagdollLimit::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyRagdollLimit, CallFunc_MapRangeClamped_ReturnValue) == 0x000014, "Member 'BP_GameSettings_C_ApplyRagdollLimit::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyRagdollLimit, CallFunc_Round_ReturnValue) == 0x000018, "Member 'BP_GameSettings_C_ApplyRagdollLimit::CallFunc_Round_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyRagdollStayTime
// 0x0018 (0x0018 - 0x0000)
struct BP_GameSettings_C_ApplyRagdollStayTime final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_Value;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRagdollStayTimeLimit_ReturnValue;      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyRagdollStayTime) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyRagdollStayTime");
static_assert(sizeof(BP_GameSettings_C_ApplyRagdollStayTime) == 0x000018, "Wrong size on BP_GameSettings_C_ApplyRagdollStayTime");
static_assert(offsetof(BP_GameSettings_C_ApplyRagdollStayTime, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_ApplyRagdollStayTime::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyRagdollStayTime, CallFunc_GetValue_Value) == 0x000008, "Member 'BP_GameSettings_C_ApplyRagdollStayTime::CallFunc_GetValue_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyRagdollStayTime, CallFunc_GetRagdollStayTimeLimit_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_ApplyRagdollStayTime::CallFunc_GetRagdollStayTimeLimit_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyRagdollStayTime, CallFunc_MapRangeClamped_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyRagdollStayTime::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.GetDevSettingsVisibility
// 0x0002 (0x0002 - 0x0000)
struct BP_GameSettings_C_GetDevSettingsVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDevelopmentBuild_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_GetDevSettingsVisibility) == 0x000001, "Wrong alignment on BP_GameSettings_C_GetDevSettingsVisibility");
static_assert(sizeof(BP_GameSettings_C_GetDevSettingsVisibility) == 0x000002, "Wrong size on BP_GameSettings_C_GetDevSettingsVisibility");
static_assert(offsetof(BP_GameSettings_C_GetDevSettingsVisibility, ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_GetDevSettingsVisibility::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_GetDevSettingsVisibility, CallFunc_IsDevelopmentBuild_ReturnValue) == 0x000001, "Member 'BP_GameSettings_C_GetDevSettingsVisibility::CallFunc_IsDevelopmentBuild_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateDrawTracersCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateDrawTracersCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDrawTracers_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateDrawTracersCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateDrawTracersCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateDrawTracersCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateDrawTracersCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateDrawTracersCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateDrawTracersCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateDrawTracersCheckbox, CallFunc_GetDrawTracers_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateDrawTracersCheckbox::CallFunc_GetDrawTracers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateDrawTracersCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateDrawTracersCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyDrawTracers
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyDrawTracers final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyDrawTracers) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyDrawTracers");
static_assert(sizeof(BP_GameSettings_C_ApplyDrawTracers) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyDrawTracers");
static_assert(offsetof(BP_GameSettings_C_ApplyDrawTracers, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplyDrawTracers::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyDrawTracers, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplyDrawTracers::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyDrawTracers, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplyDrawTracers::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyDrawTracers, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyDrawTracers::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyDrawTracers, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyDrawTracers::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyDrawTracers, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplyDrawTracers::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.Update Tracers Stay Time Slider
// 0x0040 (0x0040 - 0x0000)
struct BP_GameSettings_C_Update_Tracers_Stay_Time_Slider final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetTracersStayTimeLimits_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTracersStayTime_ReturnValue;           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_MordhauSlider                       K2Node_MakeStruct_S_MordhauSlider;                 // 0x0028(0x0014)(IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_Update_Tracers_Stay_Time_Slider) == 0x000008, "Wrong alignment on BP_GameSettings_C_Update_Tracers_Stay_Time_Slider");
static_assert(sizeof(BP_GameSettings_C_Update_Tracers_Stay_Time_Slider) == 0x000040, "Wrong size on BP_GameSettings_C_Update_Tracers_Stay_Time_Slider");
static_assert(offsetof(BP_GameSettings_C_Update_Tracers_Stay_Time_Slider, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_Update_Tracers_Stay_Time_Slider::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_Update_Tracers_Stay_Time_Slider, CallFunc_GetTracersStayTimeLimits_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_Update_Tracers_Stay_Time_Slider::CallFunc_GetTracersStayTimeLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_Update_Tracers_Stay_Time_Slider, CallFunc_GetTracersStayTime_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_Update_Tracers_Stay_Time_Slider::CallFunc_GetTracersStayTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_Update_Tracers_Stay_Time_Slider, CallFunc_BreakVector2D_X) == 0x000014, "Member 'BP_GameSettings_C_Update_Tracers_Stay_Time_Slider::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_Update_Tracers_Stay_Time_Slider, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'BP_GameSettings_C_Update_Tracers_Stay_Time_Slider::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_Update_Tracers_Stay_Time_Slider, CallFunc_MapRangeClamped_ReturnValue) == 0x00001C, "Member 'BP_GameSettings_C_Update_Tracers_Stay_Time_Slider::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_Update_Tracers_Stay_Time_Slider, CallFunc_MakeVector2D_ReturnValue) == 0x000020, "Member 'BP_GameSettings_C_Update_Tracers_Stay_Time_Slider::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_Update_Tracers_Stay_Time_Slider, K2Node_MakeStruct_S_MordhauSlider) == 0x000028, "Member 'BP_GameSettings_C_Update_Tracers_Stay_Time_Slider::K2Node_MakeStruct_S_MordhauSlider' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyTracersStayTime
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyTracersStayTime final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_Value;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetTracersStayTimeLimits_ReturnValue;     // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyTracersStayTime) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyTracersStayTime");
static_assert(sizeof(BP_GameSettings_C_ApplyTracersStayTime) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyTracersStayTime");
static_assert(offsetof(BP_GameSettings_C_ApplyTracersStayTime, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_ApplyTracersStayTime::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyTracersStayTime, CallFunc_GetValue_Value) == 0x000008, "Member 'BP_GameSettings_C_ApplyTracersStayTime::CallFunc_GetValue_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyTracersStayTime, CallFunc_GetTracersStayTimeLimits_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_ApplyTracersStayTime::CallFunc_GetTracersStayTimeLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyTracersStayTime, CallFunc_BreakVector2D_X) == 0x000014, "Member 'BP_GameSettings_C_ApplyTracersStayTime::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyTracersStayTime, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'BP_GameSettings_C_ApplyTracersStayTime::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyTracersStayTime, CallFunc_MapRangeClamped_ReturnValue) == 0x00001C, "Member 'BP_GameSettings_C_ApplyTracersStayTime::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateMouseSmoothingSlider
// 0x0040 (0x0040 - 0x0000)
struct BP_GameSettings_C_UpdateMouseSmoothingSlider final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetMouseSmoothingLimits_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMouseSmoothing_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_MordhauSlider                       K2Node_MakeStruct_S_MordhauSlider;                 // 0x0028(0x0014)(IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_UpdateMouseSmoothingSlider) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateMouseSmoothingSlider");
static_assert(sizeof(BP_GameSettings_C_UpdateMouseSmoothingSlider) == 0x000040, "Wrong size on BP_GameSettings_C_UpdateMouseSmoothingSlider");
static_assert(offsetof(BP_GameSettings_C_UpdateMouseSmoothingSlider, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateMouseSmoothingSlider::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateMouseSmoothingSlider, CallFunc_GetMouseSmoothingLimits_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateMouseSmoothingSlider::CallFunc_GetMouseSmoothingLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateMouseSmoothingSlider, CallFunc_GetMouseSmoothing_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_UpdateMouseSmoothingSlider::CallFunc_GetMouseSmoothing_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateMouseSmoothingSlider, CallFunc_BreakVector2D_X) == 0x000014, "Member 'BP_GameSettings_C_UpdateMouseSmoothingSlider::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateMouseSmoothingSlider, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'BP_GameSettings_C_UpdateMouseSmoothingSlider::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateMouseSmoothingSlider, CallFunc_MapRangeClamped_ReturnValue) == 0x00001C, "Member 'BP_GameSettings_C_UpdateMouseSmoothingSlider::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateMouseSmoothingSlider, CallFunc_MakeVector2D_ReturnValue) == 0x000020, "Member 'BP_GameSettings_C_UpdateMouseSmoothingSlider::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateMouseSmoothingSlider, K2Node_MakeStruct_S_MordhauSlider) == 0x000028, "Member 'BP_GameSettings_C_UpdateMouseSmoothingSlider::K2Node_MakeStruct_S_MordhauSlider' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyMouseSmoothing
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyMouseSmoothing final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_Value;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetMouseSmoothingLimits_ReturnValue;      // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyMouseSmoothing) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyMouseSmoothing");
static_assert(sizeof(BP_GameSettings_C_ApplyMouseSmoothing) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyMouseSmoothing");
static_assert(offsetof(BP_GameSettings_C_ApplyMouseSmoothing, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_ApplyMouseSmoothing::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyMouseSmoothing, CallFunc_GetValue_Value) == 0x000008, "Member 'BP_GameSettings_C_ApplyMouseSmoothing::CallFunc_GetValue_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyMouseSmoothing, CallFunc_GetMouseSmoothingLimits_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_ApplyMouseSmoothing::CallFunc_GetMouseSmoothingLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyMouseSmoothing, CallFunc_BreakVector2D_X) == 0x000014, "Member 'BP_GameSettings_C_ApplyMouseSmoothing::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyMouseSmoothing, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'BP_GameSettings_C_ApplyMouseSmoothing::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyMouseSmoothing, CallFunc_MapRangeClamped_ReturnValue) == 0x00001C, "Member 'BP_GameSettings_C_ApplyMouseSmoothing::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateShowObservedDelayCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateShowObservedDelayCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowObservedDelay_ReturnValue;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateShowObservedDelayCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateShowObservedDelayCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateShowObservedDelayCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateShowObservedDelayCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateShowObservedDelayCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateShowObservedDelayCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateShowObservedDelayCheckbox, CallFunc_GetShowObservedDelay_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateShowObservedDelayCheckbox::CallFunc_GetShowObservedDelay_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateShowObservedDelayCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateShowObservedDelayCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyShowObservedDelay
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyShowObservedDelay final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyShowObservedDelay) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyShowObservedDelay");
static_assert(sizeof(BP_GameSettings_C_ApplyShowObservedDelay) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyShowObservedDelay");
static_assert(offsetof(BP_GameSettings_C_ApplyShowObservedDelay, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplyShowObservedDelay::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyShowObservedDelay, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplyShowObservedDelay::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyShowObservedDelay, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplyShowObservedDelay::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyShowObservedDelay, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyShowObservedDelay::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyShowObservedDelay, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyShowObservedDelay::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyShowObservedDelay, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplyShowObservedDelay::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateHideWatermarkCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateHideWatermarkCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHideWatermark_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateHideWatermarkCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateHideWatermarkCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateHideWatermarkCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateHideWatermarkCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateHideWatermarkCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateHideWatermarkCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateHideWatermarkCheckbox, CallFunc_GetHideWatermark_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateHideWatermarkCheckbox::CallFunc_GetHideWatermark_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateHideWatermarkCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateHideWatermarkCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyHideWatermark
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyHideWatermark final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyHideWatermark) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyHideWatermark");
static_assert(sizeof(BP_GameSettings_C_ApplyHideWatermark) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyHideWatermark");
static_assert(offsetof(BP_GameSettings_C_ApplyHideWatermark, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplyHideWatermark::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyHideWatermark, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplyHideWatermark::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyHideWatermark, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplyHideWatermark::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyHideWatermark, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyHideWatermark::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyHideWatermark, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyHideWatermark::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyHideWatermark, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplyHideWatermark::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateLanguageDropdown
// 0x0088 (0x0088 - 0x0000)
struct BP_GameSettings_C_UpdateLanguageDropdown final
{
public:
	TArray<class FString>                         AvailableLanguages;                                // 0x0000(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0030(0x0018)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetLanguage_ReturnValue;                  // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CallFunc_GetAvailableLanguages_AvailableLanguages; // 0x0078(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_GameSettings_C_UpdateLanguageDropdown) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateLanguageDropdown");
static_assert(sizeof(BP_GameSettings_C_UpdateLanguageDropdown) == 0x000088, "Wrong size on BP_GameSettings_C_UpdateLanguageDropdown");
static_assert(offsetof(BP_GameSettings_C_UpdateLanguageDropdown, AvailableLanguages) == 0x000000, "Member 'BP_GameSettings_C_UpdateLanguageDropdown::AvailableLanguages' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateLanguageDropdown, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_GameSettings_C_UpdateLanguageDropdown::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateLanguageDropdown, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_GameSettings_C_UpdateLanguageDropdown::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateLanguageDropdown, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_GameSettings_C_UpdateLanguageDropdown::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateLanguageDropdown, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_GameSettings_C_UpdateLanguageDropdown::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateLanguageDropdown, CallFunc_Conv_StringToText_ReturnValue) == 0x000030, "Member 'BP_GameSettings_C_UpdateLanguageDropdown::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateLanguageDropdown, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BP_GameSettings_C_UpdateLanguageDropdown::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateLanguageDropdown, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000050, "Member 'BP_GameSettings_C_UpdateLanguageDropdown::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateLanguageDropdown, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'BP_GameSettings_C_UpdateLanguageDropdown::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateLanguageDropdown, CallFunc_GetLanguage_ReturnValue) == 0x000060, "Member 'BP_GameSettings_C_UpdateLanguageDropdown::CallFunc_GetLanguage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateLanguageDropdown, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000070, "Member 'BP_GameSettings_C_UpdateLanguageDropdown::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateLanguageDropdown, CallFunc_GetAvailableLanguages_AvailableLanguages) == 0x000078, "Member 'BP_GameSettings_C_UpdateLanguageDropdown::CallFunc_GetAvailableLanguages_AvailableLanguages' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyLanguage
// 0x0030 (0x0030 - 0x0000)
struct BP_GameSettings_C_ApplyLanguage final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetSelectedOption_ReturnValue;            // 0x0008(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyLanguage) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyLanguage");
static_assert(sizeof(BP_GameSettings_C_ApplyLanguage) == 0x000030, "Wrong size on BP_GameSettings_C_ApplyLanguage");
static_assert(offsetof(BP_GameSettings_C_ApplyLanguage, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_ApplyLanguage::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyLanguage, CallFunc_GetSelectedOption_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_ApplyLanguage::CallFunc_GetSelectedOption_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyLanguage, CallFunc_Conv_TextToString_ReturnValue) == 0x000020, "Member 'BP_GameSettings_C_ApplyLanguage::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateHeadbobSlider
// 0x0040 (0x0040 - 0x0000)
struct BP_GameSettings_C_UpdateHeadbobSlider final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetHeadbobLimits_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHeadbob_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_MordhauSlider                       K2Node_MakeStruct_S_MordhauSlider;                 // 0x0028(0x0014)(IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_UpdateHeadbobSlider) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateHeadbobSlider");
static_assert(sizeof(BP_GameSettings_C_UpdateHeadbobSlider) == 0x000040, "Wrong size on BP_GameSettings_C_UpdateHeadbobSlider");
static_assert(offsetof(BP_GameSettings_C_UpdateHeadbobSlider, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateHeadbobSlider::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateHeadbobSlider, CallFunc_GetHeadbobLimits_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateHeadbobSlider::CallFunc_GetHeadbobLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateHeadbobSlider, CallFunc_GetHeadbob_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_UpdateHeadbobSlider::CallFunc_GetHeadbob_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateHeadbobSlider, CallFunc_BreakVector2D_X) == 0x000014, "Member 'BP_GameSettings_C_UpdateHeadbobSlider::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateHeadbobSlider, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'BP_GameSettings_C_UpdateHeadbobSlider::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateHeadbobSlider, CallFunc_MapRangeClamped_ReturnValue) == 0x00001C, "Member 'BP_GameSettings_C_UpdateHeadbobSlider::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateHeadbobSlider, CallFunc_MakeVector2D_ReturnValue) == 0x000020, "Member 'BP_GameSettings_C_UpdateHeadbobSlider::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateHeadbobSlider, K2Node_MakeStruct_S_MordhauSlider) == 0x000028, "Member 'BP_GameSettings_C_UpdateHeadbobSlider::K2Node_MakeStruct_S_MordhauSlider' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyHeadbob
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyHeadbob final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_Value;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetHeadbobLimits_ReturnValue;             // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyHeadbob) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyHeadbob");
static_assert(sizeof(BP_GameSettings_C_ApplyHeadbob) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyHeadbob");
static_assert(offsetof(BP_GameSettings_C_ApplyHeadbob, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_ApplyHeadbob::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyHeadbob, CallFunc_GetValue_Value) == 0x000008, "Member 'BP_GameSettings_C_ApplyHeadbob::CallFunc_GetValue_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyHeadbob, CallFunc_GetHeadbobLimits_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_ApplyHeadbob::CallFunc_GetHeadbobLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyHeadbob, CallFunc_BreakVector2D_X) == 0x000014, "Member 'BP_GameSettings_C_ApplyHeadbob::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyHeadbob, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'BP_GameSettings_C_ApplyHeadbob::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyHeadbob, CallFunc_MapRangeClamped_ReturnValue) == 0x00001C, "Member 'BP_GameSettings_C_ApplyHeadbob::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateHitmarkerCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateHitmarkerCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowHitMarker_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateHitmarkerCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateHitmarkerCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateHitmarkerCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateHitmarkerCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateHitmarkerCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateHitmarkerCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateHitmarkerCheckbox, CallFunc_GetShowHitMarker_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateHitmarkerCheckbox::CallFunc_GetShowHitMarker_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateHitmarkerCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateHitmarkerCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateStatusBarCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateStatusBarCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowStatusBar_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateStatusBarCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateStatusBarCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateStatusBarCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateStatusBarCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateStatusBarCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateStatusBarCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateStatusBarCheckbox, CallFunc_GetShowStatusBar_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateStatusBarCheckbox::CallFunc_GetShowStatusBar_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateStatusBarCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateStatusBarCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateTargetInfoCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateTargetInfoCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowTargetInfo_ReturnValue;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateTargetInfoCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateTargetInfoCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateTargetInfoCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateTargetInfoCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateTargetInfoCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateTargetInfoCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateTargetInfoCheckbox, CallFunc_GetShowTargetInfo_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateTargetInfoCheckbox::CallFunc_GetShowTargetInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateTargetInfoCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateTargetInfoCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateSpawnInfoCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateSpawnInfoCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowSpawnInfo_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateSpawnInfoCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateSpawnInfoCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateSpawnInfoCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateSpawnInfoCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateSpawnInfoCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateSpawnInfoCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateSpawnInfoCheckbox, CallFunc_GetShowSpawnInfo_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateSpawnInfoCheckbox::CallFunc_GetShowSpawnInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateSpawnInfoCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateSpawnInfoCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateChatBoxCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateChatBoxCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowChatBox_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateChatBoxCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateChatBoxCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateChatBoxCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateChatBoxCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateChatBoxCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateChatBoxCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateChatBoxCheckbox, CallFunc_GetShowChatBox_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateChatBoxCheckbox::CallFunc_GetShowChatBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateChatBoxCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateChatBoxCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateEmotesMenuCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateEmotesMenuCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowEmotesMenu_ReturnValue;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateEmotesMenuCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateEmotesMenuCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateEmotesMenuCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateEmotesMenuCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateEmotesMenuCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateEmotesMenuCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateEmotesMenuCheckbox, CallFunc_GetShowEmotesMenu_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateEmotesMenuCheckbox::CallFunc_GetShowEmotesMenu_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateEmotesMenuCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateEmotesMenuCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateEquipmentCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateEquipmentCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowEquipment_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateEquipmentCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateEquipmentCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateEquipmentCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateEquipmentCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateEquipmentCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateEquipmentCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateEquipmentCheckbox, CallFunc_GetShowEquipment_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateEquipmentCheckbox::CallFunc_GetShowEquipment_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateEquipmentCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateEquipmentCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateAmmoCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateAmmoCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowAmmo_ReturnValue;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateAmmoCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateAmmoCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateAmmoCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateAmmoCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateAmmoCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateAmmoCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateAmmoCheckbox, CallFunc_GetShowAmmo_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateAmmoCheckbox::CallFunc_GetShowAmmo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateAmmoCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateAmmoCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateAnnouncementsCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateAnnouncementsCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowAnnouncements_ReturnValue;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateAnnouncementsCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateAnnouncementsCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateAnnouncementsCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateAnnouncementsCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateAnnouncementsCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateAnnouncementsCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateAnnouncementsCheckbox, CallFunc_GetShowAnnouncements_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateAnnouncementsCheckbox::CallFunc_GetShowAnnouncements_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateAnnouncementsCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateAnnouncementsCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateTipsCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateTipsCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowTips_ReturnValue;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateTipsCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateTipsCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateTipsCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateTipsCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateTipsCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateTipsCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateTipsCheckbox, CallFunc_GetShowTips_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateTipsCheckbox::CallFunc_GetShowTips_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateTipsCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateTipsCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateScoreFeedCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateScoreFeedCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowScoreFeed_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateScoreFeedCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateScoreFeedCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateScoreFeedCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateScoreFeedCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateScoreFeedCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateScoreFeedCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateScoreFeedCheckbox, CallFunc_GetShowScoreFeed_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateScoreFeedCheckbox::CallFunc_GetShowScoreFeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateScoreFeedCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateScoreFeedCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateKillFeedCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateKillFeedCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowKillFeed_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateKillFeedCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateKillFeedCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateKillFeedCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateKillFeedCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateKillFeedCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateKillFeedCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateKillFeedCheckbox, CallFunc_GetShowKillFeed_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateKillFeedCheckbox::CallFunc_GetShowKillFeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateKillFeedCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateKillFeedCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateFriendlyMarkersDropdown
// 0x0028 (0x0028 - 0x0000)
struct BP_GameSettings_C_UpdateFriendlyMarkersDropdown final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetFriendlyMarkers_ReturnValue;           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetOptionAtIndex_ReturnValue;             // 0x0010(0x0018)()
};
static_assert(alignof(BP_GameSettings_C_UpdateFriendlyMarkersDropdown) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateFriendlyMarkersDropdown");
static_assert(sizeof(BP_GameSettings_C_UpdateFriendlyMarkersDropdown) == 0x000028, "Wrong size on BP_GameSettings_C_UpdateFriendlyMarkersDropdown");
static_assert(offsetof(BP_GameSettings_C_UpdateFriendlyMarkersDropdown, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateFriendlyMarkersDropdown::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateFriendlyMarkersDropdown, CallFunc_GetFriendlyMarkers_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateFriendlyMarkersDropdown::CallFunc_GetFriendlyMarkers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateFriendlyMarkersDropdown, CallFunc_GetOptionAtIndex_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_UpdateFriendlyMarkersDropdown::CallFunc_GetOptionAtIndex_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyHitmarker
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyHitmarker final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyHitmarker) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyHitmarker");
static_assert(sizeof(BP_GameSettings_C_ApplyHitmarker) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyHitmarker");
static_assert(offsetof(BP_GameSettings_C_ApplyHitmarker, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplyHitmarker::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyHitmarker, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplyHitmarker::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyHitmarker, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplyHitmarker::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyHitmarker, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyHitmarker::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyHitmarker, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyHitmarker::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyHitmarker, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplyHitmarker::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyStatusBar
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyStatusBar final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyStatusBar) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyStatusBar");
static_assert(sizeof(BP_GameSettings_C_ApplyStatusBar) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyStatusBar");
static_assert(offsetof(BP_GameSettings_C_ApplyStatusBar, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplyStatusBar::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyStatusBar, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplyStatusBar::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyStatusBar, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplyStatusBar::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyStatusBar, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyStatusBar::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyStatusBar, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyStatusBar::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyStatusBar, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplyStatusBar::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyTargetInfo
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyTargetInfo final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyTargetInfo) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyTargetInfo");
static_assert(sizeof(BP_GameSettings_C_ApplyTargetInfo) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyTargetInfo");
static_assert(offsetof(BP_GameSettings_C_ApplyTargetInfo, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplyTargetInfo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyTargetInfo, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplyTargetInfo::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyTargetInfo, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplyTargetInfo::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyTargetInfo, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyTargetInfo::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyTargetInfo, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyTargetInfo::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyTargetInfo, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplyTargetInfo::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplySpawnInfo
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplySpawnInfo final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplySpawnInfo) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplySpawnInfo");
static_assert(sizeof(BP_GameSettings_C_ApplySpawnInfo) == 0x000020, "Wrong size on BP_GameSettings_C_ApplySpawnInfo");
static_assert(offsetof(BP_GameSettings_C_ApplySpawnInfo, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplySpawnInfo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplySpawnInfo, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplySpawnInfo::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplySpawnInfo, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplySpawnInfo::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplySpawnInfo, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplySpawnInfo::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplySpawnInfo, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplySpawnInfo::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplySpawnInfo, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplySpawnInfo::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyChatBox
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyChatBox final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyChatBox) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyChatBox");
static_assert(sizeof(BP_GameSettings_C_ApplyChatBox) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyChatBox");
static_assert(offsetof(BP_GameSettings_C_ApplyChatBox, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplyChatBox::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyChatBox, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplyChatBox::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyChatBox, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplyChatBox::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyChatBox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyChatBox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyChatBox, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyChatBox::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyChatBox, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplyChatBox::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyEmotesMenu
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyEmotesMenu final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyEmotesMenu) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyEmotesMenu");
static_assert(sizeof(BP_GameSettings_C_ApplyEmotesMenu) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyEmotesMenu");
static_assert(offsetof(BP_GameSettings_C_ApplyEmotesMenu, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplyEmotesMenu::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyEmotesMenu, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplyEmotesMenu::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyEmotesMenu, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplyEmotesMenu::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyEmotesMenu, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyEmotesMenu::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyEmotesMenu, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyEmotesMenu::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyEmotesMenu, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplyEmotesMenu::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyEquipment
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyEquipment final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyEquipment) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyEquipment");
static_assert(sizeof(BP_GameSettings_C_ApplyEquipment) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyEquipment");
static_assert(offsetof(BP_GameSettings_C_ApplyEquipment, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplyEquipment::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyEquipment, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplyEquipment::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyEquipment, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplyEquipment::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyEquipment, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyEquipment::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyEquipment, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyEquipment::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyEquipment, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplyEquipment::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyAmmo
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyAmmo final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyAmmo) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyAmmo");
static_assert(sizeof(BP_GameSettings_C_ApplyAmmo) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyAmmo");
static_assert(offsetof(BP_GameSettings_C_ApplyAmmo, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplyAmmo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyAmmo, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplyAmmo::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyAmmo, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplyAmmo::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyAmmo, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyAmmo::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyAmmo, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyAmmo::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyAmmo, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplyAmmo::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyAnnouncements
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyAnnouncements final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyAnnouncements) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyAnnouncements");
static_assert(sizeof(BP_GameSettings_C_ApplyAnnouncements) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyAnnouncements");
static_assert(offsetof(BP_GameSettings_C_ApplyAnnouncements, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplyAnnouncements::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyAnnouncements, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplyAnnouncements::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyAnnouncements, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplyAnnouncements::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyAnnouncements, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyAnnouncements::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyAnnouncements, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyAnnouncements::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyAnnouncements, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplyAnnouncements::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyTips
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyTips final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyTips) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyTips");
static_assert(sizeof(BP_GameSettings_C_ApplyTips) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyTips");
static_assert(offsetof(BP_GameSettings_C_ApplyTips, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplyTips::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyTips, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplyTips::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyTips, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplyTips::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyTips, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyTips::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyTips, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyTips::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyTips, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplyTips::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyScoreFeed
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyScoreFeed final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyScoreFeed) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyScoreFeed");
static_assert(sizeof(BP_GameSettings_C_ApplyScoreFeed) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyScoreFeed");
static_assert(offsetof(BP_GameSettings_C_ApplyScoreFeed, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplyScoreFeed::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyScoreFeed, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplyScoreFeed::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyScoreFeed, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplyScoreFeed::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyScoreFeed, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyScoreFeed::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyScoreFeed, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyScoreFeed::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyScoreFeed, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplyScoreFeed::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyKillFeed
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyKillFeed final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyKillFeed) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyKillFeed");
static_assert(sizeof(BP_GameSettings_C_ApplyKillFeed) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyKillFeed");
static_assert(offsetof(BP_GameSettings_C_ApplyKillFeed, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplyKillFeed::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyKillFeed, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplyKillFeed::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyKillFeed, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplyKillFeed::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyKillFeed, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyKillFeed::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyKillFeed, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyKillFeed::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyKillFeed, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplyKillFeed::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyFriendlyMarkers
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_ApplyFriendlyMarkers final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSelectedIndex_SelectedIndex;           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyFriendlyMarkers) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyFriendlyMarkers");
static_assert(sizeof(BP_GameSettings_C_ApplyFriendlyMarkers) == 0x000010, "Wrong size on BP_GameSettings_C_ApplyFriendlyMarkers");
static_assert(offsetof(BP_GameSettings_C_ApplyFriendlyMarkers, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_ApplyFriendlyMarkers::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyFriendlyMarkers, CallFunc_GetSelectedIndex_SelectedIndex) == 0x000008, "Member 'BP_GameSettings_C_ApplyFriendlyMarkers::CallFunc_GetSelectedIndex_SelectedIndex' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateNoTeamColorsOnGearCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateNoTeamColorsOnGearCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNoTeamColorsOnGear_ReturnValue;        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateNoTeamColorsOnGearCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateNoTeamColorsOnGearCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateNoTeamColorsOnGearCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateNoTeamColorsOnGearCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateNoTeamColorsOnGearCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateNoTeamColorsOnGearCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateNoTeamColorsOnGearCheckbox, CallFunc_GetNoTeamColorsOnGear_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateNoTeamColorsOnGearCheckbox::CallFunc_GetNoTeamColorsOnGear_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateNoTeamColorsOnGearCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateNoTeamColorsOnGearCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyNoTeamColorsOnGear
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyNoTeamColorsOnGear final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyNoTeamColorsOnGear) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyNoTeamColorsOnGear");
static_assert(sizeof(BP_GameSettings_C_ApplyNoTeamColorsOnGear) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyNoTeamColorsOnGear");
static_assert(offsetof(BP_GameSettings_C_ApplyNoTeamColorsOnGear, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplyNoTeamColorsOnGear::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyNoTeamColorsOnGear, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplyNoTeamColorsOnGear::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyNoTeamColorsOnGear, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplyNoTeamColorsOnGear::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyNoTeamColorsOnGear, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyNoTeamColorsOnGear::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyNoTeamColorsOnGear, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyNoTeamColorsOnGear::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyNoTeamColorsOnGear, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplyNoTeamColorsOnGear::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateKilledByCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateKilledByCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowKilledBy_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateKilledByCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateKilledByCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateKilledByCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateKilledByCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateKilledByCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateKilledByCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateKilledByCheckbox, CallFunc_GetShowKilledBy_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateKilledByCheckbox::CallFunc_GetShowKilledBy_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateKilledByCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateKilledByCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyKilledBy
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyKilledBy final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyKilledBy) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyKilledBy");
static_assert(sizeof(BP_GameSettings_C_ApplyKilledBy) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyKilledBy");
static_assert(offsetof(BP_GameSettings_C_ApplyKilledBy, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplyKilledBy::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyKilledBy, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplyKilledBy::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyKilledBy, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplyKilledBy::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyKilledBy, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyKilledBy::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyKilledBy, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyKilledBy::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyKilledBy, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplyKilledBy::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyThirdPersonDeathCamera
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyThirdPersonDeathCamera final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyThirdPersonDeathCamera) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyThirdPersonDeathCamera");
static_assert(sizeof(BP_GameSettings_C_ApplyThirdPersonDeathCamera) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyThirdPersonDeathCamera");
static_assert(offsetof(BP_GameSettings_C_ApplyThirdPersonDeathCamera, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplyThirdPersonDeathCamera::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyThirdPersonDeathCamera, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplyThirdPersonDeathCamera::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyThirdPersonDeathCamera, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplyThirdPersonDeathCamera::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyThirdPersonDeathCamera, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyThirdPersonDeathCamera::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyThirdPersonDeathCamera, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyThirdPersonDeathCamera::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyThirdPersonDeathCamera, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplyThirdPersonDeathCamera::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateThirdPersonDeathCameraCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateThirdPersonDeathCameraCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetThirdPersonDeathCamera_ReturnValue;    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateThirdPersonDeathCameraCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateThirdPersonDeathCameraCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateThirdPersonDeathCameraCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateThirdPersonDeathCameraCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateThirdPersonDeathCameraCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateThirdPersonDeathCameraCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateThirdPersonDeathCameraCheckbox, CallFunc_GetThirdPersonDeathCamera_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateThirdPersonDeathCameraCheckbox::CallFunc_GetThirdPersonDeathCamera_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateThirdPersonDeathCameraCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateThirdPersonDeathCameraCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateShowServerInScoreboardCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateShowServerInScoreboardCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowServerInScoreboard_ReturnValue;    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateShowServerInScoreboardCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateShowServerInScoreboardCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateShowServerInScoreboardCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateShowServerInScoreboardCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateShowServerInScoreboardCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateShowServerInScoreboardCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateShowServerInScoreboardCheckbox, CallFunc_GetShowServerInScoreboard_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateShowServerInScoreboardCheckbox::CallFunc_GetShowServerInScoreboard_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateShowServerInScoreboardCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateShowServerInScoreboardCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyShowServerInScoreboard
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyShowServerInScoreboard final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyShowServerInScoreboard) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyShowServerInScoreboard");
static_assert(sizeof(BP_GameSettings_C_ApplyShowServerInScoreboard) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyShowServerInScoreboard");
static_assert(offsetof(BP_GameSettings_C_ApplyShowServerInScoreboard, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplyShowServerInScoreboard::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyShowServerInScoreboard, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplyShowServerInScoreboard::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyShowServerInScoreboard, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplyShowServerInScoreboard::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyShowServerInScoreboard, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyShowServerInScoreboard::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyShowServerInScoreboard, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyShowServerInScoreboard::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyShowServerInScoreboard, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplyShowServerInScoreboard::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateCrosshairDropdown
// 0x0028 (0x0028 - 0x0000)
struct BP_GameSettings_C_UpdateCrosshairDropdown final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCrosshairType_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetOptionAtIndex_ReturnValue;             // 0x0010(0x0018)()
};
static_assert(alignof(BP_GameSettings_C_UpdateCrosshairDropdown) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateCrosshairDropdown");
static_assert(sizeof(BP_GameSettings_C_UpdateCrosshairDropdown) == 0x000028, "Wrong size on BP_GameSettings_C_UpdateCrosshairDropdown");
static_assert(offsetof(BP_GameSettings_C_UpdateCrosshairDropdown, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateCrosshairDropdown::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateCrosshairDropdown, CallFunc_GetCrosshairType_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateCrosshairDropdown::CallFunc_GetCrosshairType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateCrosshairDropdown, CallFunc_GetOptionAtIndex_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_UpdateCrosshairDropdown::CallFunc_GetOptionAtIndex_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyCrosshairType
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_ApplyCrosshairType final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSelectedIndex_SelectedIndex;           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyCrosshairType) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyCrosshairType");
static_assert(sizeof(BP_GameSettings_C_ApplyCrosshairType) == 0x000010, "Wrong size on BP_GameSettings_C_ApplyCrosshairType");
static_assert(offsetof(BP_GameSettings_C_ApplyCrosshairType, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_ApplyCrosshairType::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyCrosshairType, CallFunc_GetSelectedIndex_SelectedIndex) == 0x000008, "Member 'BP_GameSettings_C_ApplyCrosshairType::CallFunc_GetSelectedIndex_SelectedIndex' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateObjectiveHintCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateObjectiveHintCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowObjectives_ReturnValue;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateObjectiveHintCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateObjectiveHintCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateObjectiveHintCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateObjectiveHintCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateObjectiveHintCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateObjectiveHintCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateObjectiveHintCheckbox, CallFunc_GetShowObjectives_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateObjectiveHintCheckbox::CallFunc_GetShowObjectives_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateObjectiveHintCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateObjectiveHintCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyObjectiveHint
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyObjectiveHint final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyObjectiveHint) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyObjectiveHint");
static_assert(sizeof(BP_GameSettings_C_ApplyObjectiveHint) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyObjectiveHint");
static_assert(offsetof(BP_GameSettings_C_ApplyObjectiveHint, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplyObjectiveHint::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyObjectiveHint, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplyObjectiveHint::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyObjectiveHint, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplyObjectiveHint::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyObjectiveHint, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyObjectiveHint::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyObjectiveHint, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyObjectiveHint::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyObjectiveHint, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplyObjectiveHint::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateCombatHintsCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateCombatHintsCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowCombatHints_ReturnValue;           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateCombatHintsCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateCombatHintsCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateCombatHintsCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateCombatHintsCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateCombatHintsCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateCombatHintsCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateCombatHintsCheckbox, CallFunc_GetShowCombatHints_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateCombatHintsCheckbox::CallFunc_GetShowCombatHints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateCombatHintsCheckbox, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateCombatHintsCheckbox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyCombatHints
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyCombatHints final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyCombatHints) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyCombatHints");
static_assert(sizeof(BP_GameSettings_C_ApplyCombatHints) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyCombatHints");
static_assert(offsetof(BP_GameSettings_C_ApplyCombatHints, Temp_bool_Variable) == 0x000000, "Member 'BP_GameSettings_C_ApplyCombatHints::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyCombatHints, Temp_int_Variable) == 0x000004, "Member 'BP_GameSettings_C_ApplyCombatHints::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyCombatHints, Temp_int_Variable_1) == 0x000008, "Member 'BP_GameSettings_C_ApplyCombatHints::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyCombatHints, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_ApplyCombatHints::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyCombatHints, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyCombatHints::CallFunc_IsChecked_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyCombatHints, K2Node_Select_Default) == 0x00001C, "Member 'BP_GameSettings_C_ApplyCombatHints::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.CollapseVisibilityIfConsole
// 0x0006 (0x0006 - 0x0000)
struct BP_GameSettings_C_CollapseVisibilityIfConsole final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsConsolePlatform_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_CollapseVisibilityIfConsole) == 0x000001, "Wrong alignment on BP_GameSettings_C_CollapseVisibilityIfConsole");
static_assert(sizeof(BP_GameSettings_C_CollapseVisibilityIfConsole) == 0x000006, "Wrong size on BP_GameSettings_C_CollapseVisibilityIfConsole");
static_assert(offsetof(BP_GameSettings_C_CollapseVisibilityIfConsole, ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_CollapseVisibilityIfConsole::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_CollapseVisibilityIfConsole, Temp_bool_Variable) == 0x000001, "Member 'BP_GameSettings_C_CollapseVisibilityIfConsole::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_CollapseVisibilityIfConsole, Temp_byte_Variable) == 0x000002, "Member 'BP_GameSettings_C_CollapseVisibilityIfConsole::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_CollapseVisibilityIfConsole, Temp_byte_Variable_1) == 0x000003, "Member 'BP_GameSettings_C_CollapseVisibilityIfConsole::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_CollapseVisibilityIfConsole, CallFunc_IsConsolePlatform_ReturnValue) == 0x000004, "Member 'BP_GameSettings_C_CollapseVisibilityIfConsole::CallFunc_IsConsolePlatform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_CollapseVisibilityIfConsole, K2Node_Select_Default) == 0x000005, "Member 'BP_GameSettings_C_CollapseVisibilityIfConsole::K2Node_Select_Default' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateForceFeedbackCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateForceFeedbackCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetForceFeedbackEnabled_ReturnValue;      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateForceFeedbackCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateForceFeedbackCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateForceFeedbackCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateForceFeedbackCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateForceFeedbackCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateForceFeedbackCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateForceFeedbackCheckbox, CallFunc_GetForceFeedbackEnabled_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateForceFeedbackCheckbox::CallFunc_GetForceFeedbackEnabled_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyForceFeedback
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_ApplyForceFeedback final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_ApplyForceFeedback) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyForceFeedback");
static_assert(sizeof(BP_GameSettings_C_ApplyForceFeedback) == 0x000010, "Wrong size on BP_GameSettings_C_ApplyForceFeedback");
static_assert(offsetof(BP_GameSettings_C_ApplyForceFeedback, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_ApplyForceFeedback::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyForceFeedback, CallFunc_IsChecked_Value) == 0x000008, "Member 'BP_GameSettings_C_ApplyForceFeedback::CallFunc_IsChecked_Value' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.SaveSettings
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_SaveSettings final
{
public:
	E_MainMenuAction                              Action;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsConsolePlatform_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsConsolePlatform_ReturnValue_1;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_SaveSettings) == 0x000008, "Wrong alignment on BP_GameSettings_C_SaveSettings");
static_assert(sizeof(BP_GameSettings_C_SaveSettings) == 0x000020, "Wrong size on BP_GameSettings_C_SaveSettings");
static_assert(offsetof(BP_GameSettings_C_SaveSettings, Action) == 0x000000, "Member 'BP_GameSettings_C_SaveSettings::Action' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_SaveSettings, CallFunc_IsConsolePlatform_ReturnValue) == 0x000001, "Member 'BP_GameSettings_C_SaveSettings::CallFunc_IsConsolePlatform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_SaveSettings, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'BP_GameSettings_C_SaveSettings::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_SaveSettings, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_SaveSettings::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_SaveSettings, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_SaveSettings::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_SaveSettings, CallFunc_IsConsolePlatform_ReturnValue_1) == 0x000018, "Member 'BP_GameSettings_C_SaveSettings::CallFunc_IsConsolePlatform_ReturnValue_1' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyMotionBlur
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyMotionBlur final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_Value;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetMotionBlurLimits_ReturnValue;          // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyMotionBlur) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyMotionBlur");
static_assert(sizeof(BP_GameSettings_C_ApplyMotionBlur) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyMotionBlur");
static_assert(offsetof(BP_GameSettings_C_ApplyMotionBlur, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_ApplyMotionBlur::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyMotionBlur, CallFunc_GetValue_Value) == 0x000008, "Member 'BP_GameSettings_C_ApplyMotionBlur::CallFunc_GetValue_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyMotionBlur, CallFunc_GetMotionBlurLimits_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_ApplyMotionBlur::CallFunc_GetMotionBlurLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyMotionBlur, CallFunc_BreakVector2D_X) == 0x000014, "Member 'BP_GameSettings_C_ApplyMotionBlur::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyMotionBlur, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'BP_GameSettings_C_ApplyMotionBlur::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyMotionBlur, CallFunc_MapRangeClamped_ReturnValue) == 0x00001C, "Member 'BP_GameSettings_C_ApplyMotionBlur::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyGamma
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyGamma final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_Value;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetGammaLimits_ReturnValue;               // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyGamma) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyGamma");
static_assert(sizeof(BP_GameSettings_C_ApplyGamma) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyGamma");
static_assert(offsetof(BP_GameSettings_C_ApplyGamma, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_ApplyGamma::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyGamma, CallFunc_GetValue_Value) == 0x000008, "Member 'BP_GameSettings_C_ApplyGamma::CallFunc_GetValue_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyGamma, CallFunc_GetGammaLimits_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_ApplyGamma::CallFunc_GetGammaLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyGamma, CallFunc_BreakVector2D_X) == 0x000014, "Member 'BP_GameSettings_C_ApplyGamma::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyGamma, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'BP_GameSettings_C_ApplyGamma::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyGamma, CallFunc_MapRangeClamped_ReturnValue) == 0x00001C, "Member 'BP_GameSettings_C_ApplyGamma::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyFov
// 0x0028 (0x0028 - 0x0000)
struct BP_GameSettings_C_ApplyFov final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetFieldOfViewLimits_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValue_Value;                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_ApplyFov) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyFov");
static_assert(sizeof(BP_GameSettings_C_ApplyFov) == 0x000028, "Wrong size on BP_GameSettings_C_ApplyFov");
static_assert(offsetof(BP_GameSettings_C_ApplyFov, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_ApplyFov::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyFov, CallFunc_GetFieldOfViewLimits_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_ApplyFov::CallFunc_GetFieldOfViewLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyFov, CallFunc_GetValue_Value) == 0x000010, "Member 'BP_GameSettings_C_ApplyFov::CallFunc_GetValue_Value' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyFov, CallFunc_BreakVector2D_X) == 0x000014, "Member 'BP_GameSettings_C_ApplyFov::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyFov, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'BP_GameSettings_C_ApplyFov::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyFov, CallFunc_MapRangeClamped_ReturnValue) == 0x00001C, "Member 'BP_GameSettings_C_ApplyFov::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyFov, CallFunc_Round_ReturnValue) == 0x000020, "Member 'BP_GameSettings_C_ApplyFov::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyFov, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000024, "Member 'BP_GameSettings_C_ApplyFov::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.ApplyCrossplay
// 0x0020 (0x0020 - 0x0000)
struct BP_GameSettings_C_ApplyCrossplay final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlatform                                     CallFunc_GetPlatform_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetPSNLockEnabledValue_ReturnValue;       // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue_1; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChecked_Value;                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_ApplyCrossplay) == 0x000008, "Wrong alignment on BP_GameSettings_C_ApplyCrossplay");
static_assert(sizeof(BP_GameSettings_C_ApplyCrossplay) == 0x000020, "Wrong size on BP_GameSettings_C_ApplyCrossplay");
static_assert(offsetof(BP_GameSettings_C_ApplyCrossplay, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_ApplyCrossplay::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyCrossplay, CallFunc_GetPlatform_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_ApplyCrossplay::CallFunc_GetPlatform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyCrossplay, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000009, "Member 'BP_GameSettings_C_ApplyCrossplay::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyCrossplay, CallFunc_GetPSNLockEnabledValue_ReturnValue) == 0x00000A, "Member 'BP_GameSettings_C_ApplyCrossplay::CallFunc_GetPSNLockEnabledValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyCrossplay, CallFunc_GetMordhauGameUserSettings_ReturnValue_1) == 0x000010, "Member 'BP_GameSettings_C_ApplyCrossplay::CallFunc_GetMordhauGameUserSettings_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_ApplyCrossplay, CallFunc_IsChecked_Value) == 0x000018, "Member 'BP_GameSettings_C_ApplyCrossplay::CallFunc_IsChecked_Value' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateFovSlider
// 0x0038 (0x0038 - 0x0000)
struct BP_GameSettings_C_UpdateFovSlider final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFieldOfView_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetFieldOfViewLimits_ReturnValue;         // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_MordhauSlider                       K2Node_MakeStruct_S_MordhauSlider;                 // 0x0020(0x0014)(IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_UpdateFovSlider) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateFovSlider");
static_assert(sizeof(BP_GameSettings_C_UpdateFovSlider) == 0x000038, "Wrong size on BP_GameSettings_C_UpdateFovSlider");
static_assert(offsetof(BP_GameSettings_C_UpdateFovSlider, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateFovSlider::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateFovSlider, CallFunc_GetFieldOfView_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateFovSlider::CallFunc_GetFieldOfView_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateFovSlider, CallFunc_GetFieldOfViewLimits_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateFovSlider::CallFunc_GetFieldOfViewLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateFovSlider, CallFunc_BreakVector2D_X) == 0x000014, "Member 'BP_GameSettings_C_UpdateFovSlider::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateFovSlider, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'BP_GameSettings_C_UpdateFovSlider::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateFovSlider, CallFunc_MapRangeClamped_ReturnValue) == 0x00001C, "Member 'BP_GameSettings_C_UpdateFovSlider::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateFovSlider, K2Node_MakeStruct_S_MordhauSlider) == 0x000020, "Member 'BP_GameSettings_C_UpdateFovSlider::K2Node_MakeStruct_S_MordhauSlider' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateGammaSlider
// 0x0038 (0x0038 - 0x0000)
struct BP_GameSettings_C_UpdateGammaSlider final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGamma_ReturnValue;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetGammaLimits_ReturnValue;               // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_MordhauSlider                       K2Node_MakeStruct_S_MordhauSlider;                 // 0x0020(0x0014)(IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_UpdateGammaSlider) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateGammaSlider");
static_assert(sizeof(BP_GameSettings_C_UpdateGammaSlider) == 0x000038, "Wrong size on BP_GameSettings_C_UpdateGammaSlider");
static_assert(offsetof(BP_GameSettings_C_UpdateGammaSlider, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateGammaSlider::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateGammaSlider, CallFunc_GetGamma_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateGammaSlider::CallFunc_GetGamma_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateGammaSlider, CallFunc_GetGammaLimits_ReturnValue) == 0x00000C, "Member 'BP_GameSettings_C_UpdateGammaSlider::CallFunc_GetGammaLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateGammaSlider, CallFunc_BreakVector2D_X) == 0x000014, "Member 'BP_GameSettings_C_UpdateGammaSlider::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateGammaSlider, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'BP_GameSettings_C_UpdateGammaSlider::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateGammaSlider, CallFunc_MapRangeClamped_ReturnValue) == 0x00001C, "Member 'BP_GameSettings_C_UpdateGammaSlider::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateGammaSlider, K2Node_MakeStruct_S_MordhauSlider) == 0x000020, "Member 'BP_GameSettings_C_UpdateGammaSlider::K2Node_MakeStruct_S_MordhauSlider' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateMotionBlurSlider
// 0x0038 (0x0038 - 0x0000)
struct BP_GameSettings_C_UpdateMotionBlurSlider final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetMotionBlurLimits_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMotionBlur_ReturnValue;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_MordhauSlider                       K2Node_MakeStruct_S_MordhauSlider;                 // 0x0020(0x0014)(IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_UpdateMotionBlurSlider) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateMotionBlurSlider");
static_assert(sizeof(BP_GameSettings_C_UpdateMotionBlurSlider) == 0x000038, "Wrong size on BP_GameSettings_C_UpdateMotionBlurSlider");
static_assert(offsetof(BP_GameSettings_C_UpdateMotionBlurSlider, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateMotionBlurSlider::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateMotionBlurSlider, CallFunc_GetMotionBlurLimits_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateMotionBlurSlider::CallFunc_GetMotionBlurLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateMotionBlurSlider, CallFunc_GetMotionBlur_ReturnValue) == 0x000010, "Member 'BP_GameSettings_C_UpdateMotionBlurSlider::CallFunc_GetMotionBlur_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateMotionBlurSlider, CallFunc_BreakVector2D_X) == 0x000014, "Member 'BP_GameSettings_C_UpdateMotionBlurSlider::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateMotionBlurSlider, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'BP_GameSettings_C_UpdateMotionBlurSlider::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateMotionBlurSlider, CallFunc_MapRangeClamped_ReturnValue) == 0x00001C, "Member 'BP_GameSettings_C_UpdateMotionBlurSlider::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateMotionBlurSlider, K2Node_MakeStruct_S_MordhauSlider) == 0x000020, "Member 'BP_GameSettings_C_UpdateMotionBlurSlider::K2Node_MakeStruct_S_MordhauSlider' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.UpdateCrossplayCheckbox
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_UpdateCrossplayCheckbox final
{
public:
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCrossplayEnabled_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameSettings_C_UpdateCrossplayCheckbox) == 0x000008, "Wrong alignment on BP_GameSettings_C_UpdateCrossplayCheckbox");
static_assert(sizeof(BP_GameSettings_C_UpdateCrossplayCheckbox) == 0x000010, "Wrong size on BP_GameSettings_C_UpdateCrossplayCheckbox");
static_assert(offsetof(BP_GameSettings_C_UpdateCrossplayCheckbox, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000000, "Member 'BP_GameSettings_C_UpdateCrossplayCheckbox::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_UpdateCrossplayCheckbox, CallFunc_GetCrossplayEnabled_ReturnValue) == 0x000008, "Member 'BP_GameSettings_C_UpdateCrossplayCheckbox::CallFunc_GetCrossplayEnabled_ReturnValue' has a wrong offset!");

// Function BP_GameSettings.BP_GameSettings_C.Collapse if Console
// 0x0010 (0x0010 - 0x0000)
struct BP_GameSettings_C_Collapse_if_Console final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsConsolePlatform_ReturnValue;            // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameSettings_C_Collapse_if_Console) == 0x000008, "Wrong alignment on BP_GameSettings_C_Collapse_if_Console");
static_assert(sizeof(BP_GameSettings_C_Collapse_if_Console) == 0x000010, "Wrong size on BP_GameSettings_C_Collapse_if_Console");
static_assert(offsetof(BP_GameSettings_C_Collapse_if_Console, UserWidget) == 0x000000, "Member 'BP_GameSettings_C_Collapse_if_Console::UserWidget' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_Collapse_if_Console, Temp_bool_Variable) == 0x000008, "Member 'BP_GameSettings_C_Collapse_if_Console::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_Collapse_if_Console, Temp_byte_Variable) == 0x000009, "Member 'BP_GameSettings_C_Collapse_if_Console::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_Collapse_if_Console, Temp_byte_Variable_1) == 0x00000A, "Member 'BP_GameSettings_C_Collapse_if_Console::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_Collapse_if_Console, CallFunc_IsConsolePlatform_ReturnValue) == 0x00000B, "Member 'BP_GameSettings_C_Collapse_if_Console::CallFunc_IsConsolePlatform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameSettings_C_Collapse_if_Console, K2Node_Select_Default) == 0x00000C, "Member 'BP_GameSettings_C_Collapse_if_Console::K2Node_Select_Default' has a wrong offset!");

}

