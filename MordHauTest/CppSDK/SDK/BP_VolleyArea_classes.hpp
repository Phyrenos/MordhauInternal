#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VolleyArea

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mordhau_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VolleyArea.BP_VolleyArea_C
// 0x0060 (0x0440 - 0x03E0)
class ABP_VolleyArea_C final : public AMordhauActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UAudioComponent*                        Audio;                                             // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal;                                             // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AController*                            InstigatorController;                              // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Interval;                                          // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_414[0x4];                                      // 0x0414(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Overlaps;                                          // 0x0418(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         Damage;                                            // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActivationDelay;                                   // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageMultiplier;                                  // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x0434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_VolleyArea(int32 EntryPoint);
	void DamageTick();
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VolleyArea_C">();
	}
	static class ABP_VolleyArea_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VolleyArea_C>();
	}
};
static_assert(alignof(ABP_VolleyArea_C) == 0x000010, "Wrong alignment on ABP_VolleyArea_C");
static_assert(sizeof(ABP_VolleyArea_C) == 0x000440, "Wrong size on ABP_VolleyArea_C");
static_assert(offsetof(ABP_VolleyArea_C, UberGraphFrame) == 0x0003E0, "Member 'ABP_VolleyArea_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_VolleyArea_C, Audio) == 0x0003E8, "Member 'ABP_VolleyArea_C::Audio' has a wrong offset!");
static_assert(offsetof(ABP_VolleyArea_C, Decal) == 0x0003F0, "Member 'ABP_VolleyArea_C::Decal' has a wrong offset!");
static_assert(offsetof(ABP_VolleyArea_C, ParticleSystem) == 0x0003F8, "Member 'ABP_VolleyArea_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_VolleyArea_C, Box) == 0x000400, "Member 'ABP_VolleyArea_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_VolleyArea_C, InstigatorController) == 0x000408, "Member 'ABP_VolleyArea_C::InstigatorController' has a wrong offset!");
static_assert(offsetof(ABP_VolleyArea_C, Interval) == 0x000410, "Member 'ABP_VolleyArea_C::Interval' has a wrong offset!");
static_assert(offsetof(ABP_VolleyArea_C, Overlaps) == 0x000418, "Member 'ABP_VolleyArea_C::Overlaps' has a wrong offset!");
static_assert(offsetof(ABP_VolleyArea_C, Damage) == 0x000428, "Member 'ABP_VolleyArea_C::Damage' has a wrong offset!");
static_assert(offsetof(ABP_VolleyArea_C, ActivationDelay) == 0x00042C, "Member 'ABP_VolleyArea_C::ActivationDelay' has a wrong offset!");
static_assert(offsetof(ABP_VolleyArea_C, DamageMultiplier) == 0x000430, "Member 'ABP_VolleyArea_C::DamageMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_VolleyArea_C, Duration) == 0x000434, "Member 'ABP_VolleyArea_C::Duration' has a wrong offset!");

}

