#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Crosshair

#include "Basic.hpp"

#include "BP_Crosshair_classes.hpp"
#include "BP_Crosshair_parameters.hpp"


namespace SDK
{

// Function BP_Crosshair.BP_Crosshair_C.ExecuteUbergraph_BP_Crosshair
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Crosshair_C::ExecuteUbergraph_BP_Crosshair(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Crosshair_C", "ExecuteUbergraph_BP_Crosshair");

	Params::BP_Crosshair_C_ExecuteUbergraph_BP_Crosshair Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Crosshair.BP_Crosshair_C.On Hitmarker Animation Finish
// (BlueprintCallable, BlueprintEvent)

void UBP_Crosshair_C::On_Hitmarker_Animation_Finish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Crosshair_C", "On Hitmarker Animation Finish");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Crosshair.BP_Crosshair_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Crosshair_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Crosshair_C", "Tick");

	Params::BP_Crosshair_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Crosshair.BP_Crosshair_C.Get_Crosshair_Visibility_0
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ESlateVisibility                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ESlateVisibility UBP_Crosshair_C::Get_Crosshair_Visibility_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Crosshair_C", "Get_Crosshair_Visibility_0");

	Params::BP_Crosshair_C_Get_Crosshair_Visibility_0 Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Crosshair.BP_Crosshair_C.ClampAngleToDirectionalZone
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ClampedAngle                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Crosshair_C::ClampAngleToDirectionalZone(float Angle, float* ClampedAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Crosshair_C", "ClampAngleToDirectionalZone");

	Params::BP_Crosshair_C_ClampAngleToDirectionalZone Parms{};

	Parms.Angle = Angle;

	UObject::ProcessEvent(Func, &Parms);

	if (ClampedAngle != nullptr)
		*ClampedAngle = Parms.ClampedAngle;
}


// Function BP_Crosshair.BP_Crosshair_C.ShowHitMarker
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   HitZoneParam                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Crosshair_C::ShowHitMarker(int32 HitZoneParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Crosshair_C", "ShowHitMarker");

	Params::BP_Crosshair_C_ShowHitMarker Parms{};

	Parms.HitZoneParam = HitZoneParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Crosshair.BP_Crosshair_C.ClampAngleToSide
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    isSideLeft                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   ClampedAngle                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Crosshair_C::ClampAngleToSide(float Angle, bool isSideLeft, float* ClampedAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Crosshair_C", "ClampAngleToSide");

	Params::BP_Crosshair_C_ClampAngleToSide Parms{};

	Parms.Angle = Angle;
	Parms.isSideLeft = isSideLeft;

	UObject::ProcessEvent(Func, &Parms);

	if (ClampedAngle != nullptr)
		*ClampedAngle = Parms.ClampedAngle;
}


// Function BP_Crosshair.BP_Crosshair_C.PlayHitmarkerAnimation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidgetAnimation*                 Anim                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EUMGSequencePlayMode                    PlayMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Crosshair_C::PlayHitmarkerAnimation(class UWidgetAnimation* Anim, float Speed, EUMGSequencePlayMode PlayMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Crosshair_C", "PlayHitmarkerAnimation");

	Params::BP_Crosshair_C_PlayHitmarkerAnimation Parms{};

	Parms.Anim = Anim;
	Parms.Speed = Speed;
	Parms.PlayMode = PlayMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Crosshair.BP_Crosshair_C.UpdateCrosshair
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_Crosshair_C::UpdateCrosshair()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Crosshair_C", "UpdateCrosshair");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Crosshair.BP_Crosshair_C.TriggerDamageIndicator
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Render_Angle                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Crosshair_C::TriggerDamageIndicator(float Render_Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Crosshair_C", "TriggerDamageIndicator");

	Params::BP_Crosshair_C_TriggerDamageIndicator Parms{};

	Parms.Render_Angle = Render_Angle;

	UObject::ProcessEvent(Func, &Parms);
}

}

