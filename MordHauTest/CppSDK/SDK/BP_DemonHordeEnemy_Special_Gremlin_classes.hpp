#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DemonHordeEnemy_Special_Gremlin

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mordhau_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_DemonHordeEnemy_Special_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DemonHordeEnemy_Special_Gremlin.BP_DemonHordeEnemy_Special_Gremlin_C
// 0x0040 (0x1570 - 0x1530)
class ABP_DemonHordeEnemy_Special_Gremlin_C final : public ABP_DemonHordeEnemy_Special_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_DemonHordeEnemy_Special_Gremlin_C; // 0x1530(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class USphereComponent*                       GrappleSphere;                                     // 0x1538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStateLeap;                                       // 0x1540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsStateGrapple;                                    // 0x1541(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1542[0x2];                                     // 0x1542(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeapMinDistance;                                   // 0x1544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeapMaxDistance;                                   // 0x1548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LeapVelocity;                                      // 0x154C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_DemonHordeCharacter_C*              AttachedChar;                                      // 0x1558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          IsLeapingDisabled;                                 // 0x1560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_DemonHordeEnemy_Special_Gremlin(int32 EntryPoint);
	void DisableCollisionMulti();
	void BndEvt__BP_DemonHordeEnemy_Special_Gremlin_GrappleSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveTick(float DeltaSeconds);
	void OnLanded(const struct FHitResult& Hit);
	void LeapLoop();
	float ModifyDamage(float DamageAmount, const struct FMordhauDamageInfo& DamageInfo, class AController* EventInstigator);
	void ReceiveBeginPlay();
	void OnDied(float Angle, EMordhauDamageType Type, uint8 SubType, class FName bone, const struct FVector& Point, class AActor* Source, class AActor* Agent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DemonHordeEnemy_Special_Gremlin_C">();
	}
	static class ABP_DemonHordeEnemy_Special_Gremlin_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DemonHordeEnemy_Special_Gremlin_C>();
	}
};
static_assert(alignof(ABP_DemonHordeEnemy_Special_Gremlin_C) == 0x000010, "Wrong alignment on ABP_DemonHordeEnemy_Special_Gremlin_C");
static_assert(sizeof(ABP_DemonHordeEnemy_Special_Gremlin_C) == 0x001570, "Wrong size on ABP_DemonHordeEnemy_Special_Gremlin_C");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Gremlin_C, UberGraphFrame_BP_DemonHordeEnemy_Special_Gremlin_C) == 0x001530, "Member 'ABP_DemonHordeEnemy_Special_Gremlin_C::UberGraphFrame_BP_DemonHordeEnemy_Special_Gremlin_C' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Gremlin_C, GrappleSphere) == 0x001538, "Member 'ABP_DemonHordeEnemy_Special_Gremlin_C::GrappleSphere' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Gremlin_C, IsStateLeap) == 0x001540, "Member 'ABP_DemonHordeEnemy_Special_Gremlin_C::IsStateLeap' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Gremlin_C, IsStateGrapple) == 0x001541, "Member 'ABP_DemonHordeEnemy_Special_Gremlin_C::IsStateGrapple' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Gremlin_C, LeapMinDistance) == 0x001544, "Member 'ABP_DemonHordeEnemy_Special_Gremlin_C::LeapMinDistance' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Gremlin_C, LeapMaxDistance) == 0x001548, "Member 'ABP_DemonHordeEnemy_Special_Gremlin_C::LeapMaxDistance' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Gremlin_C, LeapVelocity) == 0x00154C, "Member 'ABP_DemonHordeEnemy_Special_Gremlin_C::LeapVelocity' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Gremlin_C, AttachedChar) == 0x001558, "Member 'ABP_DemonHordeEnemy_Special_Gremlin_C::AttachedChar' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_Gremlin_C, IsLeapingDisabled) == 0x001560, "Member 'ABP_DemonHordeEnemy_Special_Gremlin_C::IsLeapingDisabled' has a wrong offset!");

}

