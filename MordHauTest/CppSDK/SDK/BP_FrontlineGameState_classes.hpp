#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FrontlineGameState

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_MordhauGameState_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FrontlineGameState.BP_FrontlineGameState_C
// 0x0058 (0x0910 - 0x08B8)
class ABP_FrontlineGameState_C : public ABP_MordhauGameState_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_FrontlineGameState_C;            // 0x08B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	float                                         TicketDrainInterval;                               // 0x08C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C4[0x4];                                      // 0x08C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 LivingPlayersPerTeam;                              // 0x08C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TicketDrainCounter;                                // 0x08D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TicketDrainAmount;                                 // 0x08DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Team1StartingTickets;                              // 0x08E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Team2StartingTickets;                              // 0x08E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPushMode;                                        // 0x08E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E9[0x3];                                      // 0x08E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StageEndTime;                                      // 0x08EC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         AttackingTeam;                                     // 0x08F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         DefendingTeam;                                     // 0x08F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F2[0x2];                                      // 0x08F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitialStageTime;                                  // 0x08F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AllObjectivesCompletedTime;                        // 0x08F8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PushWinDelay;                                      // 0x08FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_DeployableSpawn_C*>          DeployableSpawns;                                  // 0x0900(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_FrontlineGameState(int32 EntryPoint);
	void TriggerWinDelayed();
	void LocalPlayerChangedTeam();
	void ReceiveBeginPlay();
	void DrainTickets(class ABP_MordhauGameMode_C* GameMode);
	void HandleMatchEndInfo();
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FrontlineGameState_C">();
	}
	static class ABP_FrontlineGameState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FrontlineGameState_C>();
	}
};
static_assert(alignof(ABP_FrontlineGameState_C) == 0x000008, "Wrong alignment on ABP_FrontlineGameState_C");
static_assert(sizeof(ABP_FrontlineGameState_C) == 0x000910, "Wrong size on ABP_FrontlineGameState_C");
static_assert(offsetof(ABP_FrontlineGameState_C, UberGraphFrame_BP_FrontlineGameState_C) == 0x0008B8, "Member 'ABP_FrontlineGameState_C::UberGraphFrame_BP_FrontlineGameState_C' has a wrong offset!");
static_assert(offsetof(ABP_FrontlineGameState_C, TicketDrainInterval) == 0x0008C0, "Member 'ABP_FrontlineGameState_C::TicketDrainInterval' has a wrong offset!");
static_assert(offsetof(ABP_FrontlineGameState_C, LivingPlayersPerTeam) == 0x0008C8, "Member 'ABP_FrontlineGameState_C::LivingPlayersPerTeam' has a wrong offset!");
static_assert(offsetof(ABP_FrontlineGameState_C, TicketDrainCounter) == 0x0008D8, "Member 'ABP_FrontlineGameState_C::TicketDrainCounter' has a wrong offset!");
static_assert(offsetof(ABP_FrontlineGameState_C, TicketDrainAmount) == 0x0008DC, "Member 'ABP_FrontlineGameState_C::TicketDrainAmount' has a wrong offset!");
static_assert(offsetof(ABP_FrontlineGameState_C, Team1StartingTickets) == 0x0008E0, "Member 'ABP_FrontlineGameState_C::Team1StartingTickets' has a wrong offset!");
static_assert(offsetof(ABP_FrontlineGameState_C, Team2StartingTickets) == 0x0008E4, "Member 'ABP_FrontlineGameState_C::Team2StartingTickets' has a wrong offset!");
static_assert(offsetof(ABP_FrontlineGameState_C, IsPushMode) == 0x0008E8, "Member 'ABP_FrontlineGameState_C::IsPushMode' has a wrong offset!");
static_assert(offsetof(ABP_FrontlineGameState_C, StageEndTime) == 0x0008EC, "Member 'ABP_FrontlineGameState_C::StageEndTime' has a wrong offset!");
static_assert(offsetof(ABP_FrontlineGameState_C, AttackingTeam) == 0x0008F0, "Member 'ABP_FrontlineGameState_C::AttackingTeam' has a wrong offset!");
static_assert(offsetof(ABP_FrontlineGameState_C, DefendingTeam) == 0x0008F1, "Member 'ABP_FrontlineGameState_C::DefendingTeam' has a wrong offset!");
static_assert(offsetof(ABP_FrontlineGameState_C, InitialStageTime) == 0x0008F4, "Member 'ABP_FrontlineGameState_C::InitialStageTime' has a wrong offset!");
static_assert(offsetof(ABP_FrontlineGameState_C, AllObjectivesCompletedTime) == 0x0008F8, "Member 'ABP_FrontlineGameState_C::AllObjectivesCompletedTime' has a wrong offset!");
static_assert(offsetof(ABP_FrontlineGameState_C, PushWinDelay) == 0x0008FC, "Member 'ABP_FrontlineGameState_C::PushWinDelay' has a wrong offset!");
static_assert(offsetof(ABP_FrontlineGameState_C, DeployableSpawns) == 0x000900, "Member 'ABP_FrontlineGameState_C::DeployableSpawns' has a wrong offset!");

}

