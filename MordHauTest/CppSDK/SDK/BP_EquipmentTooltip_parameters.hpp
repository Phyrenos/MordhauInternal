#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EquipmentTooltip

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "Mordhau_structs.hpp"


namespace SDK::Params
{

// Function BP_EquipmentTooltip.BP_EquipmentTooltip_C.Update Tooltip
// 0x0128 (0x0128 - 0x0000)
struct BP_EquipmentTooltip_C_Update_Tooltip final
{
public:
	class AMordhauEquipment*                      Equipment_Ref;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsBanned;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bCanAfford;                                        // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsEquipped;                                       // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsDefaultLoadout;                                 // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsInHordeArmory;                                  // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Gold_Requirement;                                  // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Rank_Requirement;                                  // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Locked;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_EquipmentTooltip_C*                 Equipment_Toolip;                                  // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauEquipment*                      Current_Equipment;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEquipmentCategory                            Temp_byte_Variable_8;                              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0048(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0060(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0078(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0090(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x00A8(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x00C0(0x0018)()
	class FText                                   K2Node_Select_Default_3;                           // 0x00D8(0x0018)()
	bool                                          Temp_bool_Variable_3;                              // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauHUD*                            CallFunc_GetMordhauHUD_ReturnValue;                // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MordhauHUD_C*                       K2Node_DynamicCast_AsBP_Mordhau_HUD;               // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_4;                           // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MainMenu_C*                         K2Node_DynamicCast_AsBP_Main_Menu;                 // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_ComputePointsLeft_ReturnValue;            // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_EquipmentTooltip_C_Update_Tooltip) == 0x000008, "Wrong alignment on BP_EquipmentTooltip_C_Update_Tooltip");
static_assert(sizeof(BP_EquipmentTooltip_C_Update_Tooltip) == 0x000128, "Wrong size on BP_EquipmentTooltip_C_Update_Tooltip");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Equipment_Ref) == 0x000000, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Equipment_Ref' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, bIsBanned) == 0x000008, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::bIsBanned' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, bCanAfford) == 0x000009, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::bCanAfford' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, bIsEquipped) == 0x00000A, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::bIsEquipped' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, bIsDefaultLoadout) == 0x00000B, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::bIsDefaultLoadout' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, bIsInHordeArmory) == 0x00000C, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::bIsInHordeArmory' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Gold_Requirement) == 0x000010, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Gold_Requirement' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Rank_Requirement) == 0x000014, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Rank_Requirement' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Is_Locked) == 0x000018, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Is_Locked' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Equipment_Toolip) == 0x000020, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Equipment_Toolip' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Current_Equipment) == 0x000028, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Current_Equipment' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Temp_byte_Variable) == 0x000030, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, CallFunc_SelectInt_ReturnValue) == 0x000034, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Temp_byte_Variable_1) == 0x000038, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Temp_bool_Variable) == 0x000039, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Temp_byte_Variable_2) == 0x00003A, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Temp_byte_Variable_3) == 0x00003B, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Temp_bool_Variable_1) == 0x00003C, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, K2Node_Select_Default) == 0x00003D, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Temp_byte_Variable_4) == 0x00003E, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Temp_byte_Variable_5) == 0x00003F, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Temp_bool_Variable_2) == 0x000040, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, K2Node_Select_Default_1) == 0x000041, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Temp_byte_Variable_6) == 0x000042, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Temp_byte_Variable_7) == 0x000043, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Temp_byte_Variable_8) == 0x000044, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, K2Node_Select_Default_2) == 0x000045, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Temp_text_Variable) == 0x000048, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Temp_text_Variable_1) == 0x000060, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Temp_text_Variable_2) == 0x000078, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Temp_text_Variable_3) == 0x000090, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Temp_text_Variable_4) == 0x0000A8, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Temp_text_Variable_5) == 0x0000C0, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, K2Node_Select_Default_3) == 0x0000D8, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, Temp_bool_Variable_3) == 0x0000F0, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, CallFunc_GetMordhauHUD_ReturnValue) == 0x0000F8, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::CallFunc_GetMordhauHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, K2Node_DynamicCast_AsBP_Mordhau_HUD) == 0x000100, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::K2Node_DynamicCast_AsBP_Mordhau_HUD' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, K2Node_DynamicCast_bSuccess) == 0x000108, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, K2Node_Select_Default_4) == 0x000109, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, K2Node_DynamicCast_AsBP_Main_Menu) == 0x000110, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::K2Node_DynamicCast_AsBP_Main_Menu' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, K2Node_DynamicCast_bSuccess_1) == 0x000118, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, CallFunc_ComputePointsLeft_ReturnValue) == 0x00011C, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::CallFunc_ComputePointsLeft_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000120, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, CallFunc_BooleanOR_ReturnValue) == 0x000121, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EquipmentTooltip_C_Update_Tooltip, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000122, "Member 'BP_EquipmentTooltip_C_Update_Tooltip::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

}

