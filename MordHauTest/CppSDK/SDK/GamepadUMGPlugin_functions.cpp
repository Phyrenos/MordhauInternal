#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GamepadUMGPlugin

#include "Basic.hpp"

#include "GamepadUMGPlugin_classes.hpp"
#include "GamepadUMGPlugin_parameters.hpp"


namespace SDK
{

// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.DisableVirtualCursor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVirtualCursorFunctionLibrary::DisableVirtualCursor(class APlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCursorFunctionLibrary", "DisableVirtualCursor");

	Params::VirtualCursorFunctionLibrary_DisableVirtualCursor Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.EnableVirtualCursor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsInputModeGame                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVirtualCursorFunctionLibrary::EnableVirtualCursor(bool bIsInputModeGame, class APlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCursorFunctionLibrary", "EnableVirtualCursor");

	Params::VirtualCursorFunctionLibrary_EnableVirtualCursor Parms{};

	Parms.bIsInputModeGame = bIsInputModeGame;
	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.FlushLastKeyPressed
// (Final, Native, Static, Public, BlueprintCallable)

void UVirtualCursorFunctionLibrary::FlushLastKeyPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCursorFunctionLibrary", "FlushLastKeyPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.GetCursorViewportPosition
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D                        position                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVirtualCursorFunctionLibrary::GetCursorViewportPosition(struct FVector2D* position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCursorFunctionLibrary", "GetCursorViewportPosition");

	Params::VirtualCursorFunctionLibrary_GetCursorViewportPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (position != nullptr)
		*position = std::move(Parms.position);

	return Parms.ReturnValue;
}


// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.GetHoveredWidgetName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UVirtualCursorFunctionLibrary::GetHoveredWidgetName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCursorFunctionLibrary", "GetHoveredWidgetName");

	Params::VirtualCursorFunctionLibrary_GetHoveredWidgetName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.GetHoveredWidgetPosition
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D                        position                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVirtualCursorFunctionLibrary::GetHoveredWidgetPosition(struct FVector2D* position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCursorFunctionLibrary", "GetHoveredWidgetPosition");

	Params::VirtualCursorFunctionLibrary_GetHoveredWidgetPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (position != nullptr)
		*position = std::move(Parms.position);

	return Parms.ReturnValue;
}


// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.GetLastKeyPressed
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FKey UVirtualCursorFunctionLibrary::GetLastKeyPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCursorFunctionLibrary", "GetLastKeyPressed");

	Params::VirtualCursorFunctionLibrary_GetLastKeyPressed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.IsAnalogCursorEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVirtualCursorFunctionLibrary::IsAnalogCursorEnabled(class APlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCursorFunctionLibrary", "IsAnalogCursorEnabled");

	Params::VirtualCursorFunctionLibrary_IsAnalogCursorEnabled Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.IsCursorOverInteractableWidget
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVirtualCursorFunctionLibrary::IsCursorOverInteractableWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCursorFunctionLibrary", "IsCursorOverInteractableWidget");

	Params::VirtualCursorFunctionLibrary_IsCursorOverInteractableWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.IsHoveringNewWidget
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVirtualCursorFunctionLibrary::IsHoveringNewWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCursorFunctionLibrary", "IsHoveringNewWidget");

	Params::VirtualCursorFunctionLibrary_IsHoveringNewWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.IsHoveringSnapWidget
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVirtualCursorFunctionLibrary::IsHoveringSnapWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCursorFunctionLibrary", "IsHoveringSnapWidget");

	Params::VirtualCursorFunctionLibrary_IsHoveringSnapWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.OverrideMaxSpeedHover
// (Final, Native, Static, Public, BlueprintCallable)

void UVirtualCursorFunctionLibrary::OverrideMaxSpeedHover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCursorFunctionLibrary", "OverrideMaxSpeedHover");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.ResetMaxSpeedHover
// (Final, Native, Static, Public, BlueprintCallable)

void UVirtualCursorFunctionLibrary::ResetMaxSpeedHover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VirtualCursorFunctionLibrary", "ResetMaxSpeedHover");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

