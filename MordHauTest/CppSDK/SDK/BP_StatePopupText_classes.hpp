#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_StatePopupText

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_StatePopupText.BP_StatePopupText_C
// 0x0028 (0x0288 - 0x0260)
class UBP_StatePopupText_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UWidgetAnimation*                       EntryAnim;                                         // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             Name_0;                                            // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_0;                                         // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_1;                                         // 0x0280(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_StatePopupText(int32 EntryPoint);
	void Entry_Anim_Finished();
	void Construct();
	void Activate(const class FText& Text, const struct FLinearColor& Color);
	ESlateVisibility GetVisibility_0();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_StatePopupText_C">();
	}
	static class UBP_StatePopupText_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_StatePopupText_C>();
	}
};
static_assert(alignof(UBP_StatePopupText_C) == 0x000008, "Wrong alignment on UBP_StatePopupText_C");
static_assert(sizeof(UBP_StatePopupText_C) == 0x000288, "Wrong size on UBP_StatePopupText_C");
static_assert(offsetof(UBP_StatePopupText_C, UberGraphFrame) == 0x000260, "Member 'UBP_StatePopupText_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_StatePopupText_C, EntryAnim) == 0x000268, "Member 'UBP_StatePopupText_C::EntryAnim' has a wrong offset!");
static_assert(offsetof(UBP_StatePopupText_C, Name_0) == 0x000270, "Member 'UBP_StatePopupText_C::Name_0' has a wrong offset!");
static_assert(offsetof(UBP_StatePopupText_C, Overlay_0) == 0x000278, "Member 'UBP_StatePopupText_C::Overlay_0' has a wrong offset!");
static_assert(offsetof(UBP_StatePopupText_C, Overlay_1) == 0x000280, "Member 'UBP_StatePopupText_C::Overlay_1' has a wrong offset!");

}

