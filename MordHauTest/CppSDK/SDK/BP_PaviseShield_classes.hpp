#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PaviseShield

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_MordhauShield_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PaviseShield.BP_PaviseShield_C
// 0x0050 (0x1D10 - 0x1CC0)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_PaviseShield_C : public ABP_MordhauShield_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_PaviseShield_C;                  // 0x1CB8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UBuildingSystemComponent*               BuildingSystem;                                    // 0x1CC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UBoxComponent*                          MovementBlocker;                                   // 0x1CC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AController*                            PlanterController;                                 // 0x1CD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReceivedDamage;                                    // 0x1CD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageToDestroy;                                   // 0x1CDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ParryMaskUnplanted;                                // 0x1CE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ParryMaskPlanted;                                  // 0x1CE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      PlanterCharacter;                                  // 0x1CE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              DestroySound;                                      // 0x1CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PlaceableArrayName;                                // 0x1CF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxPlaceables;                                     // 0x1D00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PaviseShield(int32 EntryPoint);
	void UpdateEquipmentState();
	void OnHeldInteractionStart(class AMordhauCharacter* Character);
	void OnAmmoChanged();
	void PlanterDied(class AAdvancedCharacter* Character);
	void PlanterDestroyed(class AAdvancedCharacter* Character);
	void BndEvt__MovementBlocker_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void OnInteractionStart(class AMordhauCharacter* Character);
	void OnLoadedChanged();
	void FireProjectile(const struct FVector& Origin, const struct FRotator& Orientation, class AController* OwningController, float ExpectedDelay);
	void ValidatePlantSpot(const struct FVector& PlantLocation, const struct FRotator& CameraRotation1P, bool* Succeeded, struct FVector* Location, struct FRotator* Rotation, class USceneComponent** AttachToComponent);
	bool ShouldShine();
	bool OnRequestFire(class AMordhauCharacter* Character);
	void HandleTakeDamage(float Damage);

	bool CanInteract(class AMordhauCharacter* Character) const;
	bool CanHeldInteract(class AMordhauCharacter* Character) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PaviseShield_C">();
	}
	static class ABP_PaviseShield_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PaviseShield_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_PaviseShield_C) == 0x000010, "Wrong alignment on ABP_PaviseShield_C");
static_assert(sizeof(ABP_PaviseShield_C) == 0x001D10, "Wrong size on ABP_PaviseShield_C");
static_assert(offsetof(ABP_PaviseShield_C, UberGraphFrame_BP_PaviseShield_C) == 0x001CB8, "Member 'ABP_PaviseShield_C::UberGraphFrame_BP_PaviseShield_C' has a wrong offset!");
static_assert(offsetof(ABP_PaviseShield_C, BuildingSystem) == 0x001CC0, "Member 'ABP_PaviseShield_C::BuildingSystem' has a wrong offset!");
static_assert(offsetof(ABP_PaviseShield_C, MovementBlocker) == 0x001CC8, "Member 'ABP_PaviseShield_C::MovementBlocker' has a wrong offset!");
static_assert(offsetof(ABP_PaviseShield_C, PlanterController) == 0x001CD0, "Member 'ABP_PaviseShield_C::PlanterController' has a wrong offset!");
static_assert(offsetof(ABP_PaviseShield_C, ReceivedDamage) == 0x001CD8, "Member 'ABP_PaviseShield_C::ReceivedDamage' has a wrong offset!");
static_assert(offsetof(ABP_PaviseShield_C, DamageToDestroy) == 0x001CDC, "Member 'ABP_PaviseShield_C::DamageToDestroy' has a wrong offset!");
static_assert(offsetof(ABP_PaviseShield_C, ParryMaskUnplanted) == 0x001CE0, "Member 'ABP_PaviseShield_C::ParryMaskUnplanted' has a wrong offset!");
static_assert(offsetof(ABP_PaviseShield_C, ParryMaskPlanted) == 0x001CE4, "Member 'ABP_PaviseShield_C::ParryMaskPlanted' has a wrong offset!");
static_assert(offsetof(ABP_PaviseShield_C, PlanterCharacter) == 0x001CE8, "Member 'ABP_PaviseShield_C::PlanterCharacter' has a wrong offset!");
static_assert(offsetof(ABP_PaviseShield_C, DestroySound) == 0x001CF0, "Member 'ABP_PaviseShield_C::DestroySound' has a wrong offset!");
static_assert(offsetof(ABP_PaviseShield_C, PlaceableArrayName) == 0x001CF8, "Member 'ABP_PaviseShield_C::PlaceableArrayName' has a wrong offset!");
static_assert(offsetof(ABP_PaviseShield_C, MaxPlaceables) == 0x001D00, "Member 'ABP_PaviseShield_C::MaxPlaceables' has a wrong offset!");

}

