#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EquipmentSlotEntry

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function BP_EquipmentSlotEntry.BP_EquipmentSlotEntry_C.ExecuteUbergraph_BP_EquipmentSlotEntry
// 0x0004 (0x0004 - 0x0000)
struct BP_EquipmentSlotEntry_C_ExecuteUbergraph_BP_EquipmentSlotEntry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EquipmentSlotEntry_C_ExecuteUbergraph_BP_EquipmentSlotEntry) == 0x000004, "Wrong alignment on BP_EquipmentSlotEntry_C_ExecuteUbergraph_BP_EquipmentSlotEntry");
static_assert(sizeof(BP_EquipmentSlotEntry_C_ExecuteUbergraph_BP_EquipmentSlotEntry) == 0x000004, "Wrong size on BP_EquipmentSlotEntry_C_ExecuteUbergraph_BP_EquipmentSlotEntry");
static_assert(offsetof(BP_EquipmentSlotEntry_C_ExecuteUbergraph_BP_EquipmentSlotEntry, EntryPoint) == 0x000000, "Member 'BP_EquipmentSlotEntry_C_ExecuteUbergraph_BP_EquipmentSlotEntry::EntryPoint' has a wrong offset!");

// Function BP_EquipmentSlotEntry.BP_EquipmentSlotEntry_C.Update
// 0x0080 (0x0080 - 0x0000)
struct BP_EquipmentSlotEntry_C_Update final
{
public:
	class FText                                   Equipment_Name_0;                                  // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	int32                                         Slot_0;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable;                                // 0x0020(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0038(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0050(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0068(0x0018)()
};
static_assert(alignof(BP_EquipmentSlotEntry_C_Update) == 0x000008, "Wrong alignment on BP_EquipmentSlotEntry_C_Update");
static_assert(sizeof(BP_EquipmentSlotEntry_C_Update) == 0x000080, "Wrong size on BP_EquipmentSlotEntry_C_Update");
static_assert(offsetof(BP_EquipmentSlotEntry_C_Update, Equipment_Name_0) == 0x000000, "Member 'BP_EquipmentSlotEntry_C_Update::Equipment_Name_0' has a wrong offset!");
static_assert(offsetof(BP_EquipmentSlotEntry_C_Update, Slot_0) == 0x000018, "Member 'BP_EquipmentSlotEntry_C_Update::Slot_0' has a wrong offset!");
static_assert(offsetof(BP_EquipmentSlotEntry_C_Update, Temp_int_Variable) == 0x00001C, "Member 'BP_EquipmentSlotEntry_C_Update::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_EquipmentSlotEntry_C_Update, Temp_text_Variable) == 0x000020, "Member 'BP_EquipmentSlotEntry_C_Update::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_EquipmentSlotEntry_C_Update, Temp_text_Variable_1) == 0x000038, "Member 'BP_EquipmentSlotEntry_C_Update::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_EquipmentSlotEntry_C_Update, Temp_text_Variable_2) == 0x000050, "Member 'BP_EquipmentSlotEntry_C_Update::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_EquipmentSlotEntry_C_Update, K2Node_Select_Default) == 0x000068, "Member 'BP_EquipmentSlotEntry_C_Update::K2Node_Select_Default' has a wrong offset!");

// Function BP_EquipmentSlotEntry.BP_EquipmentSlotEntry_C.GetVisibility_0
// 0x0006 (0x0006 - 0x0000)
struct BP_EquipmentSlotEntry_C_GetVisibility_0 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHovered_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EquipmentSlotEntry_C_GetVisibility_0) == 0x000001, "Wrong alignment on BP_EquipmentSlotEntry_C_GetVisibility_0");
static_assert(sizeof(BP_EquipmentSlotEntry_C_GetVisibility_0) == 0x000006, "Wrong size on BP_EquipmentSlotEntry_C_GetVisibility_0");
static_assert(offsetof(BP_EquipmentSlotEntry_C_GetVisibility_0, ReturnValue) == 0x000000, "Member 'BP_EquipmentSlotEntry_C_GetVisibility_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EquipmentSlotEntry_C_GetVisibility_0, Temp_bool_Variable) == 0x000001, "Member 'BP_EquipmentSlotEntry_C_GetVisibility_0::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_EquipmentSlotEntry_C_GetVisibility_0, Temp_byte_Variable) == 0x000002, "Member 'BP_EquipmentSlotEntry_C_GetVisibility_0::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_EquipmentSlotEntry_C_GetVisibility_0, Temp_byte_Variable_1) == 0x000003, "Member 'BP_EquipmentSlotEntry_C_GetVisibility_0::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_EquipmentSlotEntry_C_GetVisibility_0, CallFunc_IsHovered_ReturnValue) == 0x000004, "Member 'BP_EquipmentSlotEntry_C_GetVisibility_0::CallFunc_IsHovered_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EquipmentSlotEntry_C_GetVisibility_0, K2Node_Select_Default) == 0x000005, "Member 'BP_EquipmentSlotEntry_C_GetVisibility_0::K2Node_Select_Default' has a wrong offset!");

// Function BP_EquipmentSlotEntry.BP_EquipmentSlotEntry_C.HideIfMinimal_Visibility
// 0x0005 (0x0005 - 0x0000)
struct BP_EquipmentSlotEntry_C_HideIfMinimal_Visibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_EquipmentSlotEntry_C_HideIfMinimal_Visibility) == 0x000001, "Wrong alignment on BP_EquipmentSlotEntry_C_HideIfMinimal_Visibility");
static_assert(sizeof(BP_EquipmentSlotEntry_C_HideIfMinimal_Visibility) == 0x000005, "Wrong size on BP_EquipmentSlotEntry_C_HideIfMinimal_Visibility");
static_assert(offsetof(BP_EquipmentSlotEntry_C_HideIfMinimal_Visibility, ReturnValue) == 0x000000, "Member 'BP_EquipmentSlotEntry_C_HideIfMinimal_Visibility::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_EquipmentSlotEntry_C_HideIfMinimal_Visibility, Temp_bool_Variable) == 0x000001, "Member 'BP_EquipmentSlotEntry_C_HideIfMinimal_Visibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_EquipmentSlotEntry_C_HideIfMinimal_Visibility, Temp_byte_Variable) == 0x000002, "Member 'BP_EquipmentSlotEntry_C_HideIfMinimal_Visibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_EquipmentSlotEntry_C_HideIfMinimal_Visibility, Temp_byte_Variable_1) == 0x000003, "Member 'BP_EquipmentSlotEntry_C_HideIfMinimal_Visibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_EquipmentSlotEntry_C_HideIfMinimal_Visibility, K2Node_Select_Default) == 0x000004, "Member 'BP_EquipmentSlotEntry_C_HideIfMinimal_Visibility::K2Node_Select_Default' has a wrong offset!");

}

