#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkillTreeEntry

#include "Basic.hpp"

#include "S_SkillTreeEntry_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_classes.hpp"
#include "E_HordeSkill_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_SkillTreeEntry.BP_SkillTreeEntry_C
// 0x00E8 (0x0348 - 0x0260)
class UBP_SkillTreeEntry_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UWidgetAnimation*                       HoverAnim;                                         // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBP_SkillTreeBranch_C*                  BP_SkillTreeBranch;                                // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_SkillTreeBranch_C*                  BP_SkillTreeBranch_3;                              // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 EntryIconImage;                                    // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_0;                                   // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_0;                                           // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_8;                                           // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               ParentContainer;                                   // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_0;                                         // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_0;                                       // 0x02B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTexture2D*                             Skill_Tree_Entry_Icon;                             // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_SkillTreeBranch_C*>          TreeBranches;                                      // 0x02C0(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class FText                                   Skill_Tree_Entry_Name;                             // 0x02D0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLinearColor                           Active_Color;                                      // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Neutral_Color;                                     // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_SkillTreeEntry                      Skill_Tree_Entry_Struct;                           // 0x0308(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UBP_SkillTreeNode_C*                    Parent_Node;                                       // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_HordeSkill                                  ParentSkill;                                       // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SkillTreeEntry(int32 EntryPoint);
	void Construct();
	void AddBranch(class UBP_SkillTreeBranch_C** Branch);
	void Clear_Branches();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SkillTreeEntry_C">();
	}
	static class UBP_SkillTreeEntry_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_SkillTreeEntry_C>();
	}
};
static_assert(alignof(UBP_SkillTreeEntry_C) == 0x000008, "Wrong alignment on UBP_SkillTreeEntry_C");
static_assert(sizeof(UBP_SkillTreeEntry_C) == 0x000348, "Wrong size on UBP_SkillTreeEntry_C");
static_assert(offsetof(UBP_SkillTreeEntry_C, UberGraphFrame) == 0x000260, "Member 'UBP_SkillTreeEntry_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeEntry_C, HoverAnim) == 0x000268, "Member 'UBP_SkillTreeEntry_C::HoverAnim' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeEntry_C, BP_SkillTreeBranch) == 0x000270, "Member 'UBP_SkillTreeEntry_C::BP_SkillTreeBranch' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeEntry_C, BP_SkillTreeBranch_3) == 0x000278, "Member 'UBP_SkillTreeEntry_C::BP_SkillTreeBranch_3' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeEntry_C, EntryIconImage) == 0x000280, "Member 'UBP_SkillTreeEntry_C::EntryIconImage' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeEntry_C, HorizontalBox_0) == 0x000288, "Member 'UBP_SkillTreeEntry_C::HorizontalBox_0' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeEntry_C, Image_0) == 0x000290, "Member 'UBP_SkillTreeEntry_C::Image_0' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeEntry_C, Image_8) == 0x000298, "Member 'UBP_SkillTreeEntry_C::Image_8' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeEntry_C, ParentContainer) == 0x0002A0, "Member 'UBP_SkillTreeEntry_C::ParentContainer' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeEntry_C, SizeBox_0) == 0x0002A8, "Member 'UBP_SkillTreeEntry_C::SizeBox_0' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeEntry_C, TextBlock_0) == 0x0002B0, "Member 'UBP_SkillTreeEntry_C::TextBlock_0' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeEntry_C, Skill_Tree_Entry_Icon) == 0x0002B8, "Member 'UBP_SkillTreeEntry_C::Skill_Tree_Entry_Icon' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeEntry_C, TreeBranches) == 0x0002C0, "Member 'UBP_SkillTreeEntry_C::TreeBranches' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeEntry_C, Skill_Tree_Entry_Name) == 0x0002D0, "Member 'UBP_SkillTreeEntry_C::Skill_Tree_Entry_Name' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeEntry_C, Active_Color) == 0x0002E8, "Member 'UBP_SkillTreeEntry_C::Active_Color' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeEntry_C, Neutral_Color) == 0x0002F8, "Member 'UBP_SkillTreeEntry_C::Neutral_Color' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeEntry_C, Skill_Tree_Entry_Struct) == 0x000308, "Member 'UBP_SkillTreeEntry_C::Skill_Tree_Entry_Struct' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeEntry_C, Parent_Node) == 0x000338, "Member 'UBP_SkillTreeEntry_C::Parent_Node' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeEntry_C, ParentSkill) == 0x000340, "Member 'UBP_SkillTreeEntry_C::ParentSkill' has a wrong offset!");

}

