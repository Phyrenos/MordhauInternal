#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HordeSellVendorBase

#include "Basic.hpp"

#include "E_GoblinSellerState_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_MordhauActor_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HordeSellVendorBase.BP_HordeSellVendorBase_C
// 0x0080 (0x0460 - 0x03E0)
class ABP_HordeSellVendorBase_C final : public ABP_MordhauActor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class USkeletalMeshComponent*                 SMC_Goblin;                                        // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UMordhauWidgetComponent*                IndicatorWidget;                                   // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UMordhauWidgetComponent*                SellWidget;                                        // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SMC_SellerWagon;                                   // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          IsAvailable;                                       // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_409[0x3];                                      // 0x0409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PurchaseDiscount;                                  // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FText>                           NotSellableEquipment;                              // 0x0410(0x0010)(Edit, BlueprintVisible)
	TArray<class ABP_HordePurchasable_C*>         AllEquipmentSold;                                  // 0x0420(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         TotalCoinsEarned;                                  // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DisplayName;                                       // 0x0434(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              SellSoundCue;                                      // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_GoblinSellerState                           SellerState;                                       // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_449[0x3];                                      // 0x0449(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NearestCharacterDistance;                          // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDistanceToOpen;                                 // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsVendorHidden;                                    // 0x0454(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_455[0x3];                                      // 0x0455(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnavailableTime;                                   // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PurchaseChestDiscount;                             // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_HordeSellVendorBase(int32 EntryPoint);
	void OnSelectNextAvailableEquipment(class AMordhauCharacter* MordhauCharacter);
	void MakeSellerAvailable();
	void OnHeldInteractionStart(class AMordhauCharacter* Character);
	void ReceiveBeginPlay();
	void UpdateVisuals();
	void New_IsAvailable(bool IsAvailable_0);
	void GetEquippedItemPrice(class ABP_HordePlayerController_C* HordePlayerController, int32* Price);
	void RemoveEquipment(class AMordhauCharacter* Character, bool* IsEquipmentRemovedSuccesfully);
	void CheckPlayerProximity();
	void UpdateSellerAnimationState();
	void OnRep_IsVendorHidden();

	void Get_First_Equipment_Item(class AMordhauCharacter* Character, class AMordhauEquipment** MordhauEquipment) const;
	void IsEquipmentNotInBanList(const class FText& InEquipmentName, bool* IsEquipmentSellable_0) const;
	void GetPurchasableEquipmentItem(const class FText& Equipment_Name, class ABP_HordePurchasable_C** PurchasableItem, bool* IsItemFromChest, class FText* ChestItemName, int32* ChestCost) const;
	bool CanHeldInteract(class AMordhauCharacter* Character) const;
	bool IsEquipmentSellable(class AMordhauCharacter* Character) const;
	bool CanInteract(class AMordhauCharacter* Character) const;
	void GetPurchasableNew(class AMordhauEquipment* Mordhau_Equipment, bool* Sellable, int32* Base_Cost) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HordeSellVendorBase_C">();
	}
	static class ABP_HordeSellVendorBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HordeSellVendorBase_C>();
	}
};
static_assert(alignof(ABP_HordeSellVendorBase_C) == 0x000010, "Wrong alignment on ABP_HordeSellVendorBase_C");
static_assert(sizeof(ABP_HordeSellVendorBase_C) == 0x000460, "Wrong size on ABP_HordeSellVendorBase_C");
static_assert(offsetof(ABP_HordeSellVendorBase_C, UberGraphFrame) == 0x0003E0, "Member 'ABP_HordeSellVendorBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HordeSellVendorBase_C, SMC_Goblin) == 0x0003E8, "Member 'ABP_HordeSellVendorBase_C::SMC_Goblin' has a wrong offset!");
static_assert(offsetof(ABP_HordeSellVendorBase_C, IndicatorWidget) == 0x0003F0, "Member 'ABP_HordeSellVendorBase_C::IndicatorWidget' has a wrong offset!");
static_assert(offsetof(ABP_HordeSellVendorBase_C, SellWidget) == 0x0003F8, "Member 'ABP_HordeSellVendorBase_C::SellWidget' has a wrong offset!");
static_assert(offsetof(ABP_HordeSellVendorBase_C, SMC_SellerWagon) == 0x000400, "Member 'ABP_HordeSellVendorBase_C::SMC_SellerWagon' has a wrong offset!");
static_assert(offsetof(ABP_HordeSellVendorBase_C, IsAvailable) == 0x000408, "Member 'ABP_HordeSellVendorBase_C::IsAvailable' has a wrong offset!");
static_assert(offsetof(ABP_HordeSellVendorBase_C, PurchaseDiscount) == 0x00040C, "Member 'ABP_HordeSellVendorBase_C::PurchaseDiscount' has a wrong offset!");
static_assert(offsetof(ABP_HordeSellVendorBase_C, NotSellableEquipment) == 0x000410, "Member 'ABP_HordeSellVendorBase_C::NotSellableEquipment' has a wrong offset!");
static_assert(offsetof(ABP_HordeSellVendorBase_C, AllEquipmentSold) == 0x000420, "Member 'ABP_HordeSellVendorBase_C::AllEquipmentSold' has a wrong offset!");
static_assert(offsetof(ABP_HordeSellVendorBase_C, TotalCoinsEarned) == 0x000430, "Member 'ABP_HordeSellVendorBase_C::TotalCoinsEarned' has a wrong offset!");
static_assert(offsetof(ABP_HordeSellVendorBase_C, DisplayName) == 0x000434, "Member 'ABP_HordeSellVendorBase_C::DisplayName' has a wrong offset!");
static_assert(offsetof(ABP_HordeSellVendorBase_C, SellSoundCue) == 0x000440, "Member 'ABP_HordeSellVendorBase_C::SellSoundCue' has a wrong offset!");
static_assert(offsetof(ABP_HordeSellVendorBase_C, SellerState) == 0x000448, "Member 'ABP_HordeSellVendorBase_C::SellerState' has a wrong offset!");
static_assert(offsetof(ABP_HordeSellVendorBase_C, NearestCharacterDistance) == 0x00044C, "Member 'ABP_HordeSellVendorBase_C::NearestCharacterDistance' has a wrong offset!");
static_assert(offsetof(ABP_HordeSellVendorBase_C, MaxDistanceToOpen) == 0x000450, "Member 'ABP_HordeSellVendorBase_C::MaxDistanceToOpen' has a wrong offset!");
static_assert(offsetof(ABP_HordeSellVendorBase_C, IsVendorHidden) == 0x000454, "Member 'ABP_HordeSellVendorBase_C::IsVendorHidden' has a wrong offset!");
static_assert(offsetof(ABP_HordeSellVendorBase_C, UnavailableTime) == 0x000458, "Member 'ABP_HordeSellVendorBase_C::UnavailableTime' has a wrong offset!");
static_assert(offsetof(ABP_HordeSellVendorBase_C, PurchaseChestDiscount) == 0x00045C, "Member 'ABP_HordeSellVendorBase_C::PurchaseChestDiscount' has a wrong offset!");

}

