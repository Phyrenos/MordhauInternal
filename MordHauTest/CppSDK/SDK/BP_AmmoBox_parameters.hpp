#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AmmoBox

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_AmmoBox.BP_AmmoBox_C.ExecuteUbergraph_BP_AmmoBox
// 0x0018 (0x0018 - 0x0000)
struct BP_AmmoBox_C_ExecuteUbergraph_BP_AmmoBox final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      K2Node_Event_Character;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           K2Node_Event_PlayerState;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AmmoBox_C_ExecuteUbergraph_BP_AmmoBox) == 0x000008, "Wrong alignment on BP_AmmoBox_C_ExecuteUbergraph_BP_AmmoBox");
static_assert(sizeof(BP_AmmoBox_C_ExecuteUbergraph_BP_AmmoBox) == 0x000018, "Wrong size on BP_AmmoBox_C_ExecuteUbergraph_BP_AmmoBox");
static_assert(offsetof(BP_AmmoBox_C_ExecuteUbergraph_BP_AmmoBox, EntryPoint) == 0x000000, "Member 'BP_AmmoBox_C_ExecuteUbergraph_BP_AmmoBox::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AmmoBox_C_ExecuteUbergraph_BP_AmmoBox, K2Node_Event_Character) == 0x000008, "Member 'BP_AmmoBox_C_ExecuteUbergraph_BP_AmmoBox::K2Node_Event_Character' has a wrong offset!");
static_assert(offsetof(BP_AmmoBox_C_ExecuteUbergraph_BP_AmmoBox, K2Node_Event_PlayerState) == 0x000010, "Member 'BP_AmmoBox_C_ExecuteUbergraph_BP_AmmoBox::K2Node_Event_PlayerState' has a wrong offset!");

// Function BP_AmmoBox.BP_AmmoBox_C.Deplete
// 0x0008 (0x0008 - 0x0000)
struct BP_AmmoBox_C_Deplete final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AmmoBox_C_Deplete) == 0x000008, "Wrong alignment on BP_AmmoBox_C_Deplete");
static_assert(sizeof(BP_AmmoBox_C_Deplete) == 0x000008, "Wrong size on BP_AmmoBox_C_Deplete");
static_assert(offsetof(BP_AmmoBox_C_Deplete, PlayerState) == 0x000000, "Member 'BP_AmmoBox_C_Deplete::PlayerState' has a wrong offset!");

// Function BP_AmmoBox.BP_AmmoBox_C.AvailableInteractionStart
// 0x0008 (0x0008 - 0x0000)
struct BP_AmmoBox_C_AvailableInteractionStart final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AmmoBox_C_AvailableInteractionStart) == 0x000008, "Wrong alignment on BP_AmmoBox_C_AvailableInteractionStart");
static_assert(sizeof(BP_AmmoBox_C_AvailableInteractionStart) == 0x000008, "Wrong size on BP_AmmoBox_C_AvailableInteractionStart");
static_assert(offsetof(BP_AmmoBox_C_AvailableInteractionStart, Character) == 0x000000, "Member 'BP_AmmoBox_C_AvailableInteractionStart::Character' has a wrong offset!");

// Function BP_AmmoBox.BP_AmmoBox_C.Restock
// 0x0030 (0x0030 - 0x0000)
struct BP_AmmoBox_C_Restock final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Restocked;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTimeSeconds_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RestockEquipmentFromAmmoBox_ReturnValue;  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetControllerIncludingVehicle_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MordhauPlayerController_C*          K2Node_DynamicCast_AsBP_Mordhau_Player_Controller; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Add_ByteByte_ReturnValue;                 // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AmmoBox_C_Restock) == 0x000008, "Wrong alignment on BP_AmmoBox_C_Restock");
static_assert(sizeof(BP_AmmoBox_C_Restock) == 0x000030, "Wrong size on BP_AmmoBox_C_Restock");
static_assert(offsetof(BP_AmmoBox_C_Restock, Character) == 0x000000, "Member 'BP_AmmoBox_C_Restock::Character' has a wrong offset!");
static_assert(offsetof(BP_AmmoBox_C_Restock, Restocked) == 0x000008, "Member 'BP_AmmoBox_C_Restock::Restocked' has a wrong offset!");
static_assert(offsetof(BP_AmmoBox_C_Restock, CallFunc_GetTimeSeconds_ReturnValue) == 0x00000C, "Member 'BP_AmmoBox_C_Restock::CallFunc_GetTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AmmoBox_C_Restock, CallFunc_RestockEquipmentFromAmmoBox_ReturnValue) == 0x000010, "Member 'BP_AmmoBox_C_Restock::CallFunc_RestockEquipmentFromAmmoBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AmmoBox_C_Restock, CallFunc_GetControllerIncludingVehicle_ReturnValue) == 0x000018, "Member 'BP_AmmoBox_C_Restock::CallFunc_GetControllerIncludingVehicle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AmmoBox_C_Restock, K2Node_DynamicCast_AsBP_Mordhau_Player_Controller) == 0x000020, "Member 'BP_AmmoBox_C_Restock::K2Node_DynamicCast_AsBP_Mordhau_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_AmmoBox_C_Restock, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_AmmoBox_C_Restock::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AmmoBox_C_Restock, CallFunc_Less_FloatFloat_ReturnValue) == 0x000029, "Member 'BP_AmmoBox_C_Restock::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AmmoBox_C_Restock, CallFunc_Add_ByteByte_ReturnValue) == 0x00002A, "Member 'BP_AmmoBox_C_Restock::CallFunc_Add_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_AmmoBox.BP_AmmoBox_C.UpdateWidgetVisibilityOverride
// 0x0020 (0x0020 - 0x0000)
struct BP_AmmoBox_C_UpdateWidgetVisibilityOverride final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MordhauPlayerController_C*          K2Node_DynamicCast_AsBP_Mordhau_Player_Controller; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AmmoBox_C_UpdateWidgetVisibilityOverride) == 0x000008, "Wrong alignment on BP_AmmoBox_C_UpdateWidgetVisibilityOverride");
static_assert(sizeof(BP_AmmoBox_C_UpdateWidgetVisibilityOverride) == 0x000020, "Wrong size on BP_AmmoBox_C_UpdateWidgetVisibilityOverride");
static_assert(offsetof(BP_AmmoBox_C_UpdateWidgetVisibilityOverride, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'BP_AmmoBox_C_UpdateWidgetVisibilityOverride::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AmmoBox_C_UpdateWidgetVisibilityOverride, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'BP_AmmoBox_C_UpdateWidgetVisibilityOverride::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AmmoBox_C_UpdateWidgetVisibilityOverride, K2Node_DynamicCast_AsBP_Mordhau_Player_Controller) == 0x000010, "Member 'BP_AmmoBox_C_UpdateWidgetVisibilityOverride::K2Node_DynamicCast_AsBP_Mordhau_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_AmmoBox_C_UpdateWidgetVisibilityOverride, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AmmoBox_C_UpdateWidgetVisibilityOverride::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AmmoBox_C_UpdateWidgetVisibilityOverride, CallFunc_BooleanAND_ReturnValue) == 0x000019, "Member 'BP_AmmoBox_C_UpdateWidgetVisibilityOverride::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_AmmoBox.BP_AmmoBox_C.CanInteract
// 0x0030 (0x0030 - 0x0000)
struct BP_AmmoBox_C_CanInteract final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanInteract_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauPlayerController*               K2Node_DynamicCast_AsMordhau_Player_Controller;    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocalPlayerController_ReturnValue;      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AmmoBox_C_CanInteract) == 0x000008, "Wrong alignment on BP_AmmoBox_C_CanInteract");
static_assert(sizeof(BP_AmmoBox_C_CanInteract) == 0x000030, "Wrong size on BP_AmmoBox_C_CanInteract");
static_assert(offsetof(BP_AmmoBox_C_CanInteract, Character) == 0x000000, "Member 'BP_AmmoBox_C_CanInteract::Character' has a wrong offset!");
static_assert(offsetof(BP_AmmoBox_C_CanInteract, ReturnValue) == 0x000008, "Member 'BP_AmmoBox_C_CanInteract::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AmmoBox_C_CanInteract, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'BP_AmmoBox_C_CanInteract::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AmmoBox_C_CanInteract, CallFunc_CanInteract_ReturnValue) == 0x000018, "Member 'BP_AmmoBox_C_CanInteract::CallFunc_CanInteract_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AmmoBox_C_CanInteract, K2Node_DynamicCast_AsMordhau_Player_Controller) == 0x000020, "Member 'BP_AmmoBox_C_CanInteract::K2Node_DynamicCast_AsMordhau_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_AmmoBox_C_CanInteract, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_AmmoBox_C_CanInteract::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AmmoBox_C_CanInteract, CallFunc_IsLocalPlayerController_ReturnValue) == 0x000029, "Member 'BP_AmmoBox_C_CanInteract::CallFunc_IsLocalPlayerController_ReturnValue' has a wrong offset!");

}

