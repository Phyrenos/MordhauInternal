#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ColorPickerElement

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_ColorPickerElement.BP_ColorPickerElement_C
// 0x00B0 (0x0310 - 0x0260)
class UBP_ColorPickerElement_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UBorder*                                Border;                                            // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                ImageButton;                                       // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 lock;                                              // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_0;                                         // 0x0280(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             RankText;                                          // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_13658;                                     // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_ColorPickerContainer_C*             Parent;                                            // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HoverBorderColor;                                  // 0x02A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NormalBorderColor;                                 // 0x02B4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SelectedBorderColor;                               // 0x02C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Color_Name;                                        // 0x02D8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Locked;                                            // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Tooltip;                                           // 0x02F8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_ColorPickerElement(int32 EntryPoint);
	void BndEvt__ImageButton_K2Node_ComponentBoundEvent_2238_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__ImageButton_K2Node_ComponentBoundEvent_9595_OnButtonClickedEvent__DelegateSignature();
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void Construct();
	void SetColor(const struct FLinearColor& Color);
	void SetData(int32 Param_Index_0);
	void IsSelectedElement(bool* Value);
	class FText Get_ImageButton_ToolTipText_0();
	ESlateVisibility Get_Lock_Visibility_0();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ColorPickerElement_C">();
	}
	static class UBP_ColorPickerElement_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_ColorPickerElement_C>();
	}
};
static_assert(alignof(UBP_ColorPickerElement_C) == 0x000008, "Wrong alignment on UBP_ColorPickerElement_C");
static_assert(sizeof(UBP_ColorPickerElement_C) == 0x000310, "Wrong size on UBP_ColorPickerElement_C");
static_assert(offsetof(UBP_ColorPickerElement_C, UberGraphFrame) == 0x000260, "Member 'UBP_ColorPickerElement_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_ColorPickerElement_C, Border) == 0x000268, "Member 'UBP_ColorPickerElement_C::Border' has a wrong offset!");
static_assert(offsetof(UBP_ColorPickerElement_C, ImageButton) == 0x000270, "Member 'UBP_ColorPickerElement_C::ImageButton' has a wrong offset!");
static_assert(offsetof(UBP_ColorPickerElement_C, lock) == 0x000278, "Member 'UBP_ColorPickerElement_C::lock' has a wrong offset!");
static_assert(offsetof(UBP_ColorPickerElement_C, Overlay_0) == 0x000280, "Member 'UBP_ColorPickerElement_C::Overlay_0' has a wrong offset!");
static_assert(offsetof(UBP_ColorPickerElement_C, RankText) == 0x000288, "Member 'UBP_ColorPickerElement_C::RankText' has a wrong offset!");
static_assert(offsetof(UBP_ColorPickerElement_C, SizeBox_13658) == 0x000290, "Member 'UBP_ColorPickerElement_C::SizeBox_13658' has a wrong offset!");
static_assert(offsetof(UBP_ColorPickerElement_C, Parent) == 0x000298, "Member 'UBP_ColorPickerElement_C::Parent' has a wrong offset!");
static_assert(offsetof(UBP_ColorPickerElement_C, Index_0) == 0x0002A0, "Member 'UBP_ColorPickerElement_C::Index_0' has a wrong offset!");
static_assert(offsetof(UBP_ColorPickerElement_C, HoverBorderColor) == 0x0002A4, "Member 'UBP_ColorPickerElement_C::HoverBorderColor' has a wrong offset!");
static_assert(offsetof(UBP_ColorPickerElement_C, NormalBorderColor) == 0x0002B4, "Member 'UBP_ColorPickerElement_C::NormalBorderColor' has a wrong offset!");
static_assert(offsetof(UBP_ColorPickerElement_C, SelectedBorderColor) == 0x0002C4, "Member 'UBP_ColorPickerElement_C::SelectedBorderColor' has a wrong offset!");
static_assert(offsetof(UBP_ColorPickerElement_C, Color_Name) == 0x0002D8, "Member 'UBP_ColorPickerElement_C::Color_Name' has a wrong offset!");
static_assert(offsetof(UBP_ColorPickerElement_C, Locked) == 0x0002F0, "Member 'UBP_ColorPickerElement_C::Locked' has a wrong offset!");
static_assert(offsetof(UBP_ColorPickerElement_C, Tooltip) == 0x0002F8, "Member 'UBP_ColorPickerElement_C::Tooltip' has a wrong offset!");

}

