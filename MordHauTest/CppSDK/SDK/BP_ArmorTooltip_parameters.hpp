#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ArmorTooltip

#include "Basic.hpp"

#include "Mordhau_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function BP_ArmorTooltip.BP_ArmorTooltip_C.Update Tooltip
// 0x0178 (0x0178 - 0x0000)
struct BP_ArmorTooltip_C_Update_Tooltip final
{
public:
	uint8                                         Armor_Class;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Wearable_Name;                                     // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	EWearableSlot                                 Slot_0;                                            // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsEquipped;                                       // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bCanAfford;                                        // 0x0022(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemCost;                                          // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsLocked;                                         // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Gold_Requirement;                                  // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Rank_Requirement;                                  // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsDLC;                                            // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauEquipment*                      Current_Equipment;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWearableSlot                                 Temp_byte_Variable_4;                              // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_9;                              // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_10;                             // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_11;                             // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_12;                             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_13;                             // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_14;                             // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_15;                             // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWearableSlot                                 Temp_byte_Variable_16;                             // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0058(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0070(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0088(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x00A0(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x00B8(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x00D0(0x0018)()
	class FText                                   Temp_text_Variable_6;                              // 0x00E8(0x0018)()
	class FText                                   Temp_text_Variable_7;                              // 0x0100(0x0018)()
	class FText                                   Temp_text_Variable_8;                              // 0x0118(0x0018)()
	class FText                                   Temp_text_Variable_9;                              // 0x0130(0x0018)()
	class FText                                   Temp_text_Variable_10;                             // 0x0148(0x0018)()
	class FText                                   K2Node_Select_Default_3;                           // 0x0160(0x0018)()
};
static_assert(alignof(BP_ArmorTooltip_C_Update_Tooltip) == 0x000008, "Wrong alignment on BP_ArmorTooltip_C_Update_Tooltip");
static_assert(sizeof(BP_ArmorTooltip_C_Update_Tooltip) == 0x000178, "Wrong size on BP_ArmorTooltip_C_Update_Tooltip");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Armor_Class) == 0x000000, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Armor_Class' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Wearable_Name) == 0x000008, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Wearable_Name' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Slot_0) == 0x000020, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Slot_0' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, bIsEquipped) == 0x000021, "Member 'BP_ArmorTooltip_C_Update_Tooltip::bIsEquipped' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, bCanAfford) == 0x000022, "Member 'BP_ArmorTooltip_C_Update_Tooltip::bCanAfford' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, ItemCost) == 0x000024, "Member 'BP_ArmorTooltip_C_Update_Tooltip::ItemCost' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, bIsLocked) == 0x000028, "Member 'BP_ArmorTooltip_C_Update_Tooltip::bIsLocked' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Gold_Requirement) == 0x00002C, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Gold_Requirement' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Rank_Requirement) == 0x000030, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Rank_Requirement' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, bIsDLC) == 0x000034, "Member 'BP_ArmorTooltip_C_Update_Tooltip::bIsDLC' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Current_Equipment) == 0x000038, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Current_Equipment' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_bool_Variable) == 0x000040, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_byte_Variable) == 0x000041, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_byte_Variable_1) == 0x000042, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_bool_Variable_1) == 0x000043, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, K2Node_Select_Default) == 0x000044, "Member 'BP_ArmorTooltip_C_Update_Tooltip::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_byte_Variable_2) == 0x000045, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_byte_Variable_3) == 0x000046, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_byte_Variable_4) == 0x000047, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, K2Node_Select_Default_1) == 0x000048, "Member 'BP_ArmorTooltip_C_Update_Tooltip::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_byte_Variable_5) == 0x000049, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_byte_Variable_6) == 0x00004A, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_byte_Variable_7) == 0x00004B, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_byte_Variable_8) == 0x00004C, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_byte_Variable_9) == 0x00004D, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_byte_Variable_10) == 0x00004E, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_byte_Variable_11) == 0x00004F, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_byte_Variable_12) == 0x000050, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_byte_Variable_13) == 0x000051, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_byte_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_byte_Variable_14) == 0x000052, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_byte_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_byte_Variable_15) == 0x000053, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_byte_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_byte_Variable_16) == 0x000054, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_byte_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, K2Node_Select_Default_2) == 0x000055, "Member 'BP_ArmorTooltip_C_Update_Tooltip::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_text_Variable) == 0x000058, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_text_Variable_1) == 0x000070, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_text_Variable_2) == 0x000088, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_text_Variable_3) == 0x0000A0, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_text_Variable_4) == 0x0000B8, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_text_Variable_5) == 0x0000D0, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_text_Variable_6) == 0x0000E8, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_text_Variable_7) == 0x000100, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_text_Variable_8) == 0x000118, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_text_Variable_9) == 0x000130, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_text_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, Temp_text_Variable_10) == 0x000148, "Member 'BP_ArmorTooltip_C_Update_Tooltip::Temp_text_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_ArmorTooltip_C_Update_Tooltip, K2Node_Select_Default_3) == 0x000160, "Member 'BP_ArmorTooltip_C_Update_Tooltip::K2Node_Select_Default_3' has a wrong offset!");

}

