#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mordhau

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Mordhau_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "MordhauOnlineSubsystem_structs.hpp"
#include "InputCore_structs.hpp"
#include "AIModule_structs.hpp"
#include "PlayFab_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function Mordhau.RconCommand.CanExecuteCommand
// 0x0028 (0x0028 - 0x0000)
struct RconCommand_CanExecuteCommand final
{
public:
	class FString                                 CommandType;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InCommand;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClientId;                                          // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PacketId;                                          // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RconCommand_CanExecuteCommand) == 0x000008, "Wrong alignment on RconCommand_CanExecuteCommand");
static_assert(sizeof(RconCommand_CanExecuteCommand) == 0x000028, "Wrong size on RconCommand_CanExecuteCommand");
static_assert(offsetof(RconCommand_CanExecuteCommand, CommandType) == 0x000000, "Member 'RconCommand_CanExecuteCommand::CommandType' has a wrong offset!");
static_assert(offsetof(RconCommand_CanExecuteCommand, InCommand) == 0x000010, "Member 'RconCommand_CanExecuteCommand::InCommand' has a wrong offset!");
static_assert(offsetof(RconCommand_CanExecuteCommand, ClientId) == 0x000018, "Member 'RconCommand_CanExecuteCommand::ClientId' has a wrong offset!");
static_assert(offsetof(RconCommand_CanExecuteCommand, PacketId) == 0x00001C, "Member 'RconCommand_CanExecuteCommand::PacketId' has a wrong offset!");
static_assert(offsetof(RconCommand_CanExecuteCommand, ReturnValue) == 0x000020, "Member 'RconCommand_CanExecuteCommand::ReturnValue' has a wrong offset!");

// Function Mordhau.RconCommand.ExecuteCommand
// 0x0028 (0x0028 - 0x0000)
struct RconCommand_ExecuteCommand final
{
public:
	class FString                                 CommandType;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InCommand;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClientId;                                          // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PacketId;                                          // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RconCommand_ExecuteCommand) == 0x000008, "Wrong alignment on RconCommand_ExecuteCommand");
static_assert(sizeof(RconCommand_ExecuteCommand) == 0x000028, "Wrong size on RconCommand_ExecuteCommand");
static_assert(offsetof(RconCommand_ExecuteCommand, CommandType) == 0x000000, "Member 'RconCommand_ExecuteCommand::CommandType' has a wrong offset!");
static_assert(offsetof(RconCommand_ExecuteCommand, InCommand) == 0x000010, "Member 'RconCommand_ExecuteCommand::InCommand' has a wrong offset!");
static_assert(offsetof(RconCommand_ExecuteCommand, ClientId) == 0x000018, "Member 'RconCommand_ExecuteCommand::ClientId' has a wrong offset!");
static_assert(offsetof(RconCommand_ExecuteCommand, PacketId) == 0x00001C, "Member 'RconCommand_ExecuteCommand::PacketId' has a wrong offset!");
static_assert(offsetof(RconCommand_ExecuteCommand, ReturnValue) == 0x000020, "Member 'RconCommand_ExecuteCommand::ReturnValue' has a wrong offset!");

// Function Mordhau.RconCommand.RequestInfo
// 0x0010 (0x0010 - 0x0000)
struct RconCommand_RequestInfo final
{
public:
	int32                                         ClientId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PacketId;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RconCommand_RequestInfo) == 0x000008, "Wrong alignment on RconCommand_RequestInfo");
static_assert(sizeof(RconCommand_RequestInfo) == 0x000010, "Wrong size on RconCommand_RequestInfo");
static_assert(offsetof(RconCommand_RequestInfo, ClientId) == 0x000000, "Member 'RconCommand_RequestInfo::ClientId' has a wrong offset!");
static_assert(offsetof(RconCommand_RequestInfo, PacketId) == 0x000004, "Member 'RconCommand_RequestInfo::PacketId' has a wrong offset!");
static_assert(offsetof(RconCommand_RequestInfo, ReturnValue) == 0x000008, "Member 'RconCommand_RequestInfo::ReturnValue' has a wrong offset!");

// Function Mordhau.RconCommand.SendResponse
// 0x0018 (0x0018 - 0x0000)
struct RconCommand_SendResponse final
{
public:
	class UPlayFabJsonObject*                     ResponseObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClientId;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PacketId;                                          // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RconCommand_SendResponse) == 0x000008, "Wrong alignment on RconCommand_SendResponse");
static_assert(sizeof(RconCommand_SendResponse) == 0x000018, "Wrong size on RconCommand_SendResponse");
static_assert(offsetof(RconCommand_SendResponse, ResponseObject) == 0x000000, "Member 'RconCommand_SendResponse::ResponseObject' has a wrong offset!");
static_assert(offsetof(RconCommand_SendResponse, ClientId) == 0x000008, "Member 'RconCommand_SendResponse::ClientId' has a wrong offset!");
static_assert(offsetof(RconCommand_SendResponse, PacketId) == 0x00000C, "Member 'RconCommand_SendResponse::PacketId' has a wrong offset!");
static_assert(offsetof(RconCommand_SendResponse, ReturnValue) == 0x000010, "Member 'RconCommand_SendResponse::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauMotion.CanInitiateMotion
// 0x0010 (0x0010 - 0x0000)
struct MordhauMotion_CanInitiateMotion final
{
public:
	TSubclassOf<class UMordhauMotion>             NewMotionType;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauMotion_CanInitiateMotion) == 0x000008, "Wrong alignment on MordhauMotion_CanInitiateMotion");
static_assert(sizeof(MordhauMotion_CanInitiateMotion) == 0x000010, "Wrong size on MordhauMotion_CanInitiateMotion");
static_assert(offsetof(MordhauMotion_CanInitiateMotion, NewMotionType) == 0x000000, "Member 'MordhauMotion_CanInitiateMotion::NewMotionType' has a wrong offset!");
static_assert(offsetof(MordhauMotion_CanInitiateMotion, ReturnValue) == 0x000008, "Member 'MordhauMotion_CanInitiateMotion::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauMotion.OnDynamicParamChanged
// 0x0002 (0x0002 - 0x0000)
struct MordhauMotion_OnDynamicParamChanged final
{
public:
	uint8                                         OldValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewValue;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauMotion_OnDynamicParamChanged) == 0x000001, "Wrong alignment on MordhauMotion_OnDynamicParamChanged");
static_assert(sizeof(MordhauMotion_OnDynamicParamChanged) == 0x000002, "Wrong size on MordhauMotion_OnDynamicParamChanged");
static_assert(offsetof(MordhauMotion_OnDynamicParamChanged, OldValue) == 0x000000, "Member 'MordhauMotion_OnDynamicParamChanged::OldValue' has a wrong offset!");
static_assert(offsetof(MordhauMotion_OnDynamicParamChanged, NewValue) == 0x000001, "Member 'MordhauMotion_OnDynamicParamChanged::NewValue' has a wrong offset!");

// Function Mordhau.MordhauMotion.OnLateTick
// 0x0004 (0x0004 - 0x0000)
struct MordhauMotion_OnLateTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauMotion_OnLateTick) == 0x000004, "Wrong alignment on MordhauMotion_OnLateTick");
static_assert(sizeof(MordhauMotion_OnLateTick) == 0x000004, "Wrong size on MordhauMotion_OnLateTick");
static_assert(offsetof(MordhauMotion_OnLateTick, DeltaTime) == 0x000000, "Member 'MordhauMotion_OnLateTick::DeltaTime' has a wrong offset!");

// Function Mordhau.MordhauMotion.OnLeave
// 0x0001 (0x0001 - 0x0000)
struct MordhauMotion_OnLeave final
{
public:
	bool                                          Interrupted;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauMotion_OnLeave) == 0x000001, "Wrong alignment on MordhauMotion_OnLeave");
static_assert(sizeof(MordhauMotion_OnLeave) == 0x000001, "Wrong size on MordhauMotion_OnLeave");
static_assert(offsetof(MordhauMotion_OnLeave, Interrupted) == 0x000000, "Member 'MordhauMotion_OnLeave::Interrupted' has a wrong offset!");

// Function Mordhau.MordhauMotion.OnTick
// 0x0004 (0x0004 - 0x0000)
struct MordhauMotion_OnTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauMotion_OnTick) == 0x000004, "Wrong alignment on MordhauMotion_OnTick");
static_assert(sizeof(MordhauMotion_OnTick) == 0x000004, "Wrong size on MordhauMotion_OnTick");
static_assert(offsetof(MordhauMotion_OnTick, DeltaTime) == 0x000000, "Member 'MordhauMotion_OnTick::DeltaTime' has a wrong offset!");

// Function Mordhau.MordhauMotion.ProcessAttack
// 0x000C (0x000C - 0x0000)
struct MordhauMotion_ProcessAttack final
{
public:
	EAttackMove                                   Move;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Angle;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauMotion_ProcessAttack) == 0x000004, "Wrong alignment on MordhauMotion_ProcessAttack");
static_assert(sizeof(MordhauMotion_ProcessAttack) == 0x00000C, "Wrong size on MordhauMotion_ProcessAttack");
static_assert(offsetof(MordhauMotion_ProcessAttack, Move) == 0x000000, "Member 'MordhauMotion_ProcessAttack::Move' has a wrong offset!");
static_assert(offsetof(MordhauMotion_ProcessAttack, Angle) == 0x000004, "Member 'MordhauMotion_ProcessAttack::Angle' has a wrong offset!");
static_assert(offsetof(MordhauMotion_ProcessAttack, ReturnValue) == 0x000008, "Member 'MordhauMotion_ProcessAttack::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauMotion.ProcessBlock
// 0x0002 (0x0002 - 0x0000)
struct MordhauMotion_ProcessBlock final
{
public:
	EBlockType                                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauMotion_ProcessBlock) == 0x000001, "Wrong alignment on MordhauMotion_ProcessBlock");
static_assert(sizeof(MordhauMotion_ProcessBlock) == 0x000002, "Wrong size on MordhauMotion_ProcessBlock");
static_assert(offsetof(MordhauMotion_ProcessBlock, Type) == 0x000000, "Member 'MordhauMotion_ProcessBlock::Type' has a wrong offset!");
static_assert(offsetof(MordhauMotion_ProcessBlock, ReturnValue) == 0x000001, "Member 'MordhauMotion_ProcessBlock::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauMotion.ProcessFeint
// 0x0001 (0x0001 - 0x0000)
struct MordhauMotion_ProcessFeint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauMotion_ProcessFeint) == 0x000001, "Wrong alignment on MordhauMotion_ProcessFeint");
static_assert(sizeof(MordhauMotion_ProcessFeint) == 0x000001, "Wrong size on MordhauMotion_ProcessFeint");
static_assert(offsetof(MordhauMotion_ProcessFeint, ReturnValue) == 0x000000, "Member 'MordhauMotion_ProcessFeint::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauMotion.GetIsFirstPerson
// 0x0001 (0x0001 - 0x0000)
struct MordhauMotion_GetIsFirstPerson final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauMotion_GetIsFirstPerson) == 0x000001, "Wrong alignment on MordhauMotion_GetIsFirstPerson");
static_assert(sizeof(MordhauMotion_GetIsFirstPerson) == 0x000001, "Wrong size on MordhauMotion_GetIsFirstPerson");
static_assert(offsetof(MordhauMotion_GetIsFirstPerson, ReturnValue) == 0x000000, "Member 'MordhauMotion_GetIsFirstPerson::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauMotion.GetOwner
// 0x0008 (0x0008 - 0x0000)
struct MordhauMotion_GetOwner final
{
public:
	class UMotionSystemComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauMotion_GetOwner) == 0x000008, "Wrong alignment on MordhauMotion_GetOwner");
static_assert(sizeof(MordhauMotion_GetOwner) == 0x000008, "Wrong size on MordhauMotion_GetOwner");
static_assert(offsetof(MordhauMotion_GetOwner, ReturnValue) == 0x000000, "Member 'MordhauMotion_GetOwner::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauMotion.GetOwnerActor
// 0x0008 (0x0008 - 0x0000)
struct MordhauMotion_GetOwnerActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauMotion_GetOwnerActor) == 0x000008, "Wrong alignment on MordhauMotion_GetOwnerActor");
static_assert(sizeof(MordhauMotion_GetOwnerActor) == 0x000008, "Wrong size on MordhauMotion_GetOwnerActor");
static_assert(offsetof(MordhauMotion_GetOwnerActor, ReturnValue) == 0x000000, "Member 'MordhauMotion_GetOwnerActor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauMotion.GetOwnerAdvancedCharacter
// 0x0008 (0x0008 - 0x0000)
struct MordhauMotion_GetOwnerAdvancedCharacter final
{
public:
	class AAdvancedCharacter*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauMotion_GetOwnerAdvancedCharacter) == 0x000008, "Wrong alignment on MordhauMotion_GetOwnerAdvancedCharacter");
static_assert(sizeof(MordhauMotion_GetOwnerAdvancedCharacter) == 0x000008, "Wrong size on MordhauMotion_GetOwnerAdvancedCharacter");
static_assert(offsetof(MordhauMotion_GetOwnerAdvancedCharacter, ReturnValue) == 0x000000, "Member 'MordhauMotion_GetOwnerAdvancedCharacter::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauMotion.GetOwnerMordhauCharacter
// 0x0008 (0x0008 - 0x0000)
struct MordhauMotion_GetOwnerMordhauCharacter final
{
public:
	class AMordhauCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauMotion_GetOwnerMordhauCharacter) == 0x000008, "Wrong alignment on MordhauMotion_GetOwnerMordhauCharacter");
static_assert(sizeof(MordhauMotion_GetOwnerMordhauCharacter) == 0x000008, "Wrong size on MordhauMotion_GetOwnerMordhauCharacter");
static_assert(offsetof(MordhauMotion_GetOwnerMordhauCharacter, ReturnValue) == 0x000000, "Member 'MordhauMotion_GetOwnerMordhauCharacter::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauMotion.GetWorld
// 0x0008 (0x0008 - 0x0000)
struct MordhauMotion_GetWorld final
{
public:
	class UWorld*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauMotion_GetWorld) == 0x000008, "Wrong alignment on MordhauMotion_GetWorld");
static_assert(sizeof(MordhauMotion_GetWorld) == 0x000008, "Wrong size on MordhauMotion_GetWorld");
static_assert(offsetof(MordhauMotion_GetWorld, ReturnValue) == 0x000000, "Member 'MordhauMotion_GetWorld::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauMotion.HasAuthority
// 0x0001 (0x0001 - 0x0000)
struct MordhauMotion_HasAuthority final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauMotion_HasAuthority) == 0x000001, "Wrong alignment on MordhauMotion_HasAuthority");
static_assert(sizeof(MordhauMotion_HasAuthority) == 0x000001, "Wrong size on MordhauMotion_HasAuthority");
static_assert(offsetof(MordhauMotion_HasAuthority, ReturnValue) == 0x000000, "Member 'MordhauMotion_HasAuthority::ReturnValue' has a wrong offset!");

// Function Mordhau.AttackMotion.ComputeWindup
// 0x0004 (0x0004 - 0x0000)
struct AttackMotion_ComputeWindup final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttackMotion_ComputeWindup) == 0x000004, "Wrong alignment on AttackMotion_ComputeWindup");
static_assert(sizeof(AttackMotion_ComputeWindup) == 0x000004, "Wrong size on AttackMotion_ComputeWindup");
static_assert(offsetof(AttackMotion_ComputeWindup, ReturnValue) == 0x000000, "Member 'AttackMotion_ComputeWindup::ReturnValue' has a wrong offset!");

// Function Mordhau.AttackMotion.FindWeapon
// 0x0008 (0x0008 - 0x0000)
struct AttackMotion_FindWeapon final
{
public:
	class AMordhauWeapon*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttackMotion_FindWeapon) == 0x000008, "Wrong alignment on AttackMotion_FindWeapon");
static_assert(sizeof(AttackMotion_FindWeapon) == 0x000008, "Wrong size on AttackMotion_FindWeapon");
static_assert(offsetof(AttackMotion_FindWeapon, ReturnValue) == 0x000000, "Member 'AttackMotion_FindWeapon::ReturnValue' has a wrong offset!");

// Function Mordhau.AttackMotion.OverrideAdditionalTrace
// 0x001C (0x001C - 0x0000)
struct AttackMotion_OverrideAdditionalTrace final
{
public:
	struct FVector                                OutStart;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutEnd;                                            // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttackMotion_OverrideAdditionalTrace) == 0x000004, "Wrong alignment on AttackMotion_OverrideAdditionalTrace");
static_assert(sizeof(AttackMotion_OverrideAdditionalTrace) == 0x00001C, "Wrong size on AttackMotion_OverrideAdditionalTrace");
static_assert(offsetof(AttackMotion_OverrideAdditionalTrace, OutStart) == 0x000000, "Member 'AttackMotion_OverrideAdditionalTrace::OutStart' has a wrong offset!");
static_assert(offsetof(AttackMotion_OverrideAdditionalTrace, OutEnd) == 0x00000C, "Member 'AttackMotion_OverrideAdditionalTrace::OutEnd' has a wrong offset!");
static_assert(offsetof(AttackMotion_OverrideAdditionalTrace, ReturnValue) == 0x000018, "Member 'AttackMotion_OverrideAdditionalTrace::ReturnValue' has a wrong offset!");

// Function Mordhau.AttackMotion.OverrideIsUsingAdditionalTracers
// 0x0002 (0x0002 - 0x0000)
struct AttackMotion_OverrideIsUsingAdditionalTracers final
{
public:
	bool                                          OutResult;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttackMotion_OverrideIsUsingAdditionalTracers) == 0x000001, "Wrong alignment on AttackMotion_OverrideIsUsingAdditionalTracers");
static_assert(sizeof(AttackMotion_OverrideIsUsingAdditionalTracers) == 0x000002, "Wrong size on AttackMotion_OverrideIsUsingAdditionalTracers");
static_assert(offsetof(AttackMotion_OverrideIsUsingAdditionalTracers, OutResult) == 0x000000, "Member 'AttackMotion_OverrideIsUsingAdditionalTracers::OutResult' has a wrong offset!");
static_assert(offsetof(AttackMotion_OverrideIsUsingAdditionalTracers, ReturnValue) == 0x000001, "Member 'AttackMotion_OverrideIsUsingAdditionalTracers::ReturnValue' has a wrong offset!");

// Function Mordhau.AttackMotion.OverrideTrace
// 0x001C (0x001C - 0x0000)
struct AttackMotion_OverrideTrace final
{
public:
	struct FVector                                OutStart;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutEnd;                                            // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttackMotion_OverrideTrace) == 0x000004, "Wrong alignment on AttackMotion_OverrideTrace");
static_assert(sizeof(AttackMotion_OverrideTrace) == 0x00001C, "Wrong size on AttackMotion_OverrideTrace");
static_assert(offsetof(AttackMotion_OverrideTrace, OutStart) == 0x000000, "Member 'AttackMotion_OverrideTrace::OutStart' has a wrong offset!");
static_assert(offsetof(AttackMotion_OverrideTrace, OutEnd) == 0x00000C, "Member 'AttackMotion_OverrideTrace::OutEnd' has a wrong offset!");
static_assert(offsetof(AttackMotion_OverrideTrace, ReturnValue) == 0x000018, "Member 'AttackMotion_OverrideTrace::ReturnValue' has a wrong offset!");

// Function Mordhau.AttackMotion.SetHasHitIncludingCosmeticHit
// 0x0001 (0x0001 - 0x0000)
struct AttackMotion_SetHasHitIncludingCosmeticHit final
{
public:
	bool                                          bPlayHitShake;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttackMotion_SetHasHitIncludingCosmeticHit) == 0x000001, "Wrong alignment on AttackMotion_SetHasHitIncludingCosmeticHit");
static_assert(sizeof(AttackMotion_SetHasHitIncludingCosmeticHit) == 0x000001, "Wrong size on AttackMotion_SetHasHitIncludingCosmeticHit");
static_assert(offsetof(AttackMotion_SetHasHitIncludingCosmeticHit, bPlayHitShake) == 0x000000, "Member 'AttackMotion_SetHasHitIncludingCosmeticHit::bPlayHitShake' has a wrong offset!");

// Function Mordhau.AttackMotion.ShouldStunOnHit
// 0x0010 (0x0010 - 0x0000)
struct AttackMotion_ShouldStunOnHit final
{
public:
	class UMotionSystemComponent*                 OtherComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttackMotion_ShouldStunOnHit) == 0x000008, "Wrong alignment on AttackMotion_ShouldStunOnHit");
static_assert(sizeof(AttackMotion_ShouldStunOnHit) == 0x000010, "Wrong size on AttackMotion_ShouldStunOnHit");
static_assert(offsetof(AttackMotion_ShouldStunOnHit, OtherComponent) == 0x000000, "Member 'AttackMotion_ShouldStunOnHit::OtherComponent' has a wrong offset!");
static_assert(offsetof(AttackMotion_ShouldStunOnHit, ReturnValue) == 0x000008, "Member 'AttackMotion_ShouldStunOnHit::ReturnValue' has a wrong offset!");

// Function Mordhau.GetPlayerCombinedInfo.GetPlayerCombinedInfo
// 0x0018 (0x0018 - 0x0000)
struct GetPlayerCombinedInfo_GetPlayerCombinedInfo final
{
public:
	class FString                                 PlayFabId_0;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGetPlayerCombinedInfo*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetPlayerCombinedInfo_GetPlayerCombinedInfo) == 0x000008, "Wrong alignment on GetPlayerCombinedInfo_GetPlayerCombinedInfo");
static_assert(sizeof(GetPlayerCombinedInfo_GetPlayerCombinedInfo) == 0x000018, "Wrong size on GetPlayerCombinedInfo_GetPlayerCombinedInfo");
static_assert(offsetof(GetPlayerCombinedInfo_GetPlayerCombinedInfo, PlayFabId_0) == 0x000000, "Member 'GetPlayerCombinedInfo_GetPlayerCombinedInfo::PlayFabId_0' has a wrong offset!");
static_assert(offsetof(GetPlayerCombinedInfo_GetPlayerCombinedInfo, ReturnValue) == 0x000010, "Member 'GetPlayerCombinedInfo_GetPlayerCombinedInfo::ReturnValue' has a wrong offset!");

// Function Mordhau.CreatureAnimInstance.DoFootstep
// 0x0004 (0x0004 - 0x0000)
struct CreatureAnimInstance_DoFootstep final
{
public:
	int32                                         Limb;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreatureAnimInstance_DoFootstep) == 0x000004, "Wrong alignment on CreatureAnimInstance_DoFootstep");
static_assert(sizeof(CreatureAnimInstance_DoFootstep) == 0x000004, "Wrong size on CreatureAnimInstance_DoFootstep");
static_assert(offsetof(CreatureAnimInstance_DoFootstep, Limb) == 0x000000, "Member 'CreatureAnimInstance_DoFootstep::Limb' has a wrong offset!");

// Function Mordhau.MordhauInventoryItem.GetWasSeen
// 0x0001 (0x0001 - 0x0000)
struct MordhauInventoryItem_GetWasSeen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventoryItem_GetWasSeen) == 0x000001, "Wrong alignment on MordhauInventoryItem_GetWasSeen");
static_assert(sizeof(MordhauInventoryItem_GetWasSeen) == 0x000001, "Wrong size on MordhauInventoryItem_GetWasSeen");
static_assert(offsetof(MordhauInventoryItem_GetWasSeen, ReturnValue) == 0x000000, "Member 'MordhauInventoryItem_GetWasSeen::ReturnValue' has a wrong offset!");

// Function Mordhau.LegsWearable.AddFeetWearable
// 0x0028 (0x0028 - 0x0000)
struct LegsWearable_AddFeetWearable final
{
public:
	TSoftClassPtr<class UClass>                   Wearable;                                          // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LegsWearable_AddFeetWearable) == 0x000008, "Wrong alignment on LegsWearable_AddFeetWearable");
static_assert(sizeof(LegsWearable_AddFeetWearable) == 0x000028, "Wrong size on LegsWearable_AddFeetWearable");
static_assert(offsetof(LegsWearable_AddFeetWearable, Wearable) == 0x000000, "Member 'LegsWearable_AddFeetWearable::Wearable' has a wrong offset!");

// Function Mordhau.LegsWearable.GetFeetWearable
// 0x0010 (0x0010 - 0x0000)
struct LegsWearable_GetFeetWearable final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMordhauWearable>           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LegsWearable_GetFeetWearable) == 0x000008, "Wrong alignment on LegsWearable_GetFeetWearable");
static_assert(sizeof(LegsWearable_GetFeetWearable) == 0x000010, "Wrong size on LegsWearable_GetFeetWearable");
static_assert(offsetof(LegsWearable_GetFeetWearable, Index_0) == 0x000000, "Member 'LegsWearable_GetFeetWearable::Index_0' has a wrong offset!");
static_assert(offsetof(LegsWearable_GetFeetWearable, ReturnValue) == 0x000008, "Member 'LegsWearable_GetFeetWearable::ReturnValue' has a wrong offset!");

// Function Mordhau.LegsWearable.GetFeetWearablesNum
// 0x0004 (0x0004 - 0x0000)
struct LegsWearable_GetFeetWearablesNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LegsWearable_GetFeetWearablesNum) == 0x000004, "Wrong alignment on LegsWearable_GetFeetWearablesNum");
static_assert(sizeof(LegsWearable_GetFeetWearablesNum) == 0x000004, "Wrong size on LegsWearable_GetFeetWearablesNum");
static_assert(offsetof(LegsWearable_GetFeetWearablesNum, ReturnValue) == 0x000000, "Member 'LegsWearable_GetFeetWearablesNum::ReturnValue' has a wrong offset!");

// Function Mordhau.InteractionSystemComponent.OnCharacterDestroyed
// 0x0008 (0x0008 - 0x0000)
struct InteractionSystemComponent_OnCharacterDestroyed final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionSystemComponent_OnCharacterDestroyed) == 0x000008, "Wrong alignment on InteractionSystemComponent_OnCharacterDestroyed");
static_assert(sizeof(InteractionSystemComponent_OnCharacterDestroyed) == 0x000008, "Wrong size on InteractionSystemComponent_OnCharacterDestroyed");
static_assert(offsetof(InteractionSystemComponent_OnCharacterDestroyed, Character) == 0x000000, "Member 'InteractionSystemComponent_OnCharacterDestroyed::Character' has a wrong offset!");

// Function Mordhau.InteractionSystemComponent.OnLateTick
// 0x0004 (0x0004 - 0x0000)
struct InteractionSystemComponent_OnLateTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionSystemComponent_OnLateTick) == 0x000004, "Wrong alignment on InteractionSystemComponent_OnLateTick");
static_assert(sizeof(InteractionSystemComponent_OnLateTick) == 0x000004, "Wrong size on InteractionSystemComponent_OnLateTick");
static_assert(offsetof(InteractionSystemComponent_OnLateTick, DeltaTime) == 0x000000, "Member 'InteractionSystemComponent_OnLateTick::DeltaTime' has a wrong offset!");

// Function Mordhau.InteractionSystemComponent.OnLODTick
// 0x0004 (0x0004 - 0x0000)
struct InteractionSystemComponent_OnLODTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionSystemComponent_OnLODTick) == 0x000004, "Wrong alignment on InteractionSystemComponent_OnLODTick");
static_assert(sizeof(InteractionSystemComponent_OnLODTick) == 0x000004, "Wrong size on InteractionSystemComponent_OnLODTick");
static_assert(offsetof(InteractionSystemComponent_OnLODTick, DeltaTime) == 0x000000, "Member 'InteractionSystemComponent_OnLODTick::DeltaTime' has a wrong offset!");

// Function Mordhau.InteractionSystemComponent.OnUnPossessed
// 0x0008 (0x0008 - 0x0000)
struct InteractionSystemComponent_OnUnPossessed final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionSystemComponent_OnUnPossessed) == 0x000008, "Wrong alignment on InteractionSystemComponent_OnUnPossessed");
static_assert(sizeof(InteractionSystemComponent_OnUnPossessed) == 0x000008, "Wrong size on InteractionSystemComponent_OnUnPossessed");
static_assert(offsetof(InteractionSystemComponent_OnUnPossessed, Character) == 0x000000, "Member 'InteractionSystemComponent_OnUnPossessed::Character' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.AddTurnDegrees
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCharacter_AddTurnDegrees final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_AddTurnDegrees) == 0x000004, "Wrong alignment on AdvancedCharacter_AddTurnDegrees");
static_assert(sizeof(AdvancedCharacter_AddTurnDegrees) == 0x000004, "Wrong size on AdvancedCharacter_AddTurnDegrees");
static_assert(offsetof(AdvancedCharacter_AddTurnDegrees, Delta) == 0x000000, "Member 'AdvancedCharacter_AddTurnDegrees::Delta' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.AddWound
// 0x0030 (0x0030 - 0x0000)
struct AdvancedCharacter_AddWound final
{
public:
	struct FVector                                ImpactPoint;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactNormal;                                      // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bone;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Agent;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMordhauDamageType                            DamageType;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DamageSubType;                                     // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCharacter_AddWound) == 0x000008, "Wrong alignment on AdvancedCharacter_AddWound");
static_assert(sizeof(AdvancedCharacter_AddWound) == 0x000030, "Wrong size on AdvancedCharacter_AddWound");
static_assert(offsetof(AdvancedCharacter_AddWound, ImpactPoint) == 0x000000, "Member 'AdvancedCharacter_AddWound::ImpactPoint' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_AddWound, ImpactNormal) == 0x00000C, "Member 'AdvancedCharacter_AddWound::ImpactNormal' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_AddWound, bone) == 0x000018, "Member 'AdvancedCharacter_AddWound::bone' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_AddWound, Agent) == 0x000020, "Member 'AdvancedCharacter_AddWound::Agent' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_AddWound, DamageType) == 0x000028, "Member 'AdvancedCharacter_AddWound::DamageType' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_AddWound, DamageSubType) == 0x000029, "Member 'AdvancedCharacter_AddWound::DamageSubType' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.ApplyRagdollForce
// 0x0030 (0x0030 - 0x0000)
struct AdvancedCharacter_ApplyRagdollForce final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMordhauDamageType                            Type;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SubType;                                           // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bone;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Source;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Agent;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_ApplyRagdollForce) == 0x000008, "Wrong alignment on AdvancedCharacter_ApplyRagdollForce");
static_assert(sizeof(AdvancedCharacter_ApplyRagdollForce) == 0x000030, "Wrong size on AdvancedCharacter_ApplyRagdollForce");
static_assert(offsetof(AdvancedCharacter_ApplyRagdollForce, Angle) == 0x000000, "Member 'AdvancedCharacter_ApplyRagdollForce::Angle' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_ApplyRagdollForce, Type) == 0x000004, "Member 'AdvancedCharacter_ApplyRagdollForce::Type' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_ApplyRagdollForce, SubType) == 0x000005, "Member 'AdvancedCharacter_ApplyRagdollForce::SubType' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_ApplyRagdollForce, bone) == 0x000008, "Member 'AdvancedCharacter_ApplyRagdollForce::bone' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_ApplyRagdollForce, Point) == 0x000010, "Member 'AdvancedCharacter_ApplyRagdollForce::Point' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_ApplyRagdollForce, Source) == 0x000020, "Member 'AdvancedCharacter_ApplyRagdollForce::Source' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_ApplyRagdollForce, Agent) == 0x000028, "Member 'AdvancedCharacter_ApplyRagdollForce::Agent' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.BeginFlinchAdditiveOverride
// 0x0020 (0x0020 - 0x0000)
struct AdvancedCharacter_BeginFlinchAdditiveOverride final
{
public:
	class FName                                   FlinchOverrideName;                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AltFlinchOverrideName;                             // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Degree;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHead;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SnapDegreeToSteps;                                 // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_BeginFlinchAdditiveOverride) == 0x000004, "Wrong alignment on AdvancedCharacter_BeginFlinchAdditiveOverride");
static_assert(sizeof(AdvancedCharacter_BeginFlinchAdditiveOverride) == 0x000020, "Wrong size on AdvancedCharacter_BeginFlinchAdditiveOverride");
static_assert(offsetof(AdvancedCharacter_BeginFlinchAdditiveOverride, FlinchOverrideName) == 0x000000, "Member 'AdvancedCharacter_BeginFlinchAdditiveOverride::FlinchOverrideName' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_BeginFlinchAdditiveOverride, AltFlinchOverrideName) == 0x000008, "Member 'AdvancedCharacter_BeginFlinchAdditiveOverride::AltFlinchOverrideName' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_BeginFlinchAdditiveOverride, Duration) == 0x000010, "Member 'AdvancedCharacter_BeginFlinchAdditiveOverride::Duration' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_BeginFlinchAdditiveOverride, Degree) == 0x000014, "Member 'AdvancedCharacter_BeginFlinchAdditiveOverride::Degree' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_BeginFlinchAdditiveOverride, bIsHead) == 0x000018, "Member 'AdvancedCharacter_BeginFlinchAdditiveOverride::bIsHead' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_BeginFlinchAdditiveOverride, SnapDegreeToSteps) == 0x00001C, "Member 'AdvancedCharacter_BeginFlinchAdditiveOverride::SnapDegreeToSteps' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.BoostAnimBlendWeight
// 0x0010 (0x0010 - 0x0000)
struct AdvancedCharacter_BoostAnimBlendWeight final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostAmount;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCharacter_BoostAnimBlendWeight) == 0x000008, "Wrong alignment on AdvancedCharacter_BoostAnimBlendWeight");
static_assert(sizeof(AdvancedCharacter_BoostAnimBlendWeight) == 0x000010, "Wrong size on AdvancedCharacter_BoostAnimBlendWeight");
static_assert(offsetof(AdvancedCharacter_BoostAnimBlendWeight, Montage) == 0x000000, "Member 'AdvancedCharacter_BoostAnimBlendWeight::Montage' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_BoostAnimBlendWeight, BoostAmount) == 0x000008, "Member 'AdvancedCharacter_BoostAnimBlendWeight::BoostAmount' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.BP_PlayCharacterSound
// 0x0028 (0x0028 - 0x0000)
struct AdvancedCharacter_BP_PlayCharacterSound final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bone;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               AttachLocation;                                    // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttach;                                           // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_BP_PlayCharacterSound) == 0x000008, "Wrong alignment on AdvancedCharacter_BP_PlayCharacterSound");
static_assert(sizeof(AdvancedCharacter_BP_PlayCharacterSound) == 0x000028, "Wrong size on AdvancedCharacter_BP_PlayCharacterSound");
static_assert(offsetof(AdvancedCharacter_BP_PlayCharacterSound, Sound) == 0x000000, "Member 'AdvancedCharacter_BP_PlayCharacterSound::Sound' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_BP_PlayCharacterSound, bone) == 0x000008, "Member 'AdvancedCharacter_BP_PlayCharacterSound::bone' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_BP_PlayCharacterSound, Location) == 0x000010, "Member 'AdvancedCharacter_BP_PlayCharacterSound::Location' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_BP_PlayCharacterSound, AttachLocation) == 0x00001C, "Member 'AdvancedCharacter_BP_PlayCharacterSound::AttachLocation' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_BP_PlayCharacterSound, bAttach) == 0x00001D, "Member 'AdvancedCharacter_BP_PlayCharacterSound::bAttach' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_BP_PlayCharacterSound, ReturnValue) == 0x000020, "Member 'AdvancedCharacter_BP_PlayCharacterSound::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.BPLODTick
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCharacter_BPLODTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_BPLODTick) == 0x000004, "Wrong alignment on AdvancedCharacter_BPLODTick");
static_assert(sizeof(AdvancedCharacter_BPLODTick) == 0x000004, "Wrong size on AdvancedCharacter_BPLODTick");
static_assert(offsetof(AdvancedCharacter_BPLODTick, DeltaTime) == 0x000000, "Member 'AdvancedCharacter_BPLODTick::DeltaTime' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.CanBleedOutFromHit
// 0x00B0 (0x00B0 - 0x0000)
struct AdvancedCharacter_CanBleedOutFromHit final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EMordhauDamageType                            Type;                                              // 0x008C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SubType;                                           // 0x008D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Source;                                            // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Agent;                                             // 0x0098(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x00A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCharacter_CanBleedOutFromHit) == 0x000008, "Wrong alignment on AdvancedCharacter_CanBleedOutFromHit");
static_assert(sizeof(AdvancedCharacter_CanBleedOutFromHit) == 0x0000B0, "Wrong size on AdvancedCharacter_CanBleedOutFromHit");
static_assert(offsetof(AdvancedCharacter_CanBleedOutFromHit, HitResult) == 0x000000, "Member 'AdvancedCharacter_CanBleedOutFromHit::HitResult' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_CanBleedOutFromHit, Type) == 0x00008C, "Member 'AdvancedCharacter_CanBleedOutFromHit::Type' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_CanBleedOutFromHit, SubType) == 0x00008D, "Member 'AdvancedCharacter_CanBleedOutFromHit::SubType' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_CanBleedOutFromHit, Source) == 0x000090, "Member 'AdvancedCharacter_CanBleedOutFromHit::Source' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_CanBleedOutFromHit, Agent) == 0x000098, "Member 'AdvancedCharacter_CanBleedOutFromHit::Agent' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_CanBleedOutFromHit, EventInstigator) == 0x0000A0, "Member 'AdvancedCharacter_CanBleedOutFromHit::EventInstigator' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_CanBleedOutFromHit, ReturnValue) == 0x0000A8, "Member 'AdvancedCharacter_CanBleedOutFromHit::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.GetAdditiveOverrideType
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCharacter_GetAdditiveOverrideType final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_GetAdditiveOverrideType) == 0x000004, "Wrong alignment on AdvancedCharacter_GetAdditiveOverrideType");
static_assert(sizeof(AdvancedCharacter_GetAdditiveOverrideType) == 0x000008, "Wrong size on AdvancedCharacter_GetAdditiveOverrideType");
static_assert(offsetof(AdvancedCharacter_GetAdditiveOverrideType, ReturnValue) == 0x000000, "Member 'AdvancedCharacter_GetAdditiveOverrideType::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.GetAdditiveOverrideTypeNormalizedTime
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCharacter_GetAdditiveOverrideTypeNormalizedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_GetAdditiveOverrideTypeNormalizedTime) == 0x000004, "Wrong alignment on AdvancedCharacter_GetAdditiveOverrideTypeNormalizedTime");
static_assert(sizeof(AdvancedCharacter_GetAdditiveOverrideTypeNormalizedTime) == 0x000004, "Wrong size on AdvancedCharacter_GetAdditiveOverrideTypeNormalizedTime");
static_assert(offsetof(AdvancedCharacter_GetAdditiveOverrideTypeNormalizedTime, ReturnValue) == 0x000000, "Member 'AdvancedCharacter_GetAdditiveOverrideTypeNormalizedTime::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.GetAnimWeight
// 0x0010 (0x0010 - 0x0000)
struct AdvancedCharacter_GetAnimWeight final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCharacter_GetAnimWeight) == 0x000008, "Wrong alignment on AdvancedCharacter_GetAnimWeight");
static_assert(sizeof(AdvancedCharacter_GetAnimWeight) == 0x000010, "Wrong size on AdvancedCharacter_GetAnimWeight");
static_assert(offsetof(AdvancedCharacter_GetAnimWeight, Montage) == 0x000000, "Member 'AdvancedCharacter_GetAnimWeight::Montage' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_GetAnimWeight, ReturnValue) == 0x000008, "Member 'AdvancedCharacter_GetAnimWeight::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.GetArmorTierForBone
// 0x000C (0x000C - 0x0000)
struct AdvancedCharacter_GetArmorTierForBone final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCharacter_GetArmorTierForBone) == 0x000004, "Wrong alignment on AdvancedCharacter_GetArmorTierForBone");
static_assert(sizeof(AdvancedCharacter_GetArmorTierForBone) == 0x00000C, "Wrong size on AdvancedCharacter_GetArmorTierForBone");
static_assert(offsetof(AdvancedCharacter_GetArmorTierForBone, BoneName) == 0x000000, "Member 'AdvancedCharacter_GetArmorTierForBone::BoneName' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_GetArmorTierForBone, ReturnValue) == 0x000008, "Member 'AdvancedCharacter_GetArmorTierForBone::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.GetBestStickyLocation
// 0x0030 (0x0030 - 0x0000)
struct AdvancedCharacter_GetBestStickyLocation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutNormal;                                         // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutBone;                                           // 0x0024(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCharacter_GetBestStickyLocation) == 0x000004, "Wrong alignment on AdvancedCharacter_GetBestStickyLocation");
static_assert(sizeof(AdvancedCharacter_GetBestStickyLocation) == 0x000030, "Wrong size on AdvancedCharacter_GetBestStickyLocation");
static_assert(offsetof(AdvancedCharacter_GetBestStickyLocation, InLocation) == 0x000000, "Member 'AdvancedCharacter_GetBestStickyLocation::InLocation' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_GetBestStickyLocation, OutLocation) == 0x00000C, "Member 'AdvancedCharacter_GetBestStickyLocation::OutLocation' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_GetBestStickyLocation, OutNormal) == 0x000018, "Member 'AdvancedCharacter_GetBestStickyLocation::OutNormal' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_GetBestStickyLocation, OutBone) == 0x000024, "Member 'AdvancedCharacter_GetBestStickyLocation::OutBone' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_GetBestStickyLocation, ReturnValue) == 0x00002C, "Member 'AdvancedCharacter_GetBestStickyLocation::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.GetLastDismemberedBoneForceDir
// 0x000C (0x000C - 0x0000)
struct AdvancedCharacter_GetLastDismemberedBoneForceDir final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_GetLastDismemberedBoneForceDir) == 0x000004, "Wrong alignment on AdvancedCharacter_GetLastDismemberedBoneForceDir");
static_assert(sizeof(AdvancedCharacter_GetLastDismemberedBoneForceDir) == 0x00000C, "Wrong size on AdvancedCharacter_GetLastDismemberedBoneForceDir");
static_assert(offsetof(AdvancedCharacter_GetLastDismemberedBoneForceDir, ReturnValue) == 0x000000, "Member 'AdvancedCharacter_GetLastDismemberedBoneForceDir::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.GetLastNetDamageSource
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCharacter_GetLastNetDamageSource final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_GetLastNetDamageSource) == 0x000008, "Wrong alignment on AdvancedCharacter_GetLastNetDamageSource");
static_assert(sizeof(AdvancedCharacter_GetLastNetDamageSource) == 0x000008, "Wrong size on AdvancedCharacter_GetLastNetDamageSource");
static_assert(offsetof(AdvancedCharacter_GetLastNetDamageSource, ReturnValue) == 0x000000, "Member 'AdvancedCharacter_GetLastNetDamageSource::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.GetLastNetDamageType
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCharacter_GetLastNetDamageType final
{
public:
	EMordhauDamageType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_GetLastNetDamageType) == 0x000001, "Wrong alignment on AdvancedCharacter_GetLastNetDamageType");
static_assert(sizeof(AdvancedCharacter_GetLastNetDamageType) == 0x000001, "Wrong size on AdvancedCharacter_GetLastNetDamageType");
static_assert(offsetof(AdvancedCharacter_GetLastNetDamageType, ReturnValue) == 0x000000, "Member 'AdvancedCharacter_GetLastNetDamageType::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.IsAnimActive
// 0x0010 (0x0010 - 0x0000)
struct AdvancedCharacter_IsAnimActive final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCharacter_IsAnimActive) == 0x000008, "Wrong alignment on AdvancedCharacter_IsAnimActive");
static_assert(sizeof(AdvancedCharacter_IsAnimActive) == 0x000010, "Wrong size on AdvancedCharacter_IsAnimActive");
static_assert(offsetof(AdvancedCharacter_IsAnimActive, Montage) == 0x000000, "Member 'AdvancedCharacter_IsAnimActive::Montage' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_IsAnimActive, ReturnValue) == 0x000008, "Member 'AdvancedCharacter_IsAnimActive::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.IsLastDismemberedBoneBluntForce
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCharacter_IsLastDismemberedBoneBluntForce final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_IsLastDismemberedBoneBluntForce) == 0x000001, "Wrong alignment on AdvancedCharacter_IsLastDismemberedBoneBluntForce");
static_assert(sizeof(AdvancedCharacter_IsLastDismemberedBoneBluntForce) == 0x000001, "Wrong size on AdvancedCharacter_IsLastDismemberedBoneBluntForce");
static_assert(offsetof(AdvancedCharacter_IsLastDismemberedBoneBluntForce, ReturnValue) == 0x000000, "Member 'AdvancedCharacter_IsLastDismemberedBoneBluntForce::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.IsLastDismemberedBonePartial
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCharacter_IsLastDismemberedBonePartial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_IsLastDismemberedBonePartial) == 0x000001, "Wrong alignment on AdvancedCharacter_IsLastDismemberedBonePartial");
static_assert(sizeof(AdvancedCharacter_IsLastDismemberedBonePartial) == 0x000001, "Wrong size on AdvancedCharacter_IsLastDismemberedBonePartial");
static_assert(offsetof(AdvancedCharacter_IsLastDismemberedBonePartial, ReturnValue) == 0x000000, "Member 'AdvancedCharacter_IsLastDismemberedBonePartial::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.Knockback
// 0x0010 (0x0010 - 0x0000)
struct AdvancedCharacter_Knockback final
{
public:
	struct FVector                                Amount;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCharacter_Knockback) == 0x000004, "Wrong alignment on AdvancedCharacter_Knockback");
static_assert(sizeof(AdvancedCharacter_Knockback) == 0x000010, "Wrong size on AdvancedCharacter_Knockback");
static_assert(offsetof(AdvancedCharacter_Knockback, Amount) == 0x000000, "Member 'AdvancedCharacter_Knockback::Amount' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_Knockback, ReturnValue) == 0x00000C, "Member 'AdvancedCharacter_Knockback::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.LookUp
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCharacter_LookUp final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAbsolute;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCharacter_LookUp) == 0x000004, "Wrong alignment on AdvancedCharacter_LookUp");
static_assert(sizeof(AdvancedCharacter_LookUp) == 0x000008, "Wrong size on AdvancedCharacter_LookUp");
static_assert(offsetof(AdvancedCharacter_LookUp, Val) == 0x000000, "Member 'AdvancedCharacter_LookUp::Val' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_LookUp, bIsAbsolute) == 0x000004, "Member 'AdvancedCharacter_LookUp::bIsAbsolute' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.LookUpAtRate
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCharacter_LookUpAtRate final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_LookUpAtRate) == 0x000004, "Wrong alignment on AdvancedCharacter_LookUpAtRate");
static_assert(sizeof(AdvancedCharacter_LookUpAtRate) == 0x000004, "Wrong size on AdvancedCharacter_LookUpAtRate");
static_assert(offsetof(AdvancedCharacter_LookUpAtRate, Val) == 0x000000, "Member 'AdvancedCharacter_LookUpAtRate::Val' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.LookUpNotAbsolute
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCharacter_LookUpNotAbsolute final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_LookUpNotAbsolute) == 0x000004, "Wrong alignment on AdvancedCharacter_LookUpNotAbsolute");
static_assert(sizeof(AdvancedCharacter_LookUpNotAbsolute) == 0x000004, "Wrong size on AdvancedCharacter_LookUpNotAbsolute");
static_assert(offsetof(AdvancedCharacter_LookUpNotAbsolute, Value) == 0x000000, "Member 'AdvancedCharacter_LookUpNotAbsolute::Value' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.ModifyDamage
// 0x00C0 (0x00C0 - 0x0000)
struct AdvancedCharacter_ModifyDamage final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMordhauDamageInfo                     DamageInfo;                                        // 0x0008(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x00B0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x00B8(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCharacter_ModifyDamage) == 0x000008, "Wrong alignment on AdvancedCharacter_ModifyDamage");
static_assert(sizeof(AdvancedCharacter_ModifyDamage) == 0x0000C0, "Wrong size on AdvancedCharacter_ModifyDamage");
static_assert(offsetof(AdvancedCharacter_ModifyDamage, DamageAmount) == 0x000000, "Member 'AdvancedCharacter_ModifyDamage::DamageAmount' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_ModifyDamage, DamageInfo) == 0x000008, "Member 'AdvancedCharacter_ModifyDamage::DamageInfo' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_ModifyDamage, EventInstigator) == 0x0000B0, "Member 'AdvancedCharacter_ModifyDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_ModifyDamage, ReturnValue) == 0x0000B8, "Member 'AdvancedCharacter_ModifyDamage::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.MordhauTakeDamage
// 0x00B8 (0x00B8 - 0x0000)
struct AdvancedCharacter_MordhauTakeDamage final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0004(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EMordhauDamageType                            DamageType;                                        // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DamageSubType;                                     // 0x0091(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Source;                                            // 0x0098(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Agent;                                             // 0x00A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x00A8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x00B0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCharacter_MordhauTakeDamage) == 0x000008, "Wrong alignment on AdvancedCharacter_MordhauTakeDamage");
static_assert(sizeof(AdvancedCharacter_MordhauTakeDamage) == 0x0000B8, "Wrong size on AdvancedCharacter_MordhauTakeDamage");
static_assert(offsetof(AdvancedCharacter_MordhauTakeDamage, DamageAmount) == 0x000000, "Member 'AdvancedCharacter_MordhauTakeDamage::DamageAmount' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_MordhauTakeDamage, Hit) == 0x000004, "Member 'AdvancedCharacter_MordhauTakeDamage::Hit' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_MordhauTakeDamage, DamageType) == 0x000090, "Member 'AdvancedCharacter_MordhauTakeDamage::DamageType' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_MordhauTakeDamage, DamageSubType) == 0x000091, "Member 'AdvancedCharacter_MordhauTakeDamage::DamageSubType' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_MordhauTakeDamage, Source) == 0x000098, "Member 'AdvancedCharacter_MordhauTakeDamage::Source' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_MordhauTakeDamage, Agent) == 0x0000A0, "Member 'AdvancedCharacter_MordhauTakeDamage::Agent' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_MordhauTakeDamage, EventInstigator) == 0x0000A8, "Member 'AdvancedCharacter_MordhauTakeDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_MordhauTakeDamage, ReturnValue) == 0x0000B0, "Member 'AdvancedCharacter_MordhauTakeDamage::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.MoveForward
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCharacter_MoveForward final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_MoveForward) == 0x000004, "Wrong alignment on AdvancedCharacter_MoveForward");
static_assert(sizeof(AdvancedCharacter_MoveForward) == 0x000004, "Wrong size on AdvancedCharacter_MoveForward");
static_assert(offsetof(AdvancedCharacter_MoveForward, Val) == 0x000000, "Member 'AdvancedCharacter_MoveForward::Val' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.MoveRight
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCharacter_MoveRight final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_MoveRight) == 0x000004, "Wrong alignment on AdvancedCharacter_MoveRight");
static_assert(sizeof(AdvancedCharacter_MoveRight) == 0x000004, "Wrong size on AdvancedCharacter_MoveRight");
static_assert(offsetof(AdvancedCharacter_MoveRight, Val) == 0x000000, "Member 'AdvancedCharacter_MoveRight::Val' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.OffsetHealth
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCharacter_OffsetHealth final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplicate;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCharacter_OffsetHealth) == 0x000004, "Wrong alignment on AdvancedCharacter_OffsetHealth");
static_assert(sizeof(AdvancedCharacter_OffsetHealth) == 0x000008, "Wrong size on AdvancedCharacter_OffsetHealth");
static_assert(offsetof(AdvancedCharacter_OffsetHealth, Amount) == 0x000000, "Member 'AdvancedCharacter_OffsetHealth::Amount' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OffsetHealth, bReplicate) == 0x000004, "Member 'AdvancedCharacter_OffsetHealth::bReplicate' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.OnAfterDied
// 0x0030 (0x0030 - 0x0000)
struct AdvancedCharacter_OnAfterDied final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMordhauDamageType                            Type;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SubType;                                           // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bone;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Source;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Agent;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_OnAfterDied) == 0x000008, "Wrong alignment on AdvancedCharacter_OnAfterDied");
static_assert(sizeof(AdvancedCharacter_OnAfterDied) == 0x000030, "Wrong size on AdvancedCharacter_OnAfterDied");
static_assert(offsetof(AdvancedCharacter_OnAfterDied, Angle) == 0x000000, "Member 'AdvancedCharacter_OnAfterDied::Angle' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnAfterDied, Type) == 0x000004, "Member 'AdvancedCharacter_OnAfterDied::Type' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnAfterDied, SubType) == 0x000005, "Member 'AdvancedCharacter_OnAfterDied::SubType' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnAfterDied, bone) == 0x000008, "Member 'AdvancedCharacter_OnAfterDied::bone' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnAfterDied, Point) == 0x000010, "Member 'AdvancedCharacter_OnAfterDied::Point' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnAfterDied, Source) == 0x000020, "Member 'AdvancedCharacter_OnAfterDied::Source' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnAfterDied, Agent) == 0x000028, "Member 'AdvancedCharacter_OnAfterDied::Agent' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.OnCosmeticHit
// 0x0098 (0x0098 - 0x0000)
struct AdvancedCharacter_OnCosmeticHit final
{
public:
	EMordhauDamageType                            DamageType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SubType;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0004(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 Agent;                                             // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_OnCosmeticHit) == 0x000008, "Wrong alignment on AdvancedCharacter_OnCosmeticHit");
static_assert(sizeof(AdvancedCharacter_OnCosmeticHit) == 0x000098, "Wrong size on AdvancedCharacter_OnCosmeticHit");
static_assert(offsetof(AdvancedCharacter_OnCosmeticHit, DamageType) == 0x000000, "Member 'AdvancedCharacter_OnCosmeticHit::DamageType' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnCosmeticHit, SubType) == 0x000001, "Member 'AdvancedCharacter_OnCosmeticHit::SubType' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnCosmeticHit, Hit) == 0x000004, "Member 'AdvancedCharacter_OnCosmeticHit::Hit' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnCosmeticHit, Agent) == 0x000090, "Member 'AdvancedCharacter_OnCosmeticHit::Agent' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.OnDied
// 0x0030 (0x0030 - 0x0000)
struct AdvancedCharacter_OnDied final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMordhauDamageType                            Type;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SubType;                                           // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bone;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Source;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Agent;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_OnDied) == 0x000008, "Wrong alignment on AdvancedCharacter_OnDied");
static_assert(sizeof(AdvancedCharacter_OnDied) == 0x000030, "Wrong size on AdvancedCharacter_OnDied");
static_assert(offsetof(AdvancedCharacter_OnDied, Angle) == 0x000000, "Member 'AdvancedCharacter_OnDied::Angle' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnDied, Type) == 0x000004, "Member 'AdvancedCharacter_OnDied::Type' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnDied, SubType) == 0x000005, "Member 'AdvancedCharacter_OnDied::SubType' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnDied, bone) == 0x000008, "Member 'AdvancedCharacter_OnDied::bone' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnDied, Point) == 0x000010, "Member 'AdvancedCharacter_OnDied::Point' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnDied, Source) == 0x000020, "Member 'AdvancedCharacter_OnDied::Source' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnDied, Agent) == 0x000028, "Member 'AdvancedCharacter_OnDied::Agent' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.OnHit
// 0x0020 (0x0020 - 0x0000)
struct AdvancedCharacter_OnHit final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bone;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Tier;                                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SurfaceType;                                       // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCharacter_OnHit) == 0x000008, "Wrong alignment on AdvancedCharacter_OnHit");
static_assert(sizeof(AdvancedCharacter_OnHit) == 0x000020, "Wrong size on AdvancedCharacter_OnHit");
static_assert(offsetof(AdvancedCharacter_OnHit, Actor) == 0x000000, "Member 'AdvancedCharacter_OnHit::Actor' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnHit, bone) == 0x000008, "Member 'AdvancedCharacter_OnHit::bone' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnHit, WorldLocation) == 0x000010, "Member 'AdvancedCharacter_OnHit::WorldLocation' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnHit, Tier) == 0x00001C, "Member 'AdvancedCharacter_OnHit::Tier' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnHit, SurfaceType) == 0x00001D, "Member 'AdvancedCharacter_OnHit::SurfaceType' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.OnKilled
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCharacter_OnKilled final
{
public:
	class AController*                            EventInstigator;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_OnKilled) == 0x000008, "Wrong alignment on AdvancedCharacter_OnKilled");
static_assert(sizeof(AdvancedCharacter_OnKilled) == 0x000008, "Wrong size on AdvancedCharacter_OnKilled");
static_assert(offsetof(AdvancedCharacter_OnKilled, EventInstigator) == 0x000000, "Member 'AdvancedCharacter_OnKilled::EventInstigator' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.OnRep_ReplicatedCharacterFlags
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCharacter_OnRep_ReplicatedCharacterFlags final
{
public:
	uint8                                         OldValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_OnRep_ReplicatedCharacterFlags) == 0x000001, "Wrong alignment on AdvancedCharacter_OnRep_ReplicatedCharacterFlags");
static_assert(sizeof(AdvancedCharacter_OnRep_ReplicatedCharacterFlags) == 0x000001, "Wrong size on AdvancedCharacter_OnRep_ReplicatedCharacterFlags");
static_assert(offsetof(AdvancedCharacter_OnRep_ReplicatedCharacterFlags, OldValue) == 0x000000, "Member 'AdvancedCharacter_OnRep_ReplicatedCharacterFlags::OldValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.OnTookDamage
// 0x0028 (0x0028 - 0x0000)
struct AdvancedCharacter_OnTookDamage final
{
public:
	bool                                          bWillKill;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMordhauDamageType                            Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SubType;                                           // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bone;                                              // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Source;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Agent;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_OnTookDamage) == 0x000008, "Wrong alignment on AdvancedCharacter_OnTookDamage");
static_assert(sizeof(AdvancedCharacter_OnTookDamage) == 0x000028, "Wrong size on AdvancedCharacter_OnTookDamage");
static_assert(offsetof(AdvancedCharacter_OnTookDamage, bWillKill) == 0x000000, "Member 'AdvancedCharacter_OnTookDamage::bWillKill' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnTookDamage, Type) == 0x000001, "Member 'AdvancedCharacter_OnTookDamage::Type' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnTookDamage, SubType) == 0x000002, "Member 'AdvancedCharacter_OnTookDamage::SubType' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnTookDamage, bone) == 0x000004, "Member 'AdvancedCharacter_OnTookDamage::bone' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnTookDamage, Point) == 0x00000C, "Member 'AdvancedCharacter_OnTookDamage::Point' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnTookDamage, Source) == 0x000018, "Member 'AdvancedCharacter_OnTookDamage::Source' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_OnTookDamage, Agent) == 0x000020, "Member 'AdvancedCharacter_OnTookDamage::Agent' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.PlayAnim
// 0x0018 (0x0018 - 0x0000)
struct AdvancedCharacter_PlayAnim final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopExistingMontages;                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_PlayAnim) == 0x000008, "Wrong alignment on AdvancedCharacter_PlayAnim");
static_assert(sizeof(AdvancedCharacter_PlayAnim) == 0x000018, "Wrong size on AdvancedCharacter_PlayAnim");
static_assert(offsetof(AdvancedCharacter_PlayAnim, Montage) == 0x000000, "Member 'AdvancedCharacter_PlayAnim::Montage' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayAnim, PlayRate) == 0x000008, "Member 'AdvancedCharacter_PlayAnim::PlayRate' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayAnim, bStopExistingMontages) == 0x00000C, "Member 'AdvancedCharacter_PlayAnim::bStopExistingMontages' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayAnim, ReturnValue) == 0x000010, "Member 'AdvancedCharacter_PlayAnim::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.PlayAnimSequenceBP
// 0x0048 (0x0048 - 0x0000)
struct AdvancedCharacter_PlayAnimSequenceBP final
{
public:
	class UAnimSequence*                          Seq;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendIn;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOut;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendInOption;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendOutOption;                                    // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendOutTriggerTime;                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Slot;                                              // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CustomIn;                                          // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CustomOut;                                         // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopExistingMontages;                             // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_PlayAnimSequenceBP) == 0x000008, "Wrong alignment on AdvancedCharacter_PlayAnimSequenceBP");
static_assert(sizeof(AdvancedCharacter_PlayAnimSequenceBP) == 0x000048, "Wrong size on AdvancedCharacter_PlayAnimSequenceBP");
static_assert(offsetof(AdvancedCharacter_PlayAnimSequenceBP, Seq) == 0x000000, "Member 'AdvancedCharacter_PlayAnimSequenceBP::Seq' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayAnimSequenceBP, PlayRate) == 0x000008, "Member 'AdvancedCharacter_PlayAnimSequenceBP::PlayRate' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayAnimSequenceBP, BlendIn) == 0x00000C, "Member 'AdvancedCharacter_PlayAnimSequenceBP::BlendIn' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayAnimSequenceBP, BlendOut) == 0x000010, "Member 'AdvancedCharacter_PlayAnimSequenceBP::BlendOut' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayAnimSequenceBP, BlendInOption) == 0x000014, "Member 'AdvancedCharacter_PlayAnimSequenceBP::BlendInOption' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayAnimSequenceBP, BlendOutOption) == 0x000015, "Member 'AdvancedCharacter_PlayAnimSequenceBP::BlendOutOption' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayAnimSequenceBP, BlendOutTriggerTime) == 0x000018, "Member 'AdvancedCharacter_PlayAnimSequenceBP::BlendOutTriggerTime' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayAnimSequenceBP, Slot) == 0x00001C, "Member 'AdvancedCharacter_PlayAnimSequenceBP::Slot' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayAnimSequenceBP, CustomIn) == 0x000028, "Member 'AdvancedCharacter_PlayAnimSequenceBP::CustomIn' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayAnimSequenceBP, CustomOut) == 0x000030, "Member 'AdvancedCharacter_PlayAnimSequenceBP::CustomOut' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayAnimSequenceBP, bStopExistingMontages) == 0x000038, "Member 'AdvancedCharacter_PlayAnimSequenceBP::bStopExistingMontages' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayAnimSequenceBP, ReturnValue) == 0x000040, "Member 'AdvancedCharacter_PlayAnimSequenceBP::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.PlayCharacterForceFeeback
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCharacter_PlayCharacterForceFeeback final
{
public:
	class UForceFeedbackEffect*                   ForceFeedbackEffect;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_PlayCharacterForceFeeback) == 0x000008, "Wrong alignment on AdvancedCharacter_PlayCharacterForceFeeback");
static_assert(sizeof(AdvancedCharacter_PlayCharacterForceFeeback) == 0x000008, "Wrong size on AdvancedCharacter_PlayCharacterForceFeeback");
static_assert(offsetof(AdvancedCharacter_PlayCharacterForceFeeback, ForceFeedbackEffect) == 0x000000, "Member 'AdvancedCharacter_PlayCharacterForceFeeback::ForceFeedbackEffect' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.PlayCharacterForceFeebackParams
// 0x0018 (0x0018 - 0x0000)
struct AdvancedCharacter_PlayCharacterForceFeebackParams final
{
public:
	class UForceFeedbackEffect*                   ForceFeedbackEffect;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCharacter_PlayCharacterForceFeebackParams) == 0x000008, "Wrong alignment on AdvancedCharacter_PlayCharacterForceFeebackParams");
static_assert(sizeof(AdvancedCharacter_PlayCharacterForceFeebackParams) == 0x000018, "Wrong size on AdvancedCharacter_PlayCharacterForceFeebackParams");
static_assert(offsetof(AdvancedCharacter_PlayCharacterForceFeebackParams, ForceFeedbackEffect) == 0x000000, "Member 'AdvancedCharacter_PlayCharacterForceFeebackParams::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayCharacterForceFeebackParams, Tag) == 0x000008, "Member 'AdvancedCharacter_PlayCharacterForceFeebackParams::Tag' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayCharacterForceFeebackParams, bLooping) == 0x000010, "Member 'AdvancedCharacter_PlayCharacterForceFeebackParams::bLooping' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.PlayCharacterSound
// 0x0038 (0x0038 - 0x0000)
struct AdvancedCharacter_PlayCharacterSound final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bone;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               AttachLocation;                                    // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttach;                                           // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      Override;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_PlayCharacterSound) == 0x000008, "Wrong alignment on AdvancedCharacter_PlayCharacterSound");
static_assert(sizeof(AdvancedCharacter_PlayCharacterSound) == 0x000038, "Wrong size on AdvancedCharacter_PlayCharacterSound");
static_assert(offsetof(AdvancedCharacter_PlayCharacterSound, Sound) == 0x000000, "Member 'AdvancedCharacter_PlayCharacterSound::Sound' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayCharacterSound, bone) == 0x000008, "Member 'AdvancedCharacter_PlayCharacterSound::bone' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayCharacterSound, InLocation) == 0x000010, "Member 'AdvancedCharacter_PlayCharacterSound::InLocation' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayCharacterSound, AttachLocation) == 0x00001C, "Member 'AdvancedCharacter_PlayCharacterSound::AttachLocation' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayCharacterSound, bAttach) == 0x00001D, "Member 'AdvancedCharacter_PlayCharacterSound::bAttach' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayCharacterSound, Override) == 0x000020, "Member 'AdvancedCharacter_PlayCharacterSound::Override' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayCharacterSound, VolumeMultiplier) == 0x000028, "Member 'AdvancedCharacter_PlayCharacterSound::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayCharacterSound, PitchMultiplier) == 0x00002C, "Member 'AdvancedCharacter_PlayCharacterSound::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayCharacterSound, ReturnValue) == 0x000030, "Member 'AdvancedCharacter_PlayCharacterSound::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.PlayHitEffectParticle
// 0x0024 (0x0024 - 0x0000)
struct AdvancedCharacter_PlayHitEffectParticle final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   bone;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFindOptimalSpot;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCharacter_PlayHitEffectParticle) == 0x000004, "Wrong alignment on AdvancedCharacter_PlayHitEffectParticle");
static_assert(sizeof(AdvancedCharacter_PlayHitEffectParticle) == 0x000024, "Wrong size on AdvancedCharacter_PlayHitEffectParticle");
static_assert(offsetof(AdvancedCharacter_PlayHitEffectParticle, Location) == 0x000000, "Member 'AdvancedCharacter_PlayHitEffectParticle::Location' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayHitEffectParticle, Rotation) == 0x00000C, "Member 'AdvancedCharacter_PlayHitEffectParticle::Rotation' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayHitEffectParticle, bone) == 0x000018, "Member 'AdvancedCharacter_PlayHitEffectParticle::bone' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayHitEffectParticle, bFindOptimalSpot) == 0x000020, "Member 'AdvancedCharacter_PlayHitEffectParticle::bFindOptimalSpot' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_PlayHitEffectParticle, ReturnValue) == 0x000021, "Member 'AdvancedCharacter_PlayHitEffectParticle::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.ReceiveMordhauDamage
// 0x00B0 (0x00B0 - 0x0000)
struct AdvancedCharacter_ReceiveMordhauDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0004(0x008C)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EMordhauDamageType                            DamageType;                                        // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SubDamageType;                                     // 0x0091(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Source;                                            // 0x0098(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Agent;                                             // 0x00A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x00A8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_ReceiveMordhauDamage) == 0x000008, "Wrong alignment on AdvancedCharacter_ReceiveMordhauDamage");
static_assert(sizeof(AdvancedCharacter_ReceiveMordhauDamage) == 0x0000B0, "Wrong size on AdvancedCharacter_ReceiveMordhauDamage");
static_assert(offsetof(AdvancedCharacter_ReceiveMordhauDamage, Damage) == 0x000000, "Member 'AdvancedCharacter_ReceiveMordhauDamage::Damage' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_ReceiveMordhauDamage, HitResult) == 0x000004, "Member 'AdvancedCharacter_ReceiveMordhauDamage::HitResult' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_ReceiveMordhauDamage, DamageType) == 0x000090, "Member 'AdvancedCharacter_ReceiveMordhauDamage::DamageType' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_ReceiveMordhauDamage, SubDamageType) == 0x000091, "Member 'AdvancedCharacter_ReceiveMordhauDamage::SubDamageType' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_ReceiveMordhauDamage, Source) == 0x000098, "Member 'AdvancedCharacter_ReceiveMordhauDamage::Source' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_ReceiveMordhauDamage, Agent) == 0x0000A0, "Member 'AdvancedCharacter_ReceiveMordhauDamage::Agent' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_ReceiveMordhauDamage, EventInstigator) == 0x0000A8, "Member 'AdvancedCharacter_ReceiveMordhauDamage::EventInstigator' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.RegisterMaterialToDissolve
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCharacter_RegisterMaterialToDissolve final
{
public:
	class UMaterialInstanceDynamic*               Mat;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_RegisterMaterialToDissolve) == 0x000008, "Wrong alignment on AdvancedCharacter_RegisterMaterialToDissolve");
static_assert(sizeof(AdvancedCharacter_RegisterMaterialToDissolve) == 0x000008, "Wrong size on AdvancedCharacter_RegisterMaterialToDissolve");
static_assert(offsetof(AdvancedCharacter_RegisterMaterialToDissolve, Mat) == 0x000000, "Member 'AdvancedCharacter_RegisterMaterialToDissolve::Mat' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.RequestMeshEnablePhysics
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCharacter_RequestMeshEnablePhysics final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_RequestMeshEnablePhysics) == 0x000004, "Wrong alignment on AdvancedCharacter_RequestMeshEnablePhysics");
static_assert(sizeof(AdvancedCharacter_RequestMeshEnablePhysics) == 0x000004, "Wrong size on AdvancedCharacter_RequestMeshEnablePhysics");
static_assert(offsetof(AdvancedCharacter_RequestMeshEnablePhysics, Duration) == 0x000000, "Member 'AdvancedCharacter_RequestMeshEnablePhysics::Duration' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.ServerLookUp
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCharacter_ServerLookUp final
{
public:
	float                                         NewLookUp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_ServerLookUp) == 0x000004, "Wrong alignment on AdvancedCharacter_ServerLookUp");
static_assert(sizeof(AdvancedCharacter_ServerLookUp) == 0x000004, "Wrong size on AdvancedCharacter_ServerLookUp");
static_assert(offsetof(AdvancedCharacter_ServerLookUp, NewLookUp) == 0x000000, "Member 'AdvancedCharacter_ServerLookUp::NewLookUp' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.SetAdditiveOverrideType
// 0x000C (0x000C - 0x0000)
struct AdvancedCharacter_SetAdditiveOverrideType final
{
public:
	class FName                                   NewType;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_SetAdditiveOverrideType) == 0x000004, "Wrong alignment on AdvancedCharacter_SetAdditiveOverrideType");
static_assert(sizeof(AdvancedCharacter_SetAdditiveOverrideType) == 0x00000C, "Wrong size on AdvancedCharacter_SetAdditiveOverrideType");
static_assert(offsetof(AdvancedCharacter_SetAdditiveOverrideType, NewType) == 0x000000, "Member 'AdvancedCharacter_SetAdditiveOverrideType::NewType' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_SetAdditiveOverrideType, Duration) == 0x000008, "Member 'AdvancedCharacter_SetAdditiveOverrideType::Duration' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.SetAnimPosition
// 0x0010 (0x0010 - 0x0000)
struct AdvancedCharacter_SetAnimPosition final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewPosition;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCharacter_SetAnimPosition) == 0x000008, "Wrong alignment on AdvancedCharacter_SetAnimPosition");
static_assert(sizeof(AdvancedCharacter_SetAnimPosition) == 0x000010, "Wrong size on AdvancedCharacter_SetAnimPosition");
static_assert(offsetof(AdvancedCharacter_SetAnimPosition, Montage) == 0x000000, "Member 'AdvancedCharacter_SetAnimPosition::Montage' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_SetAnimPosition, NewPosition) == 0x000008, "Member 'AdvancedCharacter_SetAnimPosition::NewPosition' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.SetAnimRate
// 0x0010 (0x0010 - 0x0000)
struct AdvancedCharacter_SetAnimRate final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewRate;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCharacter_SetAnimRate) == 0x000008, "Wrong alignment on AdvancedCharacter_SetAnimRate");
static_assert(sizeof(AdvancedCharacter_SetAnimRate) == 0x000010, "Wrong size on AdvancedCharacter_SetAnimRate");
static_assert(offsetof(AdvancedCharacter_SetAnimRate, Montage) == 0x000000, "Member 'AdvancedCharacter_SetAnimRate::Montage' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_SetAnimRate, NewRate) == 0x000008, "Member 'AdvancedCharacter_SetAnimRate::NewRate' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.SetIsRagdollFalling
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCharacter_SetIsRagdollFalling final
{
public:
	bool                                          bInIsRagdollFalling;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_SetIsRagdollFalling) == 0x000001, "Wrong alignment on AdvancedCharacter_SetIsRagdollFalling");
static_assert(sizeof(AdvancedCharacter_SetIsRagdollFalling) == 0x000001, "Wrong size on AdvancedCharacter_SetIsRagdollFalling");
static_assert(offsetof(AdvancedCharacter_SetIsRagdollFalling, bInIsRagdollFalling) == 0x000000, "Member 'AdvancedCharacter_SetIsRagdollFalling::bInIsRagdollFalling' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.SetLocationLagInductionTarget
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCharacter_SetLocationLagInductionTarget final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeSpeed;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_SetLocationLagInductionTarget) == 0x000004, "Wrong alignment on AdvancedCharacter_SetLocationLagInductionTarget");
static_assert(sizeof(AdvancedCharacter_SetLocationLagInductionTarget) == 0x000008, "Wrong size on AdvancedCharacter_SetLocationLagInductionTarget");
static_assert(offsetof(AdvancedCharacter_SetLocationLagInductionTarget, Amount) == 0x000000, "Member 'AdvancedCharacter_SetLocationLagInductionTarget::Amount' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_SetLocationLagInductionTarget, ChangeSpeed) == 0x000004, "Member 'AdvancedCharacter_SetLocationLagInductionTarget::ChangeSpeed' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.SetLookLagInductionTarget
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCharacter_SetLookLagInductionTarget final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeSpeed;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_SetLookLagInductionTarget) == 0x000004, "Wrong alignment on AdvancedCharacter_SetLookLagInductionTarget");
static_assert(sizeof(AdvancedCharacter_SetLookLagInductionTarget) == 0x000008, "Wrong size on AdvancedCharacter_SetLookLagInductionTarget");
static_assert(offsetof(AdvancedCharacter_SetLookLagInductionTarget, Amount) == 0x000000, "Member 'AdvancedCharacter_SetLookLagInductionTarget::Amount' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_SetLookLagInductionTarget, ChangeSpeed) == 0x000004, "Member 'AdvancedCharacter_SetLookLagInductionTarget::ChangeSpeed' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.SetMaxAnimBlendWeight
// 0x0010 (0x0010 - 0x0000)
struct AdvancedCharacter_SetMaxAnimBlendWeight final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAmount;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCharacter_SetMaxAnimBlendWeight) == 0x000008, "Wrong alignment on AdvancedCharacter_SetMaxAnimBlendWeight");
static_assert(sizeof(AdvancedCharacter_SetMaxAnimBlendWeight) == 0x000010, "Wrong size on AdvancedCharacter_SetMaxAnimBlendWeight");
static_assert(offsetof(AdvancedCharacter_SetMaxAnimBlendWeight, Montage) == 0x000000, "Member 'AdvancedCharacter_SetMaxAnimBlendWeight::Montage' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_SetMaxAnimBlendWeight, MaxAmount) == 0x000008, "Member 'AdvancedCharacter_SetMaxAnimBlendWeight::MaxAmount' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.SetOnSmoke
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCharacter_SetOnSmoke final
{
public:
	class AMasterField*                           SmokeField;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_SetOnSmoke) == 0x000008, "Wrong alignment on AdvancedCharacter_SetOnSmoke");
static_assert(sizeof(AdvancedCharacter_SetOnSmoke) == 0x000008, "Wrong size on AdvancedCharacter_SetOnSmoke");
static_assert(offsetof(AdvancedCharacter_SetOnSmoke, SmokeField) == 0x000000, "Member 'AdvancedCharacter_SetOnSmoke::SmokeField' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.SetTurnCaps
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCharacter_SetTurnCaps final
{
public:
	float                                         Turn_0;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookUp;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_SetTurnCaps) == 0x000004, "Wrong alignment on AdvancedCharacter_SetTurnCaps");
static_assert(sizeof(AdvancedCharacter_SetTurnCaps) == 0x000008, "Wrong size on AdvancedCharacter_SetTurnCaps");
static_assert(offsetof(AdvancedCharacter_SetTurnCaps, Turn_0) == 0x000000, "Member 'AdvancedCharacter_SetTurnCaps::Turn_0' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_SetTurnCaps, LookUp) == 0x000004, "Member 'AdvancedCharacter_SetTurnCaps::LookUp' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.SpawnParticlesAttached
// 0x0038 (0x0038 - 0x0000)
struct AdvancedCharacter_SpawnParticlesAttached final
{
public:
	class UParticleSystem*                        Particle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EAttachLocation                               AttachType;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Socket;                                            // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_SpawnParticlesAttached) == 0x000008, "Wrong alignment on AdvancedCharacter_SpawnParticlesAttached");
static_assert(sizeof(AdvancedCharacter_SpawnParticlesAttached) == 0x000038, "Wrong size on AdvancedCharacter_SpawnParticlesAttached");
static_assert(offsetof(AdvancedCharacter_SpawnParticlesAttached, Particle) == 0x000000, "Member 'AdvancedCharacter_SpawnParticlesAttached::Particle' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_SpawnParticlesAttached, Location) == 0x000008, "Member 'AdvancedCharacter_SpawnParticlesAttached::Location' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_SpawnParticlesAttached, Rotation) == 0x000014, "Member 'AdvancedCharacter_SpawnParticlesAttached::Rotation' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_SpawnParticlesAttached, AttachType) == 0x000020, "Member 'AdvancedCharacter_SpawnParticlesAttached::AttachType' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_SpawnParticlesAttached, Socket) == 0x000024, "Member 'AdvancedCharacter_SpawnParticlesAttached::Socket' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_SpawnParticlesAttached, bForce) == 0x00002C, "Member 'AdvancedCharacter_SpawnParticlesAttached::bForce' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_SpawnParticlesAttached, ReturnValue) == 0x000030, "Member 'AdvancedCharacter_SpawnParticlesAttached::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.StartRagdollWithBlend
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCharacter_StartRagdollWithBlend final
{
public:
	float                                         BlendDuration;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_StartRagdollWithBlend) == 0x000004, "Wrong alignment on AdvancedCharacter_StartRagdollWithBlend");
static_assert(sizeof(AdvancedCharacter_StartRagdollWithBlend) == 0x000004, "Wrong size on AdvancedCharacter_StartRagdollWithBlend");
static_assert(offsetof(AdvancedCharacter_StartRagdollWithBlend, BlendDuration) == 0x000000, "Member 'AdvancedCharacter_StartRagdollWithBlend::BlendDuration' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.StopAnim
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCharacter_StopAnim final
{
public:
	float                                         FadeOut;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_StopAnim) == 0x000004, "Wrong alignment on AdvancedCharacter_StopAnim");
static_assert(sizeof(AdvancedCharacter_StopAnim) == 0x000004, "Wrong size on AdvancedCharacter_StopAnim");
static_assert(offsetof(AdvancedCharacter_StopAnim, FadeOut) == 0x000000, "Member 'AdvancedCharacter_StopAnim::FadeOut' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.StopCharacterForceFeeback
// 0x0010 (0x0010 - 0x0000)
struct AdvancedCharacter_StopCharacterForceFeeback final
{
public:
	class UForceFeedbackEffect*                   ForceFeedbackEffect;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_StopCharacterForceFeeback) == 0x000008, "Wrong alignment on AdvancedCharacter_StopCharacterForceFeeback");
static_assert(sizeof(AdvancedCharacter_StopCharacterForceFeeback) == 0x000010, "Wrong size on AdvancedCharacter_StopCharacterForceFeeback");
static_assert(offsetof(AdvancedCharacter_StopCharacterForceFeeback, ForceFeedbackEffect) == 0x000000, "Member 'AdvancedCharacter_StopCharacterForceFeeback::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_StopCharacterForceFeeback, Tag) == 0x000008, "Member 'AdvancedCharacter_StopCharacterForceFeeback::Tag' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.StopHealthRegen
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCharacter_StopHealthRegen final
{
public:
	float                                         ExtraTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_StopHealthRegen) == 0x000004, "Wrong alignment on AdvancedCharacter_StopHealthRegen");
static_assert(sizeof(AdvancedCharacter_StopHealthRegen) == 0x000004, "Wrong size on AdvancedCharacter_StopHealthRegen");
static_assert(offsetof(AdvancedCharacter_StopHealthRegen, ExtraTime) == 0x000000, "Member 'AdvancedCharacter_StopHealthRegen::ExtraTime' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.StopMontage
// 0x0010 (0x0010 - 0x0000)
struct AdvancedCharacter_StopMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOut;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCharacter_StopMontage) == 0x000008, "Wrong alignment on AdvancedCharacter_StopMontage");
static_assert(sizeof(AdvancedCharacter_StopMontage) == 0x000010, "Wrong size on AdvancedCharacter_StopMontage");
static_assert(offsetof(AdvancedCharacter_StopMontage, Montage) == 0x000000, "Member 'AdvancedCharacter_StopMontage::Montage' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_StopMontage, FadeOut) == 0x000008, "Member 'AdvancedCharacter_StopMontage::FadeOut' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.StopRegen
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCharacter_StopRegen final
{
public:
	float                                         ExtraTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_StopRegen) == 0x000004, "Wrong alignment on AdvancedCharacter_StopRegen");
static_assert(sizeof(AdvancedCharacter_StopRegen) == 0x000004, "Wrong size on AdvancedCharacter_StopRegen");
static_assert(offsetof(AdvancedCharacter_StopRegen, ExtraTime) == 0x000000, "Member 'AdvancedCharacter_StopRegen::ExtraTime' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.TraceSphericalLimbs
// 0x00A8 (0x00A8 - 0x0000)
struct AdvancedCharacter_TraceSphericalLimbs final
{
public:
	struct FVector                                TraceStart;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceEnd;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             OutResult;                                         // 0x0018(0x008C)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A4(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCharacter_TraceSphericalLimbs) == 0x000004, "Wrong alignment on AdvancedCharacter_TraceSphericalLimbs");
static_assert(sizeof(AdvancedCharacter_TraceSphericalLimbs) == 0x0000A8, "Wrong size on AdvancedCharacter_TraceSphericalLimbs");
static_assert(offsetof(AdvancedCharacter_TraceSphericalLimbs, TraceStart) == 0x000000, "Member 'AdvancedCharacter_TraceSphericalLimbs::TraceStart' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_TraceSphericalLimbs, TraceEnd) == 0x00000C, "Member 'AdvancedCharacter_TraceSphericalLimbs::TraceEnd' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_TraceSphericalLimbs, OutResult) == 0x000018, "Member 'AdvancedCharacter_TraceSphericalLimbs::OutResult' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_TraceSphericalLimbs, ReturnValue) == 0x0000A4, "Member 'AdvancedCharacter_TraceSphericalLimbs::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.Trip
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCharacter_Trip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_Trip) == 0x000001, "Wrong alignment on AdvancedCharacter_Trip");
static_assert(sizeof(AdvancedCharacter_Trip) == 0x000001, "Wrong size on AdvancedCharacter_Trip");
static_assert(offsetof(AdvancedCharacter_Trip, ReturnValue) == 0x000000, "Member 'AdvancedCharacter_Trip::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.Turn
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCharacter_Turn final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAbsolute;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCharacter_Turn) == 0x000004, "Wrong alignment on AdvancedCharacter_Turn");
static_assert(sizeof(AdvancedCharacter_Turn) == 0x000008, "Wrong size on AdvancedCharacter_Turn");
static_assert(offsetof(AdvancedCharacter_Turn, Val) == 0x000000, "Member 'AdvancedCharacter_Turn::Val' has a wrong offset!");
static_assert(offsetof(AdvancedCharacter_Turn, bIsAbsolute) == 0x000004, "Member 'AdvancedCharacter_Turn::bIsAbsolute' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.TurnAtRate
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCharacter_TurnAtRate final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_TurnAtRate) == 0x000004, "Wrong alignment on AdvancedCharacter_TurnAtRate");
static_assert(sizeof(AdvancedCharacter_TurnAtRate) == 0x000004, "Wrong size on AdvancedCharacter_TurnAtRate");
static_assert(offsetof(AdvancedCharacter_TurnAtRate, Val) == 0x000000, "Member 'AdvancedCharacter_TurnAtRate::Val' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.TurnNotAbsolute
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCharacter_TurnNotAbsolute final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_TurnNotAbsolute) == 0x000004, "Wrong alignment on AdvancedCharacter_TurnNotAbsolute");
static_assert(sizeof(AdvancedCharacter_TurnNotAbsolute) == 0x000004, "Wrong size on AdvancedCharacter_TurnNotAbsolute");
static_assert(offsetof(AdvancedCharacter_TurnNotAbsolute, Value) == 0x000000, "Member 'AdvancedCharacter_TurnNotAbsolute::Value' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.GetControllerIncludingVehicle
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCharacter_GetControllerIncludingVehicle final
{
public:
	class AController*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_GetControllerIncludingVehicle) == 0x000008, "Wrong alignment on AdvancedCharacter_GetControllerIncludingVehicle");
static_assert(sizeof(AdvancedCharacter_GetControllerIncludingVehicle) == 0x000008, "Wrong size on AdvancedCharacter_GetControllerIncludingVehicle");
static_assert(offsetof(AdvancedCharacter_GetControllerIncludingVehicle, ReturnValue) == 0x000000, "Member 'AdvancedCharacter_GetControllerIncludingVehicle::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.GetDistanceIntoSmokeField
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCharacter_GetDistanceIntoSmokeField final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_GetDistanceIntoSmokeField) == 0x000004, "Wrong alignment on AdvancedCharacter_GetDistanceIntoSmokeField");
static_assert(sizeof(AdvancedCharacter_GetDistanceIntoSmokeField) == 0x000004, "Wrong size on AdvancedCharacter_GetDistanceIntoSmokeField");
static_assert(offsetof(AdvancedCharacter_GetDistanceIntoSmokeField, ReturnValue) == 0x000000, "Member 'AdvancedCharacter_GetDistanceIntoSmokeField::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.GetDistanceIntoSmokeFieldSmoothed
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCharacter_GetDistanceIntoSmokeFieldSmoothed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_GetDistanceIntoSmokeFieldSmoothed) == 0x000004, "Wrong alignment on AdvancedCharacter_GetDistanceIntoSmokeFieldSmoothed");
static_assert(sizeof(AdvancedCharacter_GetDistanceIntoSmokeFieldSmoothed) == 0x000004, "Wrong size on AdvancedCharacter_GetDistanceIntoSmokeFieldSmoothed");
static_assert(offsetof(AdvancedCharacter_GetDistanceIntoSmokeFieldSmoothed, ReturnValue) == 0x000000, "Member 'AdvancedCharacter_GetDistanceIntoSmokeFieldSmoothed::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.GetIsDead
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCharacter_GetIsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_GetIsDead) == 0x000001, "Wrong alignment on AdvancedCharacter_GetIsDead");
static_assert(sizeof(AdvancedCharacter_GetIsDead) == 0x000001, "Wrong size on AdvancedCharacter_GetIsDead");
static_assert(offsetof(AdvancedCharacter_GetIsDead, ReturnValue) == 0x000000, "Member 'AdvancedCharacter_GetIsDead::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.GetLookUpValue
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCharacter_GetLookUpValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_GetLookUpValue) == 0x000004, "Wrong alignment on AdvancedCharacter_GetLookUpValue");
static_assert(sizeof(AdvancedCharacter_GetLookUpValue) == 0x000004, "Wrong size on AdvancedCharacter_GetLookUpValue");
static_assert(offsetof(AdvancedCharacter_GetLookUpValue, ReturnValue) == 0x000000, "Member 'AdvancedCharacter_GetLookUpValue::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.GetMotion
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCharacter_GetMotion final
{
public:
	class UMordhauMotion*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_GetMotion) == 0x000008, "Wrong alignment on AdvancedCharacter_GetMotion");
static_assert(sizeof(AdvancedCharacter_GetMotion) == 0x000008, "Wrong size on AdvancedCharacter_GetMotion");
static_assert(offsetof(AdvancedCharacter_GetMotion, ReturnValue) == 0x000000, "Member 'AdvancedCharacter_GetMotion::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.GetRawLookUpValue
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCharacter_GetRawLookUpValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_GetRawLookUpValue) == 0x000004, "Wrong alignment on AdvancedCharacter_GetRawLookUpValue");
static_assert(sizeof(AdvancedCharacter_GetRawLookUpValue) == 0x000004, "Wrong size on AdvancedCharacter_GetRawLookUpValue");
static_assert(offsetof(AdvancedCharacter_GetRawLookUpValue, ReturnValue) == 0x000000, "Member 'AdvancedCharacter_GetRawLookUpValue::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.IsAirborne
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCharacter_IsAirborne final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_IsAirborne) == 0x000001, "Wrong alignment on AdvancedCharacter_IsAirborne");
static_assert(sizeof(AdvancedCharacter_IsAirborne) == 0x000001, "Wrong size on AdvancedCharacter_IsAirborne");
static_assert(offsetof(AdvancedCharacter_IsAirborne, ReturnValue) == 0x000000, "Member 'AdvancedCharacter_IsAirborne::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.IsLocallyControlledIncludingVehicle
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCharacter_IsLocallyControlledIncludingVehicle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_IsLocallyControlledIncludingVehicle) == 0x000001, "Wrong alignment on AdvancedCharacter_IsLocallyControlledIncludingVehicle");
static_assert(sizeof(AdvancedCharacter_IsLocallyControlledIncludingVehicle) == 0x000001, "Wrong size on AdvancedCharacter_IsLocallyControlledIncludingVehicle");
static_assert(offsetof(AdvancedCharacter_IsLocallyControlledIncludingVehicle, ReturnValue) == 0x000000, "Member 'AdvancedCharacter_IsLocallyControlledIncludingVehicle::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.IsLocallyControlledOrUncontrolled
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCharacter_IsLocallyControlledOrUncontrolled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_IsLocallyControlledOrUncontrolled) == 0x000001, "Wrong alignment on AdvancedCharacter_IsLocallyControlledOrUncontrolled");
static_assert(sizeof(AdvancedCharacter_IsLocallyControlledOrUncontrolled) == 0x000001, "Wrong size on AdvancedCharacter_IsLocallyControlledOrUncontrolled");
static_assert(offsetof(AdvancedCharacter_IsLocallyControlledOrUncontrolled, ReturnValue) == 0x000000, "Member 'AdvancedCharacter_IsLocallyControlledOrUncontrolled::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.IsLocallyPlayerControlled
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCharacter_IsLocallyPlayerControlled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_IsLocallyPlayerControlled) == 0x000001, "Wrong alignment on AdvancedCharacter_IsLocallyPlayerControlled");
static_assert(sizeof(AdvancedCharacter_IsLocallyPlayerControlled) == 0x000001, "Wrong size on AdvancedCharacter_IsLocallyPlayerControlled");
static_assert(offsetof(AdvancedCharacter_IsLocallyPlayerControlled, ReturnValue) == 0x000000, "Member 'AdvancedCharacter_IsLocallyPlayerControlled::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.IsLocallyPlayerControlledIncludingVehicle
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCharacter_IsLocallyPlayerControlledIncludingVehicle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_IsLocallyPlayerControlledIncludingVehicle) == 0x000001, "Wrong alignment on AdvancedCharacter_IsLocallyPlayerControlledIncludingVehicle");
static_assert(sizeof(AdvancedCharacter_IsLocallyPlayerControlledIncludingVehicle) == 0x000001, "Wrong size on AdvancedCharacter_IsLocallyPlayerControlledIncludingVehicle");
static_assert(offsetof(AdvancedCharacter_IsLocallyPlayerControlledIncludingVehicle, ReturnValue) == 0x000000, "Member 'AdvancedCharacter_IsLocallyPlayerControlledIncludingVehicle::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.IsPlayerControlledIncludingVehicle
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCharacter_IsPlayerControlledIncludingVehicle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_IsPlayerControlledIncludingVehicle) == 0x000001, "Wrong alignment on AdvancedCharacter_IsPlayerControlledIncludingVehicle");
static_assert(sizeof(AdvancedCharacter_IsPlayerControlledIncludingVehicle) == 0x000001, "Wrong size on AdvancedCharacter_IsPlayerControlledIncludingVehicle");
static_assert(offsetof(AdvancedCharacter_IsPlayerControlledIncludingVehicle, ReturnValue) == 0x000000, "Member 'AdvancedCharacter_IsPlayerControlledIncludingVehicle::ReturnValue' has a wrong offset!");

// Function Mordhau.AdvancedCharacter.IsViewTarget
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCharacter_IsViewTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCharacter_IsViewTarget) == 0x000001, "Wrong alignment on AdvancedCharacter_IsViewTarget");
static_assert(sizeof(AdvancedCharacter_IsViewTarget) == 0x000001, "Wrong size on AdvancedCharacter_IsViewTarget");
static_assert(offsetof(AdvancedCharacter_IsViewTarget, ReturnValue) == 0x000000, "Member 'AdvancedCharacter_IsViewTarget::ReturnValue' has a wrong offset!");

// Function Mordhau.CustomizationReplicationActor.AssignDataFromProfile
// 0x00B8 (0x00B8 - 0x0000)
struct CustomizationReplicationActor_AssignDataFromProfile final
{
public:
	struct FCharacterProfile                      Profile;                                           // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationReplicationActor_AssignDataFromProfile) == 0x000008, "Wrong alignment on CustomizationReplicationActor_AssignDataFromProfile");
static_assert(sizeof(CustomizationReplicationActor_AssignDataFromProfile) == 0x0000B8, "Wrong size on CustomizationReplicationActor_AssignDataFromProfile");
static_assert(offsetof(CustomizationReplicationActor_AssignDataFromProfile, Profile) == 0x000000, "Member 'CustomizationReplicationActor_AssignDataFromProfile::Profile' has a wrong offset!");

// Function Mordhau.CustomizationReplicationActor.IsUpToDate
// 0x0001 (0x0001 - 0x0000)
struct CustomizationReplicationActor_IsUpToDate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationReplicationActor_IsUpToDate) == 0x000001, "Wrong alignment on CustomizationReplicationActor_IsUpToDate");
static_assert(sizeof(CustomizationReplicationActor_IsUpToDate) == 0x000001, "Wrong size on CustomizationReplicationActor_IsUpToDate");
static_assert(offsetof(CustomizationReplicationActor_IsUpToDate, ReturnValue) == 0x000000, "Member 'CustomizationReplicationActor_IsUpToDate::ReturnValue' has a wrong offset!");

// Function Mordhau.CustomizationReplicationActor.RegisterCharacter
// 0x0008 (0x0008 - 0x0000)
struct CustomizationReplicationActor_RegisterCharacter final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationReplicationActor_RegisterCharacter) == 0x000008, "Wrong alignment on CustomizationReplicationActor_RegisterCharacter");
static_assert(sizeof(CustomizationReplicationActor_RegisterCharacter) == 0x000008, "Wrong size on CustomizationReplicationActor_RegisterCharacter");
static_assert(offsetof(CustomizationReplicationActor_RegisterCharacter, Character) == 0x000000, "Member 'CustomizationReplicationActor_RegisterCharacter::Character' has a wrong offset!");

// Function Mordhau.CustomizationReplicationActor.UnregisterCharacter
// 0x0008 (0x0008 - 0x0000)
struct CustomizationReplicationActor_UnregisterCharacter final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationReplicationActor_UnregisterCharacter) == 0x000008, "Wrong alignment on CustomizationReplicationActor_UnregisterCharacter");
static_assert(sizeof(CustomizationReplicationActor_UnregisterCharacter) == 0x000008, "Wrong size on CustomizationReplicationActor_UnregisterCharacter");
static_assert(offsetof(CustomizationReplicationActor_UnregisterCharacter, Character) == 0x000000, "Member 'CustomizationReplicationActor_UnregisterCharacter::Character' has a wrong offset!");

// Function Mordhau.CustomizationReplicationActor.UpdateCharacterProfile
// 0x0008 (0x0008 - 0x0000)
struct CustomizationReplicationActor_UpdateCharacterProfile final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationReplicationActor_UpdateCharacterProfile) == 0x000008, "Wrong alignment on CustomizationReplicationActor_UpdateCharacterProfile");
static_assert(sizeof(CustomizationReplicationActor_UpdateCharacterProfile) == 0x000008, "Wrong size on CustomizationReplicationActor_UpdateCharacterProfile");
static_assert(offsetof(CustomizationReplicationActor_UpdateCharacterProfile, Character) == 0x000000, "Member 'CustomizationReplicationActor_UpdateCharacterProfile::Character' has a wrong offset!");

// Function Mordhau.MordhauNewsWidget.HandleAndBroadcastErrorMessage
// 0x0018 (0x0018 - 0x0000)
struct MordhauNewsWidget_HandleAndBroadcastErrorMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResponseCode;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ElapsedTime;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauNewsWidget_HandleAndBroadcastErrorMessage) == 0x000008, "Wrong alignment on MordhauNewsWidget_HandleAndBroadcastErrorMessage");
static_assert(sizeof(MordhauNewsWidget_HandleAndBroadcastErrorMessage) == 0x000018, "Wrong size on MordhauNewsWidget_HandleAndBroadcastErrorMessage");
static_assert(offsetof(MordhauNewsWidget_HandleAndBroadcastErrorMessage, Message) == 0x000000, "Member 'MordhauNewsWidget_HandleAndBroadcastErrorMessage::Message' has a wrong offset!");
static_assert(offsetof(MordhauNewsWidget_HandleAndBroadcastErrorMessage, ResponseCode) == 0x000010, "Member 'MordhauNewsWidget_HandleAndBroadcastErrorMessage::ResponseCode' has a wrong offset!");
static_assert(offsetof(MordhauNewsWidget_HandleAndBroadcastErrorMessage, ElapsedTime) == 0x000014, "Member 'MordhauNewsWidget_HandleAndBroadcastErrorMessage::ElapsedTime' has a wrong offset!");

// Function Mordhau.MordhauNewsWidget.SendHTTPRequest
// 0x0001 (0x0001 - 0x0000)
struct MordhauNewsWidget_SendHTTPRequest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauNewsWidget_SendHTTPRequest) == 0x000001, "Wrong alignment on MordhauNewsWidget_SendHTTPRequest");
static_assert(sizeof(MordhauNewsWidget_SendHTTPRequest) == 0x000001, "Wrong size on MordhauNewsWidget_SendHTTPRequest");
static_assert(offsetof(MordhauNewsWidget_SendHTTPRequest, ReturnValue) == 0x000000, "Member 'MordhauNewsWidget_SendHTTPRequest::ReturnValue' has a wrong offset!");

// Function Mordhau.DamageableComponent.ModifyDamage
// 0x00C8 (0x00C8 - 0x0000)
struct DamageableComponent_ModifyDamage final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMordhauDamageInfo                     DamageInfo;                                        // 0x0008(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x00B0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x00C0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DamageableComponent_ModifyDamage) == 0x000008, "Wrong alignment on DamageableComponent_ModifyDamage");
static_assert(sizeof(DamageableComponent_ModifyDamage) == 0x0000C8, "Wrong size on DamageableComponent_ModifyDamage");
static_assert(offsetof(DamageableComponent_ModifyDamage, DamageAmount) == 0x000000, "Member 'DamageableComponent_ModifyDamage::DamageAmount' has a wrong offset!");
static_assert(offsetof(DamageableComponent_ModifyDamage, DamageInfo) == 0x000008, "Member 'DamageableComponent_ModifyDamage::DamageInfo' has a wrong offset!");
static_assert(offsetof(DamageableComponent_ModifyDamage, EventInstigator) == 0x0000B0, "Member 'DamageableComponent_ModifyDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(DamageableComponent_ModifyDamage, DamageCauser) == 0x0000B8, "Member 'DamageableComponent_ModifyDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(DamageableComponent_ModifyDamage, ReturnValue) == 0x0000C0, "Member 'DamageableComponent_ModifyDamage::ReturnValue' has a wrong offset!");

// Function Mordhau.DamageableComponent.OnPostTakeDamage
// 0x00C0 (0x00C0 - 0x0000)
struct DamageableComponent_OnPostTakeDamage final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMordhauDamageInfo                     DamageInfo;                                        // 0x0008(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x00B0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamageableComponent_OnPostTakeDamage) == 0x000008, "Wrong alignment on DamageableComponent_OnPostTakeDamage");
static_assert(sizeof(DamageableComponent_OnPostTakeDamage) == 0x0000C0, "Wrong size on DamageableComponent_OnPostTakeDamage");
static_assert(offsetof(DamageableComponent_OnPostTakeDamage, DamageAmount) == 0x000000, "Member 'DamageableComponent_OnPostTakeDamage::DamageAmount' has a wrong offset!");
static_assert(offsetof(DamageableComponent_OnPostTakeDamage, DamageInfo) == 0x000008, "Member 'DamageableComponent_OnPostTakeDamage::DamageInfo' has a wrong offset!");
static_assert(offsetof(DamageableComponent_OnPostTakeDamage, EventInstigator) == 0x0000B0, "Member 'DamageableComponent_OnPostTakeDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(DamageableComponent_OnPostTakeDamage, DamageCauser) == 0x0000B8, "Member 'DamageableComponent_OnPostTakeDamage::DamageCauser' has a wrong offset!");

// Function Mordhau.DamageableComponent.OnTakeDamage
// 0x00C8 (0x00C8 - 0x0000)
struct DamageableComponent_OnTakeDamage final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMordhauDamageInfo                     DamageInfo;                                        // 0x0008(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x00B0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x00C0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DamageableComponent_OnTakeDamage) == 0x000008, "Wrong alignment on DamageableComponent_OnTakeDamage");
static_assert(sizeof(DamageableComponent_OnTakeDamage) == 0x0000C8, "Wrong size on DamageableComponent_OnTakeDamage");
static_assert(offsetof(DamageableComponent_OnTakeDamage, DamageAmount) == 0x000000, "Member 'DamageableComponent_OnTakeDamage::DamageAmount' has a wrong offset!");
static_assert(offsetof(DamageableComponent_OnTakeDamage, DamageInfo) == 0x000008, "Member 'DamageableComponent_OnTakeDamage::DamageInfo' has a wrong offset!");
static_assert(offsetof(DamageableComponent_OnTakeDamage, EventInstigator) == 0x0000B0, "Member 'DamageableComponent_OnTakeDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(DamageableComponent_OnTakeDamage, DamageCauser) == 0x0000B8, "Member 'DamageableComponent_OnTakeDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(DamageableComponent_OnTakeDamage, ReturnValue) == 0x0000C0, "Member 'DamageableComponent_OnTakeDamage::ReturnValue' has a wrong offset!");

// Function Mordhau.DamageableComponent.OnTookDamage
// 0x0028 (0x0028 - 0x0000)
struct DamageableComponent_OnTookDamage final
{
public:
	bool                                          bWillKill;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMordhauDamageType                            Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SubType;                                           // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bone;                                              // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Source;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Agent;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamageableComponent_OnTookDamage) == 0x000008, "Wrong alignment on DamageableComponent_OnTookDamage");
static_assert(sizeof(DamageableComponent_OnTookDamage) == 0x000028, "Wrong size on DamageableComponent_OnTookDamage");
static_assert(offsetof(DamageableComponent_OnTookDamage, bWillKill) == 0x000000, "Member 'DamageableComponent_OnTookDamage::bWillKill' has a wrong offset!");
static_assert(offsetof(DamageableComponent_OnTookDamage, Type) == 0x000001, "Member 'DamageableComponent_OnTookDamage::Type' has a wrong offset!");
static_assert(offsetof(DamageableComponent_OnTookDamage, SubType) == 0x000002, "Member 'DamageableComponent_OnTookDamage::SubType' has a wrong offset!");
static_assert(offsetof(DamageableComponent_OnTookDamage, bone) == 0x000004, "Member 'DamageableComponent_OnTookDamage::bone' has a wrong offset!");
static_assert(offsetof(DamageableComponent_OnTookDamage, Point) == 0x00000C, "Member 'DamageableComponent_OnTookDamage::Point' has a wrong offset!");
static_assert(offsetof(DamageableComponent_OnTookDamage, Source) == 0x000018, "Member 'DamageableComponent_OnTookDamage::Source' has a wrong offset!");
static_assert(offsetof(DamageableComponent_OnTookDamage, Agent) == 0x000020, "Member 'DamageableComponent_OnTookDamage::Agent' has a wrong offset!");

// Function Mordhau.MordhauCameraComponent.ComputeCameraPOV
// 0x001C (0x001C - 0x0000)
struct MordhauCameraComponent_ComputeCameraPOV final
{
public:
	struct FPOV                                   ReturnValue;                                       // 0x0000(0x001C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCameraComponent_ComputeCameraPOV) == 0x000004, "Wrong alignment on MordhauCameraComponent_ComputeCameraPOV");
static_assert(sizeof(MordhauCameraComponent_ComputeCameraPOV) == 0x00001C, "Wrong size on MordhauCameraComponent_ComputeCameraPOV");
static_assert(offsetof(MordhauCameraComponent_ComputeCameraPOV, ReturnValue) == 0x000000, "Member 'MordhauCameraComponent_ComputeCameraPOV::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCameraComponent.IsBlendingFromMapView
// 0x0001 (0x0001 - 0x0000)
struct MordhauCameraComponent_IsBlendingFromMapView final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCameraComponent_IsBlendingFromMapView) == 0x000001, "Wrong alignment on MordhauCameraComponent_IsBlendingFromMapView");
static_assert(sizeof(MordhauCameraComponent_IsBlendingFromMapView) == 0x000001, "Wrong size on MordhauCameraComponent_IsBlendingFromMapView");
static_assert(offsetof(MordhauCameraComponent_IsBlendingFromMapView, ReturnValue) == 0x000000, "Member 'MordhauCameraComponent_IsBlendingFromMapView::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauActor.OnCooperativeHoldProgressUpdated
// 0x0008 (0x0008 - 0x0000)
struct MordhauActor_OnCooperativeHoldProgressUpdated final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauActor_OnCooperativeHoldProgressUpdated) == 0x000004, "Wrong alignment on MordhauActor_OnCooperativeHoldProgressUpdated");
static_assert(sizeof(MordhauActor_OnCooperativeHoldProgressUpdated) == 0x000008, "Wrong size on MordhauActor_OnCooperativeHoldProgressUpdated");
static_assert(offsetof(MordhauActor_OnCooperativeHoldProgressUpdated, Progress) == 0x000000, "Member 'MordhauActor_OnCooperativeHoldProgressUpdated::Progress' has a wrong offset!");
static_assert(offsetof(MordhauActor_OnCooperativeHoldProgressUpdated, OldValue) == 0x000004, "Member 'MordhauActor_OnCooperativeHoldProgressUpdated::OldValue' has a wrong offset!");

// Function Mordhau.MordhauActor.OnLocalPlayerUsedToKillOther
// 0x0028 (0x0028 - 0x0000)
struct MordhauActor_OnLocalPlayerUsedToKillOther final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMordhauDamageType                            Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SubType;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bone;                                              // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Source;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauActor_OnLocalPlayerUsedToKillOther) == 0x000008, "Wrong alignment on MordhauActor_OnLocalPlayerUsedToKillOther");
static_assert(sizeof(MordhauActor_OnLocalPlayerUsedToKillOther) == 0x000028, "Wrong size on MordhauActor_OnLocalPlayerUsedToKillOther");
static_assert(offsetof(MordhauActor_OnLocalPlayerUsedToKillOther, Character) == 0x000000, "Member 'MordhauActor_OnLocalPlayerUsedToKillOther::Character' has a wrong offset!");
static_assert(offsetof(MordhauActor_OnLocalPlayerUsedToKillOther, Type) == 0x000008, "Member 'MordhauActor_OnLocalPlayerUsedToKillOther::Type' has a wrong offset!");
static_assert(offsetof(MordhauActor_OnLocalPlayerUsedToKillOther, SubType) == 0x000009, "Member 'MordhauActor_OnLocalPlayerUsedToKillOther::SubType' has a wrong offset!");
static_assert(offsetof(MordhauActor_OnLocalPlayerUsedToKillOther, bone) == 0x00000C, "Member 'MordhauActor_OnLocalPlayerUsedToKillOther::bone' has a wrong offset!");
static_assert(offsetof(MordhauActor_OnLocalPlayerUsedToKillOther, Point) == 0x000014, "Member 'MordhauActor_OnLocalPlayerUsedToKillOther::Point' has a wrong offset!");
static_assert(offsetof(MordhauActor_OnLocalPlayerUsedToKillOther, Source) == 0x000020, "Member 'MordhauActor_OnLocalPlayerUsedToKillOther::Source' has a wrong offset!");

// Function Mordhau.MordhauActor.OnPostDismemberedOther
// 0x0010 (0x0010 - 0x0000)
struct MordhauActor_OnPostDismemberedOther final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASeparatedBodyPart*                     Part;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauActor_OnPostDismemberedOther) == 0x000008, "Wrong alignment on MordhauActor_OnPostDismemberedOther");
static_assert(sizeof(MordhauActor_OnPostDismemberedOther) == 0x000010, "Wrong size on MordhauActor_OnPostDismemberedOther");
static_assert(offsetof(MordhauActor_OnPostDismemberedOther, bone) == 0x000000, "Member 'MordhauActor_OnPostDismemberedOther::bone' has a wrong offset!");
static_assert(offsetof(MordhauActor_OnPostDismemberedOther, Part) == 0x000008, "Member 'MordhauActor_OnPostDismemberedOther::Part' has a wrong offset!");

// Function Mordhau.MordhauActor.OnReceiveCosmeticHit
// 0x00A0 (0x00A0 - 0x0000)
struct MordhauActor_OnReceiveCosmeticHit final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Agent;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackMove                                   Move;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0014(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauActor_OnReceiveCosmeticHit) == 0x000008, "Wrong alignment on MordhauActor_OnReceiveCosmeticHit");
static_assert(sizeof(MordhauActor_OnReceiveCosmeticHit) == 0x0000A0, "Wrong size on MordhauActor_OnReceiveCosmeticHit");
static_assert(offsetof(MordhauActor_OnReceiveCosmeticHit, Source) == 0x000000, "Member 'MordhauActor_OnReceiveCosmeticHit::Source' has a wrong offset!");
static_assert(offsetof(MordhauActor_OnReceiveCosmeticHit, Agent) == 0x000008, "Member 'MordhauActor_OnReceiveCosmeticHit::Agent' has a wrong offset!");
static_assert(offsetof(MordhauActor_OnReceiveCosmeticHit, Move) == 0x000010, "Member 'MordhauActor_OnReceiveCosmeticHit::Move' has a wrong offset!");
static_assert(offsetof(MordhauActor_OnReceiveCosmeticHit, Hit) == 0x000014, "Member 'MordhauActor_OnReceiveCosmeticHit::Hit' has a wrong offset!");

// Function Mordhau.MordhauActor.OnUsedToKillOther
// 0x0028 (0x0028 - 0x0000)
struct MordhauActor_OnUsedToKillOther final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMordhauDamageType                            Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SubType;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bone;                                              // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Source;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauActor_OnUsedToKillOther) == 0x000008, "Wrong alignment on MordhauActor_OnUsedToKillOther");
static_assert(sizeof(MordhauActor_OnUsedToKillOther) == 0x000028, "Wrong size on MordhauActor_OnUsedToKillOther");
static_assert(offsetof(MordhauActor_OnUsedToKillOther, Character) == 0x000000, "Member 'MordhauActor_OnUsedToKillOther::Character' has a wrong offset!");
static_assert(offsetof(MordhauActor_OnUsedToKillOther, Type) == 0x000008, "Member 'MordhauActor_OnUsedToKillOther::Type' has a wrong offset!");
static_assert(offsetof(MordhauActor_OnUsedToKillOther, SubType) == 0x000009, "Member 'MordhauActor_OnUsedToKillOther::SubType' has a wrong offset!");
static_assert(offsetof(MordhauActor_OnUsedToKillOther, bone) == 0x00000C, "Member 'MordhauActor_OnUsedToKillOther::bone' has a wrong offset!");
static_assert(offsetof(MordhauActor_OnUsedToKillOther, Point) == 0x000014, "Member 'MordhauActor_OnUsedToKillOther::Point' has a wrong offset!");
static_assert(offsetof(MordhauActor_OnUsedToKillOther, Source) == 0x000020, "Member 'MordhauActor_OnUsedToKillOther::Source' has a wrong offset!");

// Function Mordhau.MordhauActor.UpdateThudVelocity
// 0x0004 (0x0004 - 0x0000)
struct MordhauActor_UpdateThudVelocity final
{
public:
	float                                         NewThudVelocity;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauActor_UpdateThudVelocity) == 0x000004, "Wrong alignment on MordhauActor_UpdateThudVelocity");
static_assert(sizeof(MordhauActor_UpdateThudVelocity) == 0x000004, "Wrong size on MordhauActor_UpdateThudVelocity");
static_assert(offsetof(MordhauActor_UpdateThudVelocity, NewThudVelocity) == 0x000000, "Member 'MordhauActor_UpdateThudVelocity::NewThudVelocity' has a wrong offset!");

// Function Mordhau.MordhauActor.GetCooperativeHoldProgress
// 0x0004 (0x0004 - 0x0000)
struct MordhauActor_GetCooperativeHoldProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauActor_GetCooperativeHoldProgress) == 0x000004, "Wrong alignment on MordhauActor_GetCooperativeHoldProgress");
static_assert(sizeof(MordhauActor_GetCooperativeHoldProgress) == 0x000004, "Wrong size on MordhauActor_GetCooperativeHoldProgress");
static_assert(offsetof(MordhauActor_GetCooperativeHoldProgress, ReturnValue) == 0x000000, "Member 'MordhauActor_GetCooperativeHoldProgress::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauActor.IsAnyInstanceOwner
// 0x0018 (0x0018 - 0x0000)
struct MordhauActor_IsAnyInstanceOwner final
{
public:
	TArray<class AMordhauPlayerController*>       ControllerArray;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauActor_IsAnyInstanceOwner) == 0x000008, "Wrong alignment on MordhauActor_IsAnyInstanceOwner");
static_assert(sizeof(MordhauActor_IsAnyInstanceOwner) == 0x000018, "Wrong size on MordhauActor_IsAnyInstanceOwner");
static_assert(offsetof(MordhauActor_IsAnyInstanceOwner, ControllerArray) == 0x000000, "Member 'MordhauActor_IsAnyInstanceOwner::ControllerArray' has a wrong offset!");
static_assert(offsetof(MordhauActor_IsAnyInstanceOwner, ReturnValue) == 0x000010, "Member 'MordhauActor_IsAnyInstanceOwner::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauEquipment.AssignCustomization
// 0x0038 (0x0038 - 0x0000)
struct MordhauEquipment_AssignCustomization final
{
public:
	struct FEquipmentCustomization                Customization;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         CustomizationEmblem;                               // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CustomizationEmblemColor1;                         // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CustomizationEmblemColor2;                         // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauEquipment_AssignCustomization) == 0x000008, "Wrong alignment on MordhauEquipment_AssignCustomization");
static_assert(sizeof(MordhauEquipment_AssignCustomization) == 0x000038, "Wrong size on MordhauEquipment_AssignCustomization");
static_assert(offsetof(MordhauEquipment_AssignCustomization, Customization) == 0x000000, "Member 'MordhauEquipment_AssignCustomization::Customization' has a wrong offset!");
static_assert(offsetof(MordhauEquipment_AssignCustomization, CustomizationEmblem) == 0x000030, "Member 'MordhauEquipment_AssignCustomization::CustomizationEmblem' has a wrong offset!");
static_assert(offsetof(MordhauEquipment_AssignCustomization, CustomizationEmblemColor1) == 0x000031, "Member 'MordhauEquipment_AssignCustomization::CustomizationEmblemColor1' has a wrong offset!");
static_assert(offsetof(MordhauEquipment_AssignCustomization, CustomizationEmblemColor2) == 0x000032, "Member 'MordhauEquipment_AssignCustomization::CustomizationEmblemColor2' has a wrong offset!");

// Function Mordhau.MordhauEquipment.AssignCustomizationToProjectile
// 0x0008 (0x0008 - 0x0000)
struct MordhauEquipment_AssignCustomizationToProjectile final
{
public:
	class AMordhauProjectile*                     Projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_AssignCustomizationToProjectile) == 0x000008, "Wrong alignment on MordhauEquipment_AssignCustomizationToProjectile");
static_assert(sizeof(MordhauEquipment_AssignCustomizationToProjectile) == 0x000008, "Wrong size on MordhauEquipment_AssignCustomizationToProjectile");
static_assert(offsetof(MordhauEquipment_AssignCustomizationToProjectile, Projectile) == 0x000000, "Member 'MordhauEquipment_AssignCustomizationToProjectile::Projectile' has a wrong offset!");

// Function Mordhau.MordhauEquipment.ComputeAccurateBounds
// 0x001C (0x001C - 0x0000)
struct MordhauEquipment_ComputeAccurateBounds final
{
public:
	struct FBoxSphereBounds                       ReturnValue;                                       // 0x0000(0x001C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_ComputeAccurateBounds) == 0x000004, "Wrong alignment on MordhauEquipment_ComputeAccurateBounds");
static_assert(sizeof(MordhauEquipment_ComputeAccurateBounds) == 0x00001C, "Wrong size on MordhauEquipment_ComputeAccurateBounds");
static_assert(offsetof(MordhauEquipment_ComputeAccurateBounds, ReturnValue) == 0x000000, "Member 'MordhauEquipment_ComputeAccurateBounds::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauEquipment.EquipmentCommand
// 0x0004 (0x0004 - 0x0000)
struct MordhauEquipment_EquipmentCommand final
{
public:
	int32                                         Command;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_EquipmentCommand) == 0x000004, "Wrong alignment on MordhauEquipment_EquipmentCommand");
static_assert(sizeof(MordhauEquipment_EquipmentCommand) == 0x000004, "Wrong size on MordhauEquipment_EquipmentCommand");
static_assert(offsetof(MordhauEquipment_EquipmentCommand, Command) == 0x000000, "Member 'MordhauEquipment_EquipmentCommand::Command' has a wrong offset!");

// Function Mordhau.MordhauEquipment.FindCurrentHolsterInfo
// 0x0060 (0x0060 - 0x0000)
struct MordhauEquipment_FindCurrentHolsterInfo final
{
public:
	struct FEquipmentHolsterInfo                  ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_FindCurrentHolsterInfo) == 0x000010, "Wrong alignment on MordhauEquipment_FindCurrentHolsterInfo");
static_assert(sizeof(MordhauEquipment_FindCurrentHolsterInfo) == 0x000060, "Wrong size on MordhauEquipment_FindCurrentHolsterInfo");
static_assert(offsetof(MordhauEquipment_FindCurrentHolsterInfo, ReturnValue) == 0x000000, "Member 'MordhauEquipment_FindCurrentHolsterInfo::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauEquipment.FireProjectile
// 0x0028 (0x0028 - 0x0000)
struct MordhauEquipment_FireProjectile final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AController*                            OwningController;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpectedDelay;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauEquipment_FireProjectile) == 0x000008, "Wrong alignment on MordhauEquipment_FireProjectile");
static_assert(sizeof(MordhauEquipment_FireProjectile) == 0x000028, "Wrong size on MordhauEquipment_FireProjectile");
static_assert(offsetof(MordhauEquipment_FireProjectile, Origin) == 0x000000, "Member 'MordhauEquipment_FireProjectile::Origin' has a wrong offset!");
static_assert(offsetof(MordhauEquipment_FireProjectile, Orientation) == 0x00000C, "Member 'MordhauEquipment_FireProjectile::Orientation' has a wrong offset!");
static_assert(offsetof(MordhauEquipment_FireProjectile, OwningController) == 0x000018, "Member 'MordhauEquipment_FireProjectile::OwningController' has a wrong offset!");
static_assert(offsetof(MordhauEquipment_FireProjectile, ExpectedDelay) == 0x000020, "Member 'MordhauEquipment_FireProjectile::ExpectedDelay' has a wrong offset!");

// Function Mordhau.MordhauEquipment.FireProjectile_Internal
// 0x0030 (0x0030 - 0x0000)
struct MordhauEquipment_FireProjectile_Internal final
{
public:
	struct FVector                                InOrigin;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InOrientation;                                     // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AController*                            Controller;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpectedDelay;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocal;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauProjectile*                     ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_FireProjectile_Internal) == 0x000008, "Wrong alignment on MordhauEquipment_FireProjectile_Internal");
static_assert(sizeof(MordhauEquipment_FireProjectile_Internal) == 0x000030, "Wrong size on MordhauEquipment_FireProjectile_Internal");
static_assert(offsetof(MordhauEquipment_FireProjectile_Internal, InOrigin) == 0x000000, "Member 'MordhauEquipment_FireProjectile_Internal::InOrigin' has a wrong offset!");
static_assert(offsetof(MordhauEquipment_FireProjectile_Internal, InOrientation) == 0x00000C, "Member 'MordhauEquipment_FireProjectile_Internal::InOrientation' has a wrong offset!");
static_assert(offsetof(MordhauEquipment_FireProjectile_Internal, Controller) == 0x000018, "Member 'MordhauEquipment_FireProjectile_Internal::Controller' has a wrong offset!");
static_assert(offsetof(MordhauEquipment_FireProjectile_Internal, ExpectedDelay) == 0x000020, "Member 'MordhauEquipment_FireProjectile_Internal::ExpectedDelay' has a wrong offset!");
static_assert(offsetof(MordhauEquipment_FireProjectile_Internal, bIsLocal) == 0x000024, "Member 'MordhauEquipment_FireProjectile_Internal::bIsLocal' has a wrong offset!");
static_assert(offsetof(MordhauEquipment_FireProjectile_Internal, ReturnValue) == 0x000028, "Member 'MordhauEquipment_FireProjectile_Internal::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauEquipment.GetRandomCustomization
// 0x0038 (0x0038 - 0x0000)
struct MordhauEquipment_GetRandomCustomization final
{
public:
	bool                                          bOnlyColors;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEquipmentCustomization                ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_GetRandomCustomization) == 0x000008, "Wrong alignment on MordhauEquipment_GetRandomCustomization");
static_assert(sizeof(MordhauEquipment_GetRandomCustomization) == 0x000038, "Wrong size on MordhauEquipment_GetRandomCustomization");
static_assert(offsetof(MordhauEquipment_GetRandomCustomization, bOnlyColors) == 0x000000, "Member 'MordhauEquipment_GetRandomCustomization::bOnlyColors' has a wrong offset!");
static_assert(offsetof(MordhauEquipment_GetRandomCustomization, ReturnValue) == 0x000008, "Member 'MordhauEquipment_GetRandomCustomization::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauEquipment.GetWasSeen
// 0x0001 (0x0001 - 0x0000)
struct MordhauEquipment_GetWasSeen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_GetWasSeen) == 0x000001, "Wrong alignment on MordhauEquipment_GetWasSeen");
static_assert(sizeof(MordhauEquipment_GetWasSeen) == 0x000001, "Wrong size on MordhauEquipment_GetWasSeen");
static_assert(offsetof(MordhauEquipment_GetWasSeen, ReturnValue) == 0x000000, "Member 'MordhauEquipment_GetWasSeen::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauEquipment.GetWasSkinSeen
// 0x0008 (0x0008 - 0x0000)
struct MordhauEquipment_GetWasSkinSeen final
{
public:
	int32                                         SkinIdx;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauEquipment_GetWasSkinSeen) == 0x000004, "Wrong alignment on MordhauEquipment_GetWasSkinSeen");
static_assert(sizeof(MordhauEquipment_GetWasSkinSeen) == 0x000008, "Wrong size on MordhauEquipment_GetWasSkinSeen");
static_assert(offsetof(MordhauEquipment_GetWasSkinSeen, SkinIdx) == 0x000000, "Member 'MordhauEquipment_GetWasSkinSeen::SkinIdx' has a wrong offset!");
static_assert(offsetof(MordhauEquipment_GetWasSkinSeen, ReturnValue) == 0x000004, "Member 'MordhauEquipment_GetWasSkinSeen::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauEquipment.LateTick
// 0x0004 (0x0004 - 0x0000)
struct MordhauEquipment_LateTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_LateTick) == 0x000004, "Wrong alignment on MordhauEquipment_LateTick");
static_assert(sizeof(MordhauEquipment_LateTick) == 0x000004, "Wrong size on MordhauEquipment_LateTick");
static_assert(offsetof(MordhauEquipment_LateTick, DeltaSeconds) == 0x000000, "Member 'MordhauEquipment_LateTick::DeltaSeconds' has a wrong offset!");

// Function Mordhau.MordhauEquipment.LocalPlayerLateTick
// 0x0004 (0x0004 - 0x0000)
struct MordhauEquipment_LocalPlayerLateTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_LocalPlayerLateTick) == 0x000004, "Wrong alignment on MordhauEquipment_LocalPlayerLateTick");
static_assert(sizeof(MordhauEquipment_LocalPlayerLateTick) == 0x000004, "Wrong size on MordhauEquipment_LocalPlayerLateTick");
static_assert(offsetof(MordhauEquipment_LocalPlayerLateTick, DeltaTime) == 0x000000, "Member 'MordhauEquipment_LocalPlayerLateTick::DeltaTime' has a wrong offset!");

// Function Mordhau.MordhauEquipment.LocalPlayerTick
// 0x0004 (0x0004 - 0x0000)
struct MordhauEquipment_LocalPlayerTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_LocalPlayerTick) == 0x000004, "Wrong alignment on MordhauEquipment_LocalPlayerTick");
static_assert(sizeof(MordhauEquipment_LocalPlayerTick) == 0x000004, "Wrong size on MordhauEquipment_LocalPlayerTick");
static_assert(offsetof(MordhauEquipment_LocalPlayerTick, DeltaTime) == 0x000000, "Member 'MordhauEquipment_LocalPlayerTick::DeltaTime' has a wrong offset!");

// Function Mordhau.MordhauEquipment.MarkSkinSeen
// 0x0004 (0x0004 - 0x0000)
struct MordhauEquipment_MarkSkinSeen final
{
public:
	int32                                         SkinIdx;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_MarkSkinSeen) == 0x000004, "Wrong alignment on MordhauEquipment_MarkSkinSeen");
static_assert(sizeof(MordhauEquipment_MarkSkinSeen) == 0x000004, "Wrong size on MordhauEquipment_MarkSkinSeen");
static_assert(offsetof(MordhauEquipment_MarkSkinSeen, SkinIdx) == 0x000000, "Member 'MordhauEquipment_MarkSkinSeen::SkinIdx' has a wrong offset!");

// Function Mordhau.MordhauEquipment.OnDropped
// 0x0008 (0x0008 - 0x0000)
struct MordhauEquipment_OnDropped final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_OnDropped) == 0x000008, "Wrong alignment on MordhauEquipment_OnDropped");
static_assert(sizeof(MordhauEquipment_OnDropped) == 0x000008, "Wrong size on MordhauEquipment_OnDropped");
static_assert(offsetof(MordhauEquipment_OnDropped, Character) == 0x000000, "Member 'MordhauEquipment_OnDropped::Character' has a wrong offset!");

// Function Mordhau.MordhauEquipment.OnEquipped
// 0x0008 (0x0008 - 0x0000)
struct MordhauEquipment_OnEquipped final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_OnEquipped) == 0x000008, "Wrong alignment on MordhauEquipment_OnEquipped");
static_assert(sizeof(MordhauEquipment_OnEquipped) == 0x000008, "Wrong size on MordhauEquipment_OnEquipped");
static_assert(offsetof(MordhauEquipment_OnEquipped, Character) == 0x000000, "Member 'MordhauEquipment_OnEquipped::Character' has a wrong offset!");

// Function Mordhau.MordhauEquipment.OnHolstered
// 0x0008 (0x0008 - 0x0000)
struct MordhauEquipment_OnHolstered final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_OnHolstered) == 0x000008, "Wrong alignment on MordhauEquipment_OnHolstered");
static_assert(sizeof(MordhauEquipment_OnHolstered) == 0x000008, "Wrong size on MordhauEquipment_OnHolstered");
static_assert(offsetof(MordhauEquipment_OnHolstered, Character) == 0x000000, "Member 'MordhauEquipment_OnHolstered::Character' has a wrong offset!");

// Function Mordhau.MordhauEquipment.OnHolsteredOrDropped
// 0x0008 (0x0008 - 0x0000)
struct MordhauEquipment_OnHolsteredOrDropped final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_OnHolsteredOrDropped) == 0x000008, "Wrong alignment on MordhauEquipment_OnHolsteredOrDropped");
static_assert(sizeof(MordhauEquipment_OnHolsteredOrDropped) == 0x000008, "Wrong size on MordhauEquipment_OnHolsteredOrDropped");
static_assert(offsetof(MordhauEquipment_OnHolsteredOrDropped, Character) == 0x000000, "Member 'MordhauEquipment_OnHolsteredOrDropped::Character' has a wrong offset!");

// Function Mordhau.MordhauEquipment.OnPickedUp
// 0x0008 (0x0008 - 0x0000)
struct MordhauEquipment_OnPickedUp final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_OnPickedUp) == 0x000008, "Wrong alignment on MordhauEquipment_OnPickedUp");
static_assert(sizeof(MordhauEquipment_OnPickedUp) == 0x000008, "Wrong size on MordhauEquipment_OnPickedUp");
static_assert(offsetof(MordhauEquipment_OnPickedUp, Character) == 0x000000, "Member 'MordhauEquipment_OnPickedUp::Character' has a wrong offset!");

// Function Mordhau.MordhauEquipment.OnRequestFire
// 0x0010 (0x0010 - 0x0000)
struct MordhauEquipment_OnRequestFire final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauEquipment_OnRequestFire) == 0x000008, "Wrong alignment on MordhauEquipment_OnRequestFire");
static_assert(sizeof(MordhauEquipment_OnRequestFire) == 0x000010, "Wrong size on MordhauEquipment_OnRequestFire");
static_assert(offsetof(MordhauEquipment_OnRequestFire, Character) == 0x000000, "Member 'MordhauEquipment_OnRequestFire::Character' has a wrong offset!");
static_assert(offsetof(MordhauEquipment_OnRequestFire, ReturnValue) == 0x000008, "Member 'MordhauEquipment_OnRequestFire::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauEquipment.OnRequestModeSwitch
// 0x0010 (0x0010 - 0x0000)
struct MordhauEquipment_OnRequestModeSwitch final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauEquipment_OnRequestModeSwitch) == 0x000008, "Wrong alignment on MordhauEquipment_OnRequestModeSwitch");
static_assert(sizeof(MordhauEquipment_OnRequestModeSwitch) == 0x000010, "Wrong size on MordhauEquipment_OnRequestModeSwitch");
static_assert(offsetof(MordhauEquipment_OnRequestModeSwitch, Character) == 0x000000, "Member 'MordhauEquipment_OnRequestModeSwitch::Character' has a wrong offset!");
static_assert(offsetof(MordhauEquipment_OnRequestModeSwitch, ReturnValue) == 0x000008, "Member 'MordhauEquipment_OnRequestModeSwitch::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauEquipment.RebuildEquipment
// 0x0001 (0x0001 - 0x0000)
struct MordhauEquipment_RebuildEquipment final
{
public:
	bool                                          bDoOnlyQuickJob;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_RebuildEquipment) == 0x000001, "Wrong alignment on MordhauEquipment_RebuildEquipment");
static_assert(sizeof(MordhauEquipment_RebuildEquipment) == 0x000001, "Wrong size on MordhauEquipment_RebuildEquipment");
static_assert(offsetof(MordhauEquipment_RebuildEquipment, bDoOnlyQuickJob) == 0x000000, "Member 'MordhauEquipment_RebuildEquipment::bDoOnlyQuickJob' has a wrong offset!");

// Function Mordhau.MordhauEquipment.RequestAttack
// 0x0008 (0x0008 - 0x0000)
struct MordhauEquipment_RequestAttack final
{
public:
	EAttackMove                                   Move;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Angle;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_RequestAttack) == 0x000004, "Wrong alignment on MordhauEquipment_RequestAttack");
static_assert(sizeof(MordhauEquipment_RequestAttack) == 0x000008, "Wrong size on MordhauEquipment_RequestAttack");
static_assert(offsetof(MordhauEquipment_RequestAttack, Move) == 0x000000, "Member 'MordhauEquipment_RequestAttack::Move' has a wrong offset!");
static_assert(offsetof(MordhauEquipment_RequestAttack, Angle) == 0x000004, "Member 'MordhauEquipment_RequestAttack::Angle' has a wrong offset!");

// Function Mordhau.MordhauEquipment.RestockOtherEquipmentOnCharacter
// 0x0010 (0x0010 - 0x0000)
struct MordhauEquipment_RestockOtherEquipmentOnCharacter final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauEquipment_RestockOtherEquipmentOnCharacter) == 0x000008, "Wrong alignment on MordhauEquipment_RestockOtherEquipmentOnCharacter");
static_assert(sizeof(MordhauEquipment_RestockOtherEquipmentOnCharacter) == 0x000010, "Wrong size on MordhauEquipment_RestockOtherEquipmentOnCharacter");
static_assert(offsetof(MordhauEquipment_RestockOtherEquipmentOnCharacter, Character) == 0x000000, "Member 'MordhauEquipment_RestockOtherEquipmentOnCharacter::Character' has a wrong offset!");
static_assert(offsetof(MordhauEquipment_RestockOtherEquipmentOnCharacter, ReturnValue) == 0x000008, "Member 'MordhauEquipment_RestockOtherEquipmentOnCharacter::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauEquipment.SetAmmo
// 0x0001 (0x0001 - 0x0000)
struct MordhauEquipment_SetAmmo final
{
public:
	uint8                                         NewAmmo;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_SetAmmo) == 0x000001, "Wrong alignment on MordhauEquipment_SetAmmo");
static_assert(sizeof(MordhauEquipment_SetAmmo) == 0x000001, "Wrong size on MordhauEquipment_SetAmmo");
static_assert(offsetof(MordhauEquipment_SetAmmo, NewAmmo) == 0x000000, "Member 'MordhauEquipment_SetAmmo::NewAmmo' has a wrong offset!");

// Function Mordhau.MordhauEquipment.SetColors
// 0x0010 (0x0010 - 0x0000)
struct MordhauEquipment_SetColors final
{
public:
	TArray<uint8>                                 NewColors;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_SetColors) == 0x000008, "Wrong alignment on MordhauEquipment_SetColors");
static_assert(sizeof(MordhauEquipment_SetColors) == 0x000010, "Wrong size on MordhauEquipment_SetColors");
static_assert(offsetof(MordhauEquipment_SetColors, NewColors) == 0x000000, "Member 'MordhauEquipment_SetColors::NewColors' has a wrong offset!");

// Function Mordhau.MordhauEquipment.SetLoaded
// 0x0001 (0x0001 - 0x0000)
struct MordhauEquipment_SetLoaded final
{
public:
	bool                                          bNewLoaded;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_SetLoaded) == 0x000001, "Wrong alignment on MordhauEquipment_SetLoaded");
static_assert(sizeof(MordhauEquipment_SetLoaded) == 0x000001, "Wrong size on MordhauEquipment_SetLoaded");
static_assert(offsetof(MordhauEquipment_SetLoaded, bNewLoaded) == 0x000000, "Member 'MordhauEquipment_SetLoaded::bNewLoaded' has a wrong offset!");

// Function Mordhau.MordhauEquipment.SetParts
// 0x0018 (0x0018 - 0x0000)
struct MordhauEquipment_SetParts final
{
public:
	TArray<uint8>                                 NewPartsId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bRebuild;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauEquipment_SetParts) == 0x000008, "Wrong alignment on MordhauEquipment_SetParts");
static_assert(sizeof(MordhauEquipment_SetParts) == 0x000018, "Wrong size on MordhauEquipment_SetParts");
static_assert(offsetof(MordhauEquipment_SetParts, NewPartsId) == 0x000000, "Member 'MordhauEquipment_SetParts::NewPartsId' has a wrong offset!");
static_assert(offsetof(MordhauEquipment_SetParts, bRebuild) == 0x000010, "Member 'MordhauEquipment_SetParts::bRebuild' has a wrong offset!");

// Function Mordhau.MordhauEquipment.SetPartsUseAuxiliaryMesh
// 0x0001 (0x0001 - 0x0000)
struct MordhauEquipment_SetPartsUseAuxiliaryMesh final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_SetPartsUseAuxiliaryMesh) == 0x000001, "Wrong alignment on MordhauEquipment_SetPartsUseAuxiliaryMesh");
static_assert(sizeof(MordhauEquipment_SetPartsUseAuxiliaryMesh) == 0x000001, "Wrong size on MordhauEquipment_SetPartsUseAuxiliaryMesh");
static_assert(offsetof(MordhauEquipment_SetPartsUseAuxiliaryMesh, bNewValue) == 0x000000, "Member 'MordhauEquipment_SetPartsUseAuxiliaryMesh::bNewValue' has a wrong offset!");

// Function Mordhau.MordhauEquipment.ShouldShine
// 0x0001 (0x0001 - 0x0000)
struct MordhauEquipment_ShouldShine final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_ShouldShine) == 0x000001, "Wrong alignment on MordhauEquipment_ShouldShine");
static_assert(sizeof(MordhauEquipment_ShouldShine) == 0x000001, "Wrong size on MordhauEquipment_ShouldShine");
static_assert(offsetof(MordhauEquipment_ShouldShine, ReturnValue) == 0x000000, "Member 'MordhauEquipment_ShouldShine::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauEquipment.UpdateMaterial
// 0x0008 (0x0008 - 0x0000)
struct MordhauEquipment_UpdateMaterial final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComp;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_UpdateMaterial) == 0x000008, "Wrong alignment on MordhauEquipment_UpdateMaterial");
static_assert(sizeof(MordhauEquipment_UpdateMaterial) == 0x000008, "Wrong size on MordhauEquipment_UpdateMaterial");
static_assert(offsetof(MordhauEquipment_UpdateMaterial, SkeletalMeshComp) == 0x000000, "Member 'MordhauEquipment_UpdateMaterial::SkeletalMeshComp' has a wrong offset!");

// Function Mordhau.MordhauEquipment.BelongsToCharacter
// 0x0001 (0x0001 - 0x0000)
struct MordhauEquipment_BelongsToCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_BelongsToCharacter) == 0x000001, "Wrong alignment on MordhauEquipment_BelongsToCharacter");
static_assert(sizeof(MordhauEquipment_BelongsToCharacter) == 0x000001, "Wrong size on MordhauEquipment_BelongsToCharacter");
static_assert(offsetof(MordhauEquipment_BelongsToCharacter, ReturnValue) == 0x000000, "Member 'MordhauEquipment_BelongsToCharacter::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauEquipment.CanPerformAttack
// 0x0010 (0x0010 - 0x0000)
struct MordhauEquipment_CanPerformAttack final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackMove                                   Move;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauEquipment_CanPerformAttack) == 0x000008, "Wrong alignment on MordhauEquipment_CanPerformAttack");
static_assert(sizeof(MordhauEquipment_CanPerformAttack) == 0x000010, "Wrong size on MordhauEquipment_CanPerformAttack");
static_assert(offsetof(MordhauEquipment_CanPerformAttack, Character) == 0x000000, "Member 'MordhauEquipment_CanPerformAttack::Character' has a wrong offset!");
static_assert(offsetof(MordhauEquipment_CanPerformAttack, Move) == 0x000008, "Member 'MordhauEquipment_CanPerformAttack::Move' has a wrong offset!");
static_assert(offsetof(MordhauEquipment_CanPerformAttack, ReturnValue) == 0x000009, "Member 'MordhauEquipment_CanPerformAttack::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauEquipment.GetAmmo
// 0x0001 (0x0001 - 0x0000)
struct MordhauEquipment_GetAmmo final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_GetAmmo) == 0x000001, "Wrong alignment on MordhauEquipment_GetAmmo");
static_assert(sizeof(MordhauEquipment_GetAmmo) == 0x000001, "Wrong size on MordhauEquipment_GetAmmo");
static_assert(offsetof(MordhauEquipment_GetAmmo, ReturnValue) == 0x000000, "Member 'MordhauEquipment_GetAmmo::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauEquipment.GetCurrentMaxAmmo
// 0x0001 (0x0001 - 0x0000)
struct MordhauEquipment_GetCurrentMaxAmmo final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_GetCurrentMaxAmmo) == 0x000001, "Wrong alignment on MordhauEquipment_GetCurrentMaxAmmo");
static_assert(sizeof(MordhauEquipment_GetCurrentMaxAmmo) == 0x000001, "Wrong size on MordhauEquipment_GetCurrentMaxAmmo");
static_assert(offsetof(MordhauEquipment_GetCurrentMaxAmmo, ReturnValue) == 0x000000, "Member 'MordhauEquipment_GetCurrentMaxAmmo::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauEquipment.GetParentCharacter
// 0x0008 (0x0008 - 0x0000)
struct MordhauEquipment_GetParentCharacter final
{
public:
	class AMordhauCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipment_GetParentCharacter) == 0x000008, "Wrong alignment on MordhauEquipment_GetParentCharacter");
static_assert(sizeof(MordhauEquipment_GetParentCharacter) == 0x000008, "Wrong size on MordhauEquipment_GetParentCharacter");
static_assert(offsetof(MordhauEquipment_GetParentCharacter, ReturnValue) == 0x000000, "Member 'MordhauEquipment_GetParentCharacter::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauWeapon.AddTraceEntryData
// 0x0010 (0x0010 - 0x0000)
struct MordhauWeapon_AddTraceEntryData final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bone;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauWeapon_AddTraceEntryData) == 0x000008, "Wrong alignment on MordhauWeapon_AddTraceEntryData");
static_assert(sizeof(MordhauWeapon_AddTraceEntryData) == 0x000010, "Wrong size on MordhauWeapon_AddTraceEntryData");
static_assert(offsetof(MordhauWeapon_AddTraceEntryData, Actor) == 0x000000, "Member 'MordhauWeapon_AddTraceEntryData::Actor' has a wrong offset!");
static_assert(offsetof(MordhauWeapon_AddTraceEntryData, bone) == 0x000008, "Member 'MordhauWeapon_AddTraceEntryData::bone' has a wrong offset!");

// Function Mordhau.MordhauWeapon.GetAdditionalTrace
// 0x0018 (0x0018 - 0x0000)
struct MordhauWeapon_GetAdditionalTrace final
{
public:
	struct FVector                                TraceStart;                                        // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceEnd;                                          // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauWeapon_GetAdditionalTrace) == 0x000004, "Wrong alignment on MordhauWeapon_GetAdditionalTrace");
static_assert(sizeof(MordhauWeapon_GetAdditionalTrace) == 0x000018, "Wrong size on MordhauWeapon_GetAdditionalTrace");
static_assert(offsetof(MordhauWeapon_GetAdditionalTrace, TraceStart) == 0x000000, "Member 'MordhauWeapon_GetAdditionalTrace::TraceStart' has a wrong offset!");
static_assert(offsetof(MordhauWeapon_GetAdditionalTrace, TraceEnd) == 0x00000C, "Member 'MordhauWeapon_GetAdditionalTrace::TraceEnd' has a wrong offset!");

// Function Mordhau.MordhauWeapon.GetBaseAttackInfo
// 0x0130 (0x0130 - 0x0000)
struct MordhauWeapon_GetBaseAttackInfo final
{
public:
	EAttackMove                                   Move;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAttackInfo                            ReturnValue;                                       // 0x0008(0x0128)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauWeapon_GetBaseAttackInfo) == 0x000008, "Wrong alignment on MordhauWeapon_GetBaseAttackInfo");
static_assert(sizeof(MordhauWeapon_GetBaseAttackInfo) == 0x000130, "Wrong size on MordhauWeapon_GetBaseAttackInfo");
static_assert(offsetof(MordhauWeapon_GetBaseAttackInfo, Move) == 0x000000, "Member 'MordhauWeapon_GetBaseAttackInfo::Move' has a wrong offset!");
static_assert(offsetof(MordhauWeapon_GetBaseAttackInfo, ReturnValue) == 0x000008, "Member 'MordhauWeapon_GetBaseAttackInfo::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauWeapon.GetTrace
// 0x0018 (0x0018 - 0x0000)
struct MordhauWeapon_GetTrace final
{
public:
	struct FVector                                TraceStart;                                        // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceEnd;                                          // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauWeapon_GetTrace) == 0x000004, "Wrong alignment on MordhauWeapon_GetTrace");
static_assert(sizeof(MordhauWeapon_GetTrace) == 0x000018, "Wrong size on MordhauWeapon_GetTrace");
static_assert(offsetof(MordhauWeapon_GetTrace, TraceStart) == 0x000000, "Member 'MordhauWeapon_GetTrace::TraceStart' has a wrong offset!");
static_assert(offsetof(MordhauWeapon_GetTrace, TraceEnd) == 0x00000C, "Member 'MordhauWeapon_GetTrace::TraceEnd' has a wrong offset!");

// Function Mordhau.MordhauWeapon.IncreaseBloodLevel
// 0x0004 (0x0004 - 0x0000)
struct MordhauWeapon_IncreaseBloodLevel final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauWeapon_IncreaseBloodLevel) == 0x000004, "Wrong alignment on MordhauWeapon_IncreaseBloodLevel");
static_assert(sizeof(MordhauWeapon_IncreaseBloodLevel) == 0x000004, "Wrong size on MordhauWeapon_IncreaseBloodLevel");
static_assert(offsetof(MordhauWeapon_IncreaseBloodLevel, Amount) == 0x000000, "Member 'MordhauWeapon_IncreaseBloodLevel::Amount' has a wrong offset!");

// Function Mordhau.MordhauWeapon.IsAllowedToAddForce
// 0x0001 (0x0001 - 0x0000)
struct MordhauWeapon_IsAllowedToAddForce final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauWeapon_IsAllowedToAddForce) == 0x000001, "Wrong alignment on MordhauWeapon_IsAllowedToAddForce");
static_assert(sizeof(MordhauWeapon_IsAllowedToAddForce) == 0x000001, "Wrong size on MordhauWeapon_IsAllowedToAddForce");
static_assert(offsetof(MordhauWeapon_IsAllowedToAddForce, ReturnValue) == 0x000000, "Member 'MordhauWeapon_IsAllowedToAddForce::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauWeapon.OnAttackStarted
// 0x0008 (0x0008 - 0x0000)
struct MordhauWeapon_OnAttackStarted final
{
public:
	EAttackMove                                   Move;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Angle;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauWeapon_OnAttackStarted) == 0x000004, "Wrong alignment on MordhauWeapon_OnAttackStarted");
static_assert(sizeof(MordhauWeapon_OnAttackStarted) == 0x000008, "Wrong size on MordhauWeapon_OnAttackStarted");
static_assert(offsetof(MordhauWeapon_OnAttackStarted, Move) == 0x000000, "Member 'MordhauWeapon_OnAttackStarted::Move' has a wrong offset!");
static_assert(offsetof(MordhauWeapon_OnAttackStarted, Angle) == 0x000004, "Member 'MordhauWeapon_OnAttackStarted::Angle' has a wrong offset!");

// Function Mordhau.MordhauWeapon.OnBlocked
// 0x000A (0x000A - 0x0000)
struct MordhauWeapon_OnBlocked final
{
public:
	struct FBlockResult                           Result;                                            // 0x0000(0x0009)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAttackMove                                   Move;                                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauWeapon_OnBlocked) == 0x000001, "Wrong alignment on MordhauWeapon_OnBlocked");
static_assert(sizeof(MordhauWeapon_OnBlocked) == 0x00000A, "Wrong size on MordhauWeapon_OnBlocked");
static_assert(offsetof(MordhauWeapon_OnBlocked, Result) == 0x000000, "Member 'MordhauWeapon_OnBlocked::Result' has a wrong offset!");
static_assert(offsetof(MordhauWeapon_OnBlocked, Move) == 0x000009, "Member 'MordhauWeapon_OnBlocked::Move' has a wrong offset!");

// Function Mordhau.MordhauWeapon.OnBlockStarted
// 0x0001 (0x0001 - 0x0000)
struct MordhauWeapon_OnBlockStarted final
{
public:
	EBlockType                                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauWeapon_OnBlockStarted) == 0x000001, "Wrong alignment on MordhauWeapon_OnBlockStarted");
static_assert(sizeof(MordhauWeapon_OnBlockStarted) == 0x000001, "Wrong size on MordhauWeapon_OnBlockStarted");
static_assert(offsetof(MordhauWeapon_OnBlockStarted, Type) == 0x000000, "Member 'MordhauWeapon_OnBlockStarted::Type' has a wrong offset!");

// Function Mordhau.MordhauWeapon.OnCosmeticHit
// 0x0090 (0x0090 - 0x0000)
struct MordhauWeapon_OnCosmeticHit final
{
public:
	EAttackMove                                   Move;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0004(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauWeapon_OnCosmeticHit) == 0x000004, "Wrong alignment on MordhauWeapon_OnCosmeticHit");
static_assert(sizeof(MordhauWeapon_OnCosmeticHit) == 0x000090, "Wrong size on MordhauWeapon_OnCosmeticHit");
static_assert(offsetof(MordhauWeapon_OnCosmeticHit, Move) == 0x000000, "Member 'MordhauWeapon_OnCosmeticHit::Move' has a wrong offset!");
static_assert(offsetof(MordhauWeapon_OnCosmeticHit, Hit) == 0x000004, "Member 'MordhauWeapon_OnCosmeticHit::Hit' has a wrong offset!");

// Function Mordhau.MordhauWeapon.OnHit
// 0x0028 (0x0028 - 0x0000)
struct MordhauWeapon_OnHit final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackMove                                   Move;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bone;                                              // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Tier;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SurfaceType;                                       // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauWeapon_OnHit) == 0x000008, "Wrong alignment on MordhauWeapon_OnHit");
static_assert(sizeof(MordhauWeapon_OnHit) == 0x000028, "Wrong size on MordhauWeapon_OnHit");
static_assert(offsetof(MordhauWeapon_OnHit, Actor) == 0x000000, "Member 'MordhauWeapon_OnHit::Actor' has a wrong offset!");
static_assert(offsetof(MordhauWeapon_OnHit, Move) == 0x000008, "Member 'MordhauWeapon_OnHit::Move' has a wrong offset!");
static_assert(offsetof(MordhauWeapon_OnHit, bone) == 0x00000C, "Member 'MordhauWeapon_OnHit::bone' has a wrong offset!");
static_assert(offsetof(MordhauWeapon_OnHit, WorldLocation) == 0x000014, "Member 'MordhauWeapon_OnHit::WorldLocation' has a wrong offset!");
static_assert(offsetof(MordhauWeapon_OnHit, Tier) == 0x000020, "Member 'MordhauWeapon_OnHit::Tier' has a wrong offset!");
static_assert(offsetof(MordhauWeapon_OnHit, SurfaceType) == 0x000021, "Member 'MordhauWeapon_OnHit::SurfaceType' has a wrong offset!");

// Function Mordhau.MordhauWeapon.OnWasBlocked
// 0x000A (0x000A - 0x0000)
struct MordhauWeapon_OnWasBlocked final
{
public:
	struct FBlockResult                           Result;                                            // 0x0000(0x0009)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAttackMove                                   Move;                                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauWeapon_OnWasBlocked) == 0x000001, "Wrong alignment on MordhauWeapon_OnWasBlocked");
static_assert(sizeof(MordhauWeapon_OnWasBlocked) == 0x00000A, "Wrong size on MordhauWeapon_OnWasBlocked");
static_assert(offsetof(MordhauWeapon_OnWasBlocked, Result) == 0x000000, "Member 'MordhauWeapon_OnWasBlocked::Result' has a wrong offset!");
static_assert(offsetof(MordhauWeapon_OnWasBlocked, Move) == 0x000009, "Member 'MordhauWeapon_OnWasBlocked::Move' has a wrong offset!");

// Function Mordhau.MordhauWeapon.RequestBlock
// 0x0003 (0x0003 - 0x0000)
struct MordhauWeapon_RequestBlock final
{
public:
	EBlockType                                    BlockType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowFTP;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauWeapon_RequestBlock) == 0x000001, "Wrong alignment on MordhauWeapon_RequestBlock");
static_assert(sizeof(MordhauWeapon_RequestBlock) == 0x000003, "Wrong size on MordhauWeapon_RequestBlock");
static_assert(offsetof(MordhauWeapon_RequestBlock, BlockType) == 0x000000, "Member 'MordhauWeapon_RequestBlock::BlockType' has a wrong offset!");
static_assert(offsetof(MordhauWeapon_RequestBlock, bAllowFTP) == 0x000001, "Member 'MordhauWeapon_RequestBlock::bAllowFTP' has a wrong offset!");
static_assert(offsetof(MordhauWeapon_RequestBlock, ReturnValue) == 0x000002, "Member 'MordhauWeapon_RequestBlock::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauWeapon.SetIsAllowedToAddForce
// 0x0001 (0x0001 - 0x0000)
struct MordhauWeapon_SetIsAllowedToAddForce final
{
public:
	bool                                          bIsAllowed;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauWeapon_SetIsAllowedToAddForce) == 0x000001, "Wrong alignment on MordhauWeapon_SetIsAllowedToAddForce");
static_assert(sizeof(MordhauWeapon_SetIsAllowedToAddForce) == 0x000001, "Wrong size on MordhauWeapon_SetIsAllowedToAddForce");
static_assert(offsetof(MordhauWeapon_SetIsAllowedToAddForce, bIsAllowed) == 0x000000, "Member 'MordhauWeapon_SetIsAllowedToAddForce::bIsAllowed' has a wrong offset!");

// Function Mordhau.MordhauWeapon.UpdateTrail
// 0x0004 (0x0004 - 0x0000)
struct MordhauWeapon_UpdateTrail final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauWeapon_UpdateTrail) == 0x000004, "Wrong alignment on MordhauWeapon_UpdateTrail");
static_assert(sizeof(MordhauWeapon_UpdateTrail) == 0x000004, "Wrong size on MordhauWeapon_UpdateTrail");
static_assert(offsetof(MordhauWeapon_UpdateTrail, Weight) == 0x000000, "Member 'MordhauWeapon_UpdateTrail::Weight' has a wrong offset!");

// Function Mordhau.VirtualWeapon.InitializeVirtualWeapon
// 0x0008 (0x0008 - 0x0000)
struct VirtualWeapon_InitializeVirtualWeapon final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualWeapon_InitializeVirtualWeapon) == 0x000008, "Wrong alignment on VirtualWeapon_InitializeVirtualWeapon");
static_assert(sizeof(VirtualWeapon_InitializeVirtualWeapon) == 0x000008, "Wrong size on VirtualWeapon_InitializeVirtualWeapon");
static_assert(offsetof(VirtualWeapon_InitializeVirtualWeapon, Character) == 0x000000, "Member 'VirtualWeapon_InitializeVirtualWeapon::Character' has a wrong offset!");

// Function Mordhau.ArmsWearable.AddHandsWearable
// 0x0028 (0x0028 - 0x0000)
struct ArmsWearable_AddHandsWearable final
{
public:
	TSoftClassPtr<class UClass>                   Wearable;                                          // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArmsWearable_AddHandsWearable) == 0x000008, "Wrong alignment on ArmsWearable_AddHandsWearable");
static_assert(sizeof(ArmsWearable_AddHandsWearable) == 0x000028, "Wrong size on ArmsWearable_AddHandsWearable");
static_assert(offsetof(ArmsWearable_AddHandsWearable, Wearable) == 0x000000, "Member 'ArmsWearable_AddHandsWearable::Wearable' has a wrong offset!");

// Function Mordhau.ArmsWearable.GetHandsWearable
// 0x0010 (0x0010 - 0x0000)
struct ArmsWearable_GetHandsWearable final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMordhauWearable>           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArmsWearable_GetHandsWearable) == 0x000008, "Wrong alignment on ArmsWearable_GetHandsWearable");
static_assert(sizeof(ArmsWearable_GetHandsWearable) == 0x000010, "Wrong size on ArmsWearable_GetHandsWearable");
static_assert(offsetof(ArmsWearable_GetHandsWearable, Index_0) == 0x000000, "Member 'ArmsWearable_GetHandsWearable::Index_0' has a wrong offset!");
static_assert(offsetof(ArmsWearable_GetHandsWearable, ReturnValue) == 0x000008, "Member 'ArmsWearable_GetHandsWearable::ReturnValue' has a wrong offset!");

// Function Mordhau.ArmsWearable.GetHandsWearablesNum
// 0x0004 (0x0004 - 0x0000)
struct ArmsWearable_GetHandsWearablesNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArmsWearable_GetHandsWearablesNum) == 0x000004, "Wrong alignment on ArmsWearable_GetHandsWearablesNum");
static_assert(sizeof(ArmsWearable_GetHandsWearablesNum) == 0x000004, "Wrong size on ArmsWearable_GetHandsWearablesNum");
static_assert(offsetof(ArmsWearable_GetHandsWearablesNum, ReturnValue) == 0x000000, "Member 'ArmsWearable_GetHandsWearablesNum::ReturnValue' has a wrong offset!");

// Function Mordhau.GetMod.GetMod
// 0x0010 (0x0010 - 0x0000)
struct GetMod_GetMod final
{
public:
	int32                                         ModId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGetMod*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetMod_GetMod) == 0x000008, "Wrong alignment on GetMod_GetMod");
static_assert(sizeof(GetMod_GetMod) == 0x000010, "Wrong size on GetMod_GetMod");
static_assert(offsetof(GetMod_GetMod, ModId) == 0x000000, "Member 'GetMod_GetMod::ModId' has a wrong offset!");
static_assert(offsetof(GetMod_GetMod, ReturnValue) == 0x000008, "Member 'GetMod_GetMod::ReturnValue' has a wrong offset!");

// Function Mordhau.SubField.GetMaster
// 0x0008 (0x0008 - 0x0000)
struct SubField_GetMaster final
{
public:
	class AMasterField*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubField_GetMaster) == 0x000008, "Wrong alignment on SubField_GetMaster");
static_assert(sizeof(SubField_GetMaster) == 0x000008, "Wrong size on SubField_GetMaster");
static_assert(offsetof(SubField_GetMaster, ReturnValue) == 0x000000, "Member 'SubField_GetMaster::ReturnValue' has a wrong offset!");

// Function Mordhau.SubField.SetSubFieldHidden
// 0x0001 (0x0001 - 0x0000)
struct SubField_SetSubFieldHidden final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubField_SetSubFieldHidden) == 0x000001, "Wrong alignment on SubField_SetSubFieldHidden");
static_assert(sizeof(SubField_SetSubFieldHidden) == 0x000001, "Wrong size on SubField_SetSubFieldHidden");
static_assert(offsetof(SubField_SetSubFieldHidden, bValue) == 0x000000, "Member 'SubField_SetSubFieldHidden::bValue' has a wrong offset!");

// Function Mordhau.BotProfile.AssignToController
// 0x0008 (0x0008 - 0x0000)
struct BotProfile_AssignToController final
{
public:
	class AMordhauAIController*                   Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BotProfile_AssignToController) == 0x000008, "Wrong alignment on BotProfile_AssignToController");
static_assert(sizeof(BotProfile_AssignToController) == 0x000008, "Wrong size on BotProfile_AssignToController");
static_assert(offsetof(BotProfile_AssignToController, Controller) == 0x000000, "Member 'BotProfile_AssignToController::Controller' has a wrong offset!");

// Function Mordhau.Bounds.EnteredOutOfBoundsArea
// 0x0008 (0x0008 - 0x0000)
struct Bounds_EnteredOutOfBoundsArea final
{
public:
	const class UObject*                          WCO;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bounds_EnteredOutOfBoundsArea) == 0x000008, "Wrong alignment on Bounds_EnteredOutOfBoundsArea");
static_assert(sizeof(Bounds_EnteredOutOfBoundsArea) == 0x000008, "Wrong size on Bounds_EnteredOutOfBoundsArea");
static_assert(offsetof(Bounds_EnteredOutOfBoundsArea, WCO) == 0x000000, "Member 'Bounds_EnteredOutOfBoundsArea::WCO' has a wrong offset!");

// Function Mordhau.Bounds.GetOutOfBoundsTimeUntilDeath
// 0x0004 (0x0004 - 0x0000)
struct Bounds_GetOutOfBoundsTimeUntilDeath final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bounds_GetOutOfBoundsTimeUntilDeath) == 0x000004, "Wrong alignment on Bounds_GetOutOfBoundsTimeUntilDeath");
static_assert(sizeof(Bounds_GetOutOfBoundsTimeUntilDeath) == 0x000004, "Wrong size on Bounds_GetOutOfBoundsTimeUntilDeath");
static_assert(offsetof(Bounds_GetOutOfBoundsTimeUntilDeath, ReturnValue) == 0x000000, "Member 'Bounds_GetOutOfBoundsTimeUntilDeath::ReturnValue' has a wrong offset!");

// Function Mordhau.Bounds.IsAllowedOutOfBounds
// 0x0001 (0x0001 - 0x0000)
struct Bounds_IsAllowedOutOfBounds final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bounds_IsAllowedOutOfBounds) == 0x000001, "Wrong alignment on Bounds_IsAllowedOutOfBounds");
static_assert(sizeof(Bounds_IsAllowedOutOfBounds) == 0x000001, "Wrong size on Bounds_IsAllowedOutOfBounds");
static_assert(offsetof(Bounds_IsAllowedOutOfBounds, ReturnValue) == 0x000000, "Member 'Bounds_IsAllowedOutOfBounds::ReturnValue' has a wrong offset!");

// Function Mordhau.Bounds.IsOutOfBounds
// 0x0001 (0x0001 - 0x0000)
struct Bounds_IsOutOfBounds final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bounds_IsOutOfBounds) == 0x000001, "Wrong alignment on Bounds_IsOutOfBounds");
static_assert(sizeof(Bounds_IsOutOfBounds) == 0x000001, "Wrong size on Bounds_IsOutOfBounds");
static_assert(offsetof(Bounds_IsOutOfBounds, ReturnValue) == 0x000000, "Member 'Bounds_IsOutOfBounds::ReturnValue' has a wrong offset!");

// Function Mordhau.CharacterMeshComponent.OnCharacterDied
// 0x0008 (0x0008 - 0x0000)
struct CharacterMeshComponent_OnCharacterDied final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMeshComponent_OnCharacterDied) == 0x000008, "Wrong alignment on CharacterMeshComponent_OnCharacterDied");
static_assert(sizeof(CharacterMeshComponent_OnCharacterDied) == 0x000008, "Wrong size on CharacterMeshComponent_OnCharacterDied");
static_assert(offsetof(CharacterMeshComponent_OnCharacterDied, Character) == 0x000000, "Member 'CharacterMeshComponent_OnCharacterDied::Character' has a wrong offset!");

// Function Mordhau.CharacterMeshComponent.OnCharacterLODTick
// 0x0004 (0x0004 - 0x0000)
struct CharacterMeshComponent_OnCharacterLODTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMeshComponent_OnCharacterLODTick) == 0x000004, "Wrong alignment on CharacterMeshComponent_OnCharacterLODTick");
static_assert(sizeof(CharacterMeshComponent_OnCharacterLODTick) == 0x000004, "Wrong size on CharacterMeshComponent_OnCharacterLODTick");
static_assert(offsetof(CharacterMeshComponent_OnCharacterLODTick, DeltaTime) == 0x000000, "Member 'CharacterMeshComponent_OnCharacterLODTick::DeltaTime' has a wrong offset!");

// Function Mordhau.HumanMeshComponent.CreateFPDeadMeshIfNone
// 0x0001 (0x0001 - 0x0000)
struct HumanMeshComponent_CreateFPDeadMeshIfNone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanMeshComponent_CreateFPDeadMeshIfNone) == 0x000001, "Wrong alignment on HumanMeshComponent_CreateFPDeadMeshIfNone");
static_assert(sizeof(HumanMeshComponent_CreateFPDeadMeshIfNone) == 0x000001, "Wrong size on HumanMeshComponent_CreateFPDeadMeshIfNone");
static_assert(offsetof(HumanMeshComponent_CreateFPDeadMeshIfNone, ReturnValue) == 0x000000, "Member 'HumanMeshComponent_CreateFPDeadMeshIfNone::ReturnValue' has a wrong offset!");

// Function Mordhau.HumanMeshComponent.CreateFPMeshIfNone
// 0x0001 (0x0001 - 0x0000)
struct HumanMeshComponent_CreateFPMeshIfNone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanMeshComponent_CreateFPMeshIfNone) == 0x000001, "Wrong alignment on HumanMeshComponent_CreateFPMeshIfNone");
static_assert(sizeof(HumanMeshComponent_CreateFPMeshIfNone) == 0x000001, "Wrong size on HumanMeshComponent_CreateFPMeshIfNone");
static_assert(offsetof(HumanMeshComponent_CreateFPMeshIfNone, ReturnValue) == 0x000000, "Member 'HumanMeshComponent_CreateFPMeshIfNone::ReturnValue' has a wrong offset!");

// Function Mordhau.HumanMeshComponent.CreateUnifiedMeshIfNone
// 0x0001 (0x0001 - 0x0000)
struct HumanMeshComponent_CreateUnifiedMeshIfNone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanMeshComponent_CreateUnifiedMeshIfNone) == 0x000001, "Wrong alignment on HumanMeshComponent_CreateUnifiedMeshIfNone");
static_assert(sizeof(HumanMeshComponent_CreateUnifiedMeshIfNone) == 0x000001, "Wrong size on HumanMeshComponent_CreateUnifiedMeshIfNone");
static_assert(offsetof(HumanMeshComponent_CreateUnifiedMeshIfNone, ReturnValue) == 0x000000, "Member 'HumanMeshComponent_CreateUnifiedMeshIfNone::ReturnValue' has a wrong offset!");

// Function Mordhau.HumanMeshComponent.ModifyBodyColors
// 0x0060 (0x0060 - 0x0000)
struct HumanMeshComponent_ModifyBodyColors final
{
public:
	struct FLinearColor                           InSkinColor;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InHairColor;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InEyeColor;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutSkinColor;                                      // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutHairColor;                                      // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutEyeColor;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanMeshComponent_ModifyBodyColors) == 0x000004, "Wrong alignment on HumanMeshComponent_ModifyBodyColors");
static_assert(sizeof(HumanMeshComponent_ModifyBodyColors) == 0x000060, "Wrong size on HumanMeshComponent_ModifyBodyColors");
static_assert(offsetof(HumanMeshComponent_ModifyBodyColors, InSkinColor) == 0x000000, "Member 'HumanMeshComponent_ModifyBodyColors::InSkinColor' has a wrong offset!");
static_assert(offsetof(HumanMeshComponent_ModifyBodyColors, InHairColor) == 0x000010, "Member 'HumanMeshComponent_ModifyBodyColors::InHairColor' has a wrong offset!");
static_assert(offsetof(HumanMeshComponent_ModifyBodyColors, InEyeColor) == 0x000020, "Member 'HumanMeshComponent_ModifyBodyColors::InEyeColor' has a wrong offset!");
static_assert(offsetof(HumanMeshComponent_ModifyBodyColors, OutSkinColor) == 0x000030, "Member 'HumanMeshComponent_ModifyBodyColors::OutSkinColor' has a wrong offset!");
static_assert(offsetof(HumanMeshComponent_ModifyBodyColors, OutHairColor) == 0x000040, "Member 'HumanMeshComponent_ModifyBodyColors::OutHairColor' has a wrong offset!");
static_assert(offsetof(HumanMeshComponent_ModifyBodyColors, OutEyeColor) == 0x000050, "Member 'HumanMeshComponent_ModifyBodyColors::OutEyeColor' has a wrong offset!");

// Function Mordhau.HumanMeshComponent.OnCharacterBuilt
// 0x0008 (0x0008 - 0x0000)
struct HumanMeshComponent_OnCharacterBuilt final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanMeshComponent_OnCharacterBuilt) == 0x000008, "Wrong alignment on HumanMeshComponent_OnCharacterBuilt");
static_assert(sizeof(HumanMeshComponent_OnCharacterBuilt) == 0x000008, "Wrong size on HumanMeshComponent_OnCharacterBuilt");
static_assert(offsetof(HumanMeshComponent_OnCharacterBuilt, Character) == 0x000000, "Member 'HumanMeshComponent_OnCharacterBuilt::Character' has a wrong offset!");

// Function Mordhau.HumanMeshComponent.OnCharacterCameraStyleChanged
// 0x0008 (0x0008 - 0x0000)
struct HumanMeshComponent_OnCharacterCameraStyleChanged final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanMeshComponent_OnCharacterCameraStyleChanged) == 0x000008, "Wrong alignment on HumanMeshComponent_OnCharacterCameraStyleChanged");
static_assert(sizeof(HumanMeshComponent_OnCharacterCameraStyleChanged) == 0x000008, "Wrong size on HumanMeshComponent_OnCharacterCameraStyleChanged");
static_assert(offsetof(HumanMeshComponent_OnCharacterCameraStyleChanged, Character) == 0x000000, "Member 'HumanMeshComponent_OnCharacterCameraStyleChanged::Character' has a wrong offset!");

// Function Mordhau.HumanMeshComponent.OnCharacterChangedTeam
// 0x0008 (0x0008 - 0x0000)
struct HumanMeshComponent_OnCharacterChangedTeam final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanMeshComponent_OnCharacterChangedTeam) == 0x000008, "Wrong alignment on HumanMeshComponent_OnCharacterChangedTeam");
static_assert(sizeof(HumanMeshComponent_OnCharacterChangedTeam) == 0x000008, "Wrong size on HumanMeshComponent_OnCharacterChangedTeam");
static_assert(offsetof(HumanMeshComponent_OnCharacterChangedTeam, Character) == 0x000000, "Member 'HumanMeshComponent_OnCharacterChangedTeam::Character' has a wrong offset!");

// Function Mordhau.HumanMeshComponent.OnCharacterTornOff
// 0x0008 (0x0008 - 0x0000)
struct HumanMeshComponent_OnCharacterTornOff final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanMeshComponent_OnCharacterTornOff) == 0x000008, "Wrong alignment on HumanMeshComponent_OnCharacterTornOff");
static_assert(sizeof(HumanMeshComponent_OnCharacterTornOff) == 0x000008, "Wrong size on HumanMeshComponent_OnCharacterTornOff");
static_assert(offsetof(HumanMeshComponent_OnCharacterTornOff, Character) == 0x000000, "Member 'HumanMeshComponent_OnCharacterTornOff::Character' has a wrong offset!");

// Function Mordhau.HumanMeshComponent.SetMaterialParamsForLODMasterSlot
// 0x0020 (0x0020 - 0x0000)
struct HumanMeshComponent_SetMaterialParamsForLODMasterSlot final
{
public:
	class FString                                 Slot;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMordhauWearable*                       Wearable;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanMeshComponent_SetMaterialParamsForLODMasterSlot) == 0x000008, "Wrong alignment on HumanMeshComponent_SetMaterialParamsForLODMasterSlot");
static_assert(sizeof(HumanMeshComponent_SetMaterialParamsForLODMasterSlot) == 0x000020, "Wrong size on HumanMeshComponent_SetMaterialParamsForLODMasterSlot");
static_assert(offsetof(HumanMeshComponent_SetMaterialParamsForLODMasterSlot, Slot) == 0x000000, "Member 'HumanMeshComponent_SetMaterialParamsForLODMasterSlot::Slot' has a wrong offset!");
static_assert(offsetof(HumanMeshComponent_SetMaterialParamsForLODMasterSlot, Wearable) == 0x000010, "Member 'HumanMeshComponent_SetMaterialParamsForLODMasterSlot::Wearable' has a wrong offset!");
static_assert(offsetof(HumanMeshComponent_SetMaterialParamsForLODMasterSlot, Mid) == 0x000018, "Member 'HumanMeshComponent_SetMaterialParamsForLODMasterSlot::Mid' has a wrong offset!");

// Function Mordhau.HumanMeshComponent.SetMaterialParamsForMergedSlot
// 0x0028 (0x0028 - 0x0000)
struct HumanMeshComponent_SetMaterialParamsForMergedSlot final
{
public:
	class FString                                 Prefix;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMordhauWearable*                       Wearable;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LowQuality;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanMeshComponent_SetMaterialParamsForMergedSlot) == 0x000008, "Wrong alignment on HumanMeshComponent_SetMaterialParamsForMergedSlot");
static_assert(sizeof(HumanMeshComponent_SetMaterialParamsForMergedSlot) == 0x000028, "Wrong size on HumanMeshComponent_SetMaterialParamsForMergedSlot");
static_assert(offsetof(HumanMeshComponent_SetMaterialParamsForMergedSlot, Prefix) == 0x000000, "Member 'HumanMeshComponent_SetMaterialParamsForMergedSlot::Prefix' has a wrong offset!");
static_assert(offsetof(HumanMeshComponent_SetMaterialParamsForMergedSlot, Wearable) == 0x000010, "Member 'HumanMeshComponent_SetMaterialParamsForMergedSlot::Wearable' has a wrong offset!");
static_assert(offsetof(HumanMeshComponent_SetMaterialParamsForMergedSlot, Mid) == 0x000018, "Member 'HumanMeshComponent_SetMaterialParamsForMergedSlot::Mid' has a wrong offset!");
static_assert(offsetof(HumanMeshComponent_SetMaterialParamsForMergedSlot, LowQuality) == 0x000020, "Member 'HumanMeshComponent_SetMaterialParamsForMergedSlot::LowQuality' has a wrong offset!");

// Function Mordhau.HumanMeshComponent.UpdateSkeletalMeshComponentMaterials
// 0x0010 (0x0010 - 0x0000)
struct HumanMeshComponent_UpdateSkeletalMeshComponentMaterials final
{
public:
	class USkeletalMeshComponent*                 USMC;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateBlood;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateIconGenerate;                               // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanMeshComponent_UpdateSkeletalMeshComponentMaterials) == 0x000008, "Wrong alignment on HumanMeshComponent_UpdateSkeletalMeshComponentMaterials");
static_assert(sizeof(HumanMeshComponent_UpdateSkeletalMeshComponentMaterials) == 0x000010, "Wrong size on HumanMeshComponent_UpdateSkeletalMeshComponentMaterials");
static_assert(offsetof(HumanMeshComponent_UpdateSkeletalMeshComponentMaterials, USMC) == 0x000000, "Member 'HumanMeshComponent_UpdateSkeletalMeshComponentMaterials::USMC' has a wrong offset!");
static_assert(offsetof(HumanMeshComponent_UpdateSkeletalMeshComponentMaterials, bUpdateBlood) == 0x000008, "Member 'HumanMeshComponent_UpdateSkeletalMeshComponentMaterials::bUpdateBlood' has a wrong offset!");
static_assert(offsetof(HumanMeshComponent_UpdateSkeletalMeshComponentMaterials, bUpdateIconGenerate) == 0x000009, "Member 'HumanMeshComponent_UpdateSkeletalMeshComponentMaterials::bUpdateIconGenerate' has a wrong offset!");

// Function Mordhau.UpdateMatchmakingMatch.UpdateMatchmakingMatch
// 0x00C8 (0x00C8 - 0x0000)
struct UpdateMatchmakingMatch_UpdateMatchmakingMatch final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabMatchmakingMatch               Match_0;                                           // 0x0008(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UUpdateMatchmakingMatch*                ReturnValue;                                       // 0x00C0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpdateMatchmakingMatch_UpdateMatchmakingMatch) == 0x000008, "Wrong alignment on UpdateMatchmakingMatch_UpdateMatchmakingMatch");
static_assert(sizeof(UpdateMatchmakingMatch_UpdateMatchmakingMatch) == 0x0000C8, "Wrong size on UpdateMatchmakingMatch_UpdateMatchmakingMatch");
static_assert(offsetof(UpdateMatchmakingMatch_UpdateMatchmakingMatch, WorldContextObject) == 0x000000, "Member 'UpdateMatchmakingMatch_UpdateMatchmakingMatch::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UpdateMatchmakingMatch_UpdateMatchmakingMatch, Match_0) == 0x000008, "Member 'UpdateMatchmakingMatch_UpdateMatchmakingMatch::Match_0' has a wrong offset!");
static_assert(offsetof(UpdateMatchmakingMatch_UpdateMatchmakingMatch, ReturnValue) == 0x0000C0, "Member 'UpdateMatchmakingMatch_UpdateMatchmakingMatch::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.AcceptPartyInvite
// 0x0068 (0x0068 - 0x0000)
struct MordhauGameInstance_AcceptPartyInvite final
{
public:
	struct FPlayFabPlayer                         Sender;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameInstance_AcceptPartyInvite) == 0x000008, "Wrong alignment on MordhauGameInstance_AcceptPartyInvite");
static_assert(sizeof(MordhauGameInstance_AcceptPartyInvite) == 0x000068, "Wrong size on MordhauGameInstance_AcceptPartyInvite");
static_assert(offsetof(MordhauGameInstance_AcceptPartyInvite, Sender) == 0x000000, "Member 'MordhauGameInstance_AcceptPartyInvite::Sender' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_AcceptPartyInvite, ReturnValue) == 0x000060, "Member 'MordhauGameInstance_AcceptPartyInvite::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.ActivityStatusChange
// 0x0003 (0x0003 - 0x0000)
struct MordhauGameInstance_ActivityStatusChange final
{
public:
	bool                                          Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActivityType                                 Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_ActivityStatusChange) == 0x000001, "Wrong alignment on MordhauGameInstance_ActivityStatusChange");
static_assert(sizeof(MordhauGameInstance_ActivityStatusChange) == 0x000003, "Wrong size on MordhauGameInstance_ActivityStatusChange");
static_assert(offsetof(MordhauGameInstance_ActivityStatusChange, Status) == 0x000000, "Member 'MordhauGameInstance_ActivityStatusChange::Status' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_ActivityStatusChange, Type) == 0x000001, "Member 'MordhauGameInstance_ActivityStatusChange::Type' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_ActivityStatusChange, ReturnValue) == 0x000002, "Member 'MordhauGameInstance_ActivityStatusChange::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.AddPartyMatchmakingTicket
// 0x0020 (0x0020 - 0x0000)
struct MordhauGameInstance_AddPartyMatchmakingTicket final
{
public:
	class FString                                 QueueName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TicketId;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_AddPartyMatchmakingTicket) == 0x000008, "Wrong alignment on MordhauGameInstance_AddPartyMatchmakingTicket");
static_assert(sizeof(MordhauGameInstance_AddPartyMatchmakingTicket) == 0x000020, "Wrong size on MordhauGameInstance_AddPartyMatchmakingTicket");
static_assert(offsetof(MordhauGameInstance_AddPartyMatchmakingTicket, QueueName) == 0x000000, "Member 'MordhauGameInstance_AddPartyMatchmakingTicket::QueueName' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_AddPartyMatchmakingTicket, TicketId) == 0x000010, "Member 'MordhauGameInstance_AddPartyMatchmakingTicket::TicketId' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.AreStatsAvailable
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_AreStatsAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_AreStatsAvailable) == 0x000001, "Wrong alignment on MordhauGameInstance_AreStatsAvailable");
static_assert(sizeof(MordhauGameInstance_AreStatsAvailable) == 0x000001, "Wrong size on MordhauGameInstance_AreStatsAvailable");
static_assert(offsetof(MordhauGameInstance_AreStatsAvailable, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_AreStatsAvailable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.AutoJoinPartyLeaderGameSessionOnPartyUpdate
// 0x0060 (0x0060 - 0x0000)
struct MordhauGameInstance_AutoJoinPartyLeaderGameSessionOnPartyUpdate final
{
public:
	struct FPlayFabPlayer                         Player;                                            // 0x0000(0x0060)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_AutoJoinPartyLeaderGameSessionOnPartyUpdate) == 0x000008, "Wrong alignment on MordhauGameInstance_AutoJoinPartyLeaderGameSessionOnPartyUpdate");
static_assert(sizeof(MordhauGameInstance_AutoJoinPartyLeaderGameSessionOnPartyUpdate) == 0x000060, "Wrong size on MordhauGameInstance_AutoJoinPartyLeaderGameSessionOnPartyUpdate");
static_assert(offsetof(MordhauGameInstance_AutoJoinPartyLeaderGameSessionOnPartyUpdate, Player) == 0x000000, "Member 'MordhauGameInstance_AutoJoinPartyLeaderGameSessionOnPartyUpdate::Player' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.BPPlayReplay
// 0x0020 (0x0020 - 0x0000)
struct MordhauGameInstance_BPPlayReplay final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AdditionalOptions;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_BPPlayReplay) == 0x000008, "Wrong alignment on MordhauGameInstance_BPPlayReplay");
static_assert(sizeof(MordhauGameInstance_BPPlayReplay) == 0x000020, "Wrong size on MordhauGameInstance_BPPlayReplay");
static_assert(offsetof(MordhauGameInstance_BPPlayReplay, InName) == 0x000000, "Member 'MordhauGameInstance_BPPlayReplay::InName' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_BPPlayReplay, AdditionalOptions) == 0x000010, "Member 'MordhauGameInstance_BPPlayReplay::AdditionalOptions' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.BPStartRecordingReplay
// 0x0030 (0x0030 - 0x0000)
struct MordhauGameInstance_BPStartRecordingReplay final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FriendlyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AdditionalOptions;                                 // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_BPStartRecordingReplay) == 0x000008, "Wrong alignment on MordhauGameInstance_BPStartRecordingReplay");
static_assert(sizeof(MordhauGameInstance_BPStartRecordingReplay) == 0x000030, "Wrong size on MordhauGameInstance_BPStartRecordingReplay");
static_assert(offsetof(MordhauGameInstance_BPStartRecordingReplay, InName) == 0x000000, "Member 'MordhauGameInstance_BPStartRecordingReplay::InName' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_BPStartRecordingReplay, FriendlyName) == 0x000010, "Member 'MordhauGameInstance_BPStartRecordingReplay::FriendlyName' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_BPStartRecordingReplay, AdditionalOptions) == 0x000020, "Member 'MordhauGameInstance_BPStartRecordingReplay::AdditionalOptions' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.CanInviteToParty
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_CanInviteToParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_CanInviteToParty) == 0x000001, "Wrong alignment on MordhauGameInstance_CanInviteToParty");
static_assert(sizeof(MordhauGameInstance_CanInviteToParty) == 0x000001, "Wrong size on MordhauGameInstance_CanInviteToParty");
static_assert(offsetof(MordhauGameInstance_CanInviteToParty, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_CanInviteToParty::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.CanLeaveParty
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_CanLeaveParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_CanLeaveParty) == 0x000001, "Wrong alignment on MordhauGameInstance_CanLeaveParty");
static_assert(sizeof(MordhauGameInstance_CanLeaveParty) == 0x000001, "Wrong size on MordhauGameInstance_CanLeaveParty");
static_assert(offsetof(MordhauGameInstance_CanLeaveParty, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_CanLeaveParty::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.CanOnlineCrossPlay
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_CanOnlineCrossPlay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_CanOnlineCrossPlay) == 0x000001, "Wrong alignment on MordhauGameInstance_CanOnlineCrossPlay");
static_assert(sizeof(MordhauGameInstance_CanOnlineCrossPlay) == 0x000001, "Wrong size on MordhauGameInstance_CanOnlineCrossPlay");
static_assert(offsetof(MordhauGameInstance_CanOnlineCrossPlay, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_CanOnlineCrossPlay::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.CanOnlineCrossPlayPlaystation
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_CanOnlineCrossPlayPlaystation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_CanOnlineCrossPlayPlaystation) == 0x000001, "Wrong alignment on MordhauGameInstance_CanOnlineCrossPlayPlaystation");
static_assert(sizeof(MordhauGameInstance_CanOnlineCrossPlayPlaystation) == 0x000001, "Wrong size on MordhauGameInstance_CanOnlineCrossPlayPlaystation");
static_assert(offsetof(MordhauGameInstance_CanOnlineCrossPlayPlaystation, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_CanOnlineCrossPlayPlaystation::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.CanPlayOnline
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_CanPlayOnline final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_CanPlayOnline) == 0x000001, "Wrong alignment on MordhauGameInstance_CanPlayOnline");
static_assert(sizeof(MordhauGameInstance_CanPlayOnline) == 0x000001, "Wrong size on MordhauGameInstance_CanPlayOnline");
static_assert(offsetof(MordhauGameInstance_CanPlayOnline, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_CanPlayOnline::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.CanPlayOnlineOnly
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_CanPlayOnlineOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_CanPlayOnlineOnly) == 0x000001, "Wrong alignment on MordhauGameInstance_CanPlayOnlineOnly");
static_assert(sizeof(MordhauGameInstance_CanPlayOnlineOnly) == 0x000001, "Wrong size on MordhauGameInstance_CanPlayOnlineOnly");
static_assert(offsetof(MordhauGameInstance_CanPlayOnlineOnly, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_CanPlayOnlineOnly::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.CheckControllerPresence
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_CheckControllerPresence final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_CheckControllerPresence) == 0x000001, "Wrong alignment on MordhauGameInstance_CheckControllerPresence");
static_assert(sizeof(MordhauGameInstance_CheckControllerPresence) == 0x000001, "Wrong size on MordhauGameInstance_CheckControllerPresence");
static_assert(offsetof(MordhauGameInstance_CheckControllerPresence, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_CheckControllerPresence::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.ClearPartyMemberProfile
// 0x0060 (0x0060 - 0x0000)
struct MordhauGameInstance_ClearPartyMemberProfile final
{
public:
	struct FPlayFabPlayer                         Player;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_ClearPartyMemberProfile) == 0x000008, "Wrong alignment on MordhauGameInstance_ClearPartyMemberProfile");
static_assert(sizeof(MordhauGameInstance_ClearPartyMemberProfile) == 0x000060, "Wrong size on MordhauGameInstance_ClearPartyMemberProfile");
static_assert(offsetof(MordhauGameInstance_ClearPartyMemberProfile, Player) == 0x000000, "Member 'MordhauGameInstance_ClearPartyMemberProfile::Player' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.ClientTravel
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameInstance_ClientTravel final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerCount;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameInstance_ClientTravel) == 0x000008, "Wrong alignment on MordhauGameInstance_ClientTravel");
static_assert(sizeof(MordhauGameInstance_ClientTravel) == 0x000018, "Wrong size on MordhauGameInstance_ClientTravel");
static_assert(offsetof(MordhauGameInstance_ClientTravel, MapName) == 0x000000, "Member 'MordhauGameInstance_ClientTravel::MapName' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_ClientTravel, PlayerCount) == 0x000010, "Member 'MordhauGameInstance_ClientTravel::PlayerCount' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_ClientTravel, ReturnValue) == 0x000014, "Member 'MordhauGameInstance_ClientTravel::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.ClientTravelServerDetails
// 0x0050 (0x0050 - 0x0000)
struct MordhauGameInstance_ClientTravelServerDetails final
{
public:
	struct FPlayFabServerDetails                  InServerDetails;                                   // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameInstance_ClientTravelServerDetails) == 0x000008, "Wrong alignment on MordhauGameInstance_ClientTravelServerDetails");
static_assert(sizeof(MordhauGameInstance_ClientTravelServerDetails) == 0x000050, "Wrong size on MordhauGameInstance_ClientTravelServerDetails");
static_assert(offsetof(MordhauGameInstance_ClientTravelServerDetails, InServerDetails) == 0x000000, "Member 'MordhauGameInstance_ClientTravelServerDetails::InServerDetails' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_ClientTravelServerDetails, Password) == 0x000038, "Member 'MordhauGameInstance_ClientTravelServerDetails::Password' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_ClientTravelServerDetails, ReturnValue) == 0x000048, "Member 'MordhauGameInstance_ClientTravelServerDetails::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.ClientTravelSession
// 0x0128 (0x0128 - 0x0000)
struct MordhauGameInstance_ClientTravelSession final
{
public:
	struct FServerSearchResult                    SearchResult;                                      // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0110(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0120(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameInstance_ClientTravelSession) == 0x000008, "Wrong alignment on MordhauGameInstance_ClientTravelSession");
static_assert(sizeof(MordhauGameInstance_ClientTravelSession) == 0x000128, "Wrong size on MordhauGameInstance_ClientTravelSession");
static_assert(offsetof(MordhauGameInstance_ClientTravelSession, SearchResult) == 0x000000, "Member 'MordhauGameInstance_ClientTravelSession::SearchResult' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_ClientTravelSession, Password) == 0x000110, "Member 'MordhauGameInstance_ClientTravelSession::Password' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_ClientTravelSession, ReturnValue) == 0x000120, "Member 'MordhauGameInstance_ClientTravelSession::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.DeclinePartyInvite
// 0x0068 (0x0068 - 0x0000)
struct MordhauGameInstance_DeclinePartyInvite final
{
public:
	struct FPlayFabPlayer                         Sender;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameInstance_DeclinePartyInvite) == 0x000008, "Wrong alignment on MordhauGameInstance_DeclinePartyInvite");
static_assert(sizeof(MordhauGameInstance_DeclinePartyInvite) == 0x000068, "Wrong size on MordhauGameInstance_DeclinePartyInvite");
static_assert(offsetof(MordhauGameInstance_DeclinePartyInvite, Sender) == 0x000000, "Member 'MordhauGameInstance_DeclinePartyInvite::Sender' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_DeclinePartyInvite, ReturnValue) == 0x000060, "Member 'MordhauGameInstance_DeclinePartyInvite::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.FindBestServerLocation
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_FindBestServerLocation final
{
public:
	EServerLocation                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_FindBestServerLocation) == 0x000001, "Wrong alignment on MordhauGameInstance_FindBestServerLocation");
static_assert(sizeof(MordhauGameInstance_FindBestServerLocation) == 0x000001, "Wrong size on MordhauGameInstance_FindBestServerLocation");
static_assert(offsetof(MordhauGameInstance_FindBestServerLocation, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_FindBestServerLocation::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.FindBestServerRegion
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_FindBestServerRegion final
{
public:
	EServerRegion                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_FindBestServerRegion) == 0x000001, "Wrong alignment on MordhauGameInstance_FindBestServerRegion");
static_assert(sizeof(MordhauGameInstance_FindBestServerRegion) == 0x000001, "Wrong size on MordhauGameInstance_FindBestServerRegion");
static_assert(offsetof(MordhauGameInstance_FindBestServerRegion, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_FindBestServerRegion::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.FindGameModeMetadata
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameInstance_FindGameModeMetadata final
{
public:
	class FString                                 GameModePrefix;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameModeMetadata*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_FindGameModeMetadata) == 0x000008, "Wrong alignment on MordhauGameInstance_FindGameModeMetadata");
static_assert(sizeof(MordhauGameInstance_FindGameModeMetadata) == 0x000018, "Wrong size on MordhauGameInstance_FindGameModeMetadata");
static_assert(offsetof(MordhauGameInstance_FindGameModeMetadata, GameModePrefix) == 0x000000, "Member 'MordhauGameInstance_FindGameModeMetadata::GameModePrefix' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_FindGameModeMetadata, ReturnValue) == 0x000010, "Member 'MordhauGameInstance_FindGameModeMetadata::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.FindMapMetadata
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameInstance_FindMapMetadata final
{
public:
	class FString                                 GameModeMapName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMapMetadata*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_FindMapMetadata) == 0x000008, "Wrong alignment on MordhauGameInstance_FindMapMetadata");
static_assert(sizeof(MordhauGameInstance_FindMapMetadata) == 0x000018, "Wrong size on MordhauGameInstance_FindMapMetadata");
static_assert(offsetof(MordhauGameInstance_FindMapMetadata, GameModeMapName) == 0x000000, "Member 'MordhauGameInstance_FindMapMetadata::GameModeMapName' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_FindMapMetadata, ReturnValue) == 0x000010, "Member 'MordhauGameInstance_FindMapMetadata::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.ForceAllUserFocus
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameInstance_ForceAllUserFocus final
{
public:
	EFocusCause                                   FocusCause;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            UserWidget;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_ForceAllUserFocus) == 0x000008, "Wrong alignment on MordhauGameInstance_ForceAllUserFocus");
static_assert(sizeof(MordhauGameInstance_ForceAllUserFocus) == 0x000010, "Wrong size on MordhauGameInstance_ForceAllUserFocus");
static_assert(offsetof(MordhauGameInstance_ForceAllUserFocus, FocusCause) == 0x000000, "Member 'MordhauGameInstance_ForceAllUserFocus::FocusCause' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_ForceAllUserFocus, UserWidget) == 0x000008, "Member 'MordhauGameInstance_ForceAllUserFocus::UserWidget' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetBlacklistedServers
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameInstance_GetBlacklistedServers final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetBlacklistedServers) == 0x000008, "Wrong alignment on MordhauGameInstance_GetBlacklistedServers");
static_assert(sizeof(MordhauGameInstance_GetBlacklistedServers) == 0x000010, "Wrong size on MordhauGameInstance_GetBlacklistedServers");
static_assert(offsetof(MordhauGameInstance_GetBlacklistedServers, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetBlacklistedServers::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetConnectionTimeoutTimestamp
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameInstance_GetConnectionTimeoutTimestamp final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetConnectionTimeoutTimestamp) == 0x000004, "Wrong alignment on MordhauGameInstance_GetConnectionTimeoutTimestamp");
static_assert(sizeof(MordhauGameInstance_GetConnectionTimeoutTimestamp) == 0x000004, "Wrong size on MordhauGameInstance_GetConnectionTimeoutTimestamp");
static_assert(offsetof(MordhauGameInstance_GetConnectionTimeoutTimestamp, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetConnectionTimeoutTimestamp::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetFriendsGroupId
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameInstance_GetFriendsGroupId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetFriendsGroupId) == 0x000008, "Wrong alignment on MordhauGameInstance_GetFriendsGroupId");
static_assert(sizeof(MordhauGameInstance_GetFriendsGroupId) == 0x000010, "Wrong size on MordhauGameInstance_GetFriendsGroupId");
static_assert(offsetof(MordhauGameInstance_GetFriendsGroupId, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetFriendsGroupId::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetGlobalServerBanDuration
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameInstance_GetGlobalServerBanDuration final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetGlobalServerBanDuration) == 0x000004, "Wrong alignment on MordhauGameInstance_GetGlobalServerBanDuration");
static_assert(sizeof(MordhauGameInstance_GetGlobalServerBanDuration) == 0x000004, "Wrong size on MordhauGameInstance_GetGlobalServerBanDuration");
static_assert(offsetof(MordhauGameInstance_GetGlobalServerBanDuration, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetGlobalServerBanDuration::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetGlobalServerMuteDuration
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameInstance_GetGlobalServerMuteDuration final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetGlobalServerMuteDuration) == 0x000004, "Wrong alignment on MordhauGameInstance_GetGlobalServerMuteDuration");
static_assert(sizeof(MordhauGameInstance_GetGlobalServerMuteDuration) == 0x000004, "Wrong size on MordhauGameInstance_GetGlobalServerMuteDuration");
static_assert(offsetof(MordhauGameInstance_GetGlobalServerMuteDuration, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetGlobalServerMuteDuration::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetIngameEvent
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_GetIngameEvent final
{
public:
	EIngameEvent                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetIngameEvent) == 0x000001, "Wrong alignment on MordhauGameInstance_GetIngameEvent");
static_assert(sizeof(MordhauGameInstance_GetIngameEvent) == 0x000001, "Wrong size on MordhauGameInstance_GetIngameEvent");
static_assert(offsetof(MordhauGameInstance_GetIngameEvent, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetIngameEvent::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetLastPlayerLeaveTime
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameInstance_GetLastPlayerLeaveTime final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetLastPlayerLeaveTime) == 0x000008, "Wrong alignment on MordhauGameInstance_GetLastPlayerLeaveTime");
static_assert(sizeof(MordhauGameInstance_GetLastPlayerLeaveTime) == 0x000008, "Wrong size on MordhauGameInstance_GetLastPlayerLeaveTime");
static_assert(offsetof(MordhauGameInstance_GetLastPlayerLeaveTime, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetLastPlayerLeaveTime::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetMapInfo
// 0x0030 (0x0030 - 0x0000)
struct MordhauGameInstance_GetMapInfo final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMapInfo                               ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetMapInfo) == 0x000008, "Wrong alignment on MordhauGameInstance_GetMapInfo");
static_assert(sizeof(MordhauGameInstance_GetMapInfo) == 0x000030, "Wrong size on MordhauGameInstance_GetMapInfo");
static_assert(offsetof(MordhauGameInstance_GetMapInfo, MapName) == 0x000000, "Member 'MordhauGameInstance_GetMapInfo::MapName' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_GetMapInfo, ReturnValue) == 0x000010, "Member 'MordhauGameInstance_GetMapInfo::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetMatchmakingGroupId
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameInstance_GetMatchmakingGroupId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetMatchmakingGroupId) == 0x000008, "Wrong alignment on MordhauGameInstance_GetMatchmakingGroupId");
static_assert(sizeof(MordhauGameInstance_GetMatchmakingGroupId) == 0x000010, "Wrong size on MordhauGameInstance_GetMatchmakingGroupId");
static_assert(offsetof(MordhauGameInstance_GetMatchmakingGroupId, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetMatchmakingGroupId::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetMatchmakingMatchId
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameInstance_GetMatchmakingMatchId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetMatchmakingMatchId) == 0x000008, "Wrong alignment on MordhauGameInstance_GetMatchmakingMatchId");
static_assert(sizeof(MordhauGameInstance_GetMatchmakingMatchId) == 0x000010, "Wrong size on MordhauGameInstance_GetMatchmakingMatchId");
static_assert(offsetof(MordhauGameInstance_GetMatchmakingMatchId, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetMatchmakingMatchId::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetNextMatchId
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameInstance_GetNextMatchId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetNextMatchId) == 0x000004, "Wrong alignment on MordhauGameInstance_GetNextMatchId");
static_assert(sizeof(MordhauGameInstance_GetNextMatchId) == 0x000004, "Wrong size on MordhauGameInstance_GetNextMatchId");
static_assert(offsetof(MordhauGameInstance_GetNextMatchId, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetNextMatchId::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetNoviceServerRegions
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameInstance_GetNoviceServerRegions final
{
public:
	TArray<EServerRegion>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetNoviceServerRegions) == 0x000008, "Wrong alignment on MordhauGameInstance_GetNoviceServerRegions");
static_assert(sizeof(MordhauGameInstance_GetNoviceServerRegions) == 0x000010, "Wrong size on MordhauGameInstance_GetNoviceServerRegions");
static_assert(offsetof(MordhauGameInstance_GetNoviceServerRegions, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetNoviceServerRegions::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetNoviceThreshold
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameInstance_GetNoviceThreshold final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetNoviceThreshold) == 0x000004, "Wrong alignment on MordhauGameInstance_GetNoviceThreshold");
static_assert(sizeof(MordhauGameInstance_GetNoviceThreshold) == 0x000004, "Wrong size on MordhauGameInstance_GetNoviceThreshold");
static_assert(offsetof(MordhauGameInstance_GetNoviceThreshold, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetNoviceThreshold::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetNumReservedSlots
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameInstance_GetNumReservedSlots final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetNumReservedSlots) == 0x000004, "Wrong alignment on MordhauGameInstance_GetNumReservedSlots");
static_assert(sizeof(MordhauGameInstance_GetNumReservedSlots) == 0x000004, "Wrong size on MordhauGameInstance_GetNumReservedSlots");
static_assert(offsetof(MordhauGameInstance_GetNumReservedSlots, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetNumReservedSlots::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetOfficialServerBanDuration
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameInstance_GetOfficialServerBanDuration final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetOfficialServerBanDuration) == 0x000004, "Wrong alignment on MordhauGameInstance_GetOfficialServerBanDuration");
static_assert(sizeof(MordhauGameInstance_GetOfficialServerBanDuration) == 0x000004, "Wrong size on MordhauGameInstance_GetOfficialServerBanDuration");
static_assert(offsetof(MordhauGameInstance_GetOfficialServerBanDuration, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetOfficialServerBanDuration::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetOfficialServerMuteDuration
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameInstance_GetOfficialServerMuteDuration final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetOfficialServerMuteDuration) == 0x000004, "Wrong alignment on MordhauGameInstance_GetOfficialServerMuteDuration");
static_assert(sizeof(MordhauGameInstance_GetOfficialServerMuteDuration) == 0x000004, "Wrong size on MordhauGameInstance_GetOfficialServerMuteDuration");
static_assert(offsetof(MordhauGameInstance_GetOfficialServerMuteDuration, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetOfficialServerMuteDuration::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetOtherPartyMembersEntityIDs
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameInstance_GetOtherPartyMembersEntityIDs final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetOtherPartyMembersEntityIDs) == 0x000008, "Wrong alignment on MordhauGameInstance_GetOtherPartyMembersEntityIDs");
static_assert(sizeof(MordhauGameInstance_GetOtherPartyMembersEntityIDs) == 0x000010, "Wrong size on MordhauGameInstance_GetOtherPartyMembersEntityIDs");
static_assert(offsetof(MordhauGameInstance_GetOtherPartyMembersEntityIDs, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetOtherPartyMembersEntityIDs::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetPartyId
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameInstance_GetPartyId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetPartyId) == 0x000008, "Wrong alignment on MordhauGameInstance_GetPartyId");
static_assert(sizeof(MordhauGameInstance_GetPartyId) == 0x000010, "Wrong size on MordhauGameInstance_GetPartyId");
static_assert(offsetof(MordhauGameInstance_GetPartyId, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetPartyId::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetPartyInvites
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameInstance_GetPartyInvites final
{
public:
	TArray<struct FPlayFabPlayer>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetPartyInvites) == 0x000008, "Wrong alignment on MordhauGameInstance_GetPartyInvites");
static_assert(sizeof(MordhauGameInstance_GetPartyInvites) == 0x000010, "Wrong size on MordhauGameInstance_GetPartyInvites");
static_assert(offsetof(MordhauGameInstance_GetPartyInvites, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetPartyInvites::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetPartyLeader
// 0x0060 (0x0060 - 0x0000)
struct MordhauGameInstance_GetPartyLeader final
{
public:
	struct FPlayFabPlayer                         ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetPartyLeader) == 0x000008, "Wrong alignment on MordhauGameInstance_GetPartyLeader");
static_assert(sizeof(MordhauGameInstance_GetPartyLeader) == 0x000060, "Wrong size on MordhauGameInstance_GetPartyLeader");
static_assert(offsetof(MordhauGameInstance_GetPartyLeader, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetPartyLeader::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetPartyMatch
// 0x0020 (0x0020 - 0x0000)
struct MordhauGameInstance_GetPartyMatch final
{
public:
	class FString                                 QueueName;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchId;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetPartyMatch) == 0x000008, "Wrong alignment on MordhauGameInstance_GetPartyMatch");
static_assert(sizeof(MordhauGameInstance_GetPartyMatch) == 0x000020, "Wrong size on MordhauGameInstance_GetPartyMatch");
static_assert(offsetof(MordhauGameInstance_GetPartyMatch, QueueName) == 0x000000, "Member 'MordhauGameInstance_GetPartyMatch::QueueName' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_GetPartyMatch, MatchId) == 0x000010, "Member 'MordhauGameInstance_GetPartyMatch::MatchId' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetPartyMatchmakingMembers
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameInstance_GetPartyMatchmakingMembers final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetPartyMatchmakingMembers) == 0x000008, "Wrong alignment on MordhauGameInstance_GetPartyMatchmakingMembers");
static_assert(sizeof(MordhauGameInstance_GetPartyMatchmakingMembers) == 0x000010, "Wrong size on MordhauGameInstance_GetPartyMatchmakingMembers");
static_assert(offsetof(MordhauGameInstance_GetPartyMatchmakingMembers, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetPartyMatchmakingMembers::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetPartyMatchmakingState
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_GetPartyMatchmakingState final
{
public:
	EMatchmakingState                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetPartyMatchmakingState) == 0x000001, "Wrong alignment on MordhauGameInstance_GetPartyMatchmakingState");
static_assert(sizeof(MordhauGameInstance_GetPartyMatchmakingState) == 0x000001, "Wrong size on MordhauGameInstance_GetPartyMatchmakingState");
static_assert(offsetof(MordhauGameInstance_GetPartyMatchmakingState, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetPartyMatchmakingState::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetPartyMatchmakingTickets
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameInstance_GetPartyMatchmakingTickets final
{
public:
	TArray<struct FMatchmakingTicket>             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetPartyMatchmakingTickets) == 0x000008, "Wrong alignment on MordhauGameInstance_GetPartyMatchmakingTickets");
static_assert(sizeof(MordhauGameInstance_GetPartyMatchmakingTickets) == 0x000010, "Wrong size on MordhauGameInstance_GetPartyMatchmakingTickets");
static_assert(offsetof(MordhauGameInstance_GetPartyMatchmakingTickets, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetPartyMatchmakingTickets::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetPartyMemberEntities
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameInstance_GetPartyMemberEntities final
{
public:
	TArray<struct FPlayFabPlayerEntity>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetPartyMemberEntities) == 0x000008, "Wrong alignment on MordhauGameInstance_GetPartyMemberEntities");
static_assert(sizeof(MordhauGameInstance_GetPartyMemberEntities) == 0x000010, "Wrong size on MordhauGameInstance_GetPartyMemberEntities");
static_assert(offsetof(MordhauGameInstance_GetPartyMemberEntities, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetPartyMemberEntities::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetPartyMemberProfile
// 0x0130 (0x0130 - 0x0000)
struct MordhauGameInstance_GetPartyMemberProfile final
{
public:
	struct FPlayFabPlayer                         Player;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayerProfile                         Profile;                                           // 0x0060(0x00C8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0128(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameInstance_GetPartyMemberProfile) == 0x000008, "Wrong alignment on MordhauGameInstance_GetPartyMemberProfile");
static_assert(sizeof(MordhauGameInstance_GetPartyMemberProfile) == 0x000130, "Wrong size on MordhauGameInstance_GetPartyMemberProfile");
static_assert(offsetof(MordhauGameInstance_GetPartyMemberProfile, Player) == 0x000000, "Member 'MordhauGameInstance_GetPartyMemberProfile::Player' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_GetPartyMemberProfile, Profile) == 0x000060, "Member 'MordhauGameInstance_GetPartyMemberProfile::Profile' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_GetPartyMemberProfile, ReturnValue) == 0x000128, "Member 'MordhauGameInstance_GetPartyMemberProfile::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetPartyMembers
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameInstance_GetPartyMembers final
{
public:
	TArray<struct FPlayFabPlayer>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetPartyMembers) == 0x000008, "Wrong alignment on MordhauGameInstance_GetPartyMembers");
static_assert(sizeof(MordhauGameInstance_GetPartyMembers) == 0x000010, "Wrong size on MordhauGameInstance_GetPartyMembers");
static_assert(offsetof(MordhauGameInstance_GetPartyMembers, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetPartyMembers::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetPartyMemberServerAddress
// 0x0070 (0x0070 - 0x0000)
struct MordhauGameInstance_GetPartyMemberServerAddress final
{
public:
	struct FPlayFabPlayer                         Player;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerAddress                         Address;                                           // 0x0060(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameInstance_GetPartyMemberServerAddress) == 0x000008, "Wrong alignment on MordhauGameInstance_GetPartyMemberServerAddress");
static_assert(sizeof(MordhauGameInstance_GetPartyMemberServerAddress) == 0x000070, "Wrong size on MordhauGameInstance_GetPartyMemberServerAddress");
static_assert(offsetof(MordhauGameInstance_GetPartyMemberServerAddress, Player) == 0x000000, "Member 'MordhauGameInstance_GetPartyMemberServerAddress::Player' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_GetPartyMemberServerAddress, Address) == 0x000060, "Member 'MordhauGameInstance_GetPartyMemberServerAddress::Address' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_GetPartyMemberServerAddress, bWasSuccessful) == 0x000068, "Member 'MordhauGameInstance_GetPartyMemberServerAddress::bWasSuccessful' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetPartyMemberServerDetails
// 0x00A0 (0x00A0 - 0x0000)
struct MordhauGameInstance_GetPartyMemberServerDetails final
{
public:
	struct FPlayFabPlayer                         Player;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabServerDetails                  OutServerDetails;                                  // 0x0060(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameInstance_GetPartyMemberServerDetails) == 0x000008, "Wrong alignment on MordhauGameInstance_GetPartyMemberServerDetails");
static_assert(sizeof(MordhauGameInstance_GetPartyMemberServerDetails) == 0x0000A0, "Wrong size on MordhauGameInstance_GetPartyMemberServerDetails");
static_assert(offsetof(MordhauGameInstance_GetPartyMemberServerDetails, Player) == 0x000000, "Member 'MordhauGameInstance_GetPartyMemberServerDetails::Player' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_GetPartyMemberServerDetails, OutServerDetails) == 0x000060, "Member 'MordhauGameInstance_GetPartyMemberServerDetails::OutServerDetails' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_GetPartyMemberServerDetails, bWasSuccessful) == 0x000098, "Member 'MordhauGameInstance_GetPartyMemberServerDetails::bWasSuccessful' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetPartyMemberStatus
// 0x0070 (0x0070 - 0x0000)
struct MordhauGameInstance_GetPartyMemberStatus final
{
public:
	struct FPlayFabPlayer                         Player;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetPartyMemberStatus) == 0x000008, "Wrong alignment on MordhauGameInstance_GetPartyMemberStatus");
static_assert(sizeof(MordhauGameInstance_GetPartyMemberStatus) == 0x000070, "Wrong size on MordhauGameInstance_GetPartyMemberStatus");
static_assert(offsetof(MordhauGameInstance_GetPartyMemberStatus, Player) == 0x000000, "Member 'MordhauGameInstance_GetPartyMemberStatus::Player' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_GetPartyMemberStatus, ReturnValue) == 0x000060, "Member 'MordhauGameInstance_GetPartyMemberStatus::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetPartyMMR
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameInstance_GetPartyMMR final
{
public:
	class FString                                 GameMode;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameInstance_GetPartyMMR) == 0x000008, "Wrong alignment on MordhauGameInstance_GetPartyMMR");
static_assert(sizeof(MordhauGameInstance_GetPartyMMR) == 0x000018, "Wrong size on MordhauGameInstance_GetPartyMMR");
static_assert(offsetof(MordhauGameInstance_GetPartyMMR, GameMode) == 0x000000, "Member 'MordhauGameInstance_GetPartyMMR::GameMode' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_GetPartyMMR, ReturnValue) == 0x000010, "Member 'MordhauGameInstance_GetPartyMMR::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetPartyServerDetails
// 0x0040 (0x0040 - 0x0000)
struct MordhauGameInstance_GetPartyServerDetails final
{
public:
	struct FPlayFabServerDetails                  OutServerDetails;                                  // 0x0000(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameInstance_GetPartyServerDetails) == 0x000008, "Wrong alignment on MordhauGameInstance_GetPartyServerDetails");
static_assert(sizeof(MordhauGameInstance_GetPartyServerDetails) == 0x000040, "Wrong size on MordhauGameInstance_GetPartyServerDetails");
static_assert(offsetof(MordhauGameInstance_GetPartyServerDetails, OutServerDetails) == 0x000000, "Member 'MordhauGameInstance_GetPartyServerDetails::OutServerDetails' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_GetPartyServerDetails, bWasSuccessful) == 0x000038, "Member 'MordhauGameInstance_GetPartyServerDetails::bWasSuccessful' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetPartySize
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameInstance_GetPartySize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetPartySize) == 0x000004, "Wrong alignment on MordhauGameInstance_GetPartySize");
static_assert(sizeof(MordhauGameInstance_GetPartySize) == 0x000004, "Wrong size on MordhauGameInstance_GetPartySize");
static_assert(offsetof(MordhauGameInstance_GetPartySize, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetPartySize::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetPlatform
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_GetPlatform final
{
public:
	EPlatform                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetPlatform) == 0x000001, "Wrong alignment on MordhauGameInstance_GetPlatform");
static_assert(sizeof(MordhauGameInstance_GetPlatform) == 0x000001, "Wrong size on MordhauGameInstance_GetPlatform");
static_assert(offsetof(MordhauGameInstance_GetPlatform, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetPlatform::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetProfaneWords
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameInstance_GetProfaneWords final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetProfaneWords) == 0x000008, "Wrong alignment on MordhauGameInstance_GetProfaneWords");
static_assert(sizeof(MordhauGameInstance_GetProfaneWords) == 0x000010, "Wrong size on MordhauGameInstance_GetProfaneWords");
static_assert(offsetof(MordhauGameInstance_GetProfaneWords, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetProfaneWords::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetQueueKey
// 0x0020 (0x0020 - 0x0000)
struct MordhauGameInstance_GetQueueKey final
{
public:
	class FString                                 InQueueName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetQueueKey) == 0x000008, "Wrong alignment on MordhauGameInstance_GetQueueKey");
static_assert(sizeof(MordhauGameInstance_GetQueueKey) == 0x000020, "Wrong size on MordhauGameInstance_GetQueueKey");
static_assert(offsetof(MordhauGameInstance_GetQueueKey, InQueueName) == 0x000000, "Member 'MordhauGameInstance_GetQueueKey::InQueueName' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_GetQueueKey, ReturnValue) == 0x000010, "Member 'MordhauGameInstance_GetQueueKey::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetQueueName
// 0x0020 (0x0020 - 0x0000)
struct MordhauGameInstance_GetQueueName final
{
public:
	class FString                                 InQueueKey;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetQueueName) == 0x000008, "Wrong alignment on MordhauGameInstance_GetQueueName");
static_assert(sizeof(MordhauGameInstance_GetQueueName) == 0x000020, "Wrong size on MordhauGameInstance_GetQueueName");
static_assert(offsetof(MordhauGameInstance_GetQueueName, InQueueKey) == 0x000000, "Member 'MordhauGameInstance_GetQueueName::InQueueKey' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_GetQueueName, ReturnValue) == 0x000010, "Member 'MordhauGameInstance_GetQueueName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetServerLocationPing
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameInstance_GetServerLocationPing final
{
public:
	EServerLocation                               Location;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetServerLocationPing) == 0x000004, "Wrong alignment on MordhauGameInstance_GetServerLocationPing");
static_assert(sizeof(MordhauGameInstance_GetServerLocationPing) == 0x000008, "Wrong size on MordhauGameInstance_GetServerLocationPing");
static_assert(offsetof(MordhauGameInstance_GetServerLocationPing, Location) == 0x000000, "Member 'MordhauGameInstance_GetServerLocationPing::Location' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_GetServerLocationPing, ReturnValue) == 0x000004, "Member 'MordhauGameInstance_GetServerLocationPing::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetServerLocationPings
// 0x0050 (0x0050 - 0x0000)
struct MordhauGameInstance_GetServerLocationPings final
{
public:
	TMap<EServerLocation, int32>                  ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetServerLocationPings) == 0x000008, "Wrong alignment on MordhauGameInstance_GetServerLocationPings");
static_assert(sizeof(MordhauGameInstance_GetServerLocationPings) == 0x000050, "Wrong size on MordhauGameInstance_GetServerLocationPings");
static_assert(offsetof(MordhauGameInstance_GetServerLocationPings, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_GetServerLocationPings::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetServerLocationPreference
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameInstance_GetServerLocationPreference final
{
public:
	EServerRegion                                 Region;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EServerLocation>                       ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetServerLocationPreference) == 0x000008, "Wrong alignment on MordhauGameInstance_GetServerLocationPreference");
static_assert(sizeof(MordhauGameInstance_GetServerLocationPreference) == 0x000018, "Wrong size on MordhauGameInstance_GetServerLocationPreference");
static_assert(offsetof(MordhauGameInstance_GetServerLocationPreference, Region) == 0x000000, "Member 'MordhauGameInstance_GetServerLocationPreference::Region' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_GetServerLocationPreference, ReturnValue) == 0x000008, "Member 'MordhauGameInstance_GetServerLocationPreference::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.GetServerRegionPings
// 0x0058 (0x0058 - 0x0000)
struct MordhauGameInstance_GetServerRegionPings final
{
public:
	EServerRegion                                 Region;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EServerLocation, int32>                  ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_GetServerRegionPings) == 0x000008, "Wrong alignment on MordhauGameInstance_GetServerRegionPings");
static_assert(sizeof(MordhauGameInstance_GetServerRegionPings) == 0x000058, "Wrong size on MordhauGameInstance_GetServerRegionPings");
static_assert(offsetof(MordhauGameInstance_GetServerRegionPings, Region) == 0x000000, "Member 'MordhauGameInstance_GetServerRegionPings::Region' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_GetServerRegionPings, ReturnValue) == 0x000008, "Member 'MordhauGameInstance_GetServerRegionPings::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.HasCompletedLogin
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_HasCompletedLogin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_HasCompletedLogin) == 0x000001, "Wrong alignment on MordhauGameInstance_HasCompletedLogin");
static_assert(sizeof(MordhauGameInstance_HasCompletedLogin) == 0x000001, "Wrong size on MordhauGameInstance_HasCompletedLogin");
static_assert(offsetof(MordhauGameInstance_HasCompletedLogin, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_HasCompletedLogin::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.HasPartyMemberConsolePlayer
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_HasPartyMemberConsolePlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_HasPartyMemberConsolePlayer) == 0x000001, "Wrong alignment on MordhauGameInstance_HasPartyMemberConsolePlayer");
static_assert(sizeof(MordhauGameInstance_HasPartyMemberConsolePlayer) == 0x000001, "Wrong size on MordhauGameInstance_HasPartyMemberConsolePlayer");
static_assert(offsetof(MordhauGameInstance_HasPartyMemberConsolePlayer, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_HasPartyMemberConsolePlayer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.HasPartyMemberPCPlayer
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_HasPartyMemberPCPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_HasPartyMemberPCPlayer) == 0x000001, "Wrong alignment on MordhauGameInstance_HasPartyMemberPCPlayer");
static_assert(sizeof(MordhauGameInstance_HasPartyMemberPCPlayer) == 0x000001, "Wrong size on MordhauGameInstance_HasPartyMemberPCPlayer");
static_assert(offsetof(MordhauGameInstance_HasPartyMemberPCPlayer, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_HasPartyMemberPCPlayer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.InviteToParty
// 0x0060 (0x0060 - 0x0000)
struct MordhauGameInstance_InviteToParty final
{
public:
	struct FPlayFabPlayer                         Recipient;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_InviteToParty) == 0x000008, "Wrong alignment on MordhauGameInstance_InviteToParty");
static_assert(sizeof(MordhauGameInstance_InviteToParty) == 0x000060, "Wrong size on MordhauGameInstance_InviteToParty");
static_assert(offsetof(MordhauGameInstance_InviteToParty, Recipient) == 0x000000, "Member 'MordhauGameInstance_InviteToParty::Recipient' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.IsAdmin
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_IsAdmin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_IsAdmin) == 0x000001, "Wrong alignment on MordhauGameInstance_IsAdmin");
static_assert(sizeof(MordhauGameInstance_IsAdmin) == 0x000001, "Wrong size on MordhauGameInstance_IsAdmin");
static_assert(offsetof(MordhauGameInstance_IsAdmin, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_IsAdmin::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.IsFriendsListAvailable
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_IsFriendsListAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_IsFriendsListAvailable) == 0x000001, "Wrong alignment on MordhauGameInstance_IsFriendsListAvailable");
static_assert(sizeof(MordhauGameInstance_IsFriendsListAvailable) == 0x000001, "Wrong size on MordhauGameInstance_IsFriendsListAvailable");
static_assert(offsetof(MordhauGameInstance_IsFriendsListAvailable, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_IsFriendsListAvailable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.IsGlobalServerBanned
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_IsGlobalServerBanned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_IsGlobalServerBanned) == 0x000001, "Wrong alignment on MordhauGameInstance_IsGlobalServerBanned");
static_assert(sizeof(MordhauGameInstance_IsGlobalServerBanned) == 0x000001, "Wrong size on MordhauGameInstance_IsGlobalServerBanned");
static_assert(offsetof(MordhauGameInstance_IsGlobalServerBanned, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_IsGlobalServerBanned::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.IsGlobalServerMuted
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_IsGlobalServerMuted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_IsGlobalServerMuted) == 0x000001, "Wrong alignment on MordhauGameInstance_IsGlobalServerMuted");
static_assert(sizeof(MordhauGameInstance_IsGlobalServerMuted) == 0x000001, "Wrong size on MordhauGameInstance_IsGlobalServerMuted");
static_assert(offsetof(MordhauGameInstance_IsGlobalServerMuted, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_IsGlobalServerMuted::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.IsInventoryAvailable
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_IsInventoryAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_IsInventoryAvailable) == 0x000001, "Wrong alignment on MordhauGameInstance_IsInventoryAvailable");
static_assert(sizeof(MordhauGameInstance_IsInventoryAvailable) == 0x000001, "Wrong size on MordhauGameInstance_IsInventoryAvailable");
static_assert(offsetof(MordhauGameInstance_IsInventoryAvailable, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_IsInventoryAvailable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.IsLoadingScreenActive
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_IsLoadingScreenActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_IsLoadingScreenActive) == 0x000001, "Wrong alignment on MordhauGameInstance_IsLoadingScreenActive");
static_assert(sizeof(MordhauGameInstance_IsLoadingScreenActive) == 0x000001, "Wrong size on MordhauGameInstance_IsLoadingScreenActive");
static_assert(offsetof(MordhauGameInstance_IsLoadingScreenActive, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_IsLoadingScreenActive::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.IsLoggedIn
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_IsLoggedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_IsLoggedIn) == 0x000001, "Wrong alignment on MordhauGameInstance_IsLoggedIn");
static_assert(sizeof(MordhauGameInstance_IsLoggedIn) == 0x000001, "Wrong size on MordhauGameInstance_IsLoggedIn");
static_assert(offsetof(MordhauGameInstance_IsLoggedIn, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_IsLoggedIn::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.IsLoggingIn
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_IsLoggingIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_IsLoggingIn) == 0x000001, "Wrong alignment on MordhauGameInstance_IsLoggingIn");
static_assert(sizeof(MordhauGameInstance_IsLoggingIn) == 0x000001, "Wrong size on MordhauGameInstance_IsLoggingIn");
static_assert(offsetof(MordhauGameInstance_IsLoggingIn, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_IsLoggingIn::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.IsNovice
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_IsNovice final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_IsNovice) == 0x000001, "Wrong alignment on MordhauGameInstance_IsNovice");
static_assert(sizeof(MordhauGameInstance_IsNovice) == 0x000001, "Wrong size on MordhauGameInstance_IsNovice");
static_assert(offsetof(MordhauGameInstance_IsNovice, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_IsNovice::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.IsOfficialServerBanned
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_IsOfficialServerBanned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_IsOfficialServerBanned) == 0x000001, "Wrong alignment on MordhauGameInstance_IsOfficialServerBanned");
static_assert(sizeof(MordhauGameInstance_IsOfficialServerBanned) == 0x000001, "Wrong size on MordhauGameInstance_IsOfficialServerBanned");
static_assert(offsetof(MordhauGameInstance_IsOfficialServerBanned, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_IsOfficialServerBanned::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.IsOfficialServerMuted
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_IsOfficialServerMuted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_IsOfficialServerMuted) == 0x000001, "Wrong alignment on MordhauGameInstance_IsOfficialServerMuted");
static_assert(sizeof(MordhauGameInstance_IsOfficialServerMuted) == 0x000001, "Wrong size on MordhauGameInstance_IsOfficialServerMuted");
static_assert(offsetof(MordhauGameInstance_IsOfficialServerMuted, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_IsOfficialServerMuted::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.IsPartyLeader
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_IsPartyLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_IsPartyLeader) == 0x000001, "Wrong alignment on MordhauGameInstance_IsPartyLeader");
static_assert(sizeof(MordhauGameInstance_IsPartyLeader) == 0x000001, "Wrong size on MordhauGameInstance_IsPartyLeader");
static_assert(offsetof(MordhauGameInstance_IsPartyLeader, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_IsPartyLeader::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.IsPartyMember
// 0x0068 (0x0068 - 0x0000)
struct MordhauGameInstance_IsPartyMember final
{
public:
	struct FPlayFabPlayer                         Player;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameInstance_IsPartyMember) == 0x000008, "Wrong alignment on MordhauGameInstance_IsPartyMember");
static_assert(sizeof(MordhauGameInstance_IsPartyMember) == 0x000068, "Wrong size on MordhauGameInstance_IsPartyMember");
static_assert(offsetof(MordhauGameInstance_IsPartyMember, Player) == 0x000000, "Member 'MordhauGameInstance_IsPartyMember::Player' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_IsPartyMember, ReturnValue) == 0x000060, "Member 'MordhauGameInstance_IsPartyMember::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.IsPartyReadyForMatchmaking
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_IsPartyReadyForMatchmaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_IsPartyReadyForMatchmaking) == 0x000001, "Wrong alignment on MordhauGameInstance_IsPartyReadyForMatchmaking");
static_assert(sizeof(MordhauGameInstance_IsPartyReadyForMatchmaking) == 0x000001, "Wrong size on MordhauGameInstance_IsPartyReadyForMatchmaking");
static_assert(offsetof(MordhauGameInstance_IsPartyReadyForMatchmaking, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_IsPartyReadyForMatchmaking::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.IsPSNLockEnabled
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_IsPSNLockEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_IsPSNLockEnabled) == 0x000001, "Wrong alignment on MordhauGameInstance_IsPSNLockEnabled");
static_assert(sizeof(MordhauGameInstance_IsPSNLockEnabled) == 0x000001, "Wrong size on MordhauGameInstance_IsPSNLockEnabled");
static_assert(offsetof(MordhauGameInstance_IsPSNLockEnabled, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_IsPSNLockEnabled::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.IsTitleDatAvailable
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_IsTitleDatAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_IsTitleDatAvailable) == 0x000001, "Wrong alignment on MordhauGameInstance_IsTitleDatAvailable");
static_assert(sizeof(MordhauGameInstance_IsTitleDatAvailable) == 0x000001, "Wrong size on MordhauGameInstance_IsTitleDatAvailable");
static_assert(offsetof(MordhauGameInstance_IsTitleDatAvailable, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_IsTitleDatAvailable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.IsTitleScreenVisible
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_IsTitleScreenVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_IsTitleScreenVisible) == 0x000001, "Wrong alignment on MordhauGameInstance_IsTitleScreenVisible");
static_assert(sizeof(MordhauGameInstance_IsTitleScreenVisible) == 0x000001, "Wrong size on MordhauGameInstance_IsTitleScreenVisible");
static_assert(offsetof(MordhauGameInstance_IsTitleScreenVisible, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_IsTitleScreenVisible::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.IsUserControllerPaired
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_IsUserControllerPaired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_IsUserControllerPaired) == 0x000001, "Wrong alignment on MordhauGameInstance_IsUserControllerPaired");
static_assert(sizeof(MordhauGameInstance_IsUserControllerPaired) == 0x000001, "Wrong size on MordhauGameInstance_IsUserControllerPaired");
static_assert(offsetof(MordhauGameInstance_IsUserControllerPaired, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_IsUserControllerPaired::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.JoinSessionSearchResult
// 0x0110 (0x0110 - 0x0000)
struct MordhauGameInstance_JoinSessionSearchResult final
{
public:
	struct FServerSearchResult                    SearchResult;                                      // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_JoinSessionSearchResult) == 0x000008, "Wrong alignment on MordhauGameInstance_JoinSessionSearchResult");
static_assert(sizeof(MordhauGameInstance_JoinSessionSearchResult) == 0x000110, "Wrong size on MordhauGameInstance_JoinSessionSearchResult");
static_assert(offsetof(MordhauGameInstance_JoinSessionSearchResult, SearchResult) == 0x000000, "Member 'MordhauGameInstance_JoinSessionSearchResult::SearchResult' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.KickPartyMember
// 0x0060 (0x0060 - 0x0000)
struct MordhauGameInstance_KickPartyMember final
{
public:
	struct FPlayFabPlayer                         Player;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_KickPartyMember) == 0x000008, "Wrong alignment on MordhauGameInstance_KickPartyMember");
static_assert(sizeof(MordhauGameInstance_KickPartyMember) == 0x000060, "Wrong size on MordhauGameInstance_KickPartyMember");
static_assert(offsetof(MordhauGameInstance_KickPartyMember, Player) == 0x000000, "Member 'MordhauGameInstance_KickPartyMember::Player' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.LogAllUsersAndStates
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameInstance_LogAllUsersAndStates final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_LogAllUsersAndStates) == 0x000004, "Wrong alignment on MordhauGameInstance_LogAllUsersAndStates");
static_assert(sizeof(MordhauGameInstance_LogAllUsersAndStates) == 0x000004, "Wrong size on MordhauGameInstance_LogAllUsersAndStates");
static_assert(offsetof(MordhauGameInstance_LogAllUsersAndStates, LocalUserNum) == 0x000000, "Member 'MordhauGameInstance_LogAllUsersAndStates::LocalUserNum' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.LogMatchmakingState
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameInstance_LogMatchmakingState final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_LogMatchmakingState) == 0x000008, "Wrong alignment on MordhauGameInstance_LogMatchmakingState");
static_assert(sizeof(MordhauGameInstance_LogMatchmakingState) == 0x000010, "Wrong size on MordhauGameInstance_LogMatchmakingState");
static_assert(offsetof(MordhauGameInstance_LogMatchmakingState, Message) == 0x000000, "Member 'MordhauGameInstance_LogMatchmakingState::Message' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.MountModsInCustomPaksFolder
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameInstance_MountModsInCustomPaksFolder final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_MountModsInCustomPaksFolder) == 0x000004, "Wrong alignment on MordhauGameInstance_MountModsInCustomPaksFolder");
static_assert(sizeof(MordhauGameInstance_MountModsInCustomPaksFolder) == 0x000004, "Wrong size on MordhauGameInstance_MountModsInCustomPaksFolder");
static_assert(offsetof(MordhauGameInstance_MountModsInCustomPaksFolder, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_MountModsInCustomPaksFolder::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.OnDelayKickUserFromParty
// 0x0060 (0x0060 - 0x0000)
struct MordhauGameInstance_OnDelayKickUserFromParty final
{
public:
	struct FPlayFabPlayer                         Player;                                            // 0x0000(0x0060)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_OnDelayKickUserFromParty) == 0x000008, "Wrong alignment on MordhauGameInstance_OnDelayKickUserFromParty");
static_assert(sizeof(MordhauGameInstance_OnDelayKickUserFromParty) == 0x000060, "Wrong size on MordhauGameInstance_OnDelayKickUserFromParty");
static_assert(offsetof(MordhauGameInstance_OnDelayKickUserFromParty, Player) == 0x000000, "Member 'MordhauGameInstance_OnDelayKickUserFromParty::Player' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.OnFindMordhauServerSessionByAddressSuccess
// 0x0110 (0x0110 - 0x0000)
struct MordhauGameInstance_OnFindMordhauServerSessionByAddressSuccess final
{
public:
	struct FServerSearchResult                    SearchResult;                                      // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_OnFindMordhauServerSessionByAddressSuccess) == 0x000008, "Wrong alignment on MordhauGameInstance_OnFindMordhauServerSessionByAddressSuccess");
static_assert(sizeof(MordhauGameInstance_OnFindMordhauServerSessionByAddressSuccess) == 0x000110, "Wrong size on MordhauGameInstance_OnFindMordhauServerSessionByAddressSuccess");
static_assert(offsetof(MordhauGameInstance_OnFindMordhauServerSessionByAddressSuccess, SearchResult) == 0x000000, "Member 'MordhauGameInstance_OnFindMordhauServerSessionByAddressSuccess::SearchResult' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.OnReportUser
// 0x0070 (0x0070 - 0x0000)
struct MordhauGameInstance_OnReportUser final
{
public:
	EPlayerReportType                             ReportType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayFabPlayer                         ReportedPlayer;                                    // 0x0008(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeUntillAllowed;                                 // 0x0068(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerReportResponse                         ReturnValue;                                       // 0x006C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameInstance_OnReportUser) == 0x000008, "Wrong alignment on MordhauGameInstance_OnReportUser");
static_assert(sizeof(MordhauGameInstance_OnReportUser) == 0x000070, "Wrong size on MordhauGameInstance_OnReportUser");
static_assert(offsetof(MordhauGameInstance_OnReportUser, ReportType) == 0x000000, "Member 'MordhauGameInstance_OnReportUser::ReportType' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_OnReportUser, ReportedPlayer) == 0x000008, "Member 'MordhauGameInstance_OnReportUser::ReportedPlayer' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_OnReportUser, TimeUntillAllowed) == 0x000068, "Member 'MordhauGameInstance_OnReportUser::TimeUntillAllowed' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_OnReportUser, ReturnValue) == 0x00006C, "Member 'MordhauGameInstance_OnReportUser::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.OpenDLCStorePage
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameInstance_OpenDLCStorePage final
{
public:
	class FString                                 DlcId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_OpenDLCStorePage) == 0x000008, "Wrong alignment on MordhauGameInstance_OpenDLCStorePage");
static_assert(sizeof(MordhauGameInstance_OpenDLCStorePage) == 0x000010, "Wrong size on MordhauGameInstance_OpenDLCStorePage");
static_assert(offsetof(MordhauGameInstance_OpenDLCStorePage, DlcId) == 0x000000, "Member 'MordhauGameInstance_OpenDLCStorePage::DlcId' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.QuitGame
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameInstance_QuitGame final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      SpecificPlayer;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuitGamePreference                           QuitPreference;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnorePlatformRestrictions;                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameInstance_QuitGame) == 0x000008, "Wrong alignment on MordhauGameInstance_QuitGame");
static_assert(sizeof(MordhauGameInstance_QuitGame) == 0x000018, "Wrong size on MordhauGameInstance_QuitGame");
static_assert(offsetof(MordhauGameInstance_QuitGame, WorldContextObject) == 0x000000, "Member 'MordhauGameInstance_QuitGame::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_QuitGame, SpecificPlayer) == 0x000008, "Member 'MordhauGameInstance_QuitGame::SpecificPlayer' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_QuitGame, QuitPreference) == 0x000010, "Member 'MordhauGameInstance_QuitGame::QuitPreference' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_QuitGame, bIgnorePlatformRestrictions) == 0x000011, "Member 'MordhauGameInstance_QuitGame::bIgnorePlatformRestrictions' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.RegisterMetadata
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameInstance_RegisterMetadata final
{
public:
	int32                                         ModId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         AssetPaths;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_RegisterMetadata) == 0x000008, "Wrong alignment on MordhauGameInstance_RegisterMetadata");
static_assert(sizeof(MordhauGameInstance_RegisterMetadata) == 0x000018, "Wrong size on MordhauGameInstance_RegisterMetadata");
static_assert(offsetof(MordhauGameInstance_RegisterMetadata, ModId) == 0x000000, "Member 'MordhauGameInstance_RegisterMetadata::ModId' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_RegisterMetadata, AssetPaths) == 0x000008, "Member 'MordhauGameInstance_RegisterMetadata::AssetPaths' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.RemovePartyMatchmakingTicket
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameInstance_RemovePartyMatchmakingTicket final
{
public:
	class FString                                 QueueName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_RemovePartyMatchmakingTicket) == 0x000008, "Wrong alignment on MordhauGameInstance_RemovePartyMatchmakingTicket");
static_assert(sizeof(MordhauGameInstance_RemovePartyMatchmakingTicket) == 0x000010, "Wrong size on MordhauGameInstance_RemovePartyMatchmakingTicket");
static_assert(offsetof(MordhauGameInstance_RemovePartyMatchmakingTicket, QueueName) == 0x000000, "Member 'MordhauGameInstance_RemovePartyMatchmakingTicket::QueueName' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.RequestActivityStart
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_RequestActivityStart final
{
public:
	EActivityType                                 ActivityType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_RequestActivityStart) == 0x000001, "Wrong alignment on MordhauGameInstance_RequestActivityStart");
static_assert(sizeof(MordhauGameInstance_RequestActivityStart) == 0x000001, "Wrong size on MordhauGameInstance_RequestActivityStart");
static_assert(offsetof(MordhauGameInstance_RequestActivityStart, ActivityType) == 0x000000, "Member 'MordhauGameInstance_RequestActivityStart::ActivityType' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.RequestPlayerInformation
// 0x0060 (0x0060 - 0x0000)
struct MordhauGameInstance_RequestPlayerInformation final
{
public:
	struct FPlayFabPlayer                         Player;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_RequestPlayerInformation) == 0x000008, "Wrong alignment on MordhauGameInstance_RequestPlayerInformation");
static_assert(sizeof(MordhauGameInstance_RequestPlayerInformation) == 0x000060, "Wrong size on MordhauGameInstance_RequestPlayerInformation");
static_assert(offsetof(MordhauGameInstance_RequestPlayerInformation, Player) == 0x000000, "Member 'MordhauGameInstance_RequestPlayerInformation::Player' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.RespondControllerConnectionChange
// 0x000C (0x000C - 0x0000)
struct MordhauGameInstance_RespondControllerConnectionChange final
{
public:
	bool                                          Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UserId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ControllerId;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_RespondControllerConnectionChange) == 0x000004, "Wrong alignment on MordhauGameInstance_RespondControllerConnectionChange");
static_assert(sizeof(MordhauGameInstance_RespondControllerConnectionChange) == 0x00000C, "Wrong size on MordhauGameInstance_RespondControllerConnectionChange");
static_assert(offsetof(MordhauGameInstance_RespondControllerConnectionChange, Status) == 0x000000, "Member 'MordhauGameInstance_RespondControllerConnectionChange::Status' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_RespondControllerConnectionChange, UserId) == 0x000004, "Member 'MordhauGameInstance_RespondControllerConnectionChange::UserId' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_RespondControllerConnectionChange, ControllerId) == 0x000008, "Member 'MordhauGameInstance_RespondControllerConnectionChange::ControllerId' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.RespondOnUserLoginChanged
// 0x000C (0x000C - 0x0000)
struct MordhauGameInstance_RespondOnUserLoginChanged final
{
public:
	bool                                          Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UserId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_RespondOnUserLoginChanged) == 0x000004, "Wrong alignment on MordhauGameInstance_RespondOnUserLoginChanged");
static_assert(sizeof(MordhauGameInstance_RespondOnUserLoginChanged) == 0x00000C, "Wrong size on MordhauGameInstance_RespondOnUserLoginChanged");
static_assert(offsetof(MordhauGameInstance_RespondOnUserLoginChanged, Status) == 0x000000, "Member 'MordhauGameInstance_RespondOnUserLoginChanged::Status' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_RespondOnUserLoginChanged, UserId) == 0x000004, "Member 'MordhauGameInstance_RespondOnUserLoginChanged::UserId' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_RespondOnUserLoginChanged, UserIndex) == 0x000008, "Member 'MordhauGameInstance_RespondOnUserLoginChanged::UserIndex' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.ServerTravel
// 0x0020 (0x0020 - 0x0000)
struct MordhauGameInstance_ServerTravel final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameInstance_ServerTravel) == 0x000008, "Wrong alignment on MordhauGameInstance_ServerTravel");
static_assert(sizeof(MordhauGameInstance_ServerTravel) == 0x000020, "Wrong size on MordhauGameInstance_ServerTravel");
static_assert(offsetof(MordhauGameInstance_ServerTravel, WorldContextObject) == 0x000000, "Member 'MordhauGameInstance_ServerTravel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_ServerTravel, MapName) == 0x000008, "Member 'MordhauGameInstance_ServerTravel::MapName' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_ServerTravel, ReturnValue) == 0x000018, "Member 'MordhauGameInstance_ServerTravel::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.SetConnectionTimeoutTimestamp
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameInstance_SetConnectionTimeoutTimestamp final
{
public:
	float                                         NewConnectionTimeoutTimestamp;                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_SetConnectionTimeoutTimestamp) == 0x000004, "Wrong alignment on MordhauGameInstance_SetConnectionTimeoutTimestamp");
static_assert(sizeof(MordhauGameInstance_SetConnectionTimeoutTimestamp) == 0x000004, "Wrong size on MordhauGameInstance_SetConnectionTimeoutTimestamp");
static_assert(offsetof(MordhauGameInstance_SetConnectionTimeoutTimestamp, NewConnectionTimeoutTimestamp) == 0x000000, "Member 'MordhauGameInstance_SetConnectionTimeoutTimestamp::NewConnectionTimeoutTimestamp' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.SetIngameEvent
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_SetIngameEvent final
{
public:
	EIngameEvent                                  InIngameEvent;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_SetIngameEvent) == 0x000001, "Wrong alignment on MordhauGameInstance_SetIngameEvent");
static_assert(sizeof(MordhauGameInstance_SetIngameEvent) == 0x000001, "Wrong size on MordhauGameInstance_SetIngameEvent");
static_assert(offsetof(MordhauGameInstance_SetIngameEvent, InIngameEvent) == 0x000000, "Member 'MordhauGameInstance_SetIngameEvent::InIngameEvent' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.SetLastPlayerLeaveTime
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameInstance_SetLastPlayerLeaveTime final
{
public:
	double                                        InLastPlayerLeaveTime;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_SetLastPlayerLeaveTime) == 0x000008, "Wrong alignment on MordhauGameInstance_SetLastPlayerLeaveTime");
static_assert(sizeof(MordhauGameInstance_SetLastPlayerLeaveTime) == 0x000008, "Wrong size on MordhauGameInstance_SetLastPlayerLeaveTime");
static_assert(offsetof(MordhauGameInstance_SetLastPlayerLeaveTime, InLastPlayerLeaveTime) == 0x000000, "Member 'MordhauGameInstance_SetLastPlayerLeaveTime::InLastPlayerLeaveTime' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.SetMatchmakingMatchId
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameInstance_SetMatchmakingMatchId final
{
public:
	class FString                                 MatchId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_SetMatchmakingMatchId) == 0x000008, "Wrong alignment on MordhauGameInstance_SetMatchmakingMatchId");
static_assert(sizeof(MordhauGameInstance_SetMatchmakingMatchId) == 0x000010, "Wrong size on MordhauGameInstance_SetMatchmakingMatchId");
static_assert(offsetof(MordhauGameInstance_SetMatchmakingMatchId, MatchId) == 0x000000, "Member 'MordhauGameInstance_SetMatchmakingMatchId::MatchId' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.SetNetworkError
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameInstance_SetNetworkError final
{
public:
	class FText                                   ErrorText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_SetNetworkError) == 0x000008, "Wrong alignment on MordhauGameInstance_SetNetworkError");
static_assert(sizeof(MordhauGameInstance_SetNetworkError) == 0x000018, "Wrong size on MordhauGameInstance_SetNetworkError");
static_assert(offsetof(MordhauGameInstance_SetNetworkError, ErrorText) == 0x000000, "Member 'MordhauGameInstance_SetNetworkError::ErrorText' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.SetPartyGameServer
// 0x0110 (0x0110 - 0x0000)
struct MordhauGameInstance_SetPartyGameServer final
{
public:
	struct FServerSearchResult                    SearchResult;                                      // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_SetPartyGameServer) == 0x000008, "Wrong alignment on MordhauGameInstance_SetPartyGameServer");
static_assert(sizeof(MordhauGameInstance_SetPartyGameServer) == 0x000110, "Wrong size on MordhauGameInstance_SetPartyGameServer");
static_assert(offsetof(MordhauGameInstance_SetPartyGameServer, SearchResult) == 0x000000, "Member 'MordhauGameInstance_SetPartyGameServer::SearchResult' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.SetPartyLeader
// 0x0060 (0x0060 - 0x0000)
struct MordhauGameInstance_SetPartyLeader final
{
public:
	struct FPlayFabPlayer                         Player;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_SetPartyLeader) == 0x000008, "Wrong alignment on MordhauGameInstance_SetPartyLeader");
static_assert(sizeof(MordhauGameInstance_SetPartyLeader) == 0x000060, "Wrong size on MordhauGameInstance_SetPartyLeader");
static_assert(offsetof(MordhauGameInstance_SetPartyLeader, Player) == 0x000000, "Member 'MordhauGameInstance_SetPartyLeader::Player' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.SetPartyMatch
// 0x0020 (0x0020 - 0x0000)
struct MordhauGameInstance_SetPartyMatch final
{
public:
	class FString                                 QueueName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchId;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_SetPartyMatch) == 0x000008, "Wrong alignment on MordhauGameInstance_SetPartyMatch");
static_assert(sizeof(MordhauGameInstance_SetPartyMatch) == 0x000020, "Wrong size on MordhauGameInstance_SetPartyMatch");
static_assert(offsetof(MordhauGameInstance_SetPartyMatch, QueueName) == 0x000000, "Member 'MordhauGameInstance_SetPartyMatch::QueueName' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_SetPartyMatch, MatchId) == 0x000010, "Member 'MordhauGameInstance_SetPartyMatch::MatchId' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.SetPartyMatchmakingMembers
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameInstance_SetPartyMatchmakingMembers final
{
public:
	TArray<class FString>                         Members;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_SetPartyMatchmakingMembers) == 0x000008, "Wrong alignment on MordhauGameInstance_SetPartyMatchmakingMembers");
static_assert(sizeof(MordhauGameInstance_SetPartyMatchmakingMembers) == 0x000010, "Wrong size on MordhauGameInstance_SetPartyMatchmakingMembers");
static_assert(offsetof(MordhauGameInstance_SetPartyMatchmakingMembers, Members) == 0x000000, "Member 'MordhauGameInstance_SetPartyMatchmakingMembers::Members' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.SetPartyMatchmakingState
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_SetPartyMatchmakingState final
{
public:
	EMatchmakingState                             MatchmakingState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_SetPartyMatchmakingState) == 0x000001, "Wrong alignment on MordhauGameInstance_SetPartyMatchmakingState");
static_assert(sizeof(MordhauGameInstance_SetPartyMatchmakingState) == 0x000001, "Wrong size on MordhauGameInstance_SetPartyMatchmakingState");
static_assert(offsetof(MordhauGameInstance_SetPartyMatchmakingState, MatchmakingState) == 0x000000, "Member 'MordhauGameInstance_SetPartyMatchmakingState::MatchmakingState' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.SetPartyMemberProfile
// 0x0128 (0x0128 - 0x0000)
struct MordhauGameInstance_SetPartyMemberProfile final
{
public:
	struct FPlayFabPlayer                         Player;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayerProfile                         Profile;                                           // 0x0060(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_SetPartyMemberProfile) == 0x000008, "Wrong alignment on MordhauGameInstance_SetPartyMemberProfile");
static_assert(sizeof(MordhauGameInstance_SetPartyMemberProfile) == 0x000128, "Wrong size on MordhauGameInstance_SetPartyMemberProfile");
static_assert(offsetof(MordhauGameInstance_SetPartyMemberProfile, Player) == 0x000000, "Member 'MordhauGameInstance_SetPartyMemberProfile::Player' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_SetPartyMemberProfile, Profile) == 0x000060, "Member 'MordhauGameInstance_SetPartyMemberProfile::Profile' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.SetPartyMemberServerDetails
// 0x0048 (0x0048 - 0x0000)
struct MordhauGameInstance_SetPartyMemberServerDetails final
{
public:
	struct FPlayFabServerDetails                  InServerDetails;                                   // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InRichPresenceStr;                                 // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_SetPartyMemberServerDetails) == 0x000008, "Wrong alignment on MordhauGameInstance_SetPartyMemberServerDetails");
static_assert(sizeof(MordhauGameInstance_SetPartyMemberServerDetails) == 0x000048, "Wrong size on MordhauGameInstance_SetPartyMemberServerDetails");
static_assert(offsetof(MordhauGameInstance_SetPartyMemberServerDetails, InServerDetails) == 0x000000, "Member 'MordhauGameInstance_SetPartyMemberServerDetails::InServerDetails' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_SetPartyMemberServerDetails, InRichPresenceStr) == 0x000038, "Member 'MordhauGameInstance_SetPartyMemberServerDetails::InRichPresenceStr' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.SetPartyServerDetails
// 0x0038 (0x0038 - 0x0000)
struct MordhauGameInstance_SetPartyServerDetails final
{
public:
	struct FPlayFabServerDetails                  InServerDetails;                                   // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_SetPartyServerDetails) == 0x000008, "Wrong alignment on MordhauGameInstance_SetPartyServerDetails");
static_assert(sizeof(MordhauGameInstance_SetPartyServerDetails) == 0x000038, "Wrong size on MordhauGameInstance_SetPartyServerDetails");
static_assert(offsetof(MordhauGameInstance_SetPartyServerDetails, InServerDetails) == 0x000000, "Member 'MordhauGameInstance_SetPartyServerDetails::InServerDetails' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.SetUserControllerPairing
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_SetUserControllerPairing final
{
public:
	bool                                          InIsUserControllerPaired;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_SetUserControllerPairing) == 0x000001, "Wrong alignment on MordhauGameInstance_SetUserControllerPairing");
static_assert(sizeof(MordhauGameInstance_SetUserControllerPairing) == 0x000001, "Wrong size on MordhauGameInstance_SetUserControllerPairing");
static_assert(offsetof(MordhauGameInstance_SetUserControllerPairing, InIsUserControllerPaired) == 0x000000, "Member 'MordhauGameInstance_SetUserControllerPairing::InIsUserControllerPaired' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.ShowJoiningDialog
// 0x0110 (0x0110 - 0x0000)
struct MordhauGameInstance_ShowJoiningDialog final
{
public:
	struct FServerSearchResult                    SearchResult;                                      // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_ShowJoiningDialog) == 0x000008, "Wrong alignment on MordhauGameInstance_ShowJoiningDialog");
static_assert(sizeof(MordhauGameInstance_ShowJoiningDialog) == 0x000110, "Wrong size on MordhauGameInstance_ShowJoiningDialog");
static_assert(offsetof(MordhauGameInstance_ShowJoiningDialog, SearchResult) == 0x000000, "Member 'MordhauGameInstance_ShowJoiningDialog::SearchResult' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.ShowLoginErrorDialogWithDescription
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameInstance_ShowLoginErrorDialogWithDescription final
{
public:
	ELoginError                                   FailureType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_ShowLoginErrorDialogWithDescription) == 0x000008, "Wrong alignment on MordhauGameInstance_ShowLoginErrorDialogWithDescription");
static_assert(sizeof(MordhauGameInstance_ShowLoginErrorDialogWithDescription) == 0x000018, "Wrong size on MordhauGameInstance_ShowLoginErrorDialogWithDescription");
static_assert(offsetof(MordhauGameInstance_ShowLoginErrorDialogWithDescription, FailureType) == 0x000000, "Member 'MordhauGameInstance_ShowLoginErrorDialogWithDescription::FailureType' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_ShowLoginErrorDialogWithDescription, ErrorString) == 0x000008, "Member 'MordhauGameInstance_ShowLoginErrorDialogWithDescription::ErrorString' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.ShowNetworkErrorDialogWithDescription
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameInstance_ShowNetworkErrorDialogWithDescription final
{
public:
	ENetworkFailure                               FailureType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_ShowNetworkErrorDialogWithDescription) == 0x000008, "Wrong alignment on MordhauGameInstance_ShowNetworkErrorDialogWithDescription");
static_assert(sizeof(MordhauGameInstance_ShowNetworkErrorDialogWithDescription) == 0x000018, "Wrong size on MordhauGameInstance_ShowNetworkErrorDialogWithDescription");
static_assert(offsetof(MordhauGameInstance_ShowNetworkErrorDialogWithDescription, FailureType) == 0x000000, "Member 'MordhauGameInstance_ShowNetworkErrorDialogWithDescription::FailureType' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_ShowNetworkErrorDialogWithDescription, ErrorString) == 0x000008, "Member 'MordhauGameInstance_ShowNetworkErrorDialogWithDescription::ErrorString' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.ShowNoControllerDialog
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_ShowNoControllerDialog final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_ShowNoControllerDialog) == 0x000001, "Wrong alignment on MordhauGameInstance_ShowNoControllerDialog");
static_assert(sizeof(MordhauGameInstance_ShowNoControllerDialog) == 0x000001, "Wrong size on MordhauGameInstance_ShowNoControllerDialog");
static_assert(offsetof(MordhauGameInstance_ShowNoControllerDialog, bEnable) == 0x000000, "Member 'MordhauGameInstance_ShowNoControllerDialog::bEnable' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.ShowPasswordDialog
// 0x0110 (0x0110 - 0x0000)
struct MordhauGameInstance_ShowPasswordDialog final
{
public:
	struct FServerSearchResult                    SearchResult;                                      // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_ShowPasswordDialog) == 0x000008, "Wrong alignment on MordhauGameInstance_ShowPasswordDialog");
static_assert(sizeof(MordhauGameInstance_ShowPasswordDialog) == 0x000110, "Wrong size on MordhauGameInstance_ShowPasswordDialog");
static_assert(offsetof(MordhauGameInstance_ShowPasswordDialog, SearchResult) == 0x000000, "Member 'MordhauGameInstance_ShowPasswordDialog::SearchResult' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.UnregisterMetadata
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameInstance_UnregisterMetadata final
{
public:
	int32                                         ModId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_UnregisterMetadata) == 0x000004, "Wrong alignment on MordhauGameInstance_UnregisterMetadata");
static_assert(sizeof(MordhauGameInstance_UnregisterMetadata) == 0x000004, "Wrong size on MordhauGameInstance_UnregisterMetadata");
static_assert(offsetof(MordhauGameInstance_UnregisterMetadata, ModId) == 0x000000, "Member 'MordhauGameInstance_UnregisterMetadata::ModId' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.UpdateParty
// 0x0002 (0x0002 - 0x0000)
struct MordhauGameInstance_UpdateParty final
{
public:
	bool                                          bUpdateProfile;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyPartyCreation;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_UpdateParty) == 0x000001, "Wrong alignment on MordhauGameInstance_UpdateParty");
static_assert(sizeof(MordhauGameInstance_UpdateParty) == 0x000002, "Wrong size on MordhauGameInstance_UpdateParty");
static_assert(offsetof(MordhauGameInstance_UpdateParty, bUpdateProfile) == 0x000000, "Member 'MordhauGameInstance_UpdateParty::bUpdateProfile' has a wrong offset!");
static_assert(offsetof(MordhauGameInstance_UpdateParty, bNotifyPartyCreation) == 0x000001, "Member 'MordhauGameInstance_UpdateParty::bNotifyPartyCreation' has a wrong offset!");

// Function Mordhau.MordhauGameInstance.IsStartUpComplete
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameInstance_IsStartUpComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameInstance_IsStartUpComplete) == 0x000001, "Wrong alignment on MordhauGameInstance_IsStartUpComplete");
static_assert(sizeof(MordhauGameInstance_IsStartUpComplete) == 0x000001, "Wrong size on MordhauGameInstance_IsStartUpComplete");
static_assert(offsetof(MordhauGameInstance_IsStartUpComplete, ReturnValue) == 0x000000, "Member 'MordhauGameInstance_IsStartUpComplete::ReturnValue' has a wrong offset!");

// Function Mordhau.BuildablePlaneTrace.GetPlacementAngleAndRotation
// 0x0330 (0x0330 - 0x0000)
struct BuildablePlaneTrace_GetPlacementAngleAndRotation final
{
public:
	struct FSpawnablePlaneTraceResult             OutTraceResult;                                    // 0x0000(0x0280)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSpawnableObjectInfo                   ObjectInfo;                                        // 0x0280(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OutAngle;                                          // 0x0318(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutRotation;                                       // 0x031C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildablePlaneTrace_GetPlacementAngleAndRotation) == 0x000010, "Wrong alignment on BuildablePlaneTrace_GetPlacementAngleAndRotation");
static_assert(sizeof(BuildablePlaneTrace_GetPlacementAngleAndRotation) == 0x000330, "Wrong size on BuildablePlaneTrace_GetPlacementAngleAndRotation");
static_assert(offsetof(BuildablePlaneTrace_GetPlacementAngleAndRotation, OutTraceResult) == 0x000000, "Member 'BuildablePlaneTrace_GetPlacementAngleAndRotation::OutTraceResult' has a wrong offset!");
static_assert(offsetof(BuildablePlaneTrace_GetPlacementAngleAndRotation, ObjectInfo) == 0x000280, "Member 'BuildablePlaneTrace_GetPlacementAngleAndRotation::ObjectInfo' has a wrong offset!");
static_assert(offsetof(BuildablePlaneTrace_GetPlacementAngleAndRotation, OutAngle) == 0x000318, "Member 'BuildablePlaneTrace_GetPlacementAngleAndRotation::OutAngle' has a wrong offset!");
static_assert(offsetof(BuildablePlaneTrace_GetPlacementAngleAndRotation, OutRotation) == 0x00031C, "Member 'BuildablePlaneTrace_GetPlacementAngleAndRotation::OutRotation' has a wrong offset!");

// Function Mordhau.BuildablePlaneTrace.DrawDebugPlane
// 0x0048 (0x0048 - 0x0000)
struct BuildablePlaneTrace_DrawDebugPlane final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Forward;                                           // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Back;                                              // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Right;                                             // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Left;                                              // 0x002C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InTraceAmount;                                     // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildablePlaneTrace_DrawDebugPlane) == 0x000008, "Wrong alignment on BuildablePlaneTrace_DrawDebugPlane");
static_assert(sizeof(BuildablePlaneTrace_DrawDebugPlane) == 0x000048, "Wrong size on BuildablePlaneTrace_DrawDebugPlane");
static_assert(offsetof(BuildablePlaneTrace_DrawDebugPlane, WorldContextObject) == 0x000000, "Member 'BuildablePlaneTrace_DrawDebugPlane::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BuildablePlaneTrace_DrawDebugPlane, Forward) == 0x000008, "Member 'BuildablePlaneTrace_DrawDebugPlane::Forward' has a wrong offset!");
static_assert(offsetof(BuildablePlaneTrace_DrawDebugPlane, Back) == 0x000014, "Member 'BuildablePlaneTrace_DrawDebugPlane::Back' has a wrong offset!");
static_assert(offsetof(BuildablePlaneTrace_DrawDebugPlane, Right) == 0x000020, "Member 'BuildablePlaneTrace_DrawDebugPlane::Right' has a wrong offset!");
static_assert(offsetof(BuildablePlaneTrace_DrawDebugPlane, Left) == 0x00002C, "Member 'BuildablePlaneTrace_DrawDebugPlane::Left' has a wrong offset!");
static_assert(offsetof(BuildablePlaneTrace_DrawDebugPlane, InTraceAmount) == 0x000038, "Member 'BuildablePlaneTrace_DrawDebugPlane::InTraceAmount' has a wrong offset!");
static_assert(offsetof(BuildablePlaneTrace_DrawDebugPlane, DrawDebugType) == 0x000044, "Member 'BuildablePlaneTrace_DrawDebugPlane::DrawDebugType' has a wrong offset!");

// Function Mordhau.BuildingSystemComponent.AddSkeletalMeshPreviewIfNone
// 0x0008 (0x0008 - 0x0000)
struct BuildingSystemComponent_AddSkeletalMeshPreviewIfNone final
{
public:
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSystemComponent_AddSkeletalMeshPreviewIfNone) == 0x000008, "Wrong alignment on BuildingSystemComponent_AddSkeletalMeshPreviewIfNone");
static_assert(sizeof(BuildingSystemComponent_AddSkeletalMeshPreviewIfNone) == 0x000008, "Wrong size on BuildingSystemComponent_AddSkeletalMeshPreviewIfNone");
static_assert(offsetof(BuildingSystemComponent_AddSkeletalMeshPreviewIfNone, SkeletalMesh) == 0x000000, "Member 'BuildingSystemComponent_AddSkeletalMeshPreviewIfNone::SkeletalMesh' has a wrong offset!");

// Function Mordhau.BuildingSystemComponent.AddStaticMeshPreviewIfNone
// 0x0008 (0x0008 - 0x0000)
struct BuildingSystemComponent_AddStaticMeshPreviewIfNone final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSystemComponent_AddStaticMeshPreviewIfNone) == 0x000008, "Wrong alignment on BuildingSystemComponent_AddStaticMeshPreviewIfNone");
static_assert(sizeof(BuildingSystemComponent_AddStaticMeshPreviewIfNone) == 0x000008, "Wrong size on BuildingSystemComponent_AddStaticMeshPreviewIfNone");
static_assert(offsetof(BuildingSystemComponent_AddStaticMeshPreviewIfNone, StaticMesh) == 0x000000, "Member 'BuildingSystemComponent_AddStaticMeshPreviewIfNone::StaticMesh' has a wrong offset!");

// Function Mordhau.BuildingSystemComponent.DisplayPreview
// 0x00E0 (0x00E0 - 0x0000)
struct BuildingSystemComponent_DisplayPreview final
{
public:
	bool                                          bDrawObjectPreview;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSpawnableObjectInfo                   ObjectInfo;                                        // 0x0008(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             ObjectTransform;                                   // 0x00A0(0x0030)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SpawnableObjectIndex;                              // 0x00D0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0xC];                                       // 0x00D4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingSystemComponent_DisplayPreview) == 0x000010, "Wrong alignment on BuildingSystemComponent_DisplayPreview");
static_assert(sizeof(BuildingSystemComponent_DisplayPreview) == 0x0000E0, "Wrong size on BuildingSystemComponent_DisplayPreview");
static_assert(offsetof(BuildingSystemComponent_DisplayPreview, bDrawObjectPreview) == 0x000000, "Member 'BuildingSystemComponent_DisplayPreview::bDrawObjectPreview' has a wrong offset!");
static_assert(offsetof(BuildingSystemComponent_DisplayPreview, bIsValid) == 0x000001, "Member 'BuildingSystemComponent_DisplayPreview::bIsValid' has a wrong offset!");
static_assert(offsetof(BuildingSystemComponent_DisplayPreview, ObjectInfo) == 0x000008, "Member 'BuildingSystemComponent_DisplayPreview::ObjectInfo' has a wrong offset!");
static_assert(offsetof(BuildingSystemComponent_DisplayPreview, ObjectTransform) == 0x0000A0, "Member 'BuildingSystemComponent_DisplayPreview::ObjectTransform' has a wrong offset!");
static_assert(offsetof(BuildingSystemComponent_DisplayPreview, SpawnableObjectIndex) == 0x0000D0, "Member 'BuildingSystemComponent_DisplayPreview::SpawnableObjectIndex' has a wrong offset!");

// Function Mordhau.BuildingSystemComponent.GetEquipmentAmmoCost
// 0x0008 (0x0008 - 0x0000)
struct BuildingSystemComponent_GetEquipmentAmmoCost final
{
public:
	int32                                         SpawnableObjectIndex;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSystemComponent_GetEquipmentAmmoCost) == 0x000004, "Wrong alignment on BuildingSystemComponent_GetEquipmentAmmoCost");
static_assert(sizeof(BuildingSystemComponent_GetEquipmentAmmoCost) == 0x000008, "Wrong size on BuildingSystemComponent_GetEquipmentAmmoCost");
static_assert(offsetof(BuildingSystemComponent_GetEquipmentAmmoCost, SpawnableObjectIndex) == 0x000000, "Member 'BuildingSystemComponent_GetEquipmentAmmoCost::SpawnableObjectIndex' has a wrong offset!");
static_assert(offsetof(BuildingSystemComponent_GetEquipmentAmmoCost, ReturnValue) == 0x000004, "Member 'BuildingSystemComponent_GetEquipmentAmmoCost::ReturnValue' has a wrong offset!");

// Function Mordhau.BuildingSystemComponent.GetEquipmentDisplayName
// 0x000C (0x000C - 0x0000)
struct BuildingSystemComponent_GetEquipmentDisplayName final
{
public:
	int32                                         SpawnableObjectIndex;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSystemComponent_GetEquipmentDisplayName) == 0x000004, "Wrong alignment on BuildingSystemComponent_GetEquipmentDisplayName");
static_assert(sizeof(BuildingSystemComponent_GetEquipmentDisplayName) == 0x00000C, "Wrong size on BuildingSystemComponent_GetEquipmentDisplayName");
static_assert(offsetof(BuildingSystemComponent_GetEquipmentDisplayName, SpawnableObjectIndex) == 0x000000, "Member 'BuildingSystemComponent_GetEquipmentDisplayName::SpawnableObjectIndex' has a wrong offset!");
static_assert(offsetof(BuildingSystemComponent_GetEquipmentDisplayName, ReturnValue) == 0x000004, "Member 'BuildingSystemComponent_GetEquipmentDisplayName::ReturnValue' has a wrong offset!");

// Function Mordhau.BuildingSystemComponent.GetEquipmentInfo
// 0x00A0 (0x00A0 - 0x0000)
struct BuildingSystemComponent_GetEquipmentInfo final
{
public:
	int32                                         SpawnableObjectIndex;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSpawnableObjectInfo                   ReturnValue;                                       // 0x0008(0x0098)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSystemComponent_GetEquipmentInfo) == 0x000008, "Wrong alignment on BuildingSystemComponent_GetEquipmentInfo");
static_assert(sizeof(BuildingSystemComponent_GetEquipmentInfo) == 0x0000A0, "Wrong size on BuildingSystemComponent_GetEquipmentInfo");
static_assert(offsetof(BuildingSystemComponent_GetEquipmentInfo, SpawnableObjectIndex) == 0x000000, "Member 'BuildingSystemComponent_GetEquipmentInfo::SpawnableObjectIndex' has a wrong offset!");
static_assert(offsetof(BuildingSystemComponent_GetEquipmentInfo, ReturnValue) == 0x000008, "Member 'BuildingSystemComponent_GetEquipmentInfo::ReturnValue' has a wrong offset!");

// Function Mordhau.BuildingSystemComponent.GetEquipmentPlaceableLimitName
// 0x000C (0x000C - 0x0000)
struct BuildingSystemComponent_GetEquipmentPlaceableLimitName final
{
public:
	int32                                         SpawnableObjectIndex;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSystemComponent_GetEquipmentPlaceableLimitName) == 0x000004, "Wrong alignment on BuildingSystemComponent_GetEquipmentPlaceableLimitName");
static_assert(sizeof(BuildingSystemComponent_GetEquipmentPlaceableLimitName) == 0x00000C, "Wrong size on BuildingSystemComponent_GetEquipmentPlaceableLimitName");
static_assert(offsetof(BuildingSystemComponent_GetEquipmentPlaceableLimitName, SpawnableObjectIndex) == 0x000000, "Member 'BuildingSystemComponent_GetEquipmentPlaceableLimitName::SpawnableObjectIndex' has a wrong offset!");
static_assert(offsetof(BuildingSystemComponent_GetEquipmentPlaceableLimitName, ReturnValue) == 0x000004, "Member 'BuildingSystemComponent_GetEquipmentPlaceableLimitName::ReturnValue' has a wrong offset!");

// Function Mordhau.BuildingSystemComponent.GetEquipmentPlaceableMaxLimit
// 0x0008 (0x0008 - 0x0000)
struct BuildingSystemComponent_GetEquipmentPlaceableMaxLimit final
{
public:
	int32                                         SpawnableObjectIndex;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSystemComponent_GetEquipmentPlaceableMaxLimit) == 0x000004, "Wrong alignment on BuildingSystemComponent_GetEquipmentPlaceableMaxLimit");
static_assert(sizeof(BuildingSystemComponent_GetEquipmentPlaceableMaxLimit) == 0x000008, "Wrong size on BuildingSystemComponent_GetEquipmentPlaceableMaxLimit");
static_assert(offsetof(BuildingSystemComponent_GetEquipmentPlaceableMaxLimit, SpawnableObjectIndex) == 0x000000, "Member 'BuildingSystemComponent_GetEquipmentPlaceableMaxLimit::SpawnableObjectIndex' has a wrong offset!");
static_assert(offsetof(BuildingSystemComponent_GetEquipmentPlaceableMaxLimit, ReturnValue) == 0x000004, "Member 'BuildingSystemComponent_GetEquipmentPlaceableMaxLimit::ReturnValue' has a wrong offset!");

// Function Mordhau.BuildingSystemComponent.ValidateSpot
// 0x0040 (0x0040 - 0x0000)
struct BuildingSystemComponent_ValidateSpot final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutRotation;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        AttachToComponent;                                 // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBuildableTraceBase*                    BuildableTraceHit;                                 // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnableObjectIndex;                              // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawObjectPreview;                                // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceFail;                                        // 0x003D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003E(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingSystemComponent_ValidateSpot) == 0x000008, "Wrong alignment on BuildingSystemComponent_ValidateSpot");
static_assert(sizeof(BuildingSystemComponent_ValidateSpot) == 0x000040, "Wrong size on BuildingSystemComponent_ValidateSpot");
static_assert(offsetof(BuildingSystemComponent_ValidateSpot, Offset) == 0x000000, "Member 'BuildingSystemComponent_ValidateSpot::Offset' has a wrong offset!");
static_assert(offsetof(BuildingSystemComponent_ValidateSpot, OutLocation) == 0x00000C, "Member 'BuildingSystemComponent_ValidateSpot::OutLocation' has a wrong offset!");
static_assert(offsetof(BuildingSystemComponent_ValidateSpot, OutRotation) == 0x000018, "Member 'BuildingSystemComponent_ValidateSpot::OutRotation' has a wrong offset!");
static_assert(offsetof(BuildingSystemComponent_ValidateSpot, AttachToComponent) == 0x000028, "Member 'BuildingSystemComponent_ValidateSpot::AttachToComponent' has a wrong offset!");
static_assert(offsetof(BuildingSystemComponent_ValidateSpot, BuildableTraceHit) == 0x000030, "Member 'BuildingSystemComponent_ValidateSpot::BuildableTraceHit' has a wrong offset!");
static_assert(offsetof(BuildingSystemComponent_ValidateSpot, SpawnableObjectIndex) == 0x000038, "Member 'BuildingSystemComponent_ValidateSpot::SpawnableObjectIndex' has a wrong offset!");
static_assert(offsetof(BuildingSystemComponent_ValidateSpot, bDrawObjectPreview) == 0x00003C, "Member 'BuildingSystemComponent_ValidateSpot::bDrawObjectPreview' has a wrong offset!");
static_assert(offsetof(BuildingSystemComponent_ValidateSpot, bForceFail) == 0x00003D, "Member 'BuildingSystemComponent_ValidateSpot::bForceFail' has a wrong offset!");
static_assert(offsetof(BuildingSystemComponent_ValidateSpot, ReturnValue) == 0x00003E, "Member 'BuildingSystemComponent_ValidateSpot::ReturnValue' has a wrong offset!");

// Function Mordhau.BurnableComponent.OnLODTick
// 0x0004 (0x0004 - 0x0000)
struct BurnableComponent_OnLODTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BurnableComponent_OnLODTick) == 0x000004, "Wrong alignment on BurnableComponent_OnLODTick");
static_assert(sizeof(BurnableComponent_OnLODTick) == 0x000004, "Wrong size on BurnableComponent_OnLODTick");
static_assert(offsetof(BurnableComponent_OnLODTick, DeltaTime) == 0x000000, "Member 'BurnableComponent_OnLODTick::DeltaTime' has a wrong offset!");

// Function Mordhau.BurnableComponent.SetOnFire
// 0x0008 (0x0008 - 0x0000)
struct BurnableComponent_SetOnFire final
{
public:
	class AMasterField*                           FireField;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BurnableComponent_SetOnFire) == 0x000008, "Wrong alignment on BurnableComponent_SetOnFire");
static_assert(sizeof(BurnableComponent_SetOnFire) == 0x000008, "Wrong size on BurnableComponent_SetOnFire");
static_assert(offsetof(BurnableComponent_SetOnFire, FireField) == 0x000000, "Member 'BurnableComponent_SetOnFire::FireField' has a wrong offset!");

// Function Mordhau.BurnableComponent.StartBurning
// 0x0020 (0x0020 - 0x0000)
struct BurnableComponent_StartBurning final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tick;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageAgent;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatorController;                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BurnableComponent_StartBurning) == 0x000008, "Wrong alignment on BurnableComponent_StartBurning");
static_assert(sizeof(BurnableComponent_StartBurning) == 0x000020, "Wrong size on BurnableComponent_StartBurning");
static_assert(offsetof(BurnableComponent_StartBurning, Duration) == 0x000000, "Member 'BurnableComponent_StartBurning::Duration' has a wrong offset!");
static_assert(offsetof(BurnableComponent_StartBurning, Damage) == 0x000004, "Member 'BurnableComponent_StartBurning::Damage' has a wrong offset!");
static_assert(offsetof(BurnableComponent_StartBurning, Tick) == 0x000008, "Member 'BurnableComponent_StartBurning::Tick' has a wrong offset!");
static_assert(offsetof(BurnableComponent_StartBurning, DamageAgent) == 0x000010, "Member 'BurnableComponent_StartBurning::DamageAgent' has a wrong offset!");
static_assert(offsetof(BurnableComponent_StartBurning, InstigatorController) == 0x000018, "Member 'BurnableComponent_StartBurning::InstigatorController' has a wrong offset!");

// Function Mordhau.BurnableComponent.GetIsBurning
// 0x0001 (0x0001 - 0x0000)
struct BurnableComponent_GetIsBurning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BurnableComponent_GetIsBurning) == 0x000001, "Wrong alignment on BurnableComponent_GetIsBurning");
static_assert(sizeof(BurnableComponent_GetIsBurning) == 0x000001, "Wrong size on BurnableComponent_GetIsBurning");
static_assert(offsetof(BurnableComponent_GetIsBurning, ReturnValue) == 0x000000, "Member 'BurnableComponent_GetIsBurning::ReturnValue' has a wrong offset!");

// Function Mordhau.VehicleBase.LookUp
// 0x0008 (0x0008 - 0x0000)
struct VehicleBase_LookUp final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAbsolute;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleBase_LookUp) == 0x000004, "Wrong alignment on VehicleBase_LookUp");
static_assert(sizeof(VehicleBase_LookUp) == 0x000008, "Wrong size on VehicleBase_LookUp");
static_assert(offsetof(VehicleBase_LookUp, Value) == 0x000000, "Member 'VehicleBase_LookUp::Value' has a wrong offset!");
static_assert(offsetof(VehicleBase_LookUp, bIsAbsolute) == 0x000004, "Member 'VehicleBase_LookUp::bIsAbsolute' has a wrong offset!");

// Function Mordhau.VehicleBase.LookUpAtRate
// 0x0004 (0x0004 - 0x0000)
struct VehicleBase_LookUpAtRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleBase_LookUpAtRate) == 0x000004, "Wrong alignment on VehicleBase_LookUpAtRate");
static_assert(sizeof(VehicleBase_LookUpAtRate) == 0x000004, "Wrong size on VehicleBase_LookUpAtRate");
static_assert(offsetof(VehicleBase_LookUpAtRate, Value) == 0x000000, "Member 'VehicleBase_LookUpAtRate::Value' has a wrong offset!");

// Function Mordhau.VehicleBase.LookUpNotAbsolute
// 0x0004 (0x0004 - 0x0000)
struct VehicleBase_LookUpNotAbsolute final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleBase_LookUpNotAbsolute) == 0x000004, "Wrong alignment on VehicleBase_LookUpNotAbsolute");
static_assert(sizeof(VehicleBase_LookUpNotAbsolute) == 0x000004, "Wrong size on VehicleBase_LookUpNotAbsolute");
static_assert(offsetof(VehicleBase_LookUpNotAbsolute, Value) == 0x000000, "Member 'VehicleBase_LookUpNotAbsolute::Value' has a wrong offset!");

// Function Mordhau.VehicleBase.OnDied
// 0x0030 (0x0030 - 0x0000)
struct VehicleBase_OnDied final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMordhauDamageType                            Type;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SubType;                                           // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bone;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Source;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Agent;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleBase_OnDied) == 0x000008, "Wrong alignment on VehicleBase_OnDied");
static_assert(sizeof(VehicleBase_OnDied) == 0x000030, "Wrong size on VehicleBase_OnDied");
static_assert(offsetof(VehicleBase_OnDied, Angle) == 0x000000, "Member 'VehicleBase_OnDied::Angle' has a wrong offset!");
static_assert(offsetof(VehicleBase_OnDied, Type) == 0x000004, "Member 'VehicleBase_OnDied::Type' has a wrong offset!");
static_assert(offsetof(VehicleBase_OnDied, SubType) == 0x000005, "Member 'VehicleBase_OnDied::SubType' has a wrong offset!");
static_assert(offsetof(VehicleBase_OnDied, bone) == 0x000008, "Member 'VehicleBase_OnDied::bone' has a wrong offset!");
static_assert(offsetof(VehicleBase_OnDied, Point) == 0x000010, "Member 'VehicleBase_OnDied::Point' has a wrong offset!");
static_assert(offsetof(VehicleBase_OnDied, Source) == 0x000020, "Member 'VehicleBase_OnDied::Source' has a wrong offset!");
static_assert(offsetof(VehicleBase_OnDied, Agent) == 0x000028, "Member 'VehicleBase_OnDied::Agent' has a wrong offset!");

// Function Mordhau.VehicleBase.OnTookDamage
// 0x0028 (0x0028 - 0x0000)
struct VehicleBase_OnTookDamage final
{
public:
	bool                                          bWillKill;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMordhauDamageType                            Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SubType;                                           // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bone;                                              // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Source;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Agent;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleBase_OnTookDamage) == 0x000008, "Wrong alignment on VehicleBase_OnTookDamage");
static_assert(sizeof(VehicleBase_OnTookDamage) == 0x000028, "Wrong size on VehicleBase_OnTookDamage");
static_assert(offsetof(VehicleBase_OnTookDamage, bWillKill) == 0x000000, "Member 'VehicleBase_OnTookDamage::bWillKill' has a wrong offset!");
static_assert(offsetof(VehicleBase_OnTookDamage, Type) == 0x000001, "Member 'VehicleBase_OnTookDamage::Type' has a wrong offset!");
static_assert(offsetof(VehicleBase_OnTookDamage, SubType) == 0x000002, "Member 'VehicleBase_OnTookDamage::SubType' has a wrong offset!");
static_assert(offsetof(VehicleBase_OnTookDamage, bone) == 0x000004, "Member 'VehicleBase_OnTookDamage::bone' has a wrong offset!");
static_assert(offsetof(VehicleBase_OnTookDamage, Point) == 0x00000C, "Member 'VehicleBase_OnTookDamage::Point' has a wrong offset!");
static_assert(offsetof(VehicleBase_OnTookDamage, Source) == 0x000018, "Member 'VehicleBase_OnTookDamage::Source' has a wrong offset!");
static_assert(offsetof(VehicleBase_OnTookDamage, Agent) == 0x000020, "Member 'VehicleBase_OnTookDamage::Agent' has a wrong offset!");

// Function Mordhau.VehicleBase.PlaySound
// 0x0038 (0x0038 - 0x0000)
struct VehicleBase_PlaySound final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bone;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               AttachLocation;                                    // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttach;                                           // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      Override;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleBase_PlaySound) == 0x000008, "Wrong alignment on VehicleBase_PlaySound");
static_assert(sizeof(VehicleBase_PlaySound) == 0x000038, "Wrong size on VehicleBase_PlaySound");
static_assert(offsetof(VehicleBase_PlaySound, Sound) == 0x000000, "Member 'VehicleBase_PlaySound::Sound' has a wrong offset!");
static_assert(offsetof(VehicleBase_PlaySound, bone) == 0x000008, "Member 'VehicleBase_PlaySound::bone' has a wrong offset!");
static_assert(offsetof(VehicleBase_PlaySound, InLocation) == 0x000010, "Member 'VehicleBase_PlaySound::InLocation' has a wrong offset!");
static_assert(offsetof(VehicleBase_PlaySound, AttachLocation) == 0x00001C, "Member 'VehicleBase_PlaySound::AttachLocation' has a wrong offset!");
static_assert(offsetof(VehicleBase_PlaySound, bAttach) == 0x00001D, "Member 'VehicleBase_PlaySound::bAttach' has a wrong offset!");
static_assert(offsetof(VehicleBase_PlaySound, Override) == 0x000020, "Member 'VehicleBase_PlaySound::Override' has a wrong offset!");
static_assert(offsetof(VehicleBase_PlaySound, VolumeMultiplier) == 0x000028, "Member 'VehicleBase_PlaySound::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(VehicleBase_PlaySound, PitchMultiplier) == 0x00002C, "Member 'VehicleBase_PlaySound::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(VehicleBase_PlaySound, ReturnValue) == 0x000030, "Member 'VehicleBase_PlaySound::ReturnValue' has a wrong offset!");

// Function Mordhau.VehicleBase.Server_SetForward
// 0x0004 (0x0004 - 0x0000)
struct VehicleBase_Server_SetForward final
{
public:
	float                                         InForward;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleBase_Server_SetForward) == 0x000004, "Wrong alignment on VehicleBase_Server_SetForward");
static_assert(sizeof(VehicleBase_Server_SetForward) == 0x000004, "Wrong size on VehicleBase_Server_SetForward");
static_assert(offsetof(VehicleBase_Server_SetForward, InForward) == 0x000000, "Member 'VehicleBase_Server_SetForward::InForward' has a wrong offset!");

// Function Mordhau.VehicleBase.Server_SetRight
// 0x0004 (0x0004 - 0x0000)
struct VehicleBase_Server_SetRight final
{
public:
	float                                         InRight;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleBase_Server_SetRight) == 0x000004, "Wrong alignment on VehicleBase_Server_SetRight");
static_assert(sizeof(VehicleBase_Server_SetRight) == 0x000004, "Wrong size on VehicleBase_Server_SetRight");
static_assert(offsetof(VehicleBase_Server_SetRight, InRight) == 0x000000, "Member 'VehicleBase_Server_SetRight::InRight' has a wrong offset!");

// Function Mordhau.VehicleBase.Server_Unreliable_LookUp
// 0x0004 (0x0004 - 0x0000)
struct VehicleBase_Server_Unreliable_LookUp final
{
public:
	float                                         NewLookUp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleBase_Server_Unreliable_LookUp) == 0x000004, "Wrong alignment on VehicleBase_Server_Unreliable_LookUp");
static_assert(sizeof(VehicleBase_Server_Unreliable_LookUp) == 0x000004, "Wrong size on VehicleBase_Server_Unreliable_LookUp");
static_assert(offsetof(VehicleBase_Server_Unreliable_LookUp, NewLookUp) == 0x000000, "Member 'VehicleBase_Server_Unreliable_LookUp::NewLookUp' has a wrong offset!");

// Function Mordhau.VehicleBase.SpawnParticlesAttached
// 0x0038 (0x0038 - 0x0000)
struct VehicleBase_SpawnParticlesAttached final
{
public:
	class UParticleSystem*                        Particle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EAttachLocation                               AttachType;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Socket;                                            // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleBase_SpawnParticlesAttached) == 0x000008, "Wrong alignment on VehicleBase_SpawnParticlesAttached");
static_assert(sizeof(VehicleBase_SpawnParticlesAttached) == 0x000038, "Wrong size on VehicleBase_SpawnParticlesAttached");
static_assert(offsetof(VehicleBase_SpawnParticlesAttached, Particle) == 0x000000, "Member 'VehicleBase_SpawnParticlesAttached::Particle' has a wrong offset!");
static_assert(offsetof(VehicleBase_SpawnParticlesAttached, Location) == 0x000008, "Member 'VehicleBase_SpawnParticlesAttached::Location' has a wrong offset!");
static_assert(offsetof(VehicleBase_SpawnParticlesAttached, Rotation) == 0x000014, "Member 'VehicleBase_SpawnParticlesAttached::Rotation' has a wrong offset!");
static_assert(offsetof(VehicleBase_SpawnParticlesAttached, AttachType) == 0x000020, "Member 'VehicleBase_SpawnParticlesAttached::AttachType' has a wrong offset!");
static_assert(offsetof(VehicleBase_SpawnParticlesAttached, Socket) == 0x000024, "Member 'VehicleBase_SpawnParticlesAttached::Socket' has a wrong offset!");
static_assert(offsetof(VehicleBase_SpawnParticlesAttached, ReturnValue) == 0x000030, "Member 'VehicleBase_SpawnParticlesAttached::ReturnValue' has a wrong offset!");

// Function Mordhau.VehicleBase.GetDriver
// 0x0008 (0x0008 - 0x0000)
struct VehicleBase_GetDriver final
{
public:
	class AMordhauCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleBase_GetDriver) == 0x000008, "Wrong alignment on VehicleBase_GetDriver");
static_assert(sizeof(VehicleBase_GetDriver) == 0x000008, "Wrong size on VehicleBase_GetDriver");
static_assert(offsetof(VehicleBase_GetDriver, ReturnValue) == 0x000000, "Member 'VehicleBase_GetDriver::ReturnValue' has a wrong offset!");

// Function Mordhau.VehicleBase.GetLookUpValue
// 0x0004 (0x0004 - 0x0000)
struct VehicleBase_GetLookUpValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleBase_GetLookUpValue) == 0x000004, "Wrong alignment on VehicleBase_GetLookUpValue");
static_assert(sizeof(VehicleBase_GetLookUpValue) == 0x000004, "Wrong size on VehicleBase_GetLookUpValue");
static_assert(offsetof(VehicleBase_GetLookUpValue, ReturnValue) == 0x000000, "Member 'VehicleBase_GetLookUpValue::ReturnValue' has a wrong offset!");

// Function Mordhau.VehicleBase.GetRawLookUpValue
// 0x0004 (0x0004 - 0x0000)
struct VehicleBase_GetRawLookUpValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleBase_GetRawLookUpValue) == 0x000004, "Wrong alignment on VehicleBase_GetRawLookUpValue");
static_assert(sizeof(VehicleBase_GetRawLookUpValue) == 0x000004, "Wrong size on VehicleBase_GetRawLookUpValue");
static_assert(offsetof(VehicleBase_GetRawLookUpValue, ReturnValue) == 0x000000, "Member 'VehicleBase_GetRawLookUpValue::ReturnValue' has a wrong offset!");

// Function Mordhau.JoinMatchmakingMatch.JoinMatchmakingMatch
// 0x00C0 (0x00C0 - 0x0000)
struct JoinMatchmakingMatch_JoinMatchmakingMatch final
{
public:
	struct FPlayFabMatchmakingMatch               Match_0;                                           // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UJoinMatchmakingMatch*                  ReturnValue;                                       // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JoinMatchmakingMatch_JoinMatchmakingMatch) == 0x000008, "Wrong alignment on JoinMatchmakingMatch_JoinMatchmakingMatch");
static_assert(sizeof(JoinMatchmakingMatch_JoinMatchmakingMatch) == 0x0000C0, "Wrong size on JoinMatchmakingMatch_JoinMatchmakingMatch");
static_assert(offsetof(JoinMatchmakingMatch_JoinMatchmakingMatch, Match_0) == 0x000000, "Member 'JoinMatchmakingMatch_JoinMatchmakingMatch::Match_0' has a wrong offset!");
static_assert(offsetof(JoinMatchmakingMatch_JoinMatchmakingMatch, ReturnValue) == 0x0000B8, "Member 'JoinMatchmakingMatch_JoinMatchmakingMatch::ReturnValue' has a wrong offset!");

// Function Mordhau.CapturePointBanner.InitializeBanner
// 0x0008 (0x0008 - 0x0000)
struct CapturePointBanner_InitializeBanner final
{
public:
	class AControlPoint*                          OwningPoint;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CapturePointBanner_InitializeBanner) == 0x000008, "Wrong alignment on CapturePointBanner_InitializeBanner");
static_assert(sizeof(CapturePointBanner_InitializeBanner) == 0x000008, "Wrong size on CapturePointBanner_InitializeBanner");
static_assert(offsetof(CapturePointBanner_InitializeBanner, OwningPoint) == 0x000000, "Member 'CapturePointBanner_InitializeBanner::OwningPoint' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetCrossplayEnabled
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_GetCrossplayEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetCrossplayEnabled) == 0x000001, "Wrong alignment on MordhauGameUserSettings_GetCrossplayEnabled");
static_assert(sizeof(MordhauGameUserSettings_GetCrossplayEnabled) == 0x000001, "Wrong size on MordhauGameUserSettings_GetCrossplayEnabled");
static_assert(offsetof(MordhauGameUserSettings_GetCrossplayEnabled, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetCrossplayEnabled::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetPlatformSpecific
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_GetPlatformSpecific final
{
public:
	EPlatformSpecific                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetPlatformSpecific) == 0x000001, "Wrong alignment on MordhauGameUserSettings_GetPlatformSpecific");
static_assert(sizeof(MordhauGameUserSettings_GetPlatformSpecific) == 0x000001, "Wrong size on MordhauGameUserSettings_GetPlatformSpecific");
static_assert(offsetof(MordhauGameUserSettings_GetPlatformSpecific, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetPlatformSpecific::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetPSNLockEnabledValue
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_GetPSNLockEnabledValue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetPSNLockEnabledValue) == 0x000001, "Wrong alignment on MordhauGameUserSettings_GetPSNLockEnabledValue");
static_assert(sizeof(MordhauGameUserSettings_GetPSNLockEnabledValue) == 0x000001, "Wrong size on MordhauGameUserSettings_GetPSNLockEnabledValue");
static_assert(offsetof(MordhauGameUserSettings_GetPSNLockEnabledValue, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetPSNLockEnabledValue::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetSelectedGameModePlayerCounts
// 0x0020 (0x0020 - 0x0000)
struct MordhauGameUserSettings_GetSelectedGameModePlayerCounts final
{
public:
	class FString                                 GameMode;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetSelectedGameModePlayerCounts) == 0x000008, "Wrong alignment on MordhauGameUserSettings_GetSelectedGameModePlayerCounts");
static_assert(sizeof(MordhauGameUserSettings_GetSelectedGameModePlayerCounts) == 0x000020, "Wrong size on MordhauGameUserSettings_GetSelectedGameModePlayerCounts");
static_assert(offsetof(MordhauGameUserSettings_GetSelectedGameModePlayerCounts, GameMode) == 0x000000, "Member 'MordhauGameUserSettings_GetSelectedGameModePlayerCounts::GameMode' has a wrong offset!");
static_assert(offsetof(MordhauGameUserSettings_GetSelectedGameModePlayerCounts, ReturnValue) == 0x000010, "Member 'MordhauGameUserSettings_GetSelectedGameModePlayerCounts::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetServerFilterValue
// 0x0002 (0x0002 - 0x0000)
struct MordhauGameUserSettings_GetServerFilterValue final
{
public:
	EServerFilterCategories                       FilterCategory;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetServerFilterValue) == 0x000001, "Wrong alignment on MordhauGameUserSettings_GetServerFilterValue");
static_assert(sizeof(MordhauGameUserSettings_GetServerFilterValue) == 0x000002, "Wrong size on MordhauGameUserSettings_GetServerFilterValue");
static_assert(offsetof(MordhauGameUserSettings_GetServerFilterValue, FilterCategory) == 0x000000, "Member 'MordhauGameUserSettings_GetServerFilterValue::FilterCategory' has a wrong offset!");
static_assert(offsetof(MordhauGameUserSettings_GetServerFilterValue, ReturnValue) == 0x000001, "Member 'MordhauGameUserSettings_GetServerFilterValue::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetAmbientOcclusion
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetAmbientOcclusion final
{
public:
	int32                                         NewAmbientOcclusion;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetAmbientOcclusion) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetAmbientOcclusion");
static_assert(sizeof(MordhauGameUserSettings_SetAmbientOcclusion) == 0x000004, "Wrong size on MordhauGameUserSettings_SetAmbientOcclusion");
static_assert(offsetof(MordhauGameUserSettings_SetAmbientOcclusion, NewAmbientOcclusion) == 0x000000, "Member 'MordhauGameUserSettings_SetAmbientOcclusion::NewAmbientOcclusion' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetAntiAliasing
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetAntiAliasing final
{
public:
	int32                                         NewAntiAliasing;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetAntiAliasing) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetAntiAliasing");
static_assert(sizeof(MordhauGameUserSettings_SetAntiAliasing) == 0x000004, "Wrong size on MordhauGameUserSettings_SetAntiAliasing");
static_assert(offsetof(MordhauGameUserSettings_SetAntiAliasing, NewAntiAliasing) == 0x000000, "Member 'MordhauGameUserSettings_SetAntiAliasing::NewAntiAliasing' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetBloom
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetBloom final
{
public:
	float                                         NewBloom;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetBloom) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetBloom");
static_assert(sizeof(MordhauGameUserSettings_SetBloom) == 0x000004, "Wrong size on MordhauGameUserSettings_SetBloom");
static_assert(offsetof(MordhauGameUserSettings_SetBloom, NewBloom) == 0x000000, "Member 'MordhauGameUserSettings_SetBloom::NewBloom' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetCameraDistance
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetCameraDistance final
{
public:
	float                                         NewCameraDistance;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetCameraDistance) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetCameraDistance");
static_assert(sizeof(MordhauGameUserSettings_SetCameraDistance) == 0x000004, "Wrong size on MordhauGameUserSettings_SetCameraDistance");
static_assert(offsetof(MordhauGameUserSettings_SetCameraDistance, NewCameraDistance) == 0x000000, "Member 'MordhauGameUserSettings_SetCameraDistance::NewCameraDistance' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetCasualMatchmakingGameModes
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameUserSettings_SetCasualMatchmakingGameModes final
{
public:
	TArray<class FString>                         NewGameModes;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetCasualMatchmakingGameModes) == 0x000008, "Wrong alignment on MordhauGameUserSettings_SetCasualMatchmakingGameModes");
static_assert(sizeof(MordhauGameUserSettings_SetCasualMatchmakingGameModes) == 0x000010, "Wrong size on MordhauGameUserSettings_SetCasualMatchmakingGameModes");
static_assert(offsetof(MordhauGameUserSettings_SetCasualMatchmakingGameModes, NewGameModes) == 0x000000, "Member 'MordhauGameUserSettings_SetCasualMatchmakingGameModes::NewGameModes' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetCasualMatchmakingRegion
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_SetCasualMatchmakingRegion final
{
public:
	EServerRegion                                 NewRegion;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetCasualMatchmakingRegion) == 0x000001, "Wrong alignment on MordhauGameUserSettings_SetCasualMatchmakingRegion");
static_assert(sizeof(MordhauGameUserSettings_SetCasualMatchmakingRegion) == 0x000001, "Wrong size on MordhauGameUserSettings_SetCasualMatchmakingRegion");
static_assert(offsetof(MordhauGameUserSettings_SetCasualMatchmakingRegion, NewRegion) == 0x000000, "Member 'MordhauGameUserSettings_SetCasualMatchmakingRegion::NewRegion' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetCharacterCloth
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetCharacterCloth final
{
public:
	int32                                         NewCharacterCloth;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetCharacterCloth) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetCharacterCloth");
static_assert(sizeof(MordhauGameUserSettings_SetCharacterCloth) == 0x000004, "Wrong size on MordhauGameUserSettings_SetCharacterCloth");
static_assert(offsetof(MordhauGameUserSettings_SetCharacterCloth, NewCharacterCloth) == 0x000000, "Member 'MordhauGameUserSettings_SetCharacterCloth::NewCharacterCloth' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetCharacterFidelity
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetCharacterFidelity final
{
public:
	int32                                         NewFidelity;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetCharacterFidelity) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetCharacterFidelity");
static_assert(sizeof(MordhauGameUserSettings_SetCharacterFidelity) == 0x000004, "Wrong size on MordhauGameUserSettings_SetCharacterFidelity");
static_assert(offsetof(MordhauGameUserSettings_SetCharacterFidelity, NewFidelity) == 0x000000, "Member 'MordhauGameUserSettings_SetCharacterFidelity::NewFidelity' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetCombatHeadbob
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetCombatHeadbob final
{
public:
	float                                         NewCombatHeadbob;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetCombatHeadbob) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetCombatHeadbob");
static_assert(sizeof(MordhauGameUserSettings_SetCombatHeadbob) == 0x000004, "Wrong size on MordhauGameUserSettings_SetCombatHeadbob");
static_assert(offsetof(MordhauGameUserSettings_SetCombatHeadbob, NewCombatHeadbob) == 0x000000, "Member 'MordhauGameUserSettings_SetCombatHeadbob::NewCombatHeadbob' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetCrosshairType
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetCrosshairType final
{
public:
	int32                                         NewCrosshairType;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetCrosshairType) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetCrosshairType");
static_assert(sizeof(MordhauGameUserSettings_SetCrosshairType) == 0x000004, "Wrong size on MordhauGameUserSettings_SetCrosshairType");
static_assert(offsetof(MordhauGameUserSettings_SetCrosshairType, NewCrosshairType) == 0x000000, "Member 'MordhauGameUserSettings_SetCrosshairType::NewCrosshairType' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetCrossplayEnabled
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_SetCrossplayEnabled final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetCrossplayEnabled) == 0x000001, "Wrong alignment on MordhauGameUserSettings_SetCrossplayEnabled");
static_assert(sizeof(MordhauGameUserSettings_SetCrossplayEnabled) == 0x000001, "Wrong size on MordhauGameUserSettings_SetCrossplayEnabled");
static_assert(offsetof(MordhauGameUserSettings_SetCrossplayEnabled, NewValue) == 0x000000, "Member 'MordhauGameUserSettings_SetCrossplayEnabled::NewValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetDrawTracers
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetDrawTracers final
{
public:
	int32                                         NewDrawTracers;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetDrawTracers) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetDrawTracers");
static_assert(sizeof(MordhauGameUserSettings_SetDrawTracers) == 0x000004, "Wrong size on MordhauGameUserSettings_SetDrawTracers");
static_assert(offsetof(MordhauGameUserSettings_SetDrawTracers, NewDrawTracers) == 0x000000, "Member 'MordhauGameUserSettings_SetDrawTracers::NewDrawTracers' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetEffectsVolume
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetEffectsVolume final
{
public:
	float                                         NewVolume;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetEffectsVolume) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetEffectsVolume");
static_assert(sizeof(MordhauGameUserSettings_SetEffectsVolume) == 0x000004, "Wrong size on MordhauGameUserSettings_SetEffectsVolume");
static_assert(offsetof(MordhauGameUserSettings_SetEffectsVolume, NewVolume) == 0x000000, "Member 'MordhauGameUserSettings_SetEffectsVolume::NewVolume' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetFavoriteServers
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameUserSettings_SetFavoriteServers final
{
public:
	TArray<class FString>                         NewFavoriteServers;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetFavoriteServers) == 0x000008, "Wrong alignment on MordhauGameUserSettings_SetFavoriteServers");
static_assert(sizeof(MordhauGameUserSettings_SetFavoriteServers) == 0x000010, "Wrong size on MordhauGameUserSettings_SetFavoriteServers");
static_assert(offsetof(MordhauGameUserSettings_SetFavoriteServers, NewFavoriteServers) == 0x000000, "Member 'MordhauGameUserSettings_SetFavoriteServers::NewFavoriteServers' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetFieldOfView
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetFieldOfView final
{
public:
	float                                         NewFOV;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetFieldOfView) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetFieldOfView");
static_assert(sizeof(MordhauGameUserSettings_SetFieldOfView) == 0x000004, "Wrong size on MordhauGameUserSettings_SetFieldOfView");
static_assert(offsetof(MordhauGameUserSettings_SetFieldOfView, NewFOV) == 0x000000, "Member 'MordhauGameUserSettings_SetFieldOfView::NewFOV' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetForceFeedbackEnabled
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_SetForceFeedbackEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetForceFeedbackEnabled) == 0x000001, "Wrong alignment on MordhauGameUserSettings_SetForceFeedbackEnabled");
static_assert(sizeof(MordhauGameUserSettings_SetForceFeedbackEnabled) == 0x000001, "Wrong size on MordhauGameUserSettings_SetForceFeedbackEnabled");
static_assert(offsetof(MordhauGameUserSettings_SetForceFeedbackEnabled, Enabled) == 0x000000, "Member 'MordhauGameUserSettings_SetForceFeedbackEnabled::Enabled' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetFriendlyMarkers
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetFriendlyMarkers final
{
public:
	int32                                         NewFriendlyMarkers;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetFriendlyMarkers) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetFriendlyMarkers");
static_assert(sizeof(MordhauGameUserSettings_SetFriendlyMarkers) == 0x000004, "Wrong size on MordhauGameUserSettings_SetFriendlyMarkers");
static_assert(offsetof(MordhauGameUserSettings_SetFriendlyMarkers, NewFriendlyMarkers) == 0x000000, "Member 'MordhauGameUserSettings_SetFriendlyMarkers::NewFriendlyMarkers' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetGamma
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetGamma final
{
public:
	float                                         NewGamma;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetGamma) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetGamma");
static_assert(sizeof(MordhauGameUserSettings_SetGamma) == 0x000004, "Wrong size on MordhauGameUserSettings_SetGamma");
static_assert(offsetof(MordhauGameUserSettings_SetGamma, NewGamma) == 0x000000, "Member 'MordhauGameUserSettings_SetGamma::NewGamma' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetGore
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetGore final
{
public:
	int32                                         NewGore;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetGore) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetGore");
static_assert(sizeof(MordhauGameUserSettings_SetGore) == 0x000004, "Wrong size on MordhauGameUserSettings_SetGore");
static_assert(offsetof(MordhauGameUserSettings_SetGore, NewGore) == 0x000000, "Member 'MordhauGameUserSettings_SetGore::NewGore' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetHeadbob
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetHeadbob final
{
public:
	float                                         NewHeadbob;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetHeadbob) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetHeadbob");
static_assert(sizeof(MordhauGameUserSettings_SetHeadbob) == 0x000004, "Wrong size on MordhauGameUserSettings_SetHeadbob");
static_assert(offsetof(MordhauGameUserSettings_SetHeadbob, NewHeadbob) == 0x000000, "Member 'MordhauGameUserSettings_SetHeadbob::NewHeadbob' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetHideDefaultLoadouts
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetHideDefaultLoadouts final
{
public:
	int32                                         NewHideDefaultLoadouts;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetHideDefaultLoadouts) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetHideDefaultLoadouts");
static_assert(sizeof(MordhauGameUserSettings_SetHideDefaultLoadouts) == 0x000004, "Wrong size on MordhauGameUserSettings_SetHideDefaultLoadouts");
static_assert(offsetof(MordhauGameUserSettings_SetHideDefaultLoadouts, NewHideDefaultLoadouts) == 0x000000, "Member 'MordhauGameUserSettings_SetHideDefaultLoadouts::NewHideDefaultLoadouts' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetHideHUD
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetHideHUD final
{
public:
	int32                                         NewHideHUD;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetHideHUD) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetHideHUD");
static_assert(sizeof(MordhauGameUserSettings_SetHideHUD) == 0x000004, "Wrong size on MordhauGameUserSettings_SetHideHUD");
static_assert(offsetof(MordhauGameUserSettings_SetHideHUD, NewHideHUD) == 0x000000, "Member 'MordhauGameUserSettings_SetHideHUD::NewHideHUD' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetHideWatermark
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetHideWatermark final
{
public:
	int32                                         NewHideWatermark;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetHideWatermark) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetHideWatermark");
static_assert(sizeof(MordhauGameUserSettings_SetHideWatermark) == 0x000004, "Wrong size on MordhauGameUserSettings_SetHideWatermark");
static_assert(offsetof(MordhauGameUserSettings_SetHideWatermark, NewHideWatermark) == 0x000000, "Member 'MordhauGameUserSettings_SetHideWatermark::NewHideWatermark' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetIndirectCapsuleShadows
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetIndirectCapsuleShadows final
{
public:
	int32                                         NewShadows;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetIndirectCapsuleShadows) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetIndirectCapsuleShadows");
static_assert(sizeof(MordhauGameUserSettings_SetIndirectCapsuleShadows) == 0x000004, "Wrong size on MordhauGameUserSettings_SetIndirectCapsuleShadows");
static_assert(offsetof(MordhauGameUserSettings_SetIndirectCapsuleShadows, NewShadows) == 0x000000, "Member 'MordhauGameUserSettings_SetIndirectCapsuleShadows::NewShadows' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetInstrumentsVolume
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetInstrumentsVolume final
{
public:
	float                                         NewVolume;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetInstrumentsVolume) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetInstrumentsVolume");
static_assert(sizeof(MordhauGameUserSettings_SetInstrumentsVolume) == 0x000004, "Wrong size on MordhauGameUserSettings_SetInstrumentsVolume");
static_assert(offsetof(MordhauGameUserSettings_SetInstrumentsVolume, NewVolume) == 0x000000, "Member 'MordhauGameUserSettings_SetInstrumentsVolume::NewVolume' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetLanguage
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameUserSettings_SetLanguage final
{
public:
	class FString                                 NewLanguage;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetLanguage) == 0x000008, "Wrong alignment on MordhauGameUserSettings_SetLanguage");
static_assert(sizeof(MordhauGameUserSettings_SetLanguage) == 0x000010, "Wrong size on MordhauGameUserSettings_SetLanguage");
static_assert(offsetof(MordhauGameUserSettings_SetLanguage, NewLanguage) == 0x000000, "Member 'MordhauGameUserSettings_SetLanguage::NewLanguage' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetLensFlares
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetLensFlares final
{
public:
	int32                                         NewLensFlares;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetLensFlares) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetLensFlares");
static_assert(sizeof(MordhauGameUserSettings_SetLensFlares) == 0x000004, "Wrong size on MordhauGameUserSettings_SetLensFlares");
static_assert(offsetof(MordhauGameUserSettings_SetLensFlares, NewLensFlares) == 0x000000, "Member 'MordhauGameUserSettings_SetLensFlares::NewLensFlares' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetMasterVolume
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetMasterVolume final
{
public:
	float                                         NewVolume;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetMasterVolume) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetMasterVolume");
static_assert(sizeof(MordhauGameUserSettings_SetMasterVolume) == 0x000004, "Wrong size on MordhauGameUserSettings_SetMasterVolume");
static_assert(offsetof(MordhauGameUserSettings_SetMasterVolume, NewVolume) == 0x000000, "Member 'MordhauGameUserSettings_SetMasterVolume::NewVolume' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetMaxRagdolls
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetMaxRagdolls final
{
public:
	int32                                         NewMax;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetMaxRagdolls) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetMaxRagdolls");
static_assert(sizeof(MordhauGameUserSettings_SetMaxRagdolls) == 0x000004, "Wrong size on MordhauGameUserSettings_SetMaxRagdolls");
static_assert(offsetof(MordhauGameUserSettings_SetMaxRagdolls, NewMax) == 0x000000, "Member 'MordhauGameUserSettings_SetMaxRagdolls::NewMax' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetMotionBlur
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetMotionBlur final
{
public:
	float                                         NewMotionBlur;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetMotionBlur) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetMotionBlur");
static_assert(sizeof(MordhauGameUserSettings_SetMotionBlur) == 0x000004, "Wrong size on MordhauGameUserSettings_SetMotionBlur");
static_assert(offsetof(MordhauGameUserSettings_SetMotionBlur, NewMotionBlur) == 0x000000, "Member 'MordhauGameUserSettings_SetMotionBlur::NewMotionBlur' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetMouseSmoothing
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetMouseSmoothing final
{
public:
	float                                         NewSmoothing;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetMouseSmoothing) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetMouseSmoothing");
static_assert(sizeof(MordhauGameUserSettings_SetMouseSmoothing) == 0x000004, "Wrong size on MordhauGameUserSettings_SetMouseSmoothing");
static_assert(offsetof(MordhauGameUserSettings_SetMouseSmoothing, NewSmoothing) == 0x000000, "Member 'MordhauGameUserSettings_SetMouseSmoothing::NewSmoothing' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetMovementHeadbob
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetMovementHeadbob final
{
public:
	float                                         NewMovementHeadbob;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetMovementHeadbob) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetMovementHeadbob");
static_assert(sizeof(MordhauGameUserSettings_SetMovementHeadbob) == 0x000004, "Wrong size on MordhauGameUserSettings_SetMovementHeadbob");
static_assert(offsetof(MordhauGameUserSettings_SetMovementHeadbob, NewMovementHeadbob) == 0x000000, "Member 'MordhauGameUserSettings_SetMovementHeadbob::NewMovementHeadbob' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetMusicVolume
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetMusicVolume final
{
public:
	float                                         NewVolume;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetMusicVolume) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetMusicVolume");
static_assert(sizeof(MordhauGameUserSettings_SetMusicVolume) == 0x000004, "Wrong size on MordhauGameUserSettings_SetMusicVolume");
static_assert(offsetof(MordhauGameUserSettings_SetMusicVolume, NewVolume) == 0x000000, "Member 'MordhauGameUserSettings_SetMusicVolume::NewVolume' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetNoTeamColorsOnGear
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetNoTeamColorsOnGear final
{
public:
	int32                                         NewNoTeamColorsOnGear;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetNoTeamColorsOnGear) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetNoTeamColorsOnGear");
static_assert(sizeof(MordhauGameUserSettings_SetNoTeamColorsOnGear) == 0x000004, "Wrong size on MordhauGameUserSettings_SetNoTeamColorsOnGear");
static_assert(offsetof(MordhauGameUserSettings_SetNoTeamColorsOnGear, NewNoTeamColorsOnGear) == 0x000000, "Member 'MordhauGameUserSettings_SetNoTeamColorsOnGear::NewNoTeamColorsOnGear' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetNvidiaReflex
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetNvidiaReflex final
{
public:
	int32                                         NewNvidiaReflex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetNvidiaReflex) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetNvidiaReflex");
static_assert(sizeof(MordhauGameUserSettings_SetNvidiaReflex) == 0x000004, "Wrong size on MordhauGameUserSettings_SetNvidiaReflex");
static_assert(offsetof(MordhauGameUserSettings_SetNvidiaReflex, NewNvidiaReflex) == 0x000000, "Member 'MordhauGameUserSettings_SetNvidiaReflex::NewNvidiaReflex' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetPlatformSpecific
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_SetPlatformSpecific final
{
public:
	EPlatformSpecific                             NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetPlatformSpecific) == 0x000001, "Wrong alignment on MordhauGameUserSettings_SetPlatformSpecific");
static_assert(sizeof(MordhauGameUserSettings_SetPlatformSpecific) == 0x000001, "Wrong size on MordhauGameUserSettings_SetPlatformSpecific");
static_assert(offsetof(MordhauGameUserSettings_SetPlatformSpecific, NewValue) == 0x000000, "Member 'MordhauGameUserSettings_SetPlatformSpecific::NewValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetProfanityFilter
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetProfanityFilter final
{
public:
	int32                                         NewProfanityFilter;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetProfanityFilter) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetProfanityFilter");
static_assert(sizeof(MordhauGameUserSettings_SetProfanityFilter) == 0x000004, "Wrong size on MordhauGameUserSettings_SetProfanityFilter");
static_assert(offsetof(MordhauGameUserSettings_SetProfanityFilter, NewProfanityFilter) == 0x000000, "Member 'MordhauGameUserSettings_SetProfanityFilter::NewProfanityFilter' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetQuickSpawn
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetQuickSpawn final
{
public:
	int32                                         NewQuickSpawn;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetQuickSpawn) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetQuickSpawn");
static_assert(sizeof(MordhauGameUserSettings_SetQuickSpawn) == 0x000004, "Wrong size on MordhauGameUserSettings_SetQuickSpawn");
static_assert(offsetof(MordhauGameUserSettings_SetQuickSpawn, NewQuickSpawn) == 0x000000, "Member 'MordhauGameUserSettings_SetQuickSpawn::NewQuickSpawn' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetRagdollFidelity
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetRagdollFidelity final
{
public:
	int32                                         NewFidelity;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetRagdollFidelity) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetRagdollFidelity");
static_assert(sizeof(MordhauGameUserSettings_SetRagdollFidelity) == 0x000004, "Wrong size on MordhauGameUserSettings_SetRagdollFidelity");
static_assert(offsetof(MordhauGameUserSettings_SetRagdollFidelity, NewFidelity) == 0x000000, "Member 'MordhauGameUserSettings_SetRagdollFidelity::NewFidelity' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetRagdollStayTime
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetRagdollStayTime final
{
public:
	float                                         NewTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetRagdollStayTime) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetRagdollStayTime");
static_assert(sizeof(MordhauGameUserSettings_SetRagdollStayTime) == 0x000004, "Wrong size on MordhauGameUserSettings_SetRagdollStayTime");
static_assert(offsetof(MordhauGameUserSettings_SetRagdollStayTime, NewTime) == 0x000000, "Member 'MordhauGameUserSettings_SetRagdollStayTime::NewTime' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetRangedSensitivity
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetRangedSensitivity final
{
public:
	float                                         NewRangedSensitivity;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetRangedSensitivity) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetRangedSensitivity");
static_assert(sizeof(MordhauGameUserSettings_SetRangedSensitivity) == 0x000004, "Wrong size on MordhauGameUserSettings_SetRangedSensitivity");
static_assert(offsetof(MordhauGameUserSettings_SetRangedSensitivity, NewRangedSensitivity) == 0x000000, "Member 'MordhauGameUserSettings_SetRangedSensitivity::NewRangedSensitivity' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetRankedMatchmakingGameModes
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameUserSettings_SetRankedMatchmakingGameModes final
{
public:
	TArray<class FString>                         NewGameModes;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetRankedMatchmakingGameModes) == 0x000008, "Wrong alignment on MordhauGameUserSettings_SetRankedMatchmakingGameModes");
static_assert(sizeof(MordhauGameUserSettings_SetRankedMatchmakingGameModes) == 0x000010, "Wrong size on MordhauGameUserSettings_SetRankedMatchmakingGameModes");
static_assert(offsetof(MordhauGameUserSettings_SetRankedMatchmakingGameModes, NewGameModes) == 0x000000, "Member 'MordhauGameUserSettings_SetRankedMatchmakingGameModes::NewGameModes' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetRankedMatchmakingRegion
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_SetRankedMatchmakingRegion final
{
public:
	EServerRegion                                 NewRegion;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetRankedMatchmakingRegion) == 0x000001, "Wrong alignment on MordhauGameUserSettings_SetRankedMatchmakingRegion");
static_assert(sizeof(MordhauGameUserSettings_SetRankedMatchmakingRegion) == 0x000001, "Wrong size on MordhauGameUserSettings_SetRankedMatchmakingRegion");
static_assert(offsetof(MordhauGameUserSettings_SetRankedMatchmakingRegion, NewRegion) == 0x000000, "Member 'MordhauGameUserSettings_SetRankedMatchmakingRegion::NewRegion' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetRecentServers
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameUserSettings_SetRecentServers final
{
public:
	TArray<class FString>                         NewRecentServers;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetRecentServers) == 0x000008, "Wrong alignment on MordhauGameUserSettings_SetRecentServers");
static_assert(sizeof(MordhauGameUserSettings_SetRecentServers) == 0x000010, "Wrong size on MordhauGameUserSettings_SetRecentServers");
static_assert(offsetof(MordhauGameUserSettings_SetRecentServers, NewRecentServers) == 0x000000, "Member 'MordhauGameUserSettings_SetRecentServers::NewRecentServers' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetScreenPercentage
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetScreenPercentage final
{
public:
	float                                         NewScreenPercentage;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetScreenPercentage) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetScreenPercentage");
static_assert(sizeof(MordhauGameUserSettings_SetScreenPercentage) == 0x000004, "Wrong size on MordhauGameUserSettings_SetScreenPercentage");
static_assert(offsetof(MordhauGameUserSettings_SetScreenPercentage, NewScreenPercentage) == 0x000000, "Member 'MordhauGameUserSettings_SetScreenPercentage::NewScreenPercentage' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetScreenSpaceReflections
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetScreenSpaceReflections final
{
public:
	int32                                         NewScreenSpaceReflections;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetScreenSpaceReflections) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetScreenSpaceReflections");
static_assert(sizeof(MordhauGameUserSettings_SetScreenSpaceReflections) == 0x000004, "Wrong size on MordhauGameUserSettings_SetScreenSpaceReflections");
static_assert(offsetof(MordhauGameUserSettings_SetScreenSpaceReflections, NewScreenSpaceReflections) == 0x000000, "Member 'MordhauGameUserSettings_SetScreenSpaceReflections::NewScreenSpaceReflections' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetSelectedGameModePlayerCounts
// 0x0020 (0x0020 - 0x0000)
struct MordhauGameUserSettings_SetSelectedGameModePlayerCounts final
{
public:
	class FString                                 GameMode;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 SelectedPlayerCounts;                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetSelectedGameModePlayerCounts) == 0x000008, "Wrong alignment on MordhauGameUserSettings_SetSelectedGameModePlayerCounts");
static_assert(sizeof(MordhauGameUserSettings_SetSelectedGameModePlayerCounts) == 0x000020, "Wrong size on MordhauGameUserSettings_SetSelectedGameModePlayerCounts");
static_assert(offsetof(MordhauGameUserSettings_SetSelectedGameModePlayerCounts, GameMode) == 0x000000, "Member 'MordhauGameUserSettings_SetSelectedGameModePlayerCounts::GameMode' has a wrong offset!");
static_assert(offsetof(MordhauGameUserSettings_SetSelectedGameModePlayerCounts, SelectedPlayerCounts) == 0x000010, "Member 'MordhauGameUserSettings_SetSelectedGameModePlayerCounts::SelectedPlayerCounts' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetServerBrowserGameMode
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameUserSettings_SetServerBrowserGameMode final
{
public:
	class FString                                 NewGameMode;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetServerBrowserGameMode) == 0x000008, "Wrong alignment on MordhauGameUserSettings_SetServerBrowserGameMode");
static_assert(sizeof(MordhauGameUserSettings_SetServerBrowserGameMode) == 0x000010, "Wrong size on MordhauGameUserSettings_SetServerBrowserGameMode");
static_assert(offsetof(MordhauGameUserSettings_SetServerBrowserGameMode, NewGameMode) == 0x000000, "Member 'MordhauGameUserSettings_SetServerBrowserGameMode::NewGameMode' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetServerBrowserHasPlayers
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_SetServerBrowserHasPlayers final
{
public:
	bool                                          bNewHasPlayers;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetServerBrowserHasPlayers) == 0x000001, "Wrong alignment on MordhauGameUserSettings_SetServerBrowserHasPlayers");
static_assert(sizeof(MordhauGameUserSettings_SetServerBrowserHasPlayers) == 0x000001, "Wrong size on MordhauGameUserSettings_SetServerBrowserHasPlayers");
static_assert(offsetof(MordhauGameUserSettings_SetServerBrowserHasPlayers, bNewHasPlayers) == 0x000000, "Member 'MordhauGameUserSettings_SetServerBrowserHasPlayers::bNewHasPlayers' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetServerBrowserIsConsoleServer
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_SetServerBrowserIsConsoleServer final
{
public:
	bool                                          bNewIsOfficial;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetServerBrowserIsConsoleServer) == 0x000001, "Wrong alignment on MordhauGameUserSettings_SetServerBrowserIsConsoleServer");
static_assert(sizeof(MordhauGameUserSettings_SetServerBrowserIsConsoleServer) == 0x000001, "Wrong size on MordhauGameUserSettings_SetServerBrowserIsConsoleServer");
static_assert(offsetof(MordhauGameUserSettings_SetServerBrowserIsConsoleServer, bNewIsOfficial) == 0x000000, "Member 'MordhauGameUserSettings_SetServerBrowserIsConsoleServer::bNewIsOfficial' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetServerBrowserIsOfficial
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_SetServerBrowserIsOfficial final
{
public:
	bool                                          bNewIsOfficial;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetServerBrowserIsOfficial) == 0x000001, "Wrong alignment on MordhauGameUserSettings_SetServerBrowserIsOfficial");
static_assert(sizeof(MordhauGameUserSettings_SetServerBrowserIsOfficial) == 0x000001, "Wrong size on MordhauGameUserSettings_SetServerBrowserIsOfficial");
static_assert(offsetof(MordhauGameUserSettings_SetServerBrowserIsOfficial, bNewIsOfficial) == 0x000000, "Member 'MordhauGameUserSettings_SetServerBrowserIsOfficial::bNewIsOfficial' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetServerBrowserMaxPing
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetServerBrowserMaxPing final
{
public:
	int32                                         NewMaxPing;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetServerBrowserMaxPing) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetServerBrowserMaxPing");
static_assert(sizeof(MordhauGameUserSettings_SetServerBrowserMaxPing) == 0x000004, "Wrong size on MordhauGameUserSettings_SetServerBrowserMaxPing");
static_assert(offsetof(MordhauGameUserSettings_SetServerBrowserMaxPing, NewMaxPing) == 0x000000, "Member 'MordhauGameUserSettings_SetServerBrowserMaxPing::NewMaxPing' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetServerBrowserNoPassword
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_SetServerBrowserNoPassword final
{
public:
	bool                                          bNewNoPassword;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetServerBrowserNoPassword) == 0x000001, "Wrong alignment on MordhauGameUserSettings_SetServerBrowserNoPassword");
static_assert(sizeof(MordhauGameUserSettings_SetServerBrowserNoPassword) == 0x000001, "Wrong size on MordhauGameUserSettings_SetServerBrowserNoPassword");
static_assert(offsetof(MordhauGameUserSettings_SetServerBrowserNoPassword, bNewNoPassword) == 0x000000, "Member 'MordhauGameUserSettings_SetServerBrowserNoPassword::bNewNoPassword' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetServerBrowserNotFull
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_SetServerBrowserNotFull final
{
public:
	bool                                          bNewNotFull;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetServerBrowserNotFull) == 0x000001, "Wrong alignment on MordhauGameUserSettings_SetServerBrowserNotFull");
static_assert(sizeof(MordhauGameUserSettings_SetServerBrowserNotFull) == 0x000001, "Wrong size on MordhauGameUserSettings_SetServerBrowserNotFull");
static_assert(offsetof(MordhauGameUserSettings_SetServerBrowserNotFull, bNewNotFull) == 0x000000, "Member 'MordhauGameUserSettings_SetServerBrowserNotFull::bNewNotFull' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetServerBrowserServerName
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameUserSettings_SetServerBrowserServerName final
{
public:
	class FString                                 NewServerName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetServerBrowserServerName) == 0x000008, "Wrong alignment on MordhauGameUserSettings_SetServerBrowserServerName");
static_assert(sizeof(MordhauGameUserSettings_SetServerBrowserServerName) == 0x000010, "Wrong size on MordhauGameUserSettings_SetServerBrowserServerName");
static_assert(offsetof(MordhauGameUserSettings_SetServerBrowserServerName, NewServerName) == 0x000000, "Member 'MordhauGameUserSettings_SetServerBrowserServerName::NewServerName' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetServerBrowserSortType
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameUserSettings_SetServerBrowserSortType final
{
public:
	class FString                                 NewSortType;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetServerBrowserSortType) == 0x000008, "Wrong alignment on MordhauGameUserSettings_SetServerBrowserSortType");
static_assert(sizeof(MordhauGameUserSettings_SetServerBrowserSortType) == 0x000010, "Wrong size on MordhauGameUserSettings_SetServerBrowserSortType");
static_assert(offsetof(MordhauGameUserSettings_SetServerBrowserSortType, NewSortType) == 0x000000, "Member 'MordhauGameUserSettings_SetServerBrowserSortType::NewSortType' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetServerFilter
// 0x0002 (0x0002 - 0x0000)
struct MordhauGameUserSettings_SetServerFilter final
{
public:
	EServerFilterCategories                       FilterCategory;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetServerFilter) == 0x000001, "Wrong alignment on MordhauGameUserSettings_SetServerFilter");
static_assert(sizeof(MordhauGameUserSettings_SetServerFilter) == 0x000002, "Wrong size on MordhauGameUserSettings_SetServerFilter");
static_assert(offsetof(MordhauGameUserSettings_SetServerFilter, FilterCategory) == 0x000000, "Member 'MordhauGameUserSettings_SetServerFilter::FilterCategory' has a wrong offset!");
static_assert(offsetof(MordhauGameUserSettings_SetServerFilter, Value) == 0x000001, "Member 'MordhauGameUserSettings_SetServerFilter::Value' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetShowAmmo
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetShowAmmo final
{
public:
	int32                                         NewShowAmmo;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetShowAmmo) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetShowAmmo");
static_assert(sizeof(MordhauGameUserSettings_SetShowAmmo) == 0x000004, "Wrong size on MordhauGameUserSettings_SetShowAmmo");
static_assert(offsetof(MordhauGameUserSettings_SetShowAmmo, NewShowAmmo) == 0x000000, "Member 'MordhauGameUserSettings_SetShowAmmo::NewShowAmmo' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetShowAnnouncements
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetShowAnnouncements final
{
public:
	int32                                         NewShowAnnouncements;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetShowAnnouncements) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetShowAnnouncements");
static_assert(sizeof(MordhauGameUserSettings_SetShowAnnouncements) == 0x000004, "Wrong size on MordhauGameUserSettings_SetShowAnnouncements");
static_assert(offsetof(MordhauGameUserSettings_SetShowAnnouncements, NewShowAnnouncements) == 0x000000, "Member 'MordhauGameUserSettings_SetShowAnnouncements::NewShowAnnouncements' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetShowChatBox
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetShowChatBox final
{
public:
	int32                                         NewShowChatBox;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetShowChatBox) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetShowChatBox");
static_assert(sizeof(MordhauGameUserSettings_SetShowChatBox) == 0x000004, "Wrong size on MordhauGameUserSettings_SetShowChatBox");
static_assert(offsetof(MordhauGameUserSettings_SetShowChatBox, NewShowChatBox) == 0x000000, "Member 'MordhauGameUserSettings_SetShowChatBox::NewShowChatBox' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetShowCombatHints
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetShowCombatHints final
{
public:
	int32                                         NewShowCombatHints;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetShowCombatHints) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetShowCombatHints");
static_assert(sizeof(MordhauGameUserSettings_SetShowCombatHints) == 0x000004, "Wrong size on MordhauGameUserSettings_SetShowCombatHints");
static_assert(offsetof(MordhauGameUserSettings_SetShowCombatHints, NewShowCombatHints) == 0x000000, "Member 'MordhauGameUserSettings_SetShowCombatHints::NewShowCombatHints' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetShowEmotesMenu
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetShowEmotesMenu final
{
public:
	int32                                         NewEmotesMenu;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetShowEmotesMenu) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetShowEmotesMenu");
static_assert(sizeof(MordhauGameUserSettings_SetShowEmotesMenu) == 0x000004, "Wrong size on MordhauGameUserSettings_SetShowEmotesMenu");
static_assert(offsetof(MordhauGameUserSettings_SetShowEmotesMenu, NewEmotesMenu) == 0x000000, "Member 'MordhauGameUserSettings_SetShowEmotesMenu::NewEmotesMenu' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetShowEquipment
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetShowEquipment final
{
public:
	int32                                         NewShowEquipment;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetShowEquipment) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetShowEquipment");
static_assert(sizeof(MordhauGameUserSettings_SetShowEquipment) == 0x000004, "Wrong size on MordhauGameUserSettings_SetShowEquipment");
static_assert(offsetof(MordhauGameUserSettings_SetShowEquipment, NewShowEquipment) == 0x000000, "Member 'MordhauGameUserSettings_SetShowEquipment::NewShowEquipment' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetShowHitMarker
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetShowHitMarker final
{
public:
	int32                                         NewShowHitMarker;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetShowHitMarker) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetShowHitMarker");
static_assert(sizeof(MordhauGameUserSettings_SetShowHitMarker) == 0x000004, "Wrong size on MordhauGameUserSettings_SetShowHitMarker");
static_assert(offsetof(MordhauGameUserSettings_SetShowHitMarker, NewShowHitMarker) == 0x000000, "Member 'MordhauGameUserSettings_SetShowHitMarker::NewShowHitMarker' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetShowKilledBy
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetShowKilledBy final
{
public:
	int32                                         NewShowKilledBy;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetShowKilledBy) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetShowKilledBy");
static_assert(sizeof(MordhauGameUserSettings_SetShowKilledBy) == 0x000004, "Wrong size on MordhauGameUserSettings_SetShowKilledBy");
static_assert(offsetof(MordhauGameUserSettings_SetShowKilledBy, NewShowKilledBy) == 0x000000, "Member 'MordhauGameUserSettings_SetShowKilledBy::NewShowKilledBy' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetShowKillFeed
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetShowKillFeed final
{
public:
	int32                                         NewShowKillFeed;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetShowKillFeed) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetShowKillFeed");
static_assert(sizeof(MordhauGameUserSettings_SetShowKillFeed) == 0x000004, "Wrong size on MordhauGameUserSettings_SetShowKillFeed");
static_assert(offsetof(MordhauGameUserSettings_SetShowKillFeed, NewShowKillFeed) == 0x000000, "Member 'MordhauGameUserSettings_SetShowKillFeed::NewShowKillFeed' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetShowMatchmakingDebug
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetShowMatchmakingDebug final
{
public:
	int32                                         NewShowMatchmakingDebug;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetShowMatchmakingDebug) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetShowMatchmakingDebug");
static_assert(sizeof(MordhauGameUserSettings_SetShowMatchmakingDebug) == 0x000004, "Wrong size on MordhauGameUserSettings_SetShowMatchmakingDebug");
static_assert(offsetof(MordhauGameUserSettings_SetShowMatchmakingDebug, NewShowMatchmakingDebug) == 0x000000, "Member 'MordhauGameUserSettings_SetShowMatchmakingDebug::NewShowMatchmakingDebug' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetShowObjectives
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetShowObjectives final
{
public:
	int32                                         NewShowObjectives;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetShowObjectives) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetShowObjectives");
static_assert(sizeof(MordhauGameUserSettings_SetShowObjectives) == 0x000004, "Wrong size on MordhauGameUserSettings_SetShowObjectives");
static_assert(offsetof(MordhauGameUserSettings_SetShowObjectives, NewShowObjectives) == 0x000000, "Member 'MordhauGameUserSettings_SetShowObjectives::NewShowObjectives' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetShowObservedDelay
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetShowObservedDelay final
{
public:
	int32                                         NewShowObservedDelay;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetShowObservedDelay) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetShowObservedDelay");
static_assert(sizeof(MordhauGameUserSettings_SetShowObservedDelay) == 0x000004, "Wrong size on MordhauGameUserSettings_SetShowObservedDelay");
static_assert(offsetof(MordhauGameUserSettings_SetShowObservedDelay, NewShowObservedDelay) == 0x000000, "Member 'MordhauGameUserSettings_SetShowObservedDelay::NewShowObservedDelay' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetShowScoreFeed
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetShowScoreFeed final
{
public:
	int32                                         NewShowScoreFeed;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetShowScoreFeed) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetShowScoreFeed");
static_assert(sizeof(MordhauGameUserSettings_SetShowScoreFeed) == 0x000004, "Wrong size on MordhauGameUserSettings_SetShowScoreFeed");
static_assert(offsetof(MordhauGameUserSettings_SetShowScoreFeed, NewShowScoreFeed) == 0x000000, "Member 'MordhauGameUserSettings_SetShowScoreFeed::NewShowScoreFeed' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetShowServerInScoreboard
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetShowServerInScoreboard final
{
public:
	int32                                         NewShowServerInScoreboard;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetShowServerInScoreboard) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetShowServerInScoreboard");
static_assert(sizeof(MordhauGameUserSettings_SetShowServerInScoreboard) == 0x000004, "Wrong size on MordhauGameUserSettings_SetShowServerInScoreboard");
static_assert(offsetof(MordhauGameUserSettings_SetShowServerInScoreboard, NewShowServerInScoreboard) == 0x000000, "Member 'MordhauGameUserSettings_SetShowServerInScoreboard::NewShowServerInScoreboard' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetShowSpawnInfo
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetShowSpawnInfo final
{
public:
	int32                                         NewShowSpawnInfo;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetShowSpawnInfo) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetShowSpawnInfo");
static_assert(sizeof(MordhauGameUserSettings_SetShowSpawnInfo) == 0x000004, "Wrong size on MordhauGameUserSettings_SetShowSpawnInfo");
static_assert(offsetof(MordhauGameUserSettings_SetShowSpawnInfo, NewShowSpawnInfo) == 0x000000, "Member 'MordhauGameUserSettings_SetShowSpawnInfo::NewShowSpawnInfo' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetShowStatusBar
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetShowStatusBar final
{
public:
	int32                                         NewShowStatusBar;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetShowStatusBar) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetShowStatusBar");
static_assert(sizeof(MordhauGameUserSettings_SetShowStatusBar) == 0x000004, "Wrong size on MordhauGameUserSettings_SetShowStatusBar");
static_assert(offsetof(MordhauGameUserSettings_SetShowStatusBar, NewShowStatusBar) == 0x000000, "Member 'MordhauGameUserSettings_SetShowStatusBar::NewShowStatusBar' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetShowTargetInfo
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetShowTargetInfo final
{
public:
	int32                                         NewShowTargetInfo;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetShowTargetInfo) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetShowTargetInfo");
static_assert(sizeof(MordhauGameUserSettings_SetShowTargetInfo) == 0x000004, "Wrong size on MordhauGameUserSettings_SetShowTargetInfo");
static_assert(offsetof(MordhauGameUserSettings_SetShowTargetInfo, NewShowTargetInfo) == 0x000000, "Member 'MordhauGameUserSettings_SetShowTargetInfo::NewShowTargetInfo' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetShowTips
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetShowTips final
{
public:
	int32                                         NewShowTips;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetShowTips) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetShowTips");
static_assert(sizeof(MordhauGameUserSettings_SetShowTips) == 0x000004, "Wrong size on MordhauGameUserSettings_SetShowTips");
static_assert(offsetof(MordhauGameUserSettings_SetShowTips, NewShowTips) == 0x000000, "Member 'MordhauGameUserSettings_SetShowTips::NewShowTips' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetThirdPersonDeathcamera
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetThirdPersonDeathcamera final
{
public:
	int32                                         NewThirdPersonDeathCamera;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetThirdPersonDeathcamera) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetThirdPersonDeathcamera");
static_assert(sizeof(MordhauGameUserSettings_SetThirdPersonDeathcamera) == 0x000004, "Wrong size on MordhauGameUserSettings_SetThirdPersonDeathcamera");
static_assert(offsetof(MordhauGameUserSettings_SetThirdPersonDeathcamera, NewThirdPersonDeathCamera) == 0x000000, "Member 'MordhauGameUserSettings_SetThirdPersonDeathcamera::NewThirdPersonDeathCamera' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetTracersStayTime
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetTracersStayTime final
{
public:
	float                                         NewStayTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetTracersStayTime) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetTracersStayTime");
static_assert(sizeof(MordhauGameUserSettings_SetTracersStayTime) == 0x000004, "Wrong size on MordhauGameUserSettings_SetTracersStayTime");
static_assert(offsetof(MordhauGameUserSettings_SetTracersStayTime, NewStayTime) == 0x000000, "Member 'MordhauGameUserSettings_SetTracersStayTime::NewStayTime' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetVideoVolume
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetVideoVolume final
{
public:
	float                                         NewVolume;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetVideoVolume) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetVideoVolume");
static_assert(sizeof(MordhauGameUserSettings_SetVideoVolume) == 0x000004, "Wrong size on MordhauGameUserSettings_SetVideoVolume");
static_assert(offsetof(MordhauGameUserSettings_SetVideoVolume, NewVolume) == 0x000000, "Member 'MordhauGameUserSettings_SetVideoVolume::NewVolume' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.SetVoiceVolume
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_SetVoiceVolume final
{
public:
	float                                         NewVolume;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_SetVoiceVolume) == 0x000004, "Wrong alignment on MordhauGameUserSettings_SetVoiceVolume");
static_assert(sizeof(MordhauGameUserSettings_SetVoiceVolume) == 0x000004, "Wrong size on MordhauGameUserSettings_SetVoiceVolume");
static_assert(offsetof(MordhauGameUserSettings_SetVoiceVolume, NewVolume) == 0x000000, "Member 'MordhauGameUserSettings_SetVoiceVolume::NewVolume' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ApplyTextureQualityUsingTextureGroups
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_ApplyTextureQualityUsingTextureGroups final
{
public:
	int32                                         Quality;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ApplyTextureQualityUsingTextureGroups) == 0x000004, "Wrong alignment on MordhauGameUserSettings_ApplyTextureQualityUsingTextureGroups");
static_assert(sizeof(MordhauGameUserSettings_ApplyTextureQualityUsingTextureGroups) == 0x000004, "Wrong size on MordhauGameUserSettings_ApplyTextureQualityUsingTextureGroups");
static_assert(offsetof(MordhauGameUserSettings_ApplyTextureQualityUsingTextureGroups, Quality) == 0x000000, "Member 'MordhauGameUserSettings_ApplyTextureQualityUsingTextureGroups::Quality' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetActualCrosshairType
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetActualCrosshairType final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetActualCrosshairType) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetActualCrosshairType");
static_assert(sizeof(MordhauGameUserSettings_GetActualCrosshairType) == 0x000004, "Wrong size on MordhauGameUserSettings_GetActualCrosshairType");
static_assert(offsetof(MordhauGameUserSettings_GetActualCrosshairType, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetActualCrosshairType::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetAmbientOcclusion
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetAmbientOcclusion final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetAmbientOcclusion) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetAmbientOcclusion");
static_assert(sizeof(MordhauGameUserSettings_GetAmbientOcclusion) == 0x000004, "Wrong size on MordhauGameUserSettings_GetAmbientOcclusion");
static_assert(offsetof(MordhauGameUserSettings_GetAmbientOcclusion, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetAmbientOcclusion::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetAntiAliasing
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetAntiAliasing final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetAntiAliasing) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetAntiAliasing");
static_assert(sizeof(MordhauGameUserSettings_GetAntiAliasing) == 0x000004, "Wrong size on MordhauGameUserSettings_GetAntiAliasing");
static_assert(offsetof(MordhauGameUserSettings_GetAntiAliasing, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetAntiAliasing::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetAvailableLanguages
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameUserSettings_GetAvailableLanguages final
{
public:
	TArray<class FString>                         AvailableLanguages_0;                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetAvailableLanguages) == 0x000008, "Wrong alignment on MordhauGameUserSettings_GetAvailableLanguages");
static_assert(sizeof(MordhauGameUserSettings_GetAvailableLanguages) == 0x000010, "Wrong size on MordhauGameUserSettings_GetAvailableLanguages");
static_assert(offsetof(MordhauGameUserSettings_GetAvailableLanguages, AvailableLanguages_0) == 0x000000, "Member 'MordhauGameUserSettings_GetAvailableLanguages::AvailableLanguages_0' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetBloom
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetBloom final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetBloom) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetBloom");
static_assert(sizeof(MordhauGameUserSettings_GetBloom) == 0x000004, "Wrong size on MordhauGameUserSettings_GetBloom");
static_assert(offsetof(MordhauGameUserSettings_GetBloom, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetBloom::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetBloomLimits
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameUserSettings_GetBloomLimits final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetBloomLimits) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetBloomLimits");
static_assert(sizeof(MordhauGameUserSettings_GetBloomLimits) == 0x000008, "Wrong size on MordhauGameUserSettings_GetBloomLimits");
static_assert(offsetof(MordhauGameUserSettings_GetBloomLimits, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetBloomLimits::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetCameraDistance
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetCameraDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetCameraDistance) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetCameraDistance");
static_assert(sizeof(MordhauGameUserSettings_GetCameraDistance) == 0x000004, "Wrong size on MordhauGameUserSettings_GetCameraDistance");
static_assert(offsetof(MordhauGameUserSettings_GetCameraDistance, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetCameraDistance::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetCameraDistanceLimits
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameUserSettings_GetCameraDistanceLimits final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetCameraDistanceLimits) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetCameraDistanceLimits");
static_assert(sizeof(MordhauGameUserSettings_GetCameraDistanceLimits) == 0x000008, "Wrong size on MordhauGameUserSettings_GetCameraDistanceLimits");
static_assert(offsetof(MordhauGameUserSettings_GetCameraDistanceLimits, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetCameraDistanceLimits::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetCasualMatchmakingGameModes
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameUserSettings_GetCasualMatchmakingGameModes final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetCasualMatchmakingGameModes) == 0x000008, "Wrong alignment on MordhauGameUserSettings_GetCasualMatchmakingGameModes");
static_assert(sizeof(MordhauGameUserSettings_GetCasualMatchmakingGameModes) == 0x000010, "Wrong size on MordhauGameUserSettings_GetCasualMatchmakingGameModes");
static_assert(offsetof(MordhauGameUserSettings_GetCasualMatchmakingGameModes, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetCasualMatchmakingGameModes::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetCasualMatchmakingRegion
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_GetCasualMatchmakingRegion final
{
public:
	EServerRegion                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetCasualMatchmakingRegion) == 0x000001, "Wrong alignment on MordhauGameUserSettings_GetCasualMatchmakingRegion");
static_assert(sizeof(MordhauGameUserSettings_GetCasualMatchmakingRegion) == 0x000001, "Wrong size on MordhauGameUserSettings_GetCasualMatchmakingRegion");
static_assert(offsetof(MordhauGameUserSettings_GetCasualMatchmakingRegion, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetCasualMatchmakingRegion::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetCharacterCloth
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetCharacterCloth final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetCharacterCloth) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetCharacterCloth");
static_assert(sizeof(MordhauGameUserSettings_GetCharacterCloth) == 0x000004, "Wrong size on MordhauGameUserSettings_GetCharacterCloth");
static_assert(offsetof(MordhauGameUserSettings_GetCharacterCloth, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetCharacterCloth::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetCharacterFidelity
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetCharacterFidelity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetCharacterFidelity) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetCharacterFidelity");
static_assert(sizeof(MordhauGameUserSettings_GetCharacterFidelity) == 0x000004, "Wrong size on MordhauGameUserSettings_GetCharacterFidelity");
static_assert(offsetof(MordhauGameUserSettings_GetCharacterFidelity, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetCharacterFidelity::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetCombatHeadbob
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetCombatHeadbob final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetCombatHeadbob) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetCombatHeadbob");
static_assert(sizeof(MordhauGameUserSettings_GetCombatHeadbob) == 0x000004, "Wrong size on MordhauGameUserSettings_GetCombatHeadbob");
static_assert(offsetof(MordhauGameUserSettings_GetCombatHeadbob, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetCombatHeadbob::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetCombatHeadbobLimits
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameUserSettings_GetCombatHeadbobLimits final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetCombatHeadbobLimits) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetCombatHeadbobLimits");
static_assert(sizeof(MordhauGameUserSettings_GetCombatHeadbobLimits) == 0x000008, "Wrong size on MordhauGameUserSettings_GetCombatHeadbobLimits");
static_assert(offsetof(MordhauGameUserSettings_GetCombatHeadbobLimits, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetCombatHeadbobLimits::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetCrosshairType
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetCrosshairType final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetCrosshairType) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetCrosshairType");
static_assert(sizeof(MordhauGameUserSettings_GetCrosshairType) == 0x000004, "Wrong size on MordhauGameUserSettings_GetCrosshairType");
static_assert(offsetof(MordhauGameUserSettings_GetCrosshairType, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetCrosshairType::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetCurrentBloom
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetCurrentBloom final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetCurrentBloom) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetCurrentBloom");
static_assert(sizeof(MordhauGameUserSettings_GetCurrentBloom) == 0x000004, "Wrong size on MordhauGameUserSettings_GetCurrentBloom");
static_assert(offsetof(MordhauGameUserSettings_GetCurrentBloom, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetCurrentBloom::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetCurrentGamma
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetCurrentGamma final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetCurrentGamma) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetCurrentGamma");
static_assert(sizeof(MordhauGameUserSettings_GetCurrentGamma) == 0x000004, "Wrong size on MordhauGameUserSettings_GetCurrentGamma");
static_assert(offsetof(MordhauGameUserSettings_GetCurrentGamma, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetCurrentGamma::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetCurrentMotionBlur
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetCurrentMotionBlur final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetCurrentMotionBlur) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetCurrentMotionBlur");
static_assert(sizeof(MordhauGameUserSettings_GetCurrentMotionBlur) == 0x000004, "Wrong size on MordhauGameUserSettings_GetCurrentMotionBlur");
static_assert(offsetof(MordhauGameUserSettings_GetCurrentMotionBlur, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetCurrentMotionBlur::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetDrawTracers
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetDrawTracers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetDrawTracers) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetDrawTracers");
static_assert(sizeof(MordhauGameUserSettings_GetDrawTracers) == 0x000004, "Wrong size on MordhauGameUserSettings_GetDrawTracers");
static_assert(offsetof(MordhauGameUserSettings_GetDrawTracers, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetDrawTracers::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetEffectsVolume
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetEffectsVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetEffectsVolume) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetEffectsVolume");
static_assert(sizeof(MordhauGameUserSettings_GetEffectsVolume) == 0x000004, "Wrong size on MordhauGameUserSettings_GetEffectsVolume");
static_assert(offsetof(MordhauGameUserSettings_GetEffectsVolume, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetEffectsVolume::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetFavoriteServers
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameUserSettings_GetFavoriteServers final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetFavoriteServers) == 0x000008, "Wrong alignment on MordhauGameUserSettings_GetFavoriteServers");
static_assert(sizeof(MordhauGameUserSettings_GetFavoriteServers) == 0x000010, "Wrong size on MordhauGameUserSettings_GetFavoriteServers");
static_assert(offsetof(MordhauGameUserSettings_GetFavoriteServers, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetFavoriteServers::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetFieldOfView
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetFieldOfView final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetFieldOfView) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetFieldOfView");
static_assert(sizeof(MordhauGameUserSettings_GetFieldOfView) == 0x000004, "Wrong size on MordhauGameUserSettings_GetFieldOfView");
static_assert(offsetof(MordhauGameUserSettings_GetFieldOfView, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetFieldOfView::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetFieldOfViewLimits
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameUserSettings_GetFieldOfViewLimits final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetFieldOfViewLimits) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetFieldOfViewLimits");
static_assert(sizeof(MordhauGameUserSettings_GetFieldOfViewLimits) == 0x000008, "Wrong size on MordhauGameUserSettings_GetFieldOfViewLimits");
static_assert(offsetof(MordhauGameUserSettings_GetFieldOfViewLimits, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetFieldOfViewLimits::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetForceFeedbackEnabled
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_GetForceFeedbackEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetForceFeedbackEnabled) == 0x000001, "Wrong alignment on MordhauGameUserSettings_GetForceFeedbackEnabled");
static_assert(sizeof(MordhauGameUserSettings_GetForceFeedbackEnabled) == 0x000001, "Wrong size on MordhauGameUserSettings_GetForceFeedbackEnabled");
static_assert(offsetof(MordhauGameUserSettings_GetForceFeedbackEnabled, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetForceFeedbackEnabled::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetFrameRateLimits
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameUserSettings_GetFrameRateLimits final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetFrameRateLimits) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetFrameRateLimits");
static_assert(sizeof(MordhauGameUserSettings_GetFrameRateLimits) == 0x000008, "Wrong size on MordhauGameUserSettings_GetFrameRateLimits");
static_assert(offsetof(MordhauGameUserSettings_GetFrameRateLimits, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetFrameRateLimits::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetFriendlyMarkers
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetFriendlyMarkers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetFriendlyMarkers) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetFriendlyMarkers");
static_assert(sizeof(MordhauGameUserSettings_GetFriendlyMarkers) == 0x000004, "Wrong size on MordhauGameUserSettings_GetFriendlyMarkers");
static_assert(offsetof(MordhauGameUserSettings_GetFriendlyMarkers, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetFriendlyMarkers::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetGamma
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetGamma final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetGamma) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetGamma");
static_assert(sizeof(MordhauGameUserSettings_GetGamma) == 0x000004, "Wrong size on MordhauGameUserSettings_GetGamma");
static_assert(offsetof(MordhauGameUserSettings_GetGamma, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetGamma::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetGammaLimits
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameUserSettings_GetGammaLimits final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetGammaLimits) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetGammaLimits");
static_assert(sizeof(MordhauGameUserSettings_GetGammaLimits) == 0x000008, "Wrong size on MordhauGameUserSettings_GetGammaLimits");
static_assert(offsetof(MordhauGameUserSettings_GetGammaLimits, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetGammaLimits::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetGore
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetGore final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetGore) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetGore");
static_assert(sizeof(MordhauGameUserSettings_GetGore) == 0x000004, "Wrong size on MordhauGameUserSettings_GetGore");
static_assert(offsetof(MordhauGameUserSettings_GetGore, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetGore::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetHeadbob
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetHeadbob final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetHeadbob) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetHeadbob");
static_assert(sizeof(MordhauGameUserSettings_GetHeadbob) == 0x000004, "Wrong size on MordhauGameUserSettings_GetHeadbob");
static_assert(offsetof(MordhauGameUserSettings_GetHeadbob, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetHeadbob::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetHeadbobLimits
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameUserSettings_GetHeadbobLimits final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetHeadbobLimits) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetHeadbobLimits");
static_assert(sizeof(MordhauGameUserSettings_GetHeadbobLimits) == 0x000008, "Wrong size on MordhauGameUserSettings_GetHeadbobLimits");
static_assert(offsetof(MordhauGameUserSettings_GetHeadbobLimits, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetHeadbobLimits::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetHideDefaultLoadouts
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetHideDefaultLoadouts final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetHideDefaultLoadouts) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetHideDefaultLoadouts");
static_assert(sizeof(MordhauGameUserSettings_GetHideDefaultLoadouts) == 0x000004, "Wrong size on MordhauGameUserSettings_GetHideDefaultLoadouts");
static_assert(offsetof(MordhauGameUserSettings_GetHideDefaultLoadouts, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetHideDefaultLoadouts::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetHideHUD
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetHideHUD final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetHideHUD) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetHideHUD");
static_assert(sizeof(MordhauGameUserSettings_GetHideHUD) == 0x000004, "Wrong size on MordhauGameUserSettings_GetHideHUD");
static_assert(offsetof(MordhauGameUserSettings_GetHideHUD, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetHideHUD::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetHideWatermark
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetHideWatermark final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetHideWatermark) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetHideWatermark");
static_assert(sizeof(MordhauGameUserSettings_GetHideWatermark) == 0x000004, "Wrong size on MordhauGameUserSettings_GetHideWatermark");
static_assert(offsetof(MordhauGameUserSettings_GetHideWatermark, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetHideWatermark::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetIndirectCapsuleShadows
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetIndirectCapsuleShadows final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetIndirectCapsuleShadows) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetIndirectCapsuleShadows");
static_assert(sizeof(MordhauGameUserSettings_GetIndirectCapsuleShadows) == 0x000004, "Wrong size on MordhauGameUserSettings_GetIndirectCapsuleShadows");
static_assert(offsetof(MordhauGameUserSettings_GetIndirectCapsuleShadows, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetIndirectCapsuleShadows::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetInstrumentsVolume
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetInstrumentsVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetInstrumentsVolume) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetInstrumentsVolume");
static_assert(sizeof(MordhauGameUserSettings_GetInstrumentsVolume) == 0x000004, "Wrong size on MordhauGameUserSettings_GetInstrumentsVolume");
static_assert(offsetof(MordhauGameUserSettings_GetInstrumentsVolume, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetInstrumentsVolume::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetLanguage
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameUserSettings_GetLanguage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetLanguage) == 0x000008, "Wrong alignment on MordhauGameUserSettings_GetLanguage");
static_assert(sizeof(MordhauGameUserSettings_GetLanguage) == 0x000010, "Wrong size on MordhauGameUserSettings_GetLanguage");
static_assert(offsetof(MordhauGameUserSettings_GetLanguage, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetLanguage::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetLensFlares
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetLensFlares final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetLensFlares) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetLensFlares");
static_assert(sizeof(MordhauGameUserSettings_GetLensFlares) == 0x000004, "Wrong size on MordhauGameUserSettings_GetLensFlares");
static_assert(offsetof(MordhauGameUserSettings_GetLensFlares, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetLensFlares::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetMasterVolume
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetMasterVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetMasterVolume) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetMasterVolume");
static_assert(sizeof(MordhauGameUserSettings_GetMasterVolume) == 0x000004, "Wrong size on MordhauGameUserSettings_GetMasterVolume");
static_assert(offsetof(MordhauGameUserSettings_GetMasterVolume, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetMasterVolume::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetMaxRagdolls
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetMaxRagdolls final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetMaxRagdolls) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetMaxRagdolls");
static_assert(sizeof(MordhauGameUserSettings_GetMaxRagdolls) == 0x000004, "Wrong size on MordhauGameUserSettings_GetMaxRagdolls");
static_assert(offsetof(MordhauGameUserSettings_GetMaxRagdolls, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetMaxRagdolls::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetMaxRagdollsLimit
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetMaxRagdollsLimit final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetMaxRagdollsLimit) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetMaxRagdollsLimit");
static_assert(sizeof(MordhauGameUserSettings_GetMaxRagdollsLimit) == 0x000004, "Wrong size on MordhauGameUserSettings_GetMaxRagdollsLimit");
static_assert(offsetof(MordhauGameUserSettings_GetMaxRagdollsLimit, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetMaxRagdollsLimit::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetMotionBlur
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetMotionBlur final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetMotionBlur) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetMotionBlur");
static_assert(sizeof(MordhauGameUserSettings_GetMotionBlur) == 0x000004, "Wrong size on MordhauGameUserSettings_GetMotionBlur");
static_assert(offsetof(MordhauGameUserSettings_GetMotionBlur, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetMotionBlur::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetMotionBlurLimits
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameUserSettings_GetMotionBlurLimits final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetMotionBlurLimits) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetMotionBlurLimits");
static_assert(sizeof(MordhauGameUserSettings_GetMotionBlurLimits) == 0x000008, "Wrong size on MordhauGameUserSettings_GetMotionBlurLimits");
static_assert(offsetof(MordhauGameUserSettings_GetMotionBlurLimits, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetMotionBlurLimits::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetMouseSmoothing
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetMouseSmoothing final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetMouseSmoothing) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetMouseSmoothing");
static_assert(sizeof(MordhauGameUserSettings_GetMouseSmoothing) == 0x000004, "Wrong size on MordhauGameUserSettings_GetMouseSmoothing");
static_assert(offsetof(MordhauGameUserSettings_GetMouseSmoothing, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetMouseSmoothing::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetMouseSmoothingLimits
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameUserSettings_GetMouseSmoothingLimits final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetMouseSmoothingLimits) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetMouseSmoothingLimits");
static_assert(sizeof(MordhauGameUserSettings_GetMouseSmoothingLimits) == 0x000008, "Wrong size on MordhauGameUserSettings_GetMouseSmoothingLimits");
static_assert(offsetof(MordhauGameUserSettings_GetMouseSmoothingLimits, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetMouseSmoothingLimits::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetMovementHeadbob
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetMovementHeadbob final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetMovementHeadbob) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetMovementHeadbob");
static_assert(sizeof(MordhauGameUserSettings_GetMovementHeadbob) == 0x000004, "Wrong size on MordhauGameUserSettings_GetMovementHeadbob");
static_assert(offsetof(MordhauGameUserSettings_GetMovementHeadbob, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetMovementHeadbob::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetMovementHeadbobLimits
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameUserSettings_GetMovementHeadbobLimits final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetMovementHeadbobLimits) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetMovementHeadbobLimits");
static_assert(sizeof(MordhauGameUserSettings_GetMovementHeadbobLimits) == 0x000008, "Wrong size on MordhauGameUserSettings_GetMovementHeadbobLimits");
static_assert(offsetof(MordhauGameUserSettings_GetMovementHeadbobLimits, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetMovementHeadbobLimits::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetMusicVolume
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetMusicVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetMusicVolume) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetMusicVolume");
static_assert(sizeof(MordhauGameUserSettings_GetMusicVolume) == 0x000004, "Wrong size on MordhauGameUserSettings_GetMusicVolume");
static_assert(offsetof(MordhauGameUserSettings_GetMusicVolume, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetMusicVolume::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetNoTeamColorsOnGear
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetNoTeamColorsOnGear final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetNoTeamColorsOnGear) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetNoTeamColorsOnGear");
static_assert(sizeof(MordhauGameUserSettings_GetNoTeamColorsOnGear) == 0x000004, "Wrong size on MordhauGameUserSettings_GetNoTeamColorsOnGear");
static_assert(offsetof(MordhauGameUserSettings_GetNoTeamColorsOnGear, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetNoTeamColorsOnGear::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetNvidiaReflex
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetNvidiaReflex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetNvidiaReflex) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetNvidiaReflex");
static_assert(sizeof(MordhauGameUserSettings_GetNvidiaReflex) == 0x000004, "Wrong size on MordhauGameUserSettings_GetNvidiaReflex");
static_assert(offsetof(MordhauGameUserSettings_GetNvidiaReflex, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetNvidiaReflex::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetProfanityFilter
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetProfanityFilter final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetProfanityFilter) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetProfanityFilter");
static_assert(sizeof(MordhauGameUserSettings_GetProfanityFilter) == 0x000004, "Wrong size on MordhauGameUserSettings_GetProfanityFilter");
static_assert(offsetof(MordhauGameUserSettings_GetProfanityFilter, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetProfanityFilter::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetQuickSpawn
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetQuickSpawn final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetQuickSpawn) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetQuickSpawn");
static_assert(sizeof(MordhauGameUserSettings_GetQuickSpawn) == 0x000004, "Wrong size on MordhauGameUserSettings_GetQuickSpawn");
static_assert(offsetof(MordhauGameUserSettings_GetQuickSpawn, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetQuickSpawn::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetRagdollFidelity
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetRagdollFidelity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetRagdollFidelity) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetRagdollFidelity");
static_assert(sizeof(MordhauGameUserSettings_GetRagdollFidelity) == 0x000004, "Wrong size on MordhauGameUserSettings_GetRagdollFidelity");
static_assert(offsetof(MordhauGameUserSettings_GetRagdollFidelity, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetRagdollFidelity::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetRagdollStayTime
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetRagdollStayTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetRagdollStayTime) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetRagdollStayTime");
static_assert(sizeof(MordhauGameUserSettings_GetRagdollStayTime) == 0x000004, "Wrong size on MordhauGameUserSettings_GetRagdollStayTime");
static_assert(offsetof(MordhauGameUserSettings_GetRagdollStayTime, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetRagdollStayTime::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetRagdollStayTimeLimit
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetRagdollStayTimeLimit final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetRagdollStayTimeLimit) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetRagdollStayTimeLimit");
static_assert(sizeof(MordhauGameUserSettings_GetRagdollStayTimeLimit) == 0x000004, "Wrong size on MordhauGameUserSettings_GetRagdollStayTimeLimit");
static_assert(offsetof(MordhauGameUserSettings_GetRagdollStayTimeLimit, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetRagdollStayTimeLimit::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetRangedSensitivity
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetRangedSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetRangedSensitivity) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetRangedSensitivity");
static_assert(sizeof(MordhauGameUserSettings_GetRangedSensitivity) == 0x000004, "Wrong size on MordhauGameUserSettings_GetRangedSensitivity");
static_assert(offsetof(MordhauGameUserSettings_GetRangedSensitivity, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetRangedSensitivity::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetRangedSensitivityLimits
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameUserSettings_GetRangedSensitivityLimits final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetRangedSensitivityLimits) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetRangedSensitivityLimits");
static_assert(sizeof(MordhauGameUserSettings_GetRangedSensitivityLimits) == 0x000008, "Wrong size on MordhauGameUserSettings_GetRangedSensitivityLimits");
static_assert(offsetof(MordhauGameUserSettings_GetRangedSensitivityLimits, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetRangedSensitivityLimits::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetRankedMatchmakingGameModes
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameUserSettings_GetRankedMatchmakingGameModes final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetRankedMatchmakingGameModes) == 0x000008, "Wrong alignment on MordhauGameUserSettings_GetRankedMatchmakingGameModes");
static_assert(sizeof(MordhauGameUserSettings_GetRankedMatchmakingGameModes) == 0x000010, "Wrong size on MordhauGameUserSettings_GetRankedMatchmakingGameModes");
static_assert(offsetof(MordhauGameUserSettings_GetRankedMatchmakingGameModes, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetRankedMatchmakingGameModes::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetRankedMatchmakingRegion
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_GetRankedMatchmakingRegion final
{
public:
	EServerRegion                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetRankedMatchmakingRegion) == 0x000001, "Wrong alignment on MordhauGameUserSettings_GetRankedMatchmakingRegion");
static_assert(sizeof(MordhauGameUserSettings_GetRankedMatchmakingRegion) == 0x000001, "Wrong size on MordhauGameUserSettings_GetRankedMatchmakingRegion");
static_assert(offsetof(MordhauGameUserSettings_GetRankedMatchmakingRegion, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetRankedMatchmakingRegion::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetRecentServers
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameUserSettings_GetRecentServers final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetRecentServers) == 0x000008, "Wrong alignment on MordhauGameUserSettings_GetRecentServers");
static_assert(sizeof(MordhauGameUserSettings_GetRecentServers) == 0x000010, "Wrong size on MordhauGameUserSettings_GetRecentServers");
static_assert(offsetof(MordhauGameUserSettings_GetRecentServers, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetRecentServers::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetScreenPercentage
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetScreenPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetScreenPercentage) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetScreenPercentage");
static_assert(sizeof(MordhauGameUserSettings_GetScreenPercentage) == 0x000004, "Wrong size on MordhauGameUserSettings_GetScreenPercentage");
static_assert(offsetof(MordhauGameUserSettings_GetScreenPercentage, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetScreenPercentage::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetScreenPercentageLimits
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameUserSettings_GetScreenPercentageLimits final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetScreenPercentageLimits) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetScreenPercentageLimits");
static_assert(sizeof(MordhauGameUserSettings_GetScreenPercentageLimits) == 0x000008, "Wrong size on MordhauGameUserSettings_GetScreenPercentageLimits");
static_assert(offsetof(MordhauGameUserSettings_GetScreenPercentageLimits, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetScreenPercentageLimits::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetScreenSpaceReflections
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetScreenSpaceReflections final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetScreenSpaceReflections) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetScreenSpaceReflections");
static_assert(sizeof(MordhauGameUserSettings_GetScreenSpaceReflections) == 0x000004, "Wrong size on MordhauGameUserSettings_GetScreenSpaceReflections");
static_assert(offsetof(MordhauGameUserSettings_GetScreenSpaceReflections, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetScreenSpaceReflections::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetServerBrowserGameMode
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameUserSettings_GetServerBrowserGameMode final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetServerBrowserGameMode) == 0x000008, "Wrong alignment on MordhauGameUserSettings_GetServerBrowserGameMode");
static_assert(sizeof(MordhauGameUserSettings_GetServerBrowserGameMode) == 0x000010, "Wrong size on MordhauGameUserSettings_GetServerBrowserGameMode");
static_assert(offsetof(MordhauGameUserSettings_GetServerBrowserGameMode, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetServerBrowserGameMode::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetServerBrowserHasPlayers
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_GetServerBrowserHasPlayers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetServerBrowserHasPlayers) == 0x000001, "Wrong alignment on MordhauGameUserSettings_GetServerBrowserHasPlayers");
static_assert(sizeof(MordhauGameUserSettings_GetServerBrowserHasPlayers) == 0x000001, "Wrong size on MordhauGameUserSettings_GetServerBrowserHasPlayers");
static_assert(offsetof(MordhauGameUserSettings_GetServerBrowserHasPlayers, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetServerBrowserHasPlayers::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetServerBrowserIsConsoleServer
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_GetServerBrowserIsConsoleServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetServerBrowserIsConsoleServer) == 0x000001, "Wrong alignment on MordhauGameUserSettings_GetServerBrowserIsConsoleServer");
static_assert(sizeof(MordhauGameUserSettings_GetServerBrowserIsConsoleServer) == 0x000001, "Wrong size on MordhauGameUserSettings_GetServerBrowserIsConsoleServer");
static_assert(offsetof(MordhauGameUserSettings_GetServerBrowserIsConsoleServer, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetServerBrowserIsConsoleServer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetServerBrowserIsOfficial
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_GetServerBrowserIsOfficial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetServerBrowserIsOfficial) == 0x000001, "Wrong alignment on MordhauGameUserSettings_GetServerBrowserIsOfficial");
static_assert(sizeof(MordhauGameUserSettings_GetServerBrowserIsOfficial) == 0x000001, "Wrong size on MordhauGameUserSettings_GetServerBrowserIsOfficial");
static_assert(offsetof(MordhauGameUserSettings_GetServerBrowserIsOfficial, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetServerBrowserIsOfficial::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetServerBrowserMaxPing
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetServerBrowserMaxPing final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetServerBrowserMaxPing) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetServerBrowserMaxPing");
static_assert(sizeof(MordhauGameUserSettings_GetServerBrowserMaxPing) == 0x000004, "Wrong size on MordhauGameUserSettings_GetServerBrowserMaxPing");
static_assert(offsetof(MordhauGameUserSettings_GetServerBrowserMaxPing, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetServerBrowserMaxPing::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetServerBrowserNoPassword
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_GetServerBrowserNoPassword final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetServerBrowserNoPassword) == 0x000001, "Wrong alignment on MordhauGameUserSettings_GetServerBrowserNoPassword");
static_assert(sizeof(MordhauGameUserSettings_GetServerBrowserNoPassword) == 0x000001, "Wrong size on MordhauGameUserSettings_GetServerBrowserNoPassword");
static_assert(offsetof(MordhauGameUserSettings_GetServerBrowserNoPassword, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetServerBrowserNoPassword::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetServerBrowserNotFull
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_GetServerBrowserNotFull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetServerBrowserNotFull) == 0x000001, "Wrong alignment on MordhauGameUserSettings_GetServerBrowserNotFull");
static_assert(sizeof(MordhauGameUserSettings_GetServerBrowserNotFull) == 0x000001, "Wrong size on MordhauGameUserSettings_GetServerBrowserNotFull");
static_assert(offsetof(MordhauGameUserSettings_GetServerBrowserNotFull, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetServerBrowserNotFull::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetServerBrowserServerName
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameUserSettings_GetServerBrowserServerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetServerBrowserServerName) == 0x000008, "Wrong alignment on MordhauGameUserSettings_GetServerBrowserServerName");
static_assert(sizeof(MordhauGameUserSettings_GetServerBrowserServerName) == 0x000010, "Wrong size on MordhauGameUserSettings_GetServerBrowserServerName");
static_assert(offsetof(MordhauGameUserSettings_GetServerBrowserServerName, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetServerBrowserServerName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetServerBrowserSortType
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameUserSettings_GetServerBrowserSortType final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetServerBrowserSortType) == 0x000008, "Wrong alignment on MordhauGameUserSettings_GetServerBrowserSortType");
static_assert(sizeof(MordhauGameUserSettings_GetServerBrowserSortType) == 0x000010, "Wrong size on MordhauGameUserSettings_GetServerBrowserSortType");
static_assert(offsetof(MordhauGameUserSettings_GetServerBrowserSortType, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetServerBrowserSortType::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetShowAmmo
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetShowAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetShowAmmo) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetShowAmmo");
static_assert(sizeof(MordhauGameUserSettings_GetShowAmmo) == 0x000004, "Wrong size on MordhauGameUserSettings_GetShowAmmo");
static_assert(offsetof(MordhauGameUserSettings_GetShowAmmo, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetShowAmmo::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetShowAnnouncements
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetShowAnnouncements final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetShowAnnouncements) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetShowAnnouncements");
static_assert(sizeof(MordhauGameUserSettings_GetShowAnnouncements) == 0x000004, "Wrong size on MordhauGameUserSettings_GetShowAnnouncements");
static_assert(offsetof(MordhauGameUserSettings_GetShowAnnouncements, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetShowAnnouncements::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetShowChatBox
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetShowChatBox final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetShowChatBox) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetShowChatBox");
static_assert(sizeof(MordhauGameUserSettings_GetShowChatBox) == 0x000004, "Wrong size on MordhauGameUserSettings_GetShowChatBox");
static_assert(offsetof(MordhauGameUserSettings_GetShowChatBox, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetShowChatBox::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetShowCombatHints
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetShowCombatHints final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetShowCombatHints) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetShowCombatHints");
static_assert(sizeof(MordhauGameUserSettings_GetShowCombatHints) == 0x000004, "Wrong size on MordhauGameUserSettings_GetShowCombatHints");
static_assert(offsetof(MordhauGameUserSettings_GetShowCombatHints, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetShowCombatHints::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetShowEmotesMenu
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetShowEmotesMenu final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetShowEmotesMenu) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetShowEmotesMenu");
static_assert(sizeof(MordhauGameUserSettings_GetShowEmotesMenu) == 0x000004, "Wrong size on MordhauGameUserSettings_GetShowEmotesMenu");
static_assert(offsetof(MordhauGameUserSettings_GetShowEmotesMenu, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetShowEmotesMenu::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetShowEquipment
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetShowEquipment final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetShowEquipment) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetShowEquipment");
static_assert(sizeof(MordhauGameUserSettings_GetShowEquipment) == 0x000004, "Wrong size on MordhauGameUserSettings_GetShowEquipment");
static_assert(offsetof(MordhauGameUserSettings_GetShowEquipment, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetShowEquipment::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetShowHitMarker
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetShowHitMarker final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetShowHitMarker) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetShowHitMarker");
static_assert(sizeof(MordhauGameUserSettings_GetShowHitMarker) == 0x000004, "Wrong size on MordhauGameUserSettings_GetShowHitMarker");
static_assert(offsetof(MordhauGameUserSettings_GetShowHitMarker, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetShowHitMarker::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetShowKilledBy
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetShowKilledBy final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetShowKilledBy) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetShowKilledBy");
static_assert(sizeof(MordhauGameUserSettings_GetShowKilledBy) == 0x000004, "Wrong size on MordhauGameUserSettings_GetShowKilledBy");
static_assert(offsetof(MordhauGameUserSettings_GetShowKilledBy, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetShowKilledBy::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetShowKillFeed
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetShowKillFeed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetShowKillFeed) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetShowKillFeed");
static_assert(sizeof(MordhauGameUserSettings_GetShowKillFeed) == 0x000004, "Wrong size on MordhauGameUserSettings_GetShowKillFeed");
static_assert(offsetof(MordhauGameUserSettings_GetShowKillFeed, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetShowKillFeed::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetShowObjectives
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetShowObjectives final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetShowObjectives) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetShowObjectives");
static_assert(sizeof(MordhauGameUserSettings_GetShowObjectives) == 0x000004, "Wrong size on MordhauGameUserSettings_GetShowObjectives");
static_assert(offsetof(MordhauGameUserSettings_GetShowObjectives, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetShowObjectives::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetShowObservedDelay
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetShowObservedDelay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetShowObservedDelay) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetShowObservedDelay");
static_assert(sizeof(MordhauGameUserSettings_GetShowObservedDelay) == 0x000004, "Wrong size on MordhauGameUserSettings_GetShowObservedDelay");
static_assert(offsetof(MordhauGameUserSettings_GetShowObservedDelay, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetShowObservedDelay::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetShowScoreFeed
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetShowScoreFeed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetShowScoreFeed) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetShowScoreFeed");
static_assert(sizeof(MordhauGameUserSettings_GetShowScoreFeed) == 0x000004, "Wrong size on MordhauGameUserSettings_GetShowScoreFeed");
static_assert(offsetof(MordhauGameUserSettings_GetShowScoreFeed, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetShowScoreFeed::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetShowServerInScoreboard
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetShowServerInScoreboard final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetShowServerInScoreboard) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetShowServerInScoreboard");
static_assert(sizeof(MordhauGameUserSettings_GetShowServerInScoreboard) == 0x000004, "Wrong size on MordhauGameUserSettings_GetShowServerInScoreboard");
static_assert(offsetof(MordhauGameUserSettings_GetShowServerInScoreboard, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetShowServerInScoreboard::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetShowSpawnInfo
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetShowSpawnInfo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetShowSpawnInfo) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetShowSpawnInfo");
static_assert(sizeof(MordhauGameUserSettings_GetShowSpawnInfo) == 0x000004, "Wrong size on MordhauGameUserSettings_GetShowSpawnInfo");
static_assert(offsetof(MordhauGameUserSettings_GetShowSpawnInfo, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetShowSpawnInfo::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetShowStatusBar
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetShowStatusBar final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetShowStatusBar) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetShowStatusBar");
static_assert(sizeof(MordhauGameUserSettings_GetShowStatusBar) == 0x000004, "Wrong size on MordhauGameUserSettings_GetShowStatusBar");
static_assert(offsetof(MordhauGameUserSettings_GetShowStatusBar, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetShowStatusBar::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetShowTargetInfo
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetShowTargetInfo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetShowTargetInfo) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetShowTargetInfo");
static_assert(sizeof(MordhauGameUserSettings_GetShowTargetInfo) == 0x000004, "Wrong size on MordhauGameUserSettings_GetShowTargetInfo");
static_assert(offsetof(MordhauGameUserSettings_GetShowTargetInfo, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetShowTargetInfo::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetShowTips
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetShowTips final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetShowTips) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetShowTips");
static_assert(sizeof(MordhauGameUserSettings_GetShowTips) == 0x000004, "Wrong size on MordhauGameUserSettings_GetShowTips");
static_assert(offsetof(MordhauGameUserSettings_GetShowTips, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetShowTips::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetThirdPersonDeathCamera
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetThirdPersonDeathCamera final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetThirdPersonDeathCamera) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetThirdPersonDeathCamera");
static_assert(sizeof(MordhauGameUserSettings_GetThirdPersonDeathCamera) == 0x000004, "Wrong size on MordhauGameUserSettings_GetThirdPersonDeathCamera");
static_assert(offsetof(MordhauGameUserSettings_GetThirdPersonDeathCamera, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetThirdPersonDeathCamera::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetTracersStayTime
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetTracersStayTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetTracersStayTime) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetTracersStayTime");
static_assert(sizeof(MordhauGameUserSettings_GetTracersStayTime) == 0x000004, "Wrong size on MordhauGameUserSettings_GetTracersStayTime");
static_assert(offsetof(MordhauGameUserSettings_GetTracersStayTime, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetTracersStayTime::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetTracersStayTimeLimits
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameUserSettings_GetTracersStayTimeLimits final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetTracersStayTimeLimits) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetTracersStayTimeLimits");
static_assert(sizeof(MordhauGameUserSettings_GetTracersStayTimeLimits) == 0x000008, "Wrong size on MordhauGameUserSettings_GetTracersStayTimeLimits");
static_assert(offsetof(MordhauGameUserSettings_GetTracersStayTimeLimits, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetTracersStayTimeLimits::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetVideoVolume
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetVideoVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetVideoVolume) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetVideoVolume");
static_assert(sizeof(MordhauGameUserSettings_GetVideoVolume) == 0x000004, "Wrong size on MordhauGameUserSettings_GetVideoVolume");
static_assert(offsetof(MordhauGameUserSettings_GetVideoVolume, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetVideoVolume::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetVoiceVolume
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameUserSettings_GetVoiceVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetVoiceVolume) == 0x000004, "Wrong alignment on MordhauGameUserSettings_GetVoiceVolume");
static_assert(sizeof(MordhauGameUserSettings_GetVoiceVolume) == 0x000004, "Wrong size on MordhauGameUserSettings_GetVoiceVolume");
static_assert(offsetof(MordhauGameUserSettings_GetVoiceVolume, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetVoiceVolume::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.GetXboxSandboxID
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameUserSettings_GetXboxSandboxID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_GetXboxSandboxID) == 0x000008, "Wrong alignment on MordhauGameUserSettings_GetXboxSandboxID");
static_assert(sizeof(MordhauGameUserSettings_GetXboxSandboxID) == 0x000010, "Wrong size on MordhauGameUserSettings_GetXboxSandboxID");
static_assert(offsetof(MordhauGameUserSettings_GetXboxSandboxID, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_GetXboxSandboxID::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ShouldDrawTracers
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_ShouldDrawTracers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ShouldDrawTracers) == 0x000001, "Wrong alignment on MordhauGameUserSettings_ShouldDrawTracers");
static_assert(sizeof(MordhauGameUserSettings_ShouldDrawTracers) == 0x000001, "Wrong size on MordhauGameUserSettings_ShouldDrawTracers");
static_assert(offsetof(MordhauGameUserSettings_ShouldDrawTracers, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_ShouldDrawTracers::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ShouldQuickSpawn
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_ShouldQuickSpawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ShouldQuickSpawn) == 0x000001, "Wrong alignment on MordhauGameUserSettings_ShouldQuickSpawn");
static_assert(sizeof(MordhauGameUserSettings_ShouldQuickSpawn) == 0x000001, "Wrong size on MordhauGameUserSettings_ShouldQuickSpawn");
static_assert(offsetof(MordhauGameUserSettings_ShouldQuickSpawn, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_ShouldQuickSpawn::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ShouldShowAmmo
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_ShouldShowAmmo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ShouldShowAmmo) == 0x000001, "Wrong alignment on MordhauGameUserSettings_ShouldShowAmmo");
static_assert(sizeof(MordhauGameUserSettings_ShouldShowAmmo) == 0x000001, "Wrong size on MordhauGameUserSettings_ShouldShowAmmo");
static_assert(offsetof(MordhauGameUserSettings_ShouldShowAmmo, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_ShouldShowAmmo::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ShouldShowAnnouncements
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_ShouldShowAnnouncements final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ShouldShowAnnouncements) == 0x000001, "Wrong alignment on MordhauGameUserSettings_ShouldShowAnnouncements");
static_assert(sizeof(MordhauGameUserSettings_ShouldShowAnnouncements) == 0x000001, "Wrong size on MordhauGameUserSettings_ShouldShowAnnouncements");
static_assert(offsetof(MordhauGameUserSettings_ShouldShowAnnouncements, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_ShouldShowAnnouncements::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ShouldShowBlood
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_ShouldShowBlood final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ShouldShowBlood) == 0x000001, "Wrong alignment on MordhauGameUserSettings_ShouldShowBlood");
static_assert(sizeof(MordhauGameUserSettings_ShouldShowBlood) == 0x000001, "Wrong size on MordhauGameUserSettings_ShouldShowBlood");
static_assert(offsetof(MordhauGameUserSettings_ShouldShowBlood, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_ShouldShowBlood::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ShouldShowChatBox
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_ShouldShowChatBox final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ShouldShowChatBox) == 0x000001, "Wrong alignment on MordhauGameUserSettings_ShouldShowChatBox");
static_assert(sizeof(MordhauGameUserSettings_ShouldShowChatBox) == 0x000001, "Wrong size on MordhauGameUserSettings_ShouldShowChatBox");
static_assert(offsetof(MordhauGameUserSettings_ShouldShowChatBox, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_ShouldShowChatBox::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ShouldShowEmotesMenu
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_ShouldShowEmotesMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ShouldShowEmotesMenu) == 0x000001, "Wrong alignment on MordhauGameUserSettings_ShouldShowEmotesMenu");
static_assert(sizeof(MordhauGameUserSettings_ShouldShowEmotesMenu) == 0x000001, "Wrong size on MordhauGameUserSettings_ShouldShowEmotesMenu");
static_assert(offsetof(MordhauGameUserSettings_ShouldShowEmotesMenu, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_ShouldShowEmotesMenu::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ShouldShowEquipment
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_ShouldShowEquipment final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ShouldShowEquipment) == 0x000001, "Wrong alignment on MordhauGameUserSettings_ShouldShowEquipment");
static_assert(sizeof(MordhauGameUserSettings_ShouldShowEquipment) == 0x000001, "Wrong size on MordhauGameUserSettings_ShouldShowEquipment");
static_assert(offsetof(MordhauGameUserSettings_ShouldShowEquipment, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_ShouldShowEquipment::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ShouldShowHitMarker
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_ShouldShowHitMarker final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ShouldShowHitMarker) == 0x000001, "Wrong alignment on MordhauGameUserSettings_ShouldShowHitMarker");
static_assert(sizeof(MordhauGameUserSettings_ShouldShowHitMarker) == 0x000001, "Wrong size on MordhauGameUserSettings_ShouldShowHitMarker");
static_assert(offsetof(MordhauGameUserSettings_ShouldShowHitMarker, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_ShouldShowHitMarker::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ShouldShowHUD
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_ShouldShowHUD final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ShouldShowHUD) == 0x000001, "Wrong alignment on MordhauGameUserSettings_ShouldShowHUD");
static_assert(sizeof(MordhauGameUserSettings_ShouldShowHUD) == 0x000001, "Wrong size on MordhauGameUserSettings_ShouldShowHUD");
static_assert(offsetof(MordhauGameUserSettings_ShouldShowHUD, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_ShouldShowHUD::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ShouldShowKilledBy
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_ShouldShowKilledBy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ShouldShowKilledBy) == 0x000001, "Wrong alignment on MordhauGameUserSettings_ShouldShowKilledBy");
static_assert(sizeof(MordhauGameUserSettings_ShouldShowKilledBy) == 0x000001, "Wrong size on MordhauGameUserSettings_ShouldShowKilledBy");
static_assert(offsetof(MordhauGameUserSettings_ShouldShowKilledBy, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_ShouldShowKilledBy::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ShouldShowKillFeed
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_ShouldShowKillFeed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ShouldShowKillFeed) == 0x000001, "Wrong alignment on MordhauGameUserSettings_ShouldShowKillFeed");
static_assert(sizeof(MordhauGameUserSettings_ShouldShowKillFeed) == 0x000001, "Wrong size on MordhauGameUserSettings_ShouldShowKillFeed");
static_assert(offsetof(MordhauGameUserSettings_ShouldShowKillFeed, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_ShouldShowKillFeed::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ShouldShowMatchmakingDebug
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_ShouldShowMatchmakingDebug final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ShouldShowMatchmakingDebug) == 0x000001, "Wrong alignment on MordhauGameUserSettings_ShouldShowMatchmakingDebug");
static_assert(sizeof(MordhauGameUserSettings_ShouldShowMatchmakingDebug) == 0x000001, "Wrong size on MordhauGameUserSettings_ShouldShowMatchmakingDebug");
static_assert(offsetof(MordhauGameUserSettings_ShouldShowMatchmakingDebug, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_ShouldShowMatchmakingDebug::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ShouldShowObjectives
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_ShouldShowObjectives final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ShouldShowObjectives) == 0x000001, "Wrong alignment on MordhauGameUserSettings_ShouldShowObjectives");
static_assert(sizeof(MordhauGameUserSettings_ShouldShowObjectives) == 0x000001, "Wrong size on MordhauGameUserSettings_ShouldShowObjectives");
static_assert(offsetof(MordhauGameUserSettings_ShouldShowObjectives, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_ShouldShowObjectives::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ShouldShowObservedDelay
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_ShouldShowObservedDelay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ShouldShowObservedDelay) == 0x000001, "Wrong alignment on MordhauGameUserSettings_ShouldShowObservedDelay");
static_assert(sizeof(MordhauGameUserSettings_ShouldShowObservedDelay) == 0x000001, "Wrong size on MordhauGameUserSettings_ShouldShowObservedDelay");
static_assert(offsetof(MordhauGameUserSettings_ShouldShowObservedDelay, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_ShouldShowObservedDelay::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ShouldShowScoreFeed
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_ShouldShowScoreFeed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ShouldShowScoreFeed) == 0x000001, "Wrong alignment on MordhauGameUserSettings_ShouldShowScoreFeed");
static_assert(sizeof(MordhauGameUserSettings_ShouldShowScoreFeed) == 0x000001, "Wrong size on MordhauGameUserSettings_ShouldShowScoreFeed");
static_assert(offsetof(MordhauGameUserSettings_ShouldShowScoreFeed, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_ShouldShowScoreFeed::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ShouldShowServerInScoreboard
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_ShouldShowServerInScoreboard final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ShouldShowServerInScoreboard) == 0x000001, "Wrong alignment on MordhauGameUserSettings_ShouldShowServerInScoreboard");
static_assert(sizeof(MordhauGameUserSettings_ShouldShowServerInScoreboard) == 0x000001, "Wrong size on MordhauGameUserSettings_ShouldShowServerInScoreboard");
static_assert(offsetof(MordhauGameUserSettings_ShouldShowServerInScoreboard, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_ShouldShowServerInScoreboard::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ShouldShowSpawnInfo
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_ShouldShowSpawnInfo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ShouldShowSpawnInfo) == 0x000001, "Wrong alignment on MordhauGameUserSettings_ShouldShowSpawnInfo");
static_assert(sizeof(MordhauGameUserSettings_ShouldShowSpawnInfo) == 0x000001, "Wrong size on MordhauGameUserSettings_ShouldShowSpawnInfo");
static_assert(offsetof(MordhauGameUserSettings_ShouldShowSpawnInfo, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_ShouldShowSpawnInfo::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ShouldShowStatusBar
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_ShouldShowStatusBar final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ShouldShowStatusBar) == 0x000001, "Wrong alignment on MordhauGameUserSettings_ShouldShowStatusBar");
static_assert(sizeof(MordhauGameUserSettings_ShouldShowStatusBar) == 0x000001, "Wrong size on MordhauGameUserSettings_ShouldShowStatusBar");
static_assert(offsetof(MordhauGameUserSettings_ShouldShowStatusBar, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_ShouldShowStatusBar::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ShouldShowTargetInfo
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_ShouldShowTargetInfo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ShouldShowTargetInfo) == 0x000001, "Wrong alignment on MordhauGameUserSettings_ShouldShowTargetInfo");
static_assert(sizeof(MordhauGameUserSettings_ShouldShowTargetInfo) == 0x000001, "Wrong size on MordhauGameUserSettings_ShouldShowTargetInfo");
static_assert(offsetof(MordhauGameUserSettings_ShouldShowTargetInfo, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_ShouldShowTargetInfo::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ShouldShowTips
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_ShouldShowTips final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ShouldShowTips) == 0x000001, "Wrong alignment on MordhauGameUserSettings_ShouldShowTips");
static_assert(sizeof(MordhauGameUserSettings_ShouldShowTips) == 0x000001, "Wrong size on MordhauGameUserSettings_ShouldShowTips");
static_assert(offsetof(MordhauGameUserSettings_ShouldShowTips, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_ShouldShowTips::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameUserSettings.ShouldShowWatermark
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameUserSettings_ShouldShowWatermark final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameUserSettings_ShouldShowWatermark) == 0x000001, "Wrong alignment on MordhauGameUserSettings_ShouldShowWatermark");
static_assert(sizeof(MordhauGameUserSettings_ShouldShowWatermark) == 0x000001, "Wrong size on MordhauGameUserSettings_ShouldShowWatermark");
static_assert(offsetof(MordhauGameUserSettings_ShouldShowWatermark, ReturnValue) == 0x000000, "Member 'MordhauGameUserSettings_ShouldShowWatermark::ReturnValue' has a wrong offset!");

// Function Mordhau.ProjectileShooterComponent.OnCharacterDestroyed
// 0x0008 (0x0008 - 0x0000)
struct ProjectileShooterComponent_OnCharacterDestroyed final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileShooterComponent_OnCharacterDestroyed) == 0x000008, "Wrong alignment on ProjectileShooterComponent_OnCharacterDestroyed");
static_assert(sizeof(ProjectileShooterComponent_OnCharacterDestroyed) == 0x000008, "Wrong size on ProjectileShooterComponent_OnCharacterDestroyed");
static_assert(offsetof(ProjectileShooterComponent_OnCharacterDestroyed, Character) == 0x000000, "Member 'ProjectileShooterComponent_OnCharacterDestroyed::Character' has a wrong offset!");

// Function Mordhau.ProjectileShooterComponent.OnCharacterDied
// 0x0008 (0x0008 - 0x0000)
struct ProjectileShooterComponent_OnCharacterDied final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileShooterComponent_OnCharacterDied) == 0x000008, "Wrong alignment on ProjectileShooterComponent_OnCharacterDied");
static_assert(sizeof(ProjectileShooterComponent_OnCharacterDied) == 0x000008, "Wrong size on ProjectileShooterComponent_OnCharacterDied");
static_assert(offsetof(ProjectileShooterComponent_OnCharacterDied, Character) == 0x000000, "Member 'ProjectileShooterComponent_OnCharacterDied::Character' has a wrong offset!");

// Function Mordhau.ProjectileShooterComponent.OnFirePressed
// 0x0001 (0x0001 - 0x0000)
struct ProjectileShooterComponent_OnFirePressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileShooterComponent_OnFirePressed) == 0x000001, "Wrong alignment on ProjectileShooterComponent_OnFirePressed");
static_assert(sizeof(ProjectileShooterComponent_OnFirePressed) == 0x000001, "Wrong size on ProjectileShooterComponent_OnFirePressed");
static_assert(offsetof(ProjectileShooterComponent_OnFirePressed, ReturnValue) == 0x000000, "Member 'ProjectileShooterComponent_OnFirePressed::ReturnValue' has a wrong offset!");

// Function Mordhau.ProjectileShooterComponent.OnVehicleDestroyed
// 0x0008 (0x0008 - 0x0000)
struct ProjectileShooterComponent_OnVehicleDestroyed final
{
public:
	class AVehicleBase*                           Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileShooterComponent_OnVehicleDestroyed) == 0x000008, "Wrong alignment on ProjectileShooterComponent_OnVehicleDestroyed");
static_assert(sizeof(ProjectileShooterComponent_OnVehicleDestroyed) == 0x000008, "Wrong size on ProjectileShooterComponent_OnVehicleDestroyed");
static_assert(offsetof(ProjectileShooterComponent_OnVehicleDestroyed, Vehicle) == 0x000000, "Member 'ProjectileShooterComponent_OnVehicleDestroyed::Vehicle' has a wrong offset!");

// Function Mordhau.ProjectileShooterComponent.OnVehicleDied
// 0x0008 (0x0008 - 0x0000)
struct ProjectileShooterComponent_OnVehicleDied final
{
public:
	class AVehicleBase*                           Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileShooterComponent_OnVehicleDied) == 0x000008, "Wrong alignment on ProjectileShooterComponent_OnVehicleDied");
static_assert(sizeof(ProjectileShooterComponent_OnVehicleDied) == 0x000008, "Wrong size on ProjectileShooterComponent_OnVehicleDied");
static_assert(offsetof(ProjectileShooterComponent_OnVehicleDied, Vehicle) == 0x000000, "Member 'ProjectileShooterComponent_OnVehicleDied::Vehicle' has a wrong offset!");

// Function Mordhau.ProjectileShooterComponent.SetOnFire
// 0x0001 (0x0001 - 0x0000)
struct ProjectileShooterComponent_SetOnFire final
{
public:
	bool                                          bOnFire;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileShooterComponent_SetOnFire) == 0x000001, "Wrong alignment on ProjectileShooterComponent_SetOnFire");
static_assert(sizeof(ProjectileShooterComponent_SetOnFire) == 0x000001, "Wrong size on ProjectileShooterComponent_SetOnFire");
static_assert(offsetof(ProjectileShooterComponent_SetOnFire, bOnFire) == 0x000000, "Member 'ProjectileShooterComponent_SetOnFire::bOnFire' has a wrong offset!");

// Function Mordhau.SendFriendRequest.SendFriendRequest
// 0x0070 (0x0070 - 0x0000)
struct SendFriendRequest_SendFriendRequest final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabPlayer                         Player_0;                                          // 0x0008(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USendFriendRequest*                     ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SendFriendRequest_SendFriendRequest) == 0x000008, "Wrong alignment on SendFriendRequest_SendFriendRequest");
static_assert(sizeof(SendFriendRequest_SendFriendRequest) == 0x000070, "Wrong size on SendFriendRequest_SendFriendRequest");
static_assert(offsetof(SendFriendRequest_SendFriendRequest, WorldContextObject) == 0x000000, "Member 'SendFriendRequest_SendFriendRequest::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SendFriendRequest_SendFriendRequest, Player_0) == 0x000008, "Member 'SendFriendRequest_SendFriendRequest::Player_0' has a wrong offset!");
static_assert(offsetof(SendFriendRequest_SendFriendRequest, ReturnValue) == 0x000068, "Member 'SendFriendRequest_SendFriendRequest::ReturnValue' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.HasPerk
// 0x0002 (0x0002 - 0x0000)
struct CharacterProfileBPWrapper_HasPerk final
{
public:
	uint8                                         Perk;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_HasPerk) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_HasPerk");
static_assert(sizeof(CharacterProfileBPWrapper_HasPerk) == 0x000002, "Wrong size on CharacterProfileBPWrapper_HasPerk");
static_assert(offsetof(CharacterProfileBPWrapper_HasPerk, Perk) == 0x000000, "Member 'CharacterProfileBPWrapper_HasPerk::Perk' has a wrong offset!");
static_assert(offsetof(CharacterProfileBPWrapper_HasPerk, ReturnValue) == 0x000001, "Member 'CharacterProfileBPWrapper_HasPerk::ReturnValue' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetAge
// 0x0001 (0x0001 - 0x0000)
struct CharacterProfileBPWrapper_SetAge final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetAge) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetAge");
static_assert(sizeof(CharacterProfileBPWrapper_SetAge) == 0x000001, "Wrong size on CharacterProfileBPWrapper_SetAge");
static_assert(offsetof(CharacterProfileBPWrapper_SetAge, NewValue) == 0x000000, "Member 'CharacterProfileBPWrapper_SetAge::NewValue' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetEmblem
// 0x0001 (0x0001 - 0x0000)
struct CharacterProfileBPWrapper_SetEmblem final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetEmblem) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetEmblem");
static_assert(sizeof(CharacterProfileBPWrapper_SetEmblem) == 0x000001, "Wrong size on CharacterProfileBPWrapper_SetEmblem");
static_assert(offsetof(CharacterProfileBPWrapper_SetEmblem, NewValue) == 0x000000, "Member 'CharacterProfileBPWrapper_SetEmblem::NewValue' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetEmblemColor
// 0x0002 (0x0002 - 0x0000)
struct CharacterProfileBPWrapper_SetEmblemColor final
{
public:
	uint8                                         ColorIdx;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewValue;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetEmblemColor) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetEmblemColor");
static_assert(sizeof(CharacterProfileBPWrapper_SetEmblemColor) == 0x000002, "Wrong size on CharacterProfileBPWrapper_SetEmblemColor");
static_assert(offsetof(CharacterProfileBPWrapper_SetEmblemColor, ColorIdx) == 0x000000, "Member 'CharacterProfileBPWrapper_SetEmblemColor::ColorIdx' has a wrong offset!");
static_assert(offsetof(CharacterProfileBPWrapper_SetEmblemColor, NewValue) == 0x000001, "Member 'CharacterProfileBPWrapper_SetEmblemColor::NewValue' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetEquipmentColor
// 0x0003 (0x0003 - 0x0000)
struct CharacterProfileBPWrapper_SetEquipmentColor final
{
public:
	uint8                                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ColorIdx;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewColor;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetEquipmentColor) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetEquipmentColor");
static_assert(sizeof(CharacterProfileBPWrapper_SetEquipmentColor) == 0x000003, "Wrong size on CharacterProfileBPWrapper_SetEquipmentColor");
static_assert(offsetof(CharacterProfileBPWrapper_SetEquipmentColor, Slot) == 0x000000, "Member 'CharacterProfileBPWrapper_SetEquipmentColor::Slot' has a wrong offset!");
static_assert(offsetof(CharacterProfileBPWrapper_SetEquipmentColor, ColorIdx) == 0x000001, "Member 'CharacterProfileBPWrapper_SetEquipmentColor::ColorIdx' has a wrong offset!");
static_assert(offsetof(CharacterProfileBPWrapper_SetEquipmentColor, NewColor) == 0x000002, "Member 'CharacterProfileBPWrapper_SetEquipmentColor::NewColor' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetEquipmentCustomizationDirect
// 0x0038 (0x0038 - 0x0000)
struct CharacterProfileBPWrapper_SetEquipmentCustomizationDirect final
{
public:
	uint8                                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEquipmentCustomization                NewCustomization;                                  // 0x0008(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetEquipmentCustomizationDirect) == 0x000008, "Wrong alignment on CharacterProfileBPWrapper_SetEquipmentCustomizationDirect");
static_assert(sizeof(CharacterProfileBPWrapper_SetEquipmentCustomizationDirect) == 0x000038, "Wrong size on CharacterProfileBPWrapper_SetEquipmentCustomizationDirect");
static_assert(offsetof(CharacterProfileBPWrapper_SetEquipmentCustomizationDirect, Slot) == 0x000000, "Member 'CharacterProfileBPWrapper_SetEquipmentCustomizationDirect::Slot' has a wrong offset!");
static_assert(offsetof(CharacterProfileBPWrapper_SetEquipmentCustomizationDirect, NewCustomization) == 0x000008, "Member 'CharacterProfileBPWrapper_SetEquipmentCustomizationDirect::NewCustomization' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetEquipmentId
// 0x0002 (0x0002 - 0x0000)
struct CharacterProfileBPWrapper_SetEquipmentId final
{
public:
	uint8                                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewId;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetEquipmentId) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetEquipmentId");
static_assert(sizeof(CharacterProfileBPWrapper_SetEquipmentId) == 0x000002, "Wrong size on CharacterProfileBPWrapper_SetEquipmentId");
static_assert(offsetof(CharacterProfileBPWrapper_SetEquipmentId, Slot) == 0x000000, "Member 'CharacterProfileBPWrapper_SetEquipmentId::Slot' has a wrong offset!");
static_assert(offsetof(CharacterProfileBPWrapper_SetEquipmentId, NewId) == 0x000001, "Member 'CharacterProfileBPWrapper_SetEquipmentId::NewId' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetEquipmentPartId
// 0x0003 (0x0003 - 0x0000)
struct CharacterProfileBPWrapper_SetEquipmentPartId final
{
public:
	uint8                                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PartIdx;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewPartId;                                         // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetEquipmentPartId) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetEquipmentPartId");
static_assert(sizeof(CharacterProfileBPWrapper_SetEquipmentPartId) == 0x000003, "Wrong size on CharacterProfileBPWrapper_SetEquipmentPartId");
static_assert(offsetof(CharacterProfileBPWrapper_SetEquipmentPartId, Slot) == 0x000000, "Member 'CharacterProfileBPWrapper_SetEquipmentPartId::Slot' has a wrong offset!");
static_assert(offsetof(CharacterProfileBPWrapper_SetEquipmentPartId, PartIdx) == 0x000001, "Member 'CharacterProfileBPWrapper_SetEquipmentPartId::PartIdx' has a wrong offset!");
static_assert(offsetof(CharacterProfileBPWrapper_SetEquipmentPartId, NewPartId) == 0x000002, "Member 'CharacterProfileBPWrapper_SetEquipmentPartId::NewPartId' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetEquipmentPattern
// 0x0002 (0x0002 - 0x0000)
struct CharacterProfileBPWrapper_SetEquipmentPattern final
{
public:
	uint8                                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewPattern;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetEquipmentPattern) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetEquipmentPattern");
static_assert(sizeof(CharacterProfileBPWrapper_SetEquipmentPattern) == 0x000002, "Wrong size on CharacterProfileBPWrapper_SetEquipmentPattern");
static_assert(offsetof(CharacterProfileBPWrapper_SetEquipmentPattern, Slot) == 0x000000, "Member 'CharacterProfileBPWrapper_SetEquipmentPattern::Slot' has a wrong offset!");
static_assert(offsetof(CharacterProfileBPWrapper_SetEquipmentPattern, NewPattern) == 0x000001, "Member 'CharacterProfileBPWrapper_SetEquipmentPattern::NewPattern' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetEquipmentSkin
// 0x0002 (0x0002 - 0x0000)
struct CharacterProfileBPWrapper_SetEquipmentSkin final
{
public:
	uint8                                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewSkin;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetEquipmentSkin) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetEquipmentSkin");
static_assert(sizeof(CharacterProfileBPWrapper_SetEquipmentSkin) == 0x000002, "Wrong size on CharacterProfileBPWrapper_SetEquipmentSkin");
static_assert(offsetof(CharacterProfileBPWrapper_SetEquipmentSkin, Slot) == 0x000000, "Member 'CharacterProfileBPWrapper_SetEquipmentSkin::Slot' has a wrong offset!");
static_assert(offsetof(CharacterProfileBPWrapper_SetEquipmentSkin, NewSkin) == 0x000001, "Member 'CharacterProfileBPWrapper_SetEquipmentSkin::NewSkin' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetEyebrows
// 0x0001 (0x0001 - 0x0000)
struct CharacterProfileBPWrapper_SetEyebrows final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetEyebrows) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetEyebrows");
static_assert(sizeof(CharacterProfileBPWrapper_SetEyebrows) == 0x000001, "Wrong size on CharacterProfileBPWrapper_SetEyebrows");
static_assert(offsetof(CharacterProfileBPWrapper_SetEyebrows, NewValue) == 0x000000, "Member 'CharacterProfileBPWrapper_SetEyebrows::NewValue' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetEyeColor
// 0x0001 (0x0001 - 0x0000)
struct CharacterProfileBPWrapper_SetEyeColor final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetEyeColor) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetEyeColor");
static_assert(sizeof(CharacterProfileBPWrapper_SetEyeColor) == 0x000001, "Wrong size on CharacterProfileBPWrapper_SetEyeColor");
static_assert(offsetof(CharacterProfileBPWrapper_SetEyeColor, NewValue) == 0x000000, "Member 'CharacterProfileBPWrapper_SetEyeColor::NewValue' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetFace
// 0x0001 (0x0001 - 0x0000)
struct CharacterProfileBPWrapper_SetFace final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetFace) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetFace");
static_assert(sizeof(CharacterProfileBPWrapper_SetFace) == 0x000001, "Wrong size on CharacterProfileBPWrapper_SetFace");
static_assert(offsetof(CharacterProfileBPWrapper_SetFace, NewValue) == 0x000000, "Member 'CharacterProfileBPWrapper_SetFace::NewValue' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetFacialHair
// 0x0001 (0x0001 - 0x0000)
struct CharacterProfileBPWrapper_SetFacialHair final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetFacialHair) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetFacialHair");
static_assert(sizeof(CharacterProfileBPWrapper_SetFacialHair) == 0x000001, "Wrong size on CharacterProfileBPWrapper_SetFacialHair");
static_assert(offsetof(CharacterProfileBPWrapper_SetFacialHair, NewValue) == 0x000000, "Member 'CharacterProfileBPWrapper_SetFacialHair::NewValue' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetFat
// 0x0001 (0x0001 - 0x0000)
struct CharacterProfileBPWrapper_SetFat final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetFat) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetFat");
static_assert(sizeof(CharacterProfileBPWrapper_SetFat) == 0x000001, "Wrong size on CharacterProfileBPWrapper_SetFat");
static_assert(offsetof(CharacterProfileBPWrapper_SetFat, NewValue) == 0x000000, "Member 'CharacterProfileBPWrapper_SetFat::NewValue' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetHair
// 0x0001 (0x0001 - 0x0000)
struct CharacterProfileBPWrapper_SetHair final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetHair) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetHair");
static_assert(sizeof(CharacterProfileBPWrapper_SetHair) == 0x000001, "Wrong size on CharacterProfileBPWrapper_SetHair");
static_assert(offsetof(CharacterProfileBPWrapper_SetHair, NewValue) == 0x000000, "Member 'CharacterProfileBPWrapper_SetHair::NewValue' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetHairColor
// 0x0001 (0x0001 - 0x0000)
struct CharacterProfileBPWrapper_SetHairColor final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetHairColor) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetHairColor");
static_assert(sizeof(CharacterProfileBPWrapper_SetHairColor) == 0x000001, "Wrong size on CharacterProfileBPWrapper_SetHairColor");
static_assert(offsetof(CharacterProfileBPWrapper_SetHairColor, NewValue) == 0x000000, "Member 'CharacterProfileBPWrapper_SetHairColor::NewValue' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetIsFemale
// 0x0001 (0x0001 - 0x0000)
struct CharacterProfileBPWrapper_SetIsFemale final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetIsFemale) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetIsFemale");
static_assert(sizeof(CharacterProfileBPWrapper_SetIsFemale) == 0x000001, "Wrong size on CharacterProfileBPWrapper_SetIsFemale");
static_assert(offsetof(CharacterProfileBPWrapper_SetIsFemale, bNewValue) == 0x000000, "Member 'CharacterProfileBPWrapper_SetIsFemale::bNewValue' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetMetalRoughnessScale
// 0x0001 (0x0001 - 0x0000)
struct CharacterProfileBPWrapper_SetMetalRoughnessScale final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetMetalRoughnessScale) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetMetalRoughnessScale");
static_assert(sizeof(CharacterProfileBPWrapper_SetMetalRoughnessScale) == 0x000001, "Wrong size on CharacterProfileBPWrapper_SetMetalRoughnessScale");
static_assert(offsetof(CharacterProfileBPWrapper_SetMetalRoughnessScale, NewValue) == 0x000000, "Member 'CharacterProfileBPWrapper_SetMetalRoughnessScale::NewValue' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetMetalTint
// 0x0001 (0x0001 - 0x0000)
struct CharacterProfileBPWrapper_SetMetalTint final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetMetalTint) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetMetalTint");
static_assert(sizeof(CharacterProfileBPWrapper_SetMetalTint) == 0x000001, "Wrong size on CharacterProfileBPWrapper_SetMetalTint");
static_assert(offsetof(CharacterProfileBPWrapper_SetMetalTint, NewValue) == 0x000000, "Member 'CharacterProfileBPWrapper_SetMetalTint::NewValue' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetProfileCategory
// 0x0010 (0x0010 - 0x0000)
struct CharacterProfileBPWrapper_SetProfileCategory final
{
public:
	class FString                                 NewCategory;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetProfileCategory) == 0x000008, "Wrong alignment on CharacterProfileBPWrapper_SetProfileCategory");
static_assert(sizeof(CharacterProfileBPWrapper_SetProfileCategory) == 0x000010, "Wrong size on CharacterProfileBPWrapper_SetProfileCategory");
static_assert(offsetof(CharacterProfileBPWrapper_SetProfileCategory, NewCategory) == 0x000000, "Member 'CharacterProfileBPWrapper_SetProfileCategory::NewCategory' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetProfileName
// 0x0018 (0x0018 - 0x0000)
struct CharacterProfileBPWrapper_SetProfileName final
{
public:
	class FText                                   NewName;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetProfileName) == 0x000008, "Wrong alignment on CharacterProfileBPWrapper_SetProfileName");
static_assert(sizeof(CharacterProfileBPWrapper_SetProfileName) == 0x000018, "Wrong size on CharacterProfileBPWrapper_SetProfileName");
static_assert(offsetof(CharacterProfileBPWrapper_SetProfileName, NewName) == 0x000000, "Member 'CharacterProfileBPWrapper_SetProfileName::NewName' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetSkinColor
// 0x0001 (0x0001 - 0x0000)
struct CharacterProfileBPWrapper_SetSkinColor final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetSkinColor) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetSkinColor");
static_assert(sizeof(CharacterProfileBPWrapper_SetSkinColor) == 0x000001, "Wrong size on CharacterProfileBPWrapper_SetSkinColor");
static_assert(offsetof(CharacterProfileBPWrapper_SetSkinColor, NewValue) == 0x000000, "Member 'CharacterProfileBPWrapper_SetSkinColor::NewValue' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetSkinny
// 0x0001 (0x0001 - 0x0000)
struct CharacterProfileBPWrapper_SetSkinny final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetSkinny) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetSkinny");
static_assert(sizeof(CharacterProfileBPWrapper_SetSkinny) == 0x000001, "Wrong size on CharacterProfileBPWrapper_SetSkinny");
static_assert(offsetof(CharacterProfileBPWrapper_SetSkinny, NewValue) == 0x000000, "Member 'CharacterProfileBPWrapper_SetSkinny::NewValue' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetStrong
// 0x0001 (0x0001 - 0x0000)
struct CharacterProfileBPWrapper_SetStrong final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetStrong) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetStrong");
static_assert(sizeof(CharacterProfileBPWrapper_SetStrong) == 0x000001, "Wrong size on CharacterProfileBPWrapper_SetStrong");
static_assert(offsetof(CharacterProfileBPWrapper_SetStrong, NewValue) == 0x000000, "Member 'CharacterProfileBPWrapper_SetStrong::NewValue' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetVoice
// 0x0001 (0x0001 - 0x0000)
struct CharacterProfileBPWrapper_SetVoice final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetVoice) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetVoice");
static_assert(sizeof(CharacterProfileBPWrapper_SetVoice) == 0x000001, "Wrong size on CharacterProfileBPWrapper_SetVoice");
static_assert(offsetof(CharacterProfileBPWrapper_SetVoice, NewValue) == 0x000000, "Member 'CharacterProfileBPWrapper_SetVoice::NewValue' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetVoicePitch
// 0x0001 (0x0001 - 0x0000)
struct CharacterProfileBPWrapper_SetVoicePitch final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetVoicePitch) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetVoicePitch");
static_assert(sizeof(CharacterProfileBPWrapper_SetVoicePitch) == 0x000001, "Wrong size on CharacterProfileBPWrapper_SetVoicePitch");
static_assert(offsetof(CharacterProfileBPWrapper_SetVoicePitch, NewValue) == 0x000000, "Member 'CharacterProfileBPWrapper_SetVoicePitch::NewValue' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetWearableColor
// 0x0003 (0x0003 - 0x0000)
struct CharacterProfileBPWrapper_SetWearableColor final
{
public:
	uint8                                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ColorIdx;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewColor;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetWearableColor) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetWearableColor");
static_assert(sizeof(CharacterProfileBPWrapper_SetWearableColor) == 0x000003, "Wrong size on CharacterProfileBPWrapper_SetWearableColor");
static_assert(offsetof(CharacterProfileBPWrapper_SetWearableColor, Slot) == 0x000000, "Member 'CharacterProfileBPWrapper_SetWearableColor::Slot' has a wrong offset!");
static_assert(offsetof(CharacterProfileBPWrapper_SetWearableColor, ColorIdx) == 0x000001, "Member 'CharacterProfileBPWrapper_SetWearableColor::ColorIdx' has a wrong offset!");
static_assert(offsetof(CharacterProfileBPWrapper_SetWearableColor, NewColor) == 0x000002, "Member 'CharacterProfileBPWrapper_SetWearableColor::NewColor' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetWearableId
// 0x0002 (0x0002 - 0x0000)
struct CharacterProfileBPWrapper_SetWearableId final
{
public:
	uint8                                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewId;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetWearableId) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetWearableId");
static_assert(sizeof(CharacterProfileBPWrapper_SetWearableId) == 0x000002, "Wrong size on CharacterProfileBPWrapper_SetWearableId");
static_assert(offsetof(CharacterProfileBPWrapper_SetWearableId, Slot) == 0x000000, "Member 'CharacterProfileBPWrapper_SetWearableId::Slot' has a wrong offset!");
static_assert(offsetof(CharacterProfileBPWrapper_SetWearableId, NewId) == 0x000001, "Member 'CharacterProfileBPWrapper_SetWearableId::NewId' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.SetWearablePattern
// 0x0002 (0x0002 - 0x0000)
struct CharacterProfileBPWrapper_SetWearablePattern final
{
public:
	uint8                                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewPattern;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_SetWearablePattern) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_SetWearablePattern");
static_assert(sizeof(CharacterProfileBPWrapper_SetWearablePattern) == 0x000002, "Wrong size on CharacterProfileBPWrapper_SetWearablePattern");
static_assert(offsetof(CharacterProfileBPWrapper_SetWearablePattern, Slot) == 0x000000, "Member 'CharacterProfileBPWrapper_SetWearablePattern::Slot' has a wrong offset!");
static_assert(offsetof(CharacterProfileBPWrapper_SetWearablePattern, NewPattern) == 0x000001, "Member 'CharacterProfileBPWrapper_SetWearablePattern::NewPattern' has a wrong offset!");

// Function Mordhau.CharacterProfileBPWrapper.TogglePerk
// 0x0001 (0x0001 - 0x0000)
struct CharacterProfileBPWrapper_TogglePerk final
{
public:
	uint8                                         Perk;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterProfileBPWrapper_TogglePerk) == 0x000001, "Wrong alignment on CharacterProfileBPWrapper_TogglePerk");
static_assert(sizeof(CharacterProfileBPWrapper_TogglePerk) == 0x000001, "Wrong size on CharacterProfileBPWrapper_TogglePerk");
static_assert(offsetof(CharacterProfileBPWrapper_TogglePerk, Perk) == 0x000000, "Member 'CharacterProfileBPWrapper_TogglePerk::Perk' has a wrong offset!");

// Function Mordhau.MordhauCameraManager.EnterCustomization
// 0x0008 (0x0008 - 0x0000)
struct MordhauCameraManager_EnterCustomization final
{
public:
	class AActor*                                 CustomizationTarget;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCameraManager_EnterCustomization) == 0x000008, "Wrong alignment on MordhauCameraManager_EnterCustomization");
static_assert(sizeof(MordhauCameraManager_EnterCustomization) == 0x000008, "Wrong size on MordhauCameraManager_EnterCustomization");
static_assert(offsetof(MordhauCameraManager_EnterCustomization, CustomizationTarget) == 0x000000, "Member 'MordhauCameraManager_EnterCustomization::CustomizationTarget' has a wrong offset!");

// Function Mordhau.MordhauCameraManager.GetCameraCache
// 0x05E0 (0x05E0 - 0x0000)
struct MordhauCameraManager_GetCameraCache final
{
public:
	struct FMinimalViewInfo                       ReturnValue;                                       // 0x0000(0x05E0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCameraManager_GetCameraCache) == 0x000010, "Wrong alignment on MordhauCameraManager_GetCameraCache");
static_assert(sizeof(MordhauCameraManager_GetCameraCache) == 0x0005E0, "Wrong size on MordhauCameraManager_GetCameraCache");
static_assert(offsetof(MordhauCameraManager_GetCameraCache, ReturnValue) == 0x000000, "Member 'MordhauCameraManager_GetCameraCache::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCameraManager.GetCameraStyleBP
// 0x0008 (0x0008 - 0x0000)
struct MordhauCameraManager_GetCameraStyleBP final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCameraManager_GetCameraStyleBP) == 0x000004, "Wrong alignment on MordhauCameraManager_GetCameraStyleBP");
static_assert(sizeof(MordhauCameraManager_GetCameraStyleBP) == 0x000008, "Wrong size on MordhauCameraManager_GetCameraStyleBP");
static_assert(offsetof(MordhauCameraManager_GetCameraStyleBP, ReturnValue) == 0x000000, "Member 'MordhauCameraManager_GetCameraStyleBP::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCameraManager.GetViewTargetBP
// 0x0008 (0x0008 - 0x0000)
struct MordhauCameraManager_GetViewTargetBP final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCameraManager_GetViewTargetBP) == 0x000008, "Wrong alignment on MordhauCameraManager_GetViewTargetBP");
static_assert(sizeof(MordhauCameraManager_GetViewTargetBP) == 0x000008, "Wrong size on MordhauCameraManager_GetViewTargetBP");
static_assert(offsetof(MordhauCameraManager_GetViewTargetBP, ReturnValue) == 0x000000, "Member 'MordhauCameraManager_GetViewTargetBP::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCameraManager.OnHitFlash
// 0x0010 (0x0010 - 0x0000)
struct MordhauCameraManager_OnHitFlash final
{
public:
	bool                                          bIsDirectional;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Source;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCameraManager_OnHitFlash) == 0x000008, "Wrong alignment on MordhauCameraManager_OnHitFlash");
static_assert(sizeof(MordhauCameraManager_OnHitFlash) == 0x000010, "Wrong size on MordhauCameraManager_OnHitFlash");
static_assert(offsetof(MordhauCameraManager_OnHitFlash, bIsDirectional) == 0x000000, "Member 'MordhauCameraManager_OnHitFlash::bIsDirectional' has a wrong offset!");
static_assert(offsetof(MordhauCameraManager_OnHitFlash, Source) == 0x000008, "Member 'MordhauCameraManager_OnHitFlash::Source' has a wrong offset!");

// Function Mordhau.MordhauCameraManager.SetCameraStyleBP
// 0x0008 (0x0008 - 0x0000)
struct MordhauCameraManager_SetCameraStyleBP final
{
public:
	class FName                                   NewCameraStyle;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCameraManager_SetCameraStyleBP) == 0x000004, "Wrong alignment on MordhauCameraManager_SetCameraStyleBP");
static_assert(sizeof(MordhauCameraManager_SetCameraStyleBP) == 0x000008, "Wrong size on MordhauCameraManager_SetCameraStyleBP");
static_assert(offsetof(MordhauCameraManager_SetCameraStyleBP, NewCameraStyle) == 0x000000, "Member 'MordhauCameraManager_SetCameraStyleBP::NewCameraStyle' has a wrong offset!");

// Function Mordhau.MordhauCameraManager.SetViewTargetBP
// 0x0008 (0x0008 - 0x0000)
struct MordhauCameraManager_SetViewTargetBP final
{
public:
	class AActor*                                 NewTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCameraManager_SetViewTargetBP) == 0x000008, "Wrong alignment on MordhauCameraManager_SetViewTargetBP");
static_assert(sizeof(MordhauCameraManager_SetViewTargetBP) == 0x000008, "Wrong size on MordhauCameraManager_SetViewTargetBP");
static_assert(offsetof(MordhauCameraManager_SetViewTargetBP, NewTarget) == 0x000000, "Member 'MordhauCameraManager_SetViewTargetBP::NewTarget' has a wrong offset!");

// Function Mordhau.MordhauCameraManager.GetIsInCustomization
// 0x0001 (0x0001 - 0x0000)
struct MordhauCameraManager_GetIsInCustomization final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCameraManager_GetIsInCustomization) == 0x000001, "Wrong alignment on MordhauCameraManager_GetIsInCustomization");
static_assert(sizeof(MordhauCameraManager_GetIsInCustomization) == 0x000001, "Wrong size on MordhauCameraManager_GetIsInCustomization");
static_assert(offsetof(MordhauCameraManager_GetIsInCustomization, ReturnValue) == 0x000000, "Member 'MordhauCameraManager_GetIsInCustomization::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCameraManager.GetIsInMapView
// 0x0001 (0x0001 - 0x0000)
struct MordhauCameraManager_GetIsInMapView final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCameraManager_GetIsInMapView) == 0x000001, "Wrong alignment on MordhauCameraManager_GetIsInMapView");
static_assert(sizeof(MordhauCameraManager_GetIsInMapView) == 0x000001, "Wrong size on MordhauCameraManager_GetIsInMapView");
static_assert(offsetof(MordhauCameraManager_GetIsInMapView, ReturnValue) == 0x000000, "Member 'MordhauCameraManager_GetIsInMapView::ReturnValue' has a wrong offset!");

// Function Mordhau.CharacterVoiceComponent.OnCharacterBuilt
// 0x0008 (0x0008 - 0x0000)
struct CharacterVoiceComponent_OnCharacterBuilt final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterVoiceComponent_OnCharacterBuilt) == 0x000008, "Wrong alignment on CharacterVoiceComponent_OnCharacterBuilt");
static_assert(sizeof(CharacterVoiceComponent_OnCharacterBuilt) == 0x000008, "Wrong size on CharacterVoiceComponent_OnCharacterBuilt");
static_assert(offsetof(CharacterVoiceComponent_OnCharacterBuilt, Character) == 0x000000, "Member 'CharacterVoiceComponent_OnCharacterBuilt::Character' has a wrong offset!");

// Function Mordhau.CharacterVoiceComponent.OnCharacterDied
// 0x0008 (0x0008 - 0x0000)
struct CharacterVoiceComponent_OnCharacterDied final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterVoiceComponent_OnCharacterDied) == 0x000008, "Wrong alignment on CharacterVoiceComponent_OnCharacterDied");
static_assert(sizeof(CharacterVoiceComponent_OnCharacterDied) == 0x000008, "Wrong size on CharacterVoiceComponent_OnCharacterDied");
static_assert(offsetof(CharacterVoiceComponent_OnCharacterDied, Character) == 0x000000, "Member 'CharacterVoiceComponent_OnCharacterDied::Character' has a wrong offset!");

// Function Mordhau.CharacterVoiceComponent.OnLODTick
// 0x0004 (0x0004 - 0x0000)
struct CharacterVoiceComponent_OnLODTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterVoiceComponent_OnLODTick) == 0x000004, "Wrong alignment on CharacterVoiceComponent_OnLODTick");
static_assert(sizeof(CharacterVoiceComponent_OnLODTick) == 0x000004, "Wrong size on CharacterVoiceComponent_OnLODTick");
static_assert(offsetof(CharacterVoiceComponent_OnLODTick, DeltaTime) == 0x000000, "Member 'CharacterVoiceComponent_OnLODTick::DeltaTime' has a wrong offset!");

// Function Mordhau.CharacterVoiceComponent.OnTakeDamage
// 0x00C0 (0x00C0 - 0x0000)
struct CharacterVoiceComponent_OnTakeDamage final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMordhauDamageInfo                     DamageInfo;                                        // 0x0008(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x00B0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterVoiceComponent_OnTakeDamage) == 0x000008, "Wrong alignment on CharacterVoiceComponent_OnTakeDamage");
static_assert(sizeof(CharacterVoiceComponent_OnTakeDamage) == 0x0000C0, "Wrong size on CharacterVoiceComponent_OnTakeDamage");
static_assert(offsetof(CharacterVoiceComponent_OnTakeDamage, Character) == 0x000000, "Member 'CharacterVoiceComponent_OnTakeDamage::Character' has a wrong offset!");
static_assert(offsetof(CharacterVoiceComponent_OnTakeDamage, DamageInfo) == 0x000008, "Member 'CharacterVoiceComponent_OnTakeDamage::DamageInfo' has a wrong offset!");
static_assert(offsetof(CharacterVoiceComponent_OnTakeDamage, EventInstigator) == 0x0000B0, "Member 'CharacterVoiceComponent_OnTakeDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(CharacterVoiceComponent_OnTakeDamage, DamageCauser) == 0x0000B8, "Member 'CharacterVoiceComponent_OnTakeDamage::DamageCauser' has a wrong offset!");

// Function Mordhau.MordhauInventory.GetGoldItemDefID
// 0x0004 (0x0004 - 0x0000)
struct MordhauInventory_GetGoldItemDefID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_GetGoldItemDefID) == 0x000004, "Wrong alignment on MordhauInventory_GetGoldItemDefID");
static_assert(sizeof(MordhauInventory_GetGoldItemDefID) == 0x000004, "Wrong size on MordhauInventory_GetGoldItemDefID");
static_assert(offsetof(MordhauInventory_GetGoldItemDefID, ReturnValue) == 0x000000, "Member 'MordhauInventory_GetGoldItemDefID::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.GetItem
// 0x0010 (0x0010 - 0x0000)
struct MordhauInventory_GetItem final
{
public:
	int32                                         ItemDefID;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauInventoryItem*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_GetItem) == 0x000008, "Wrong alignment on MordhauInventory_GetItem");
static_assert(sizeof(MordhauInventory_GetItem) == 0x000010, "Wrong size on MordhauInventory_GetItem");
static_assert(offsetof(MordhauInventory_GetItem, ItemDefID) == 0x000000, "Member 'MordhauInventory_GetItem::ItemDefID' has a wrong offset!");
static_assert(offsetof(MordhauInventory_GetItem, ReturnValue) == 0x000008, "Member 'MordhauInventory_GetItem::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.GetStackItem
// 0x0010 (0x0010 - 0x0000)
struct MordhauInventory_GetStackItem final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UMordhauInventoryItem*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_GetStackItem) == 0x000008, "Wrong alignment on MordhauInventory_GetStackItem");
static_assert(sizeof(MordhauInventory_GetStackItem) == 0x000010, "Wrong size on MordhauInventory_GetStackItem");
static_assert(offsetof(MordhauInventory_GetStackItem, ItemStack) == 0x000000, "Member 'MordhauInventory_GetStackItem::ItemStack' has a wrong offset!");
static_assert(offsetof(MordhauInventory_GetStackItem, ReturnValue) == 0x000008, "Member 'MordhauInventory_GetStackItem::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.GetStackItemDefID
// 0x000C (0x000C - 0x0000)
struct MordhauInventory_GetStackItemDefID final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_GetStackItemDefID) == 0x000004, "Wrong alignment on MordhauInventory_GetStackItemDefID");
static_assert(sizeof(MordhauInventory_GetStackItemDefID) == 0x00000C, "Wrong size on MordhauInventory_GetStackItemDefID");
static_assert(offsetof(MordhauInventory_GetStackItemDefID, ItemStack) == 0x000000, "Member 'MordhauInventory_GetStackItemDefID::ItemStack' has a wrong offset!");
static_assert(offsetof(MordhauInventory_GetStackItemDefID, ReturnValue) == 0x000008, "Member 'MordhauInventory_GetStackItemDefID::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.GetStackQuantity
// 0x000C (0x000C - 0x0000)
struct MordhauInventory_GetStackQuantity final
{
public:
	struct FItemStack                             ItemStack;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_GetStackQuantity) == 0x000004, "Wrong alignment on MordhauInventory_GetStackQuantity");
static_assert(sizeof(MordhauInventory_GetStackQuantity) == 0x00000C, "Wrong size on MordhauInventory_GetStackQuantity");
static_assert(offsetof(MordhauInventory_GetStackQuantity, ItemStack) == 0x000000, "Member 'MordhauInventory_GetStackQuantity::ItemStack' has a wrong offset!");
static_assert(offsetof(MordhauInventory_GetStackQuantity, ReturnValue) == 0x000008, "Member 'MordhauInventory_GetStackQuantity::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.GetSupporterPackageItemDefID
// 0x0004 (0x0004 - 0x0000)
struct MordhauInventory_GetSupporterPackageItemDefID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_GetSupporterPackageItemDefID) == 0x000004, "Wrong alignment on MordhauInventory_GetSupporterPackageItemDefID");
static_assert(sizeof(MordhauInventory_GetSupporterPackageItemDefID) == 0x000004, "Wrong size on MordhauInventory_GetSupporterPackageItemDefID");
static_assert(offsetof(MordhauInventory_GetSupporterPackageItemDefID, ReturnValue) == 0x000000, "Member 'MordhauInventory_GetSupporterPackageItemDefID::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.GetTutorialPackageItemDefID
// 0x0004 (0x0004 - 0x0000)
struct MordhauInventory_GetTutorialPackageItemDefID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_GetTutorialPackageItemDefID) == 0x000004, "Wrong alignment on MordhauInventory_GetTutorialPackageItemDefID");
static_assert(sizeof(MordhauInventory_GetTutorialPackageItemDefID) == 0x000004, "Wrong size on MordhauInventory_GetTutorialPackageItemDefID");
static_assert(offsetof(MordhauInventory_GetTutorialPackageItemDefID, ReturnValue) == 0x000000, "Member 'MordhauInventory_GetTutorialPackageItemDefID::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.GetXPItemDefID
// 0x0004 (0x0004 - 0x0000)
struct MordhauInventory_GetXPItemDefID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_GetXPItemDefID) == 0x000004, "Wrong alignment on MordhauInventory_GetXPItemDefID");
static_assert(sizeof(MordhauInventory_GetXPItemDefID) == 0x000004, "Wrong size on MordhauInventory_GetXPItemDefID");
static_assert(offsetof(MordhauInventory_GetXPItemDefID, ReturnValue) == 0x000000, "Member 'MordhauInventory_GetXPItemDefID::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.AddItem
// 0x0008 (0x0008 - 0x0000)
struct MordhauInventory_AddItem final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemDefID;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_AddItem) == 0x000004, "Wrong alignment on MordhauInventory_AddItem");
static_assert(sizeof(MordhauInventory_AddItem) == 0x000008, "Wrong size on MordhauInventory_AddItem");
static_assert(offsetof(MordhauInventory_AddItem, CallResult) == 0x000000, "Member 'MordhauInventory_AddItem::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauInventory_AddItem, ItemDefID) == 0x000004, "Member 'MordhauInventory_AddItem::ItemDefID' has a wrong offset!");

// Function Mordhau.MordhauInventory.AddItems
// 0x0018 (0x0018 - 0x0000)
struct MordhauInventory_AddItems final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ItemDefIDs;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_AddItems) == 0x000008, "Wrong alignment on MordhauInventory_AddItems");
static_assert(sizeof(MordhauInventory_AddItems) == 0x000018, "Wrong size on MordhauInventory_AddItems");
static_assert(offsetof(MordhauInventory_AddItems, CallResult) == 0x000000, "Member 'MordhauInventory_AddItems::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauInventory_AddItems, ItemDefIDs) == 0x000008, "Member 'MordhauInventory_AddItems::ItemDefIDs' has a wrong offset!");

// Function Mordhau.MordhauInventory.AreUnlockRecipesAvailable
// 0x0001 (0x0001 - 0x0000)
struct MordhauInventory_AreUnlockRecipesAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_AreUnlockRecipesAvailable) == 0x000001, "Wrong alignment on MordhauInventory_AreUnlockRecipesAvailable");
static_assert(sizeof(MordhauInventory_AreUnlockRecipesAvailable) == 0x000001, "Wrong size on MordhauInventory_AreUnlockRecipesAvailable");
static_assert(offsetof(MordhauInventory_AreUnlockRecipesAvailable, ReturnValue) == 0x000000, "Member 'MordhauInventory_AreUnlockRecipesAvailable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.CanUnlockItem
// 0x0018 (0x0018 - 0x0000)
struct MordhauInventory_CanUnlockItem final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemDefID;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauInventory_CanUnlockItem) == 0x000008, "Wrong alignment on MordhauInventory_CanUnlockItem");
static_assert(sizeof(MordhauInventory_CanUnlockItem) == 0x000018, "Wrong size on MordhauInventory_CanUnlockItem");
static_assert(offsetof(MordhauInventory_CanUnlockItem, PlayFabId) == 0x000000, "Member 'MordhauInventory_CanUnlockItem::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauInventory_CanUnlockItem, ItemDefID) == 0x000010, "Member 'MordhauInventory_CanUnlockItem::ItemDefID' has a wrong offset!");
static_assert(offsetof(MordhauInventory_CanUnlockItem, ReturnValue) == 0x000014, "Member 'MordhauInventory_CanUnlockItem::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.CanUnlockItems
// 0x0028 (0x0028 - 0x0000)
struct MordhauInventory_CanUnlockItems final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemDefIDs;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauInventory_CanUnlockItems) == 0x000008, "Wrong alignment on MordhauInventory_CanUnlockItems");
static_assert(sizeof(MordhauInventory_CanUnlockItems) == 0x000028, "Wrong size on MordhauInventory_CanUnlockItems");
static_assert(offsetof(MordhauInventory_CanUnlockItems, PlayFabId) == 0x000000, "Member 'MordhauInventory_CanUnlockItems::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauInventory_CanUnlockItems, ItemDefIDs) == 0x000010, "Member 'MordhauInventory_CanUnlockItems::ItemDefIDs' has a wrong offset!");
static_assert(offsetof(MordhauInventory_CanUnlockItems, ReturnValue) == 0x000020, "Member 'MordhauInventory_CanUnlockItems::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.ClearPlayerItems
// 0x0018 (0x0018 - 0x0000)
struct MordhauInventory_ClearPlayerItems final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauInventory_ClearPlayerItems) == 0x000008, "Wrong alignment on MordhauInventory_ClearPlayerItems");
static_assert(sizeof(MordhauInventory_ClearPlayerItems) == 0x000018, "Wrong size on MordhauInventory_ClearPlayerItems");
static_assert(offsetof(MordhauInventory_ClearPlayerItems, PlayFabId) == 0x000000, "Member 'MordhauInventory_ClearPlayerItems::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauInventory_ClearPlayerItems, ReturnValue) == 0x000010, "Member 'MordhauInventory_ClearPlayerItems::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.FakeItemDrop
// 0x000C (0x000C - 0x0000)
struct MordhauInventory_FakeItemDrop final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemDefID;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_FakeItemDrop) == 0x000004, "Wrong alignment on MordhauInventory_FakeItemDrop");
static_assert(sizeof(MordhauInventory_FakeItemDrop) == 0x00000C, "Wrong size on MordhauInventory_FakeItemDrop");
static_assert(offsetof(MordhauInventory_FakeItemDrop, CallResult) == 0x000000, "Member 'MordhauInventory_FakeItemDrop::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauInventory_FakeItemDrop, ItemDefID) == 0x000004, "Member 'MordhauInventory_FakeItemDrop::ItemDefID' has a wrong offset!");
static_assert(offsetof(MordhauInventory_FakeItemDrop, Quantity) == 0x000008, "Member 'MordhauInventory_FakeItemDrop::Quantity' has a wrong offset!");

// Function Mordhau.MordhauInventory.FakeRewardDrop
// 0x000C (0x000C - 0x0000)
struct MordhauInventory_FakeRewardDrop final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Gold;                                              // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XP;                                                // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_FakeRewardDrop) == 0x000004, "Wrong alignment on MordhauInventory_FakeRewardDrop");
static_assert(sizeof(MordhauInventory_FakeRewardDrop) == 0x00000C, "Wrong size on MordhauInventory_FakeRewardDrop");
static_assert(offsetof(MordhauInventory_FakeRewardDrop, CallResult) == 0x000000, "Member 'MordhauInventory_FakeRewardDrop::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauInventory_FakeRewardDrop, Gold) == 0x000004, "Member 'MordhauInventory_FakeRewardDrop::Gold' has a wrong offset!");
static_assert(offsetof(MordhauInventory_FakeRewardDrop, XP) == 0x000008, "Member 'MordhauInventory_FakeRewardDrop::XP' has a wrong offset!");

// Function Mordhau.MordhauInventory.GetGold
// 0x0004 (0x0004 - 0x0000)
struct MordhauInventory_GetGold final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_GetGold) == 0x000004, "Wrong alignment on MordhauInventory_GetGold");
static_assert(sizeof(MordhauInventory_GetGold) == 0x000004, "Wrong size on MordhauInventory_GetGold");
static_assert(offsetof(MordhauInventory_GetGold, ReturnValue) == 0x000000, "Member 'MordhauInventory_GetGold::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.GetItemQuantity
// 0x0020 (0x0020 - 0x0000)
struct MordhauInventory_GetItemQuantity final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemDefID;                                         // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_GetItemQuantity) == 0x000008, "Wrong alignment on MordhauInventory_GetItemQuantity");
static_assert(sizeof(MordhauInventory_GetItemQuantity) == 0x000020, "Wrong size on MordhauInventory_GetItemQuantity");
static_assert(offsetof(MordhauInventory_GetItemQuantity, CallResult) == 0x000000, "Member 'MordhauInventory_GetItemQuantity::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauInventory_GetItemQuantity, PlayFabId) == 0x000008, "Member 'MordhauInventory_GetItemQuantity::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauInventory_GetItemQuantity, ItemDefID) == 0x000018, "Member 'MordhauInventory_GetItemQuantity::ItemDefID' has a wrong offset!");
static_assert(offsetof(MordhauInventory_GetItemQuantity, Quantity) == 0x00001C, "Member 'MordhauInventory_GetItemQuantity::Quantity' has a wrong offset!");

// Function Mordhau.MordhauInventory.GetItemStacks
// 0x0028 (0x0028 - 0x0000)
struct MordhauInventory_GetItemStacks final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemStack>                     ItemStacks;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_GetItemStacks) == 0x000008, "Wrong alignment on MordhauInventory_GetItemStacks");
static_assert(sizeof(MordhauInventory_GetItemStacks) == 0x000028, "Wrong size on MordhauInventory_GetItemStacks");
static_assert(offsetof(MordhauInventory_GetItemStacks, CallResult) == 0x000000, "Member 'MordhauInventory_GetItemStacks::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauInventory_GetItemStacks, PlayFabId) == 0x000008, "Member 'MordhauInventory_GetItemStacks::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauInventory_GetItemStacks, ItemStacks) == 0x000018, "Member 'MordhauInventory_GetItemStacks::ItemStacks' has a wrong offset!");

// Function Mordhau.MordhauInventory.GetPlayerGold
// 0x0018 (0x0018 - 0x0000)
struct MordhauInventory_GetPlayerGold final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauInventory_GetPlayerGold) == 0x000008, "Wrong alignment on MordhauInventory_GetPlayerGold");
static_assert(sizeof(MordhauInventory_GetPlayerGold) == 0x000018, "Wrong size on MordhauInventory_GetPlayerGold");
static_assert(offsetof(MordhauInventory_GetPlayerGold, PlayFabId) == 0x000000, "Member 'MordhauInventory_GetPlayerGold::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauInventory_GetPlayerGold, ReturnValue) == 0x000010, "Member 'MordhauInventory_GetPlayerGold::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.GetPlayerXP
// 0x0018 (0x0018 - 0x0000)
struct MordhauInventory_GetPlayerXP final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauInventory_GetPlayerXP) == 0x000008, "Wrong alignment on MordhauInventory_GetPlayerXP");
static_assert(sizeof(MordhauInventory_GetPlayerXP) == 0x000018, "Wrong size on MordhauInventory_GetPlayerXP");
static_assert(offsetof(MordhauInventory_GetPlayerXP, PlayFabId) == 0x000000, "Member 'MordhauInventory_GetPlayerXP::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauInventory_GetPlayerXP, ReturnValue) == 0x000010, "Member 'MordhauInventory_GetPlayerXP::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.GetSkinRarity
// 0x0060 (0x0060 - 0x0000)
struct MordhauInventory_GetSkinRarity final
{
public:
	struct FEquipmentSkinEntry                    Skin;                                              // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EItemRarity                                   ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauInventory_GetSkinRarity) == 0x000008, "Wrong alignment on MordhauInventory_GetSkinRarity");
static_assert(sizeof(MordhauInventory_GetSkinRarity) == 0x000060, "Wrong size on MordhauInventory_GetSkinRarity");
static_assert(offsetof(MordhauInventory_GetSkinRarity, Skin) == 0x000000, "Member 'MordhauInventory_GetSkinRarity::Skin' has a wrong offset!");
static_assert(offsetof(MordhauInventory_GetSkinRarity, ReturnValue) == 0x000058, "Member 'MordhauInventory_GetSkinRarity::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.GetUnlockRecipe
// 0x0080 (0x0080 - 0x0000)
struct MordhauInventory_GetUnlockRecipe final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemDefID;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUnlockRecipe                          Recipe;                                            // 0x0008(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_GetUnlockRecipe) == 0x000008, "Wrong alignment on MordhauInventory_GetUnlockRecipe");
static_assert(sizeof(MordhauInventory_GetUnlockRecipe) == 0x000080, "Wrong size on MordhauInventory_GetUnlockRecipe");
static_assert(offsetof(MordhauInventory_GetUnlockRecipe, CallResult) == 0x000000, "Member 'MordhauInventory_GetUnlockRecipe::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauInventory_GetUnlockRecipe, ItemDefID) == 0x000004, "Member 'MordhauInventory_GetUnlockRecipe::ItemDefID' has a wrong offset!");
static_assert(offsetof(MordhauInventory_GetUnlockRecipe, Recipe) == 0x000008, "Member 'MordhauInventory_GetUnlockRecipe::Recipe' has a wrong offset!");

// Function Mordhau.MordhauInventory.GetXP
// 0x0004 (0x0004 - 0x0000)
struct MordhauInventory_GetXP final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_GetXP) == 0x000004, "Wrong alignment on MordhauInventory_GetXP");
static_assert(sizeof(MordhauInventory_GetXP) == 0x000004, "Wrong size on MordhauInventory_GetXP");
static_assert(offsetof(MordhauInventory_GetXP, ReturnValue) == 0x000000, "Member 'MordhauInventory_GetXP::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.HasItem
// 0x0018 (0x0018 - 0x0000)
struct MordhauInventory_HasItem final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemDefID;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauInventory_HasItem) == 0x000008, "Wrong alignment on MordhauInventory_HasItem");
static_assert(sizeof(MordhauInventory_HasItem) == 0x000018, "Wrong size on MordhauInventory_HasItem");
static_assert(offsetof(MordhauInventory_HasItem, PlayFabId) == 0x000000, "Member 'MordhauInventory_HasItem::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauInventory_HasItem, ItemDefID) == 0x000010, "Member 'MordhauInventory_HasItem::ItemDefID' has a wrong offset!");
static_assert(offsetof(MordhauInventory_HasItem, ReturnValue) == 0x000014, "Member 'MordhauInventory_HasItem::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.HasSkin
// 0x0070 (0x0070 - 0x0000)
struct MordhauInventory_HasSkin final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEquipmentSkinEntry                    Skin;                                              // 0x0010(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauInventory_HasSkin) == 0x000008, "Wrong alignment on MordhauInventory_HasSkin");
static_assert(sizeof(MordhauInventory_HasSkin) == 0x000070, "Wrong size on MordhauInventory_HasSkin");
static_assert(offsetof(MordhauInventory_HasSkin, PlayFabId) == 0x000000, "Member 'MordhauInventory_HasSkin::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauInventory_HasSkin, Skin) == 0x000010, "Member 'MordhauInventory_HasSkin::Skin' has a wrong offset!");
static_assert(offsetof(MordhauInventory_HasSkin, ReturnValue) == 0x000068, "Member 'MordhauInventory_HasSkin::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.IsInventoryAvailable
// 0x0018 (0x0018 - 0x0000)
struct MordhauInventory_IsInventoryAvailable final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauInventory_IsInventoryAvailable) == 0x000008, "Wrong alignment on MordhauInventory_IsInventoryAvailable");
static_assert(sizeof(MordhauInventory_IsInventoryAvailable) == 0x000018, "Wrong size on MordhauInventory_IsInventoryAvailable");
static_assert(offsetof(MordhauInventory_IsInventoryAvailable, PlayFabId) == 0x000000, "Member 'MordhauInventory_IsInventoryAvailable::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauInventory_IsInventoryAvailable, ReturnValue) == 0x000010, "Member 'MordhauInventory_IsInventoryAvailable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.IsItemPlatformAvailable
// 0x0008 (0x0008 - 0x0000)
struct MordhauInventory_IsItemPlatformAvailable final
{
public:
	int32                                         ItemDefID;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauInventory_IsItemPlatformAvailable) == 0x000004, "Wrong alignment on MordhauInventory_IsItemPlatformAvailable");
static_assert(sizeof(MordhauInventory_IsItemPlatformAvailable) == 0x000008, "Wrong size on MordhauInventory_IsItemPlatformAvailable");
static_assert(offsetof(MordhauInventory_IsItemPlatformAvailable, ItemDefID) == 0x000000, "Member 'MordhauInventory_IsItemPlatformAvailable::ItemDefID' has a wrong offset!");
static_assert(offsetof(MordhauInventory_IsItemPlatformAvailable, ReturnValue) == 0x000004, "Member 'MordhauInventory_IsItemPlatformAvailable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.IsSkinAvailable
// 0x0070 (0x0070 - 0x0000)
struct MordhauInventory_IsSkinAvailable final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEquipmentSkinEntry                    Skin;                                              // 0x0010(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauInventory_IsSkinAvailable) == 0x000008, "Wrong alignment on MordhauInventory_IsSkinAvailable");
static_assert(sizeof(MordhauInventory_IsSkinAvailable) == 0x000070, "Wrong size on MordhauInventory_IsSkinAvailable");
static_assert(offsetof(MordhauInventory_IsSkinAvailable, PlayFabId) == 0x000000, "Member 'MordhauInventory_IsSkinAvailable::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauInventory_IsSkinAvailable, Skin) == 0x000010, "Member 'MordhauInventory_IsSkinAvailable::Skin' has a wrong offset!");
static_assert(offsetof(MordhauInventory_IsSkinAvailable, ReturnValue) == 0x000068, "Member 'MordhauInventory_IsSkinAvailable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.RefreshItems
// 0x0001 (0x0001 - 0x0000)
struct MordhauInventory_RefreshItems final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_RefreshItems) == 0x000001, "Wrong alignment on MordhauInventory_RefreshItems");
static_assert(sizeof(MordhauInventory_RefreshItems) == 0x000001, "Wrong size on MordhauInventory_RefreshItems");
static_assert(offsetof(MordhauInventory_RefreshItems, CallResult) == 0x000000, "Member 'MordhauInventory_RefreshItems::CallResult' has a wrong offset!");

// Function Mordhau.MordhauInventory.RefreshPlayerItems
// 0x0018 (0x0018 - 0x0000)
struct MordhauInventory_RefreshPlayerItems final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_RefreshPlayerItems) == 0x000008, "Wrong alignment on MordhauInventory_RefreshPlayerItems");
static_assert(sizeof(MordhauInventory_RefreshPlayerItems) == 0x000018, "Wrong size on MordhauInventory_RefreshPlayerItems");
static_assert(offsetof(MordhauInventory_RefreshPlayerItems, CallResult) == 0x000000, "Member 'MordhauInventory_RefreshPlayerItems::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauInventory_RefreshPlayerItems, PlayFabId) == 0x000008, "Member 'MordhauInventory_RefreshPlayerItems::PlayFabId' has a wrong offset!");

// Function Mordhau.MordhauInventory.ResetInventory
// 0x0001 (0x0001 - 0x0000)
struct MordhauInventory_ResetInventory final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_ResetInventory) == 0x000001, "Wrong alignment on MordhauInventory_ResetInventory");
static_assert(sizeof(MordhauInventory_ResetInventory) == 0x000001, "Wrong size on MordhauInventory_ResetInventory");
static_assert(offsetof(MordhauInventory_ResetInventory, CallResult) == 0x000000, "Member 'MordhauInventory_ResetInventory::CallResult' has a wrong offset!");

// Function Mordhau.MordhauInventory.SetItemQuantity
// 0x0020 (0x0020 - 0x0000)
struct MordhauInventory_SetItemQuantity final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemDefID;                                         // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_SetItemQuantity) == 0x000008, "Wrong alignment on MordhauInventory_SetItemQuantity");
static_assert(sizeof(MordhauInventory_SetItemQuantity) == 0x000020, "Wrong size on MordhauInventory_SetItemQuantity");
static_assert(offsetof(MordhauInventory_SetItemQuantity, CallResult) == 0x000000, "Member 'MordhauInventory_SetItemQuantity::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauInventory_SetItemQuantity, PlayFabId) == 0x000008, "Member 'MordhauInventory_SetItemQuantity::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauInventory_SetItemQuantity, ItemDefID) == 0x000018, "Member 'MordhauInventory_SetItemQuantity::ItemDefID' has a wrong offset!");
static_assert(offsetof(MordhauInventory_SetItemQuantity, Quantity) == 0x00001C, "Member 'MordhauInventory_SetItemQuantity::Quantity' has a wrong offset!");

// Function Mordhau.MordhauInventory.SetPlayerGold
// 0x0018 (0x0018 - 0x0000)
struct MordhauInventory_SetPlayerGold final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauInventory_SetPlayerGold) == 0x000008, "Wrong alignment on MordhauInventory_SetPlayerGold");
static_assert(sizeof(MordhauInventory_SetPlayerGold) == 0x000018, "Wrong size on MordhauInventory_SetPlayerGold");
static_assert(offsetof(MordhauInventory_SetPlayerGold, PlayFabId) == 0x000000, "Member 'MordhauInventory_SetPlayerGold::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauInventory_SetPlayerGold, Gold) == 0x000010, "Member 'MordhauInventory_SetPlayerGold::Gold' has a wrong offset!");
static_assert(offsetof(MordhauInventory_SetPlayerGold, ReturnValue) == 0x000014, "Member 'MordhauInventory_SetPlayerGold::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.SetPlayerXP
// 0x0018 (0x0018 - 0x0000)
struct MordhauInventory_SetPlayerXP final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XP;                                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauInventory_SetPlayerXP) == 0x000008, "Wrong alignment on MordhauInventory_SetPlayerXP");
static_assert(sizeof(MordhauInventory_SetPlayerXP) == 0x000018, "Wrong size on MordhauInventory_SetPlayerXP");
static_assert(offsetof(MordhauInventory_SetPlayerXP, PlayFabId) == 0x000000, "Member 'MordhauInventory_SetPlayerXP::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauInventory_SetPlayerXP, XP) == 0x000010, "Member 'MordhauInventory_SetPlayerXP::XP' has a wrong offset!");
static_assert(offsetof(MordhauInventory_SetPlayerXP, ReturnValue) == 0x000014, "Member 'MordhauInventory_SetPlayerXP::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInventory.TriggerItemDrop
// 0x0008 (0x0008 - 0x0000)
struct MordhauInventory_TriggerItemDrop final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemDefID;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_TriggerItemDrop) == 0x000004, "Wrong alignment on MordhauInventory_TriggerItemDrop");
static_assert(sizeof(MordhauInventory_TriggerItemDrop) == 0x000008, "Wrong size on MordhauInventory_TriggerItemDrop");
static_assert(offsetof(MordhauInventory_TriggerItemDrop, CallResult) == 0x000000, "Member 'MordhauInventory_TriggerItemDrop::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauInventory_TriggerItemDrop, ItemDefID) == 0x000004, "Member 'MordhauInventory_TriggerItemDrop::ItemDefID' has a wrong offset!");

// Function Mordhau.MordhauInventory.UnlockItem
// 0x0020 (0x0020 - 0x0000)
struct MordhauInventory_UnlockItem final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemDefID;                                         // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauInventory_UnlockItem) == 0x000008, "Wrong alignment on MordhauInventory_UnlockItem");
static_assert(sizeof(MordhauInventory_UnlockItem) == 0x000020, "Wrong size on MordhauInventory_UnlockItem");
static_assert(offsetof(MordhauInventory_UnlockItem, CallResult) == 0x000000, "Member 'MordhauInventory_UnlockItem::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauInventory_UnlockItem, PlayFabId) == 0x000008, "Member 'MordhauInventory_UnlockItem::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauInventory_UnlockItem, ItemDefID) == 0x000018, "Member 'MordhauInventory_UnlockItem::ItemDefID' has a wrong offset!");

// Function Mordhau.MordhauInventory.UnlockItems
// 0x0028 (0x0028 - 0x0000)
struct MordhauInventory_UnlockItems final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemDefIDs;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_UnlockItems) == 0x000008, "Wrong alignment on MordhauInventory_UnlockItems");
static_assert(sizeof(MordhauInventory_UnlockItems) == 0x000028, "Wrong size on MordhauInventory_UnlockItems");
static_assert(offsetof(MordhauInventory_UnlockItems, CallResult) == 0x000000, "Member 'MordhauInventory_UnlockItems::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauInventory_UnlockItems, PlayFabId) == 0x000008, "Member 'MordhauInventory_UnlockItems::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauInventory_UnlockItems, ItemDefIDs) == 0x000018, "Member 'MordhauInventory_UnlockItems::ItemDefIDs' has a wrong offset!");

// Function Mordhau.MordhauInventory.UnlockLevelUnlocks
// 0x0018 (0x0018 - 0x0000)
struct MordhauInventory_UnlockLevelUnlocks final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_UnlockLevelUnlocks) == 0x000008, "Wrong alignment on MordhauInventory_UnlockLevelUnlocks");
static_assert(sizeof(MordhauInventory_UnlockLevelUnlocks) == 0x000018, "Wrong size on MordhauInventory_UnlockLevelUnlocks");
static_assert(offsetof(MordhauInventory_UnlockLevelUnlocks, CallResult) == 0x000000, "Member 'MordhauInventory_UnlockLevelUnlocks::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauInventory_UnlockLevelUnlocks, PlayFabId) == 0x000008, "Member 'MordhauInventory_UnlockLevelUnlocks::PlayFabId' has a wrong offset!");

// Function Mordhau.MordhauInventory.UpdateEntitlementsAndRefreshInventory
// 0x0001 (0x0001 - 0x0000)
struct MordhauInventory_UpdateEntitlementsAndRefreshInventory final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInventory_UpdateEntitlementsAndRefreshInventory) == 0x000001, "Wrong alignment on MordhauInventory_UpdateEntitlementsAndRefreshInventory");
static_assert(sizeof(MordhauInventory_UpdateEntitlementsAndRefreshInventory) == 0x000001, "Wrong size on MordhauInventory_UpdateEntitlementsAndRefreshInventory");
static_assert(offsetof(MordhauInventory_UpdateEntitlementsAndRefreshInventory, CallResult) == 0x000000, "Member 'MordhauInventory_UpdateEntitlementsAndRefreshInventory::CallResult' has a wrong offset!");

// Function Mordhau.ComboBoxText.AddOption
// 0x0018 (0x0018 - 0x0000)
struct ComboBoxText_AddOption final
{
public:
	class FText                                   Option;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxText_AddOption) == 0x000008, "Wrong alignment on ComboBoxText_AddOption");
static_assert(sizeof(ComboBoxText_AddOption) == 0x000018, "Wrong size on ComboBoxText_AddOption");
static_assert(offsetof(ComboBoxText_AddOption, Option) == 0x000000, "Member 'ComboBoxText_AddOption::Option' has a wrong offset!");

// Function Mordhau.ComboBoxText.RemoveOption
// 0x0020 (0x0020 - 0x0000)
struct ComboBoxText_RemoveOption final
{
public:
	class FText                                   Option;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ComboBoxText_RemoveOption) == 0x000008, "Wrong alignment on ComboBoxText_RemoveOption");
static_assert(sizeof(ComboBoxText_RemoveOption) == 0x000020, "Wrong size on ComboBoxText_RemoveOption");
static_assert(offsetof(ComboBoxText_RemoveOption, Option) == 0x000000, "Member 'ComboBoxText_RemoveOption::Option' has a wrong offset!");
static_assert(offsetof(ComboBoxText_RemoveOption, ReturnValue) == 0x000018, "Member 'ComboBoxText_RemoveOption::ReturnValue' has a wrong offset!");

// Function Mordhau.ComboBoxText.SetSelectedOption
// 0x0018 (0x0018 - 0x0000)
struct ComboBoxText_SetSelectedOption final
{
public:
	class FText                                   Option;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxText_SetSelectedOption) == 0x000008, "Wrong alignment on ComboBoxText_SetSelectedOption");
static_assert(sizeof(ComboBoxText_SetSelectedOption) == 0x000018, "Wrong size on ComboBoxText_SetSelectedOption");
static_assert(offsetof(ComboBoxText_SetSelectedOption, Option) == 0x000000, "Member 'ComboBoxText_SetSelectedOption::Option' has a wrong offset!");

// Function Mordhau.ComboBoxText.FindOptionIndex
// 0x0020 (0x0020 - 0x0000)
struct ComboBoxText_FindOptionIndex final
{
public:
	class FText                                   Option;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ComboBoxText_FindOptionIndex) == 0x000008, "Wrong alignment on ComboBoxText_FindOptionIndex");
static_assert(sizeof(ComboBoxText_FindOptionIndex) == 0x000020, "Wrong size on ComboBoxText_FindOptionIndex");
static_assert(offsetof(ComboBoxText_FindOptionIndex, Option) == 0x000000, "Member 'ComboBoxText_FindOptionIndex::Option' has a wrong offset!");
static_assert(offsetof(ComboBoxText_FindOptionIndex, ReturnValue) == 0x000018, "Member 'ComboBoxText_FindOptionIndex::ReturnValue' has a wrong offset!");

// Function Mordhau.ComboBoxText.GetIsOpen
// 0x0001 (0x0001 - 0x0000)
struct ComboBoxText_GetIsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxText_GetIsOpen) == 0x000001, "Wrong alignment on ComboBoxText_GetIsOpen");
static_assert(sizeof(ComboBoxText_GetIsOpen) == 0x000001, "Wrong size on ComboBoxText_GetIsOpen");
static_assert(offsetof(ComboBoxText_GetIsOpen, ReturnValue) == 0x000000, "Member 'ComboBoxText_GetIsOpen::ReturnValue' has a wrong offset!");

// Function Mordhau.ComboBoxText.GetOptionAtIndex
// 0x0020 (0x0020 - 0x0000)
struct ComboBoxText_GetOptionAtIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxText_GetOptionAtIndex) == 0x000008, "Wrong alignment on ComboBoxText_GetOptionAtIndex");
static_assert(sizeof(ComboBoxText_GetOptionAtIndex) == 0x000020, "Wrong size on ComboBoxText_GetOptionAtIndex");
static_assert(offsetof(ComboBoxText_GetOptionAtIndex, Index_0) == 0x000000, "Member 'ComboBoxText_GetOptionAtIndex::Index_0' has a wrong offset!");
static_assert(offsetof(ComboBoxText_GetOptionAtIndex, ReturnValue) == 0x000008, "Member 'ComboBoxText_GetOptionAtIndex::ReturnValue' has a wrong offset!");

// Function Mordhau.ComboBoxText.GetOptionCount
// 0x0004 (0x0004 - 0x0000)
struct ComboBoxText_GetOptionCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxText_GetOptionCount) == 0x000004, "Wrong alignment on ComboBoxText_GetOptionCount");
static_assert(sizeof(ComboBoxText_GetOptionCount) == 0x000004, "Wrong size on ComboBoxText_GetOptionCount");
static_assert(offsetof(ComboBoxText_GetOptionCount, ReturnValue) == 0x000000, "Member 'ComboBoxText_GetOptionCount::ReturnValue' has a wrong offset!");

// Function Mordhau.ComboBoxText.GetSelectedOption
// 0x0018 (0x0018 - 0x0000)
struct ComboBoxText_GetSelectedOption final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ComboBoxText_GetSelectedOption) == 0x000008, "Wrong alignment on ComboBoxText_GetSelectedOption");
static_assert(sizeof(ComboBoxText_GetSelectedOption) == 0x000018, "Wrong size on ComboBoxText_GetSelectedOption");
static_assert(offsetof(ComboBoxText_GetSelectedOption, ReturnValue) == 0x000000, "Member 'ComboBoxText_GetSelectedOption::ReturnValue' has a wrong offset!");

// Function Mordhau.ControlPoint.CanCapture
// 0x0002 (0x0002 - 0x0000)
struct ControlPoint_CanCapture final
{
public:
	uint8                                         Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlPoint_CanCapture) == 0x000001, "Wrong alignment on ControlPoint_CanCapture");
static_assert(sizeof(ControlPoint_CanCapture) == 0x000002, "Wrong size on ControlPoint_CanCapture");
static_assert(offsetof(ControlPoint_CanCapture, Team) == 0x000000, "Member 'ControlPoint_CanCapture::Team' has a wrong offset!");
static_assert(offsetof(ControlPoint_CanCapture, ReturnValue) == 0x000001, "Member 'ControlPoint_CanCapture::ReturnValue' has a wrong offset!");

// Function Mordhau.ControlPoint.OnCaptureAreaBeginOverlap
// 0x00B0 (0x00B0 - 0x0000)
struct ControlPoint_OnCaptureAreaBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlPoint_OnCaptureAreaBeginOverlap) == 0x000008, "Wrong alignment on ControlPoint_OnCaptureAreaBeginOverlap");
static_assert(sizeof(ControlPoint_OnCaptureAreaBeginOverlap) == 0x0000B0, "Wrong size on ControlPoint_OnCaptureAreaBeginOverlap");
static_assert(offsetof(ControlPoint_OnCaptureAreaBeginOverlap, OverlappedComp) == 0x000000, "Member 'ControlPoint_OnCaptureAreaBeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(ControlPoint_OnCaptureAreaBeginOverlap, Other) == 0x000008, "Member 'ControlPoint_OnCaptureAreaBeginOverlap::Other' has a wrong offset!");
static_assert(offsetof(ControlPoint_OnCaptureAreaBeginOverlap, OtherComp) == 0x000010, "Member 'ControlPoint_OnCaptureAreaBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(ControlPoint_OnCaptureAreaBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'ControlPoint_OnCaptureAreaBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ControlPoint_OnCaptureAreaBeginOverlap, bFromSweep) == 0x00001C, "Member 'ControlPoint_OnCaptureAreaBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(ControlPoint_OnCaptureAreaBeginOverlap, SweepResult) == 0x000020, "Member 'ControlPoint_OnCaptureAreaBeginOverlap::SweepResult' has a wrong offset!");

// Function Mordhau.ControlPoint.OnCaptureAreaEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct ControlPoint_OnCaptureAreaEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlPoint_OnCaptureAreaEndOverlap) == 0x000008, "Wrong alignment on ControlPoint_OnCaptureAreaEndOverlap");
static_assert(sizeof(ControlPoint_OnCaptureAreaEndOverlap) == 0x000020, "Wrong size on ControlPoint_OnCaptureAreaEndOverlap");
static_assert(offsetof(ControlPoint_OnCaptureAreaEndOverlap, OverlappedComp) == 0x000000, "Member 'ControlPoint_OnCaptureAreaEndOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(ControlPoint_OnCaptureAreaEndOverlap, Other) == 0x000008, "Member 'ControlPoint_OnCaptureAreaEndOverlap::Other' has a wrong offset!");
static_assert(offsetof(ControlPoint_OnCaptureAreaEndOverlap, OtherComp) == 0x000010, "Member 'ControlPoint_OnCaptureAreaEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(ControlPoint_OnCaptureAreaEndOverlap, OtherBodyIndex) == 0x000018, "Member 'ControlPoint_OnCaptureAreaEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Mordhau.ControlPoint.SetCaptureProgress
// 0x0008 (0x0008 - 0x0000)
struct ControlPoint_SetCaptureProgress final
{
public:
	float                                         NewProgress;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewCaptor;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAwardScore;                                       // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlPoint_SetCaptureProgress) == 0x000004, "Wrong alignment on ControlPoint_SetCaptureProgress");
static_assert(sizeof(ControlPoint_SetCaptureProgress) == 0x000008, "Wrong size on ControlPoint_SetCaptureProgress");
static_assert(offsetof(ControlPoint_SetCaptureProgress, NewProgress) == 0x000000, "Member 'ControlPoint_SetCaptureProgress::NewProgress' has a wrong offset!");
static_assert(offsetof(ControlPoint_SetCaptureProgress, NewCaptor) == 0x000004, "Member 'ControlPoint_SetCaptureProgress::NewCaptor' has a wrong offset!");
static_assert(offsetof(ControlPoint_SetCaptureProgress, bAwardScore) == 0x000005, "Member 'ControlPoint_SetCaptureProgress::bAwardScore' has a wrong offset!");

// Function Mordhau.ControlPoint.SetCapturingTeam
// 0x0001 (0x0001 - 0x0000)
struct ControlPoint_SetCapturingTeam final
{
public:
	uint8                                         NewTeam;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlPoint_SetCapturingTeam) == 0x000001, "Wrong alignment on ControlPoint_SetCapturingTeam");
static_assert(sizeof(ControlPoint_SetCapturingTeam) == 0x000001, "Wrong size on ControlPoint_SetCapturingTeam");
static_assert(offsetof(ControlPoint_SetCapturingTeam, NewTeam) == 0x000000, "Member 'ControlPoint_SetCapturingTeam::NewTeam' has a wrong offset!");

// Function Mordhau.ControlPoint.SetOwningTeam
// 0x0001 (0x0001 - 0x0000)
struct ControlPoint_SetOwningTeam final
{
public:
	uint8                                         NewTeam;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlPoint_SetOwningTeam) == 0x000001, "Wrong alignment on ControlPoint_SetOwningTeam");
static_assert(sizeof(ControlPoint_SetOwningTeam) == 0x000001, "Wrong size on ControlPoint_SetOwningTeam");
static_assert(offsetof(ControlPoint_SetOwningTeam, NewTeam) == 0x000000, "Member 'ControlPoint_SetOwningTeam::NewTeam' has a wrong offset!");

// Function Mordhau.ControlPoint.UpdateCaptureProgress
// 0x0004 (0x0004 - 0x0000)
struct ControlPoint_UpdateCaptureProgress final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlPoint_UpdateCaptureProgress) == 0x000004, "Wrong alignment on ControlPoint_UpdateCaptureProgress");
static_assert(sizeof(ControlPoint_UpdateCaptureProgress) == 0x000004, "Wrong size on ControlPoint_UpdateCaptureProgress");
static_assert(offsetof(ControlPoint_UpdateCaptureProgress, DeltaTime) == 0x000000, "Member 'ControlPoint_UpdateCaptureProgress::DeltaTime' has a wrong offset!");

// Function Mordhau.DismemberableComponent.Dismember
// 0x0028 (0x0028 - 0x0000)
struct DismemberableComponent_Dismember final
{
public:
	struct FDismemberedBoneData                   InDismemberedBoneData;                             // 0x0000(0x0020)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class ASeparatedBodyPart*                     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DismemberableComponent_Dismember) == 0x000008, "Wrong alignment on DismemberableComponent_Dismember");
static_assert(sizeof(DismemberableComponent_Dismember) == 0x000028, "Wrong size on DismemberableComponent_Dismember");
static_assert(offsetof(DismemberableComponent_Dismember, InDismemberedBoneData) == 0x000000, "Member 'DismemberableComponent_Dismember::InDismemberedBoneData' has a wrong offset!");
static_assert(offsetof(DismemberableComponent_Dismember, ReturnValue) == 0x000020, "Member 'DismemberableComponent_Dismember::ReturnValue' has a wrong offset!");

// Function Mordhau.DismemberableComponent.OnCharacterCameraStyleChanged
// 0x0008 (0x0008 - 0x0000)
struct DismemberableComponent_OnCharacterCameraStyleChanged final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DismemberableComponent_OnCharacterCameraStyleChanged) == 0x000008, "Wrong alignment on DismemberableComponent_OnCharacterCameraStyleChanged");
static_assert(sizeof(DismemberableComponent_OnCharacterCameraStyleChanged) == 0x000008, "Wrong size on DismemberableComponent_OnCharacterCameraStyleChanged");
static_assert(offsetof(DismemberableComponent_OnCharacterCameraStyleChanged, Character) == 0x000000, "Member 'DismemberableComponent_OnCharacterCameraStyleChanged::Character' has a wrong offset!");

// Function Mordhau.DismemberableComponent.ProcessQueuedDismemberment
// 0x0001 (0x0001 - 0x0000)
struct DismemberableComponent_ProcessQueuedDismemberment final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DismemberableComponent_ProcessQueuedDismemberment) == 0x000001, "Wrong alignment on DismemberableComponent_ProcessQueuedDismemberment");
static_assert(sizeof(DismemberableComponent_ProcessQueuedDismemberment) == 0x000001, "Wrong size on DismemberableComponent_ProcessQueuedDismemberment");
static_assert(offsetof(DismemberableComponent_ProcessQueuedDismemberment, ReturnValue) == 0x000000, "Member 'DismemberableComponent_ProcessQueuedDismemberment::ReturnValue' has a wrong offset!");

// Function Mordhau.DismemberableComponent.QueueDismember
// 0x0028 (0x0028 - 0x0000)
struct DismemberableComponent_QueueDismember final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDismemberPartial;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBluntForce;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Force;                                             // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Agent;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DismemberableComponent_QueueDismember) == 0x000008, "Wrong alignment on DismemberableComponent_QueueDismember");
static_assert(sizeof(DismemberableComponent_QueueDismember) == 0x000028, "Wrong size on DismemberableComponent_QueueDismember");
static_assert(offsetof(DismemberableComponent_QueueDismember, bone) == 0x000000, "Member 'DismemberableComponent_QueueDismember::bone' has a wrong offset!");
static_assert(offsetof(DismemberableComponent_QueueDismember, bIsDismemberPartial) == 0x000008, "Member 'DismemberableComponent_QueueDismember::bIsDismemberPartial' has a wrong offset!");
static_assert(offsetof(DismemberableComponent_QueueDismember, bIsBluntForce) == 0x000009, "Member 'DismemberableComponent_QueueDismember::bIsBluntForce' has a wrong offset!");
static_assert(offsetof(DismemberableComponent_QueueDismember, Force) == 0x00000C, "Member 'DismemberableComponent_QueueDismember::Force' has a wrong offset!");
static_assert(offsetof(DismemberableComponent_QueueDismember, Agent) == 0x000018, "Member 'DismemberableComponent_QueueDismember::Agent' has a wrong offset!");
static_assert(offsetof(DismemberableComponent_QueueDismember, ReturnValue) == 0x000020, "Member 'DismemberableComponent_QueueDismember::ReturnValue' has a wrong offset!");

// Function Mordhau.DismemberableComponent.TryDismember
// 0x0028 (0x0028 - 0x0000)
struct DismemberableComponent_TryDismember final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauWeapon*                         Weapon;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackMove                                   Move;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRagdollDismember;                               // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DismemberableComponent_TryDismember) == 0x000008, "Wrong alignment on DismemberableComponent_TryDismember");
static_assert(sizeof(DismemberableComponent_TryDismember) == 0x000028, "Wrong size on DismemberableComponent_TryDismember");
static_assert(offsetof(DismemberableComponent_TryDismember, bone) == 0x000000, "Member 'DismemberableComponent_TryDismember::bone' has a wrong offset!");
static_assert(offsetof(DismemberableComponent_TryDismember, Point) == 0x000008, "Member 'DismemberableComponent_TryDismember::Point' has a wrong offset!");
static_assert(offsetof(DismemberableComponent_TryDismember, Weapon) == 0x000018, "Member 'DismemberableComponent_TryDismember::Weapon' has a wrong offset!");
static_assert(offsetof(DismemberableComponent_TryDismember, Move) == 0x000020, "Member 'DismemberableComponent_TryDismember::Move' has a wrong offset!");
static_assert(offsetof(DismemberableComponent_TryDismember, bIsRagdollDismember) == 0x000021, "Member 'DismemberableComponent_TryDismember::bIsRagdollDismember' has a wrong offset!");
static_assert(offsetof(DismemberableComponent_TryDismember, ReturnValue) == 0x000022, "Member 'DismemberableComponent_TryDismember::ReturnValue' has a wrong offset!");

// Function Mordhau.DismemberableComponent.CanDismember
// 0x000C (0x000C - 0x0000)
struct DismemberableComponent_CanDismember final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DismemberableComponent_CanDismember) == 0x000004, "Wrong alignment on DismemberableComponent_CanDismember");
static_assert(sizeof(DismemberableComponent_CanDismember) == 0x00000C, "Wrong size on DismemberableComponent_CanDismember");
static_assert(offsetof(DismemberableComponent_CanDismember, bone) == 0x000000, "Member 'DismemberableComponent_CanDismember::bone' has a wrong offset!");
static_assert(offsetof(DismemberableComponent_CanDismember, ReturnValue) == 0x000008, "Member 'DismemberableComponent_CanDismember::ReturnValue' has a wrong offset!");

// Function Mordhau.DismemberableComponent.IsBoneDismembered
// 0x000C (0x000C - 0x0000)
struct DismemberableComponent_IsBoneDismembered final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DismemberableComponent_IsBoneDismembered) == 0x000004, "Wrong alignment on DismemberableComponent_IsBoneDismembered");
static_assert(sizeof(DismemberableComponent_IsBoneDismembered) == 0x00000C, "Wrong size on DismemberableComponent_IsBoneDismembered");
static_assert(offsetof(DismemberableComponent_IsBoneDismembered, bone) == 0x000000, "Member 'DismemberableComponent_IsBoneDismembered::bone' has a wrong offset!");
static_assert(offsetof(DismemberableComponent_IsBoneDismembered, ReturnValue) == 0x000008, "Member 'DismemberableComponent_IsBoneDismembered::ReturnValue' has a wrong offset!");

// Function Mordhau.DriverComponent.OnLateTick
// 0x0004 (0x0004 - 0x0000)
struct DriverComponent_OnLateTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DriverComponent_OnLateTick) == 0x000004, "Wrong alignment on DriverComponent_OnLateTick");
static_assert(sizeof(DriverComponent_OnLateTick) == 0x000004, "Wrong size on DriverComponent_OnLateTick");
static_assert(offsetof(DriverComponent_OnLateTick, DeltaTime) == 0x000000, "Member 'DriverComponent_OnLateTick::DeltaTime' has a wrong offset!");

// Function Mordhau.ECSActor.AddManagedCharacter
// 0x0008 (0x0008 - 0x0000)
struct ECSActor_AddManagedCharacter final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ECSActor_AddManagedCharacter) == 0x000008, "Wrong alignment on ECSActor_AddManagedCharacter");
static_assert(sizeof(ECSActor_AddManagedCharacter) == 0x000008, "Wrong size on ECSActor_AddManagedCharacter");
static_assert(offsetof(ECSActor_AddManagedCharacter, Character) == 0x000000, "Member 'ECSActor_AddManagedCharacter::Character' has a wrong offset!");

// Function Mordhau.EmoteMotion.DoDrop
// 0x0018 (0x0018 - 0x0000)
struct EmoteMotion_DoDrop final
{
public:
	class AMordhauEquipment*                      Equipment;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Force;                                             // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EmoteMotion_DoDrop) == 0x000008, "Wrong alignment on EmoteMotion_DoDrop");
static_assert(sizeof(EmoteMotion_DoDrop) == 0x000018, "Wrong size on EmoteMotion_DoDrop");
static_assert(offsetof(EmoteMotion_DoDrop, Equipment) == 0x000000, "Member 'EmoteMotion_DoDrop::Equipment' has a wrong offset!");
static_assert(offsetof(EmoteMotion_DoDrop, Force) == 0x000008, "Member 'EmoteMotion_DoDrop::Force' has a wrong offset!");

// Function Mordhau.MordhauDialog.ForceAllUserFocus
// 0x0001 (0x0001 - 0x0000)
struct MordhauDialog_ForceAllUserFocus final
{
public:
	EFocusCause                                   FocusCause;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauDialog_ForceAllUserFocus) == 0x000001, "Wrong alignment on MordhauDialog_ForceAllUserFocus");
static_assert(sizeof(MordhauDialog_ForceAllUserFocus) == 0x000001, "Wrong size on MordhauDialog_ForceAllUserFocus");
static_assert(offsetof(MordhauDialog_ForceAllUserFocus, FocusCause) == 0x000000, "Member 'MordhauDialog_ForceAllUserFocus::FocusCause' has a wrong offset!");

// Function Mordhau.MordhauHUDWidgetComponent.GetHUDWidget
// 0x0008 (0x0008 - 0x0000)
struct MordhauHUDWidgetComponent_GetHUDWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauHUDWidgetComponent_GetHUDWidget) == 0x000008, "Wrong alignment on MordhauHUDWidgetComponent_GetHUDWidget");
static_assert(sizeof(MordhauHUDWidgetComponent_GetHUDWidget) == 0x000008, "Wrong size on MordhauHUDWidgetComponent_GetHUDWidget");
static_assert(offsetof(MordhauHUDWidgetComponent_GetHUDWidget, ReturnValue) == 0x000000, "Member 'MordhauHUDWidgetComponent_GetHUDWidget::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauHUDWidgetComponent.OnCharacterOwnerBecomeViewTarget
// 0x0008 (0x0008 - 0x0000)
struct MordhauHUDWidgetComponent_OnCharacterOwnerBecomeViewTarget final
{
public:
	class AAdvancedCharacter*                     CharacterOwner;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauHUDWidgetComponent_OnCharacterOwnerBecomeViewTarget) == 0x000008, "Wrong alignment on MordhauHUDWidgetComponent_OnCharacterOwnerBecomeViewTarget");
static_assert(sizeof(MordhauHUDWidgetComponent_OnCharacterOwnerBecomeViewTarget) == 0x000008, "Wrong size on MordhauHUDWidgetComponent_OnCharacterOwnerBecomeViewTarget");
static_assert(offsetof(MordhauHUDWidgetComponent_OnCharacterOwnerBecomeViewTarget, CharacterOwner) == 0x000000, "Member 'MordhauHUDWidgetComponent_OnCharacterOwnerBecomeViewTarget::CharacterOwner' has a wrong offset!");

// Function Mordhau.MordhauHUDWidgetComponent.OnCharacterOwnerEndViewTarget
// 0x0008 (0x0008 - 0x0000)
struct MordhauHUDWidgetComponent_OnCharacterOwnerEndViewTarget final
{
public:
	class AAdvancedCharacter*                     CharacterOwner;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauHUDWidgetComponent_OnCharacterOwnerEndViewTarget) == 0x000008, "Wrong alignment on MordhauHUDWidgetComponent_OnCharacterOwnerEndViewTarget");
static_assert(sizeof(MordhauHUDWidgetComponent_OnCharacterOwnerEndViewTarget) == 0x000008, "Wrong size on MordhauHUDWidgetComponent_OnCharacterOwnerEndViewTarget");
static_assert(offsetof(MordhauHUDWidgetComponent_OnCharacterOwnerEndViewTarget, CharacterOwner) == 0x000000, "Member 'MordhauHUDWidgetComponent_OnCharacterOwnerEndViewTarget::CharacterOwner' has a wrong offset!");

// Function Mordhau.MordhauHUDWidgetComponent.ShowWidget
// 0x0001 (0x0001 - 0x0000)
struct MordhauHUDWidgetComponent_ShowWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauHUDWidgetComponent_ShowWidget) == 0x000001, "Wrong alignment on MordhauHUDWidgetComponent_ShowWidget");
static_assert(sizeof(MordhauHUDWidgetComponent_ShowWidget) == 0x000001, "Wrong size on MordhauHUDWidgetComponent_ShowWidget");
static_assert(offsetof(MordhauHUDWidgetComponent_ShowWidget, ReturnValue) == 0x000000, "Member 'MordhauHUDWidgetComponent_ShowWidget::ReturnValue' has a wrong offset!");

// Function Mordhau.EnvironmentMovable.InitializeMovable
// 0x0030 (0x0030 - 0x0000)
struct EnvironmentMovable_InitializeMovable final
{
public:
	class USceneComponent*                        InSwayingComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InRollPitchYawFrequency;                           // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InRollPitchYawMagnitude;                           // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InRollPitchYawSpeed;                               // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EnvironmentMovable_InitializeMovable) == 0x000008, "Wrong alignment on EnvironmentMovable_InitializeMovable");
static_assert(sizeof(EnvironmentMovable_InitializeMovable) == 0x000030, "Wrong size on EnvironmentMovable_InitializeMovable");
static_assert(offsetof(EnvironmentMovable_InitializeMovable, InSwayingComponent) == 0x000000, "Member 'EnvironmentMovable_InitializeMovable::InSwayingComponent' has a wrong offset!");
static_assert(offsetof(EnvironmentMovable_InitializeMovable, InRollPitchYawFrequency) == 0x000008, "Member 'EnvironmentMovable_InitializeMovable::InRollPitchYawFrequency' has a wrong offset!");
static_assert(offsetof(EnvironmentMovable_InitializeMovable, InRollPitchYawMagnitude) == 0x000014, "Member 'EnvironmentMovable_InitializeMovable::InRollPitchYawMagnitude' has a wrong offset!");
static_assert(offsetof(EnvironmentMovable_InitializeMovable, InRollPitchYawSpeed) == 0x000020, "Member 'EnvironmentMovable_InitializeMovable::InRollPitchYawSpeed' has a wrong offset!");

// Function Mordhau.EquipmentSwitchMotion.GetSwitchingTo
// 0x0008 (0x0008 - 0x0000)
struct EquipmentSwitchMotion_GetSwitchingTo final
{
public:
	class AMordhauEquipment*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentSwitchMotion_GetSwitchingTo) == 0x000008, "Wrong alignment on EquipmentSwitchMotion_GetSwitchingTo");
static_assert(sizeof(EquipmentSwitchMotion_GetSwitchingTo) == 0x000008, "Wrong size on EquipmentSwitchMotion_GetSwitchingTo");
static_assert(offsetof(EquipmentSwitchMotion_GetSwitchingTo, ReturnValue) == 0x000000, "Member 'EquipmentSwitchMotion_GetSwitchingTo::ReturnValue' has a wrong offset!");

// Function Mordhau.EquipmentSystemComponent.OnCharacterCameraStyleChanged
// 0x0008 (0x0008 - 0x0000)
struct EquipmentSystemComponent_OnCharacterCameraStyleChanged final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentSystemComponent_OnCharacterCameraStyleChanged) == 0x000008, "Wrong alignment on EquipmentSystemComponent_OnCharacterCameraStyleChanged");
static_assert(sizeof(EquipmentSystemComponent_OnCharacterCameraStyleChanged) == 0x000008, "Wrong size on EquipmentSystemComponent_OnCharacterCameraStyleChanged");
static_assert(offsetof(EquipmentSystemComponent_OnCharacterCameraStyleChanged, Character) == 0x000000, "Member 'EquipmentSystemComponent_OnCharacterCameraStyleChanged::Character' has a wrong offset!");

// Function Mordhau.EquipmentSystemComponent.OnCharacterVehicleChanged
// 0x0008 (0x0008 - 0x0000)
struct EquipmentSystemComponent_OnCharacterVehicleChanged final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentSystemComponent_OnCharacterVehicleChanged) == 0x000008, "Wrong alignment on EquipmentSystemComponent_OnCharacterVehicleChanged");
static_assert(sizeof(EquipmentSystemComponent_OnCharacterVehicleChanged) == 0x000008, "Wrong size on EquipmentSystemComponent_OnCharacterVehicleChanged");
static_assert(offsetof(EquipmentSystemComponent_OnCharacterVehicleChanged, Character) == 0x000000, "Member 'EquipmentSystemComponent_OnCharacterVehicleChanged::Character' has a wrong offset!");

// Function Mordhau.EquipmentSystemComponent.OnLateTick
// 0x0004 (0x0004 - 0x0000)
struct EquipmentSystemComponent_OnLateTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentSystemComponent_OnLateTick) == 0x000004, "Wrong alignment on EquipmentSystemComponent_OnLateTick");
static_assert(sizeof(EquipmentSystemComponent_OnLateTick) == 0x000004, "Wrong size on EquipmentSystemComponent_OnLateTick");
static_assert(offsetof(EquipmentSystemComponent_OnLateTick, DeltaTime) == 0x000000, "Member 'EquipmentSystemComponent_OnLateTick::DeltaTime' has a wrong offset!");

// Function Mordhau.EquipmentSystemComponent.OnLODTick
// 0x0004 (0x0004 - 0x0000)
struct EquipmentSystemComponent_OnLODTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentSystemComponent_OnLODTick) == 0x000004, "Wrong alignment on EquipmentSystemComponent_OnLODTick");
static_assert(sizeof(EquipmentSystemComponent_OnLODTick) == 0x000004, "Wrong size on EquipmentSystemComponent_OnLODTick");
static_assert(offsetof(EquipmentSystemComponent_OnLODTick, DeltaTime) == 0x000000, "Member 'EquipmentSystemComponent_OnLODTick::DeltaTime' has a wrong offset!");

// Function Mordhau.EquipmentSystemComponent.OnPreBeginPlay
// 0x0008 (0x0008 - 0x0000)
struct EquipmentSystemComponent_OnPreBeginPlay final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentSystemComponent_OnPreBeginPlay) == 0x000008, "Wrong alignment on EquipmentSystemComponent_OnPreBeginPlay");
static_assert(sizeof(EquipmentSystemComponent_OnPreBeginPlay) == 0x000008, "Wrong size on EquipmentSystemComponent_OnPreBeginPlay");
static_assert(offsetof(EquipmentSystemComponent_OnPreBeginPlay, Character) == 0x000000, "Member 'EquipmentSystemComponent_OnPreBeginPlay::Character' has a wrong offset!");

// Function Mordhau.EquipmentSystemComponent.OnUnPossessed
// 0x0008 (0x0008 - 0x0000)
struct EquipmentSystemComponent_OnUnPossessed final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentSystemComponent_OnUnPossessed) == 0x000008, "Wrong alignment on EquipmentSystemComponent_OnUnPossessed");
static_assert(sizeof(EquipmentSystemComponent_OnUnPossessed) == 0x000008, "Wrong size on EquipmentSystemComponent_OnUnPossessed");
static_assert(offsetof(EquipmentSystemComponent_OnUnPossessed, Character) == 0x000000, "Member 'EquipmentSystemComponent_OnUnPossessed::Character' has a wrong offset!");

// Function Mordhau.BlockPlayer.BlockPlayer
// 0x0070 (0x0070 - 0x0000)
struct BlockPlayer_BlockPlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabPlayer                         Player_0;                                          // 0x0008(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlockPlayer*                           ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlockPlayer_BlockPlayer) == 0x000008, "Wrong alignment on BlockPlayer_BlockPlayer");
static_assert(sizeof(BlockPlayer_BlockPlayer) == 0x000070, "Wrong size on BlockPlayer_BlockPlayer");
static_assert(offsetof(BlockPlayer_BlockPlayer, WorldContextObject) == 0x000000, "Member 'BlockPlayer_BlockPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlockPlayer_BlockPlayer, Player_0) == 0x000008, "Member 'BlockPlayer_BlockPlayer::Player_0' has a wrong offset!");
static_assert(offsetof(BlockPlayer_BlockPlayer, ReturnValue) == 0x000068, "Member 'BlockPlayer_BlockPlayer::ReturnValue' has a wrong offset!");

// Function Mordhau.FaceCustomizationComponent.OnCharacterBuilt
// 0x0008 (0x0008 - 0x0000)
struct FaceCustomizationComponent_OnCharacterBuilt final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FaceCustomizationComponent_OnCharacterBuilt) == 0x000008, "Wrong alignment on FaceCustomizationComponent_OnCharacterBuilt");
static_assert(sizeof(FaceCustomizationComponent_OnCharacterBuilt) == 0x000008, "Wrong size on FaceCustomizationComponent_OnCharacterBuilt");
static_assert(offsetof(FaceCustomizationComponent_OnCharacterBuilt, Character) == 0x000000, "Member 'FaceCustomizationComponent_OnCharacterBuilt::Character' has a wrong offset!");

// Function Mordhau.AcceptFriendRequest.AcceptFriendRequest
// 0x0070 (0x0070 - 0x0000)
struct AcceptFriendRequest_AcceptFriendRequest final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabPlayer                         Player_0;                                          // 0x0008(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAcceptFriendRequest*                   ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AcceptFriendRequest_AcceptFriendRequest) == 0x000008, "Wrong alignment on AcceptFriendRequest_AcceptFriendRequest");
static_assert(sizeof(AcceptFriendRequest_AcceptFriendRequest) == 0x000070, "Wrong size on AcceptFriendRequest_AcceptFriendRequest");
static_assert(offsetof(AcceptFriendRequest_AcceptFriendRequest, WorldContextObject) == 0x000000, "Member 'AcceptFriendRequest_AcceptFriendRequest::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AcceptFriendRequest_AcceptFriendRequest, Player_0) == 0x000008, "Member 'AcceptFriendRequest_AcceptFriendRequest::Player_0' has a wrong offset!");
static_assert(offsetof(AcceptFriendRequest_AcceptFriendRequest, ReturnValue) == 0x000068, "Member 'AcceptFriendRequest_AcceptFriendRequest::ReturnValue' has a wrong offset!");

// Function Mordhau.GameModeMetadata.GetDefaultObject
// 0x0010 (0x0010 - 0x0000)
struct GameModeMetadata_GetDefaultObject final
{
public:
	TSubclassOf<class UGameModeMetadata>          MetadataClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameModeMetadata*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeMetadata_GetDefaultObject) == 0x000008, "Wrong alignment on GameModeMetadata_GetDefaultObject");
static_assert(sizeof(GameModeMetadata_GetDefaultObject) == 0x000010, "Wrong size on GameModeMetadata_GetDefaultObject");
static_assert(offsetof(GameModeMetadata_GetDefaultObject, MetadataClass) == 0x000000, "Member 'GameModeMetadata_GetDefaultObject::MetadataClass' has a wrong offset!");
static_assert(offsetof(GameModeMetadata_GetDefaultObject, ReturnValue) == 0x000008, "Member 'GameModeMetadata_GetDefaultObject::ReturnValue' has a wrong offset!");

// Function Mordhau.GameModeMetadata.GetPlayerCount
// 0x0018 (0x0018 - 0x0000)
struct GameModeMetadata_GetPlayerCount final
{
public:
	EServerRegion                                 ServerRegion;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeMetadata_GetPlayerCount) == 0x000008, "Wrong alignment on GameModeMetadata_GetPlayerCount");
static_assert(sizeof(GameModeMetadata_GetPlayerCount) == 0x000018, "Wrong size on GameModeMetadata_GetPlayerCount");
static_assert(offsetof(GameModeMetadata_GetPlayerCount, ServerRegion) == 0x000000, "Member 'GameModeMetadata_GetPlayerCount::ServerRegion' has a wrong offset!");
static_assert(offsetof(GameModeMetadata_GetPlayerCount, ReturnValue) == 0x000008, "Member 'GameModeMetadata_GetPlayerCount::ReturnValue' has a wrong offset!");

// Function Mordhau.CreateMatchmakingTicket.CreateMatchmakingTicket
// 0x0098 (0x0098 - 0x0000)
struct CreateMatchmakingTicket_CreateMatchmakingTicket final
{
public:
	class FString                                 QueueName_0;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabMatchmakingAttributes          Attributes_0;                                      // 0x0010(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Members_0;                                         // 0x0078(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Timeout_0;                                         // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCreateMatchmakingTicket*               ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreateMatchmakingTicket_CreateMatchmakingTicket) == 0x000008, "Wrong alignment on CreateMatchmakingTicket_CreateMatchmakingTicket");
static_assert(sizeof(CreateMatchmakingTicket_CreateMatchmakingTicket) == 0x000098, "Wrong size on CreateMatchmakingTicket_CreateMatchmakingTicket");
static_assert(offsetof(CreateMatchmakingTicket_CreateMatchmakingTicket, QueueName_0) == 0x000000, "Member 'CreateMatchmakingTicket_CreateMatchmakingTicket::QueueName_0' has a wrong offset!");
static_assert(offsetof(CreateMatchmakingTicket_CreateMatchmakingTicket, Attributes_0) == 0x000010, "Member 'CreateMatchmakingTicket_CreateMatchmakingTicket::Attributes_0' has a wrong offset!");
static_assert(offsetof(CreateMatchmakingTicket_CreateMatchmakingTicket, Members_0) == 0x000078, "Member 'CreateMatchmakingTicket_CreateMatchmakingTicket::Members_0' has a wrong offset!");
static_assert(offsetof(CreateMatchmakingTicket_CreateMatchmakingTicket, Timeout_0) == 0x000088, "Member 'CreateMatchmakingTicket_CreateMatchmakingTicket::Timeout_0' has a wrong offset!");
static_assert(offsetof(CreateMatchmakingTicket_CreateMatchmakingTicket, ReturnValue) == 0x000090, "Member 'CreateMatchmakingTicket_CreateMatchmakingTicket::ReturnValue' has a wrong offset!");

// Function Mordhau.HeadWearable.AddCoifWearable
// 0x0028 (0x0028 - 0x0000)
struct HeadWearable_AddCoifWearable final
{
public:
	TSoftClassPtr<class UClass>                   Wearable;                                          // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadWearable_AddCoifWearable) == 0x000008, "Wrong alignment on HeadWearable_AddCoifWearable");
static_assert(sizeof(HeadWearable_AddCoifWearable) == 0x000028, "Wrong size on HeadWearable_AddCoifWearable");
static_assert(offsetof(HeadWearable_AddCoifWearable, Wearable) == 0x000000, "Member 'HeadWearable_AddCoifWearable::Wearable' has a wrong offset!");

// Function Mordhau.HeadWearable.GetCoifWearable
// 0x0010 (0x0010 - 0x0000)
struct HeadWearable_GetCoifWearable final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMordhauWearable>           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadWearable_GetCoifWearable) == 0x000008, "Wrong alignment on HeadWearable_GetCoifWearable");
static_assert(sizeof(HeadWearable_GetCoifWearable) == 0x000010, "Wrong size on HeadWearable_GetCoifWearable");
static_assert(offsetof(HeadWearable_GetCoifWearable, Index_0) == 0x000000, "Member 'HeadWearable_GetCoifWearable::Index_0' has a wrong offset!");
static_assert(offsetof(HeadWearable_GetCoifWearable, ReturnValue) == 0x000008, "Member 'HeadWearable_GetCoifWearable::ReturnValue' has a wrong offset!");

// Function Mordhau.HeadWearable.GetCoifWearablesNum
// 0x0004 (0x0004 - 0x0000)
struct HeadWearable_GetCoifWearablesNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadWearable_GetCoifWearablesNum) == 0x000004, "Wrong alignment on HeadWearable_GetCoifWearablesNum");
static_assert(sizeof(HeadWearable_GetCoifWearablesNum) == 0x000004, "Wrong size on HeadWearable_GetCoifWearablesNum");
static_assert(offsetof(HeadWearable_GetCoifWearablesNum, ReturnValue) == 0x000000, "Member 'HeadWearable_GetCoifWearablesNum::ReturnValue' has a wrong offset!");

// Function Mordhau.StatComponent.OnRep_StatValue
// 0x0004 (0x0004 - 0x0000)
struct StatComponent_OnRep_StatValue final
{
public:
	int32                                         OldStatValue;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatComponent_OnRep_StatValue) == 0x000004, "Wrong alignment on StatComponent_OnRep_StatValue");
static_assert(sizeof(StatComponent_OnRep_StatValue) == 0x000004, "Wrong size on StatComponent_OnRep_StatValue");
static_assert(offsetof(StatComponent_OnRep_StatValue, OldStatValue) == 0x000000, "Member 'StatComponent_OnRep_StatValue::OldStatValue' has a wrong offset!");

// Function Mordhau.StatComponent.TickStat
// 0x0004 (0x0004 - 0x0000)
struct StatComponent_TickStat final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatComponent_TickStat) == 0x000004, "Wrong alignment on StatComponent_TickStat");
static_assert(sizeof(StatComponent_TickStat) == 0x000004, "Wrong size on StatComponent_TickStat");
static_assert(offsetof(StatComponent_TickStat, DeltaTime) == 0x000000, "Member 'StatComponent_TickStat::DeltaTime' has a wrong offset!");

// Function Mordhau.StatComponent.GetStatValue
// 0x0004 (0x0004 - 0x0000)
struct StatComponent_GetStatValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatComponent_GetStatValue) == 0x000004, "Wrong alignment on StatComponent_GetStatValue");
static_assert(sizeof(StatComponent_GetStatValue) == 0x000004, "Wrong size on StatComponent_GetStatValue");
static_assert(offsetof(StatComponent_GetStatValue, ReturnValue) == 0x000000, "Member 'StatComponent_GetStatValue::ReturnValue' has a wrong offset!");

// Function Mordhau.HealthStatComponent.OnCharacterDied
// 0x0008 (0x0008 - 0x0000)
struct HealthStatComponent_OnCharacterDied final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthStatComponent_OnCharacterDied) == 0x000008, "Wrong alignment on HealthStatComponent_OnCharacterDied");
static_assert(sizeof(HealthStatComponent_OnCharacterDied) == 0x000008, "Wrong size on HealthStatComponent_OnCharacterDied");
static_assert(offsetof(HealthStatComponent_OnCharacterDied, Character) == 0x000000, "Member 'HealthStatComponent_OnCharacterDied::Character' has a wrong offset!");

// Function Mordhau.MordhauVehicle.KnockOffDriver
// 0x0008 (0x0008 - 0x0000)
struct MordhauVehicle_KnockOffDriver final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauVehicle_KnockOffDriver) == 0x000008, "Wrong alignment on MordhauVehicle_KnockOffDriver");
static_assert(sizeof(MordhauVehicle_KnockOffDriver) == 0x000008, "Wrong size on MordhauVehicle_KnockOffDriver");
static_assert(offsetof(MordhauVehicle_KnockOffDriver, Character) == 0x000000, "Member 'MordhauVehicle_KnockOffDriver::Character' has a wrong offset!");

// Function Mordhau.MordhauVehicle.GetDriver
// 0x0008 (0x0008 - 0x0000)
struct MordhauVehicle_GetDriver final
{
public:
	class AMordhauCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauVehicle_GetDriver) == 0x000008, "Wrong alignment on MordhauVehicle_GetDriver");
static_assert(sizeof(MordhauVehicle_GetDriver) == 0x000008, "Wrong size on MordhauVehicle_GetDriver");
static_assert(offsetof(MordhauVehicle_GetDriver, ReturnValue) == 0x000000, "Member 'MordhauVehicle_GetDriver::ReturnValue' has a wrong offset!");

// Function Mordhau.Horse.OnBumpCapsuleOverlapped
// 0x00B0 (0x00B0 - 0x0000)
struct Horse_OnBumpCapsuleOverlapped final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Horse_OnBumpCapsuleOverlapped) == 0x000008, "Wrong alignment on Horse_OnBumpCapsuleOverlapped");
static_assert(sizeof(Horse_OnBumpCapsuleOverlapped) == 0x0000B0, "Wrong size on Horse_OnBumpCapsuleOverlapped");
static_assert(offsetof(Horse_OnBumpCapsuleOverlapped, OverlappedComp) == 0x000000, "Member 'Horse_OnBumpCapsuleOverlapped::OverlappedComp' has a wrong offset!");
static_assert(offsetof(Horse_OnBumpCapsuleOverlapped, Other) == 0x000008, "Member 'Horse_OnBumpCapsuleOverlapped::Other' has a wrong offset!");
static_assert(offsetof(Horse_OnBumpCapsuleOverlapped, OtherComp) == 0x000010, "Member 'Horse_OnBumpCapsuleOverlapped::OtherComp' has a wrong offset!");
static_assert(offsetof(Horse_OnBumpCapsuleOverlapped, OtherBodyIndex) == 0x000018, "Member 'Horse_OnBumpCapsuleOverlapped::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Horse_OnBumpCapsuleOverlapped, bFromSweep) == 0x00001C, "Member 'Horse_OnBumpCapsuleOverlapped::bFromSweep' has a wrong offset!");
static_assert(offsetof(Horse_OnBumpCapsuleOverlapped, SweepResult) == 0x000020, "Member 'Horse_OnBumpCapsuleOverlapped::SweepResult' has a wrong offset!");

// Function Mordhau.Horse.SecondaryTurnNotAbsolute
// 0x0004 (0x0004 - 0x0000)
struct Horse_SecondaryTurnNotAbsolute final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Horse_SecondaryTurnNotAbsolute) == 0x000004, "Wrong alignment on Horse_SecondaryTurnNotAbsolute");
static_assert(sizeof(Horse_SecondaryTurnNotAbsolute) == 0x000004, "Wrong size on Horse_SecondaryTurnNotAbsolute");
static_assert(offsetof(Horse_SecondaryTurnNotAbsolute, Value) == 0x000000, "Member 'Horse_SecondaryTurnNotAbsolute::Value' has a wrong offset!");

// Function Mordhau.Horse.CalculateBumpDamage
// 0x0010 (0x0010 - 0x0000)
struct Horse_CalculateBumpDamage final
{
public:
	struct FVector                                OurWorldVelocity;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Horse_CalculateBumpDamage) == 0x000004, "Wrong alignment on Horse_CalculateBumpDamage");
static_assert(sizeof(Horse_CalculateBumpDamage) == 0x000010, "Wrong size on Horse_CalculateBumpDamage");
static_assert(offsetof(Horse_CalculateBumpDamage, OurWorldVelocity) == 0x000000, "Member 'Horse_CalculateBumpDamage::OurWorldVelocity' has a wrong offset!");
static_assert(offsetof(Horse_CalculateBumpDamage, ReturnValue) == 0x00000C, "Member 'Horse_CalculateBumpDamage::ReturnValue' has a wrong offset!");

// Function Mordhau.Horse.GetIsInRearingMode
// 0x0001 (0x0001 - 0x0000)
struct Horse_GetIsInRearingMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Horse_GetIsInRearingMode) == 0x000001, "Wrong alignment on Horse_GetIsInRearingMode");
static_assert(sizeof(Horse_GetIsInRearingMode) == 0x000001, "Wrong size on Horse_GetIsInRearingMode");
static_assert(offsetof(Horse_GetIsInRearingMode, ReturnValue) == 0x000000, "Member 'Horse_GetIsInRearingMode::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauVehicleComponent.DriverLateTick
// 0x0010 (0x0010 - 0x0000)
struct MordhauVehicleComponent_DriverLateTick final
{
public:
	class AMordhauCharacter*                      FromDriver;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauVehicleComponent_DriverLateTick) == 0x000008, "Wrong alignment on MordhauVehicleComponent_DriverLateTick");
static_assert(sizeof(MordhauVehicleComponent_DriverLateTick) == 0x000010, "Wrong size on MordhauVehicleComponent_DriverLateTick");
static_assert(offsetof(MordhauVehicleComponent_DriverLateTick, FromDriver) == 0x000000, "Member 'MordhauVehicleComponent_DriverLateTick::FromDriver' has a wrong offset!");
static_assert(offsetof(MordhauVehicleComponent_DriverLateTick, DeltaTime) == 0x000008, "Member 'MordhauVehicleComponent_DriverLateTick::DeltaTime' has a wrong offset!");

// Function Mordhau.MordhauVehicleComponent.GetExitTransform
// 0x0030 (0x0030 - 0x0000)
struct MordhauVehicleComponent_GetExitTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauVehicleComponent_GetExitTransform) == 0x000010, "Wrong alignment on MordhauVehicleComponent_GetExitTransform");
static_assert(sizeof(MordhauVehicleComponent_GetExitTransform) == 0x000030, "Wrong size on MordhauVehicleComponent_GetExitTransform");
static_assert(offsetof(MordhauVehicleComponent_GetExitTransform, ReturnValue) == 0x000000, "Member 'MordhauVehicleComponent_GetExitTransform::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauVehicleComponent.GetVehicleEnterInfo
// 0x0050 (0x0050 - 0x0000)
struct MordhauVehicleComponent_GetVehicleEnterInfo final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FromTransform;                                     // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVehicleTransitionInfo                 ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauVehicleComponent_GetVehicleEnterInfo) == 0x000010, "Wrong alignment on MordhauVehicleComponent_GetVehicleEnterInfo");
static_assert(sizeof(MordhauVehicleComponent_GetVehicleEnterInfo) == 0x000050, "Wrong size on MordhauVehicleComponent_GetVehicleEnterInfo");
static_assert(offsetof(MordhauVehicleComponent_GetVehicleEnterInfo, Character) == 0x000000, "Member 'MordhauVehicleComponent_GetVehicleEnterInfo::Character' has a wrong offset!");
static_assert(offsetof(MordhauVehicleComponent_GetVehicleEnterInfo, FromTransform) == 0x000010, "Member 'MordhauVehicleComponent_GetVehicleEnterInfo::FromTransform' has a wrong offset!");
static_assert(offsetof(MordhauVehicleComponent_GetVehicleEnterInfo, ReturnValue) == 0x000040, "Member 'MordhauVehicleComponent_GetVehicleEnterInfo::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauVehicleComponent.GetVehicleLeaveInfo
// 0x0050 (0x0050 - 0x0000)
struct MordhauVehicleComponent_GetVehicleLeaveInfo final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FromTransform;                                     // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVehicleTransitionInfo                 ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauVehicleComponent_GetVehicleLeaveInfo) == 0x000010, "Wrong alignment on MordhauVehicleComponent_GetVehicleLeaveInfo");
static_assert(sizeof(MordhauVehicleComponent_GetVehicleLeaveInfo) == 0x000050, "Wrong size on MordhauVehicleComponent_GetVehicleLeaveInfo");
static_assert(offsetof(MordhauVehicleComponent_GetVehicleLeaveInfo, Character) == 0x000000, "Member 'MordhauVehicleComponent_GetVehicleLeaveInfo::Character' has a wrong offset!");
static_assert(offsetof(MordhauVehicleComponent_GetVehicleLeaveInfo, FromTransform) == 0x000010, "Member 'MordhauVehicleComponent_GetVehicleLeaveInfo::FromTransform' has a wrong offset!");
static_assert(offsetof(MordhauVehicleComponent_GetVehicleLeaveInfo, ReturnValue) == 0x000040, "Member 'MordhauVehicleComponent_GetVehicleLeaveInfo::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauVehicleComponent.OnStartedDriving
// 0x0008 (0x0008 - 0x0000)
struct MordhauVehicleComponent_OnStartedDriving final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauVehicleComponent_OnStartedDriving) == 0x000008, "Wrong alignment on MordhauVehicleComponent_OnStartedDriving");
static_assert(sizeof(MordhauVehicleComponent_OnStartedDriving) == 0x000008, "Wrong size on MordhauVehicleComponent_OnStartedDriving");
static_assert(offsetof(MordhauVehicleComponent_OnStartedDriving, Character) == 0x000000, "Member 'MordhauVehicleComponent_OnStartedDriving::Character' has a wrong offset!");

// Function Mordhau.MordhauVehicleComponent.OnStoppedDriving
// 0x0008 (0x0008 - 0x0000)
struct MordhauVehicleComponent_OnStoppedDriving final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauVehicleComponent_OnStoppedDriving) == 0x000008, "Wrong alignment on MordhauVehicleComponent_OnStoppedDriving");
static_assert(sizeof(MordhauVehicleComponent_OnStoppedDriving) == 0x000008, "Wrong size on MordhauVehicleComponent_OnStoppedDriving");
static_assert(offsetof(MordhauVehicleComponent_OnStoppedDriving, Character) == 0x000000, "Member 'MordhauVehicleComponent_OnStoppedDriving::Character' has a wrong offset!");

// Function Mordhau.MordhauVehicleComponent.OverrideAttackAngle
// 0x0010 (0x0010 - 0x0000)
struct MordhauVehicleComponent_OverrideAttackAngle final
{
public:
	class UAttackMotion*                          Motion;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauVehicleComponent_OverrideAttackAngle) == 0x000008, "Wrong alignment on MordhauVehicleComponent_OverrideAttackAngle");
static_assert(sizeof(MordhauVehicleComponent_OverrideAttackAngle) == 0x000010, "Wrong size on MordhauVehicleComponent_OverrideAttackAngle");
static_assert(offsetof(MordhauVehicleComponent_OverrideAttackAngle, Motion) == 0x000000, "Member 'MordhauVehicleComponent_OverrideAttackAngle::Motion' has a wrong offset!");
static_assert(offsetof(MordhauVehicleComponent_OverrideAttackAngle, ReturnValue) == 0x000008, "Member 'MordhauVehicleComponent_OverrideAttackAngle::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauVehicleComponent.PostProcessCameraPOV
// 0x0048 (0x0048 - 0x0000)
struct MordhauVehicleComponent_PostProcessCameraPOV final
{
public:
	struct FPOV                                   InPOV;                                             // 0x0000(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      Character;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPOV                                   ReturnValue;                                       // 0x0028(0x001C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauVehicleComponent_PostProcessCameraPOV) == 0x000008, "Wrong alignment on MordhauVehicleComponent_PostProcessCameraPOV");
static_assert(sizeof(MordhauVehicleComponent_PostProcessCameraPOV) == 0x000048, "Wrong size on MordhauVehicleComponent_PostProcessCameraPOV");
static_assert(offsetof(MordhauVehicleComponent_PostProcessCameraPOV, InPOV) == 0x000000, "Member 'MordhauVehicleComponent_PostProcessCameraPOV::InPOV' has a wrong offset!");
static_assert(offsetof(MordhauVehicleComponent_PostProcessCameraPOV, Character) == 0x000020, "Member 'MordhauVehicleComponent_PostProcessCameraPOV::Character' has a wrong offset!");
static_assert(offsetof(MordhauVehicleComponent_PostProcessCameraPOV, ReturnValue) == 0x000028, "Member 'MordhauVehicleComponent_PostProcessCameraPOV::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauVehicleComponent.RequestMeshEnablePhysics
// 0x0004 (0x0004 - 0x0000)
struct MordhauVehicleComponent_RequestMeshEnablePhysics final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauVehicleComponent_RequestMeshEnablePhysics) == 0x000004, "Wrong alignment on MordhauVehicleComponent_RequestMeshEnablePhysics");
static_assert(sizeof(MordhauVehicleComponent_RequestMeshEnablePhysics) == 0x000004, "Wrong size on MordhauVehicleComponent_RequestMeshEnablePhysics");
static_assert(offsetof(MordhauVehicleComponent_RequestMeshEnablePhysics, Duration) == 0x000000, "Member 'MordhauVehicleComponent_RequestMeshEnablePhysics::Duration' has a wrong offset!");

// Function Mordhau.MordhauVehicleComponent.SecondaryTurn
// 0x0008 (0x0008 - 0x0000)
struct MordhauVehicleComponent_SecondaryTurn final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAbsolute;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauVehicleComponent_SecondaryTurn) == 0x000004, "Wrong alignment on MordhauVehicleComponent_SecondaryTurn");
static_assert(sizeof(MordhauVehicleComponent_SecondaryTurn) == 0x000008, "Wrong size on MordhauVehicleComponent_SecondaryTurn");
static_assert(offsetof(MordhauVehicleComponent_SecondaryTurn, Value) == 0x000000, "Member 'MordhauVehicleComponent_SecondaryTurn::Value' has a wrong offset!");
static_assert(offsetof(MordhauVehicleComponent_SecondaryTurn, bIsAbsolute) == 0x000004, "Member 'MordhauVehicleComponent_SecondaryTurn::bIsAbsolute' has a wrong offset!");

// Function Mordhau.MordhauVehicleComponent.SecondaryTurnAtRate
// 0x0004 (0x0004 - 0x0000)
struct MordhauVehicleComponent_SecondaryTurnAtRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauVehicleComponent_SecondaryTurnAtRate) == 0x000004, "Wrong alignment on MordhauVehicleComponent_SecondaryTurnAtRate");
static_assert(sizeof(MordhauVehicleComponent_SecondaryTurnAtRate) == 0x000004, "Wrong size on MordhauVehicleComponent_SecondaryTurnAtRate");
static_assert(offsetof(MordhauVehicleComponent_SecondaryTurnAtRate, Value) == 0x000000, "Member 'MordhauVehicleComponent_SecondaryTurnAtRate::Value' has a wrong offset!");

// Function Mordhau.MordhauVehicleComponent.ServerSecondaryTurn
// 0x0004 (0x0004 - 0x0000)
struct MordhauVehicleComponent_ServerSecondaryTurn final
{
public:
	float                                         NewTurn;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauVehicleComponent_ServerSecondaryTurn) == 0x000004, "Wrong alignment on MordhauVehicleComponent_ServerSecondaryTurn");
static_assert(sizeof(MordhauVehicleComponent_ServerSecondaryTurn) == 0x000004, "Wrong size on MordhauVehicleComponent_ServerSecondaryTurn");
static_assert(offsetof(MordhauVehicleComponent_ServerSecondaryTurn, NewTurn) == 0x000000, "Member 'MordhauVehicleComponent_ServerSecondaryTurn::NewTurn' has a wrong offset!");

// Function Mordhau.MordhauVehicleComponent.SetDriver
// 0x0008 (0x0008 - 0x0000)
struct MordhauVehicleComponent_SetDriver final
{
public:
	class AMordhauCharacter*                      NewDriver;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauVehicleComponent_SetDriver) == 0x000008, "Wrong alignment on MordhauVehicleComponent_SetDriver");
static_assert(sizeof(MordhauVehicleComponent_SetDriver) == 0x000008, "Wrong size on MordhauVehicleComponent_SetDriver");
static_assert(offsetof(MordhauVehicleComponent_SetDriver, NewDriver) == 0x000000, "Member 'MordhauVehicleComponent_SetDriver::NewDriver' has a wrong offset!");

// Function Mordhau.MordhauVehicleComponent.StartDriving
// 0x0008 (0x0008 - 0x0000)
struct MordhauVehicleComponent_StartDriving final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauVehicleComponent_StartDriving) == 0x000008, "Wrong alignment on MordhauVehicleComponent_StartDriving");
static_assert(sizeof(MordhauVehicleComponent_StartDriving) == 0x000008, "Wrong size on MordhauVehicleComponent_StartDriving");
static_assert(offsetof(MordhauVehicleComponent_StartDriving, Character) == 0x000000, "Member 'MordhauVehicleComponent_StartDriving::Character' has a wrong offset!");

// Function Mordhau.MordhauVehicleComponent.UpdateAnimationFor
// 0x0018 (0x0018 - 0x0000)
struct MordhauVehicleComponent_UpdateAnimationFor final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMordhauAnimInstance*                   AnimInst;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauVehicleComponent_UpdateAnimationFor) == 0x000008, "Wrong alignment on MordhauVehicleComponent_UpdateAnimationFor");
static_assert(sizeof(MordhauVehicleComponent_UpdateAnimationFor) == 0x000018, "Wrong size on MordhauVehicleComponent_UpdateAnimationFor");
static_assert(offsetof(MordhauVehicleComponent_UpdateAnimationFor, Character) == 0x000000, "Member 'MordhauVehicleComponent_UpdateAnimationFor::Character' has a wrong offset!");
static_assert(offsetof(MordhauVehicleComponent_UpdateAnimationFor, AnimInst) == 0x000008, "Member 'MordhauVehicleComponent_UpdateAnimationFor::AnimInst' has a wrong offset!");
static_assert(offsetof(MordhauVehicleComponent_UpdateAnimationFor, DeltaTime) == 0x000010, "Member 'MordhauVehicleComponent_UpdateAnimationFor::DeltaTime' has a wrong offset!");

// Function Mordhau.MordhauVehicleComponent.UpdateFPCameraFor
// 0x0010 (0x0010 - 0x0000)
struct MordhauVehicleComponent_UpdateFPCameraFor final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotationOnly;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauVehicleComponent_UpdateFPCameraFor) == 0x000008, "Wrong alignment on MordhauVehicleComponent_UpdateFPCameraFor");
static_assert(sizeof(MordhauVehicleComponent_UpdateFPCameraFor) == 0x000010, "Wrong size on MordhauVehicleComponent_UpdateFPCameraFor");
static_assert(offsetof(MordhauVehicleComponent_UpdateFPCameraFor, Character) == 0x000000, "Member 'MordhauVehicleComponent_UpdateFPCameraFor::Character' has a wrong offset!");
static_assert(offsetof(MordhauVehicleComponent_UpdateFPCameraFor, DeltaSeconds) == 0x000008, "Member 'MordhauVehicleComponent_UpdateFPCameraFor::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(MordhauVehicleComponent_UpdateFPCameraFor, bRotationOnly) == 0x00000C, "Member 'MordhauVehicleComponent_UpdateFPCameraFor::bRotationOnly' has a wrong offset!");

// Function Mordhau.MordhauVehicleComponent.CanDrive
// 0x0010 (0x0010 - 0x0000)
struct MordhauVehicleComponent_CanDrive final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauVehicleComponent_CanDrive) == 0x000008, "Wrong alignment on MordhauVehicleComponent_CanDrive");
static_assert(sizeof(MordhauVehicleComponent_CanDrive) == 0x000010, "Wrong size on MordhauVehicleComponent_CanDrive");
static_assert(offsetof(MordhauVehicleComponent_CanDrive, Character) == 0x000000, "Member 'MordhauVehicleComponent_CanDrive::Character' has a wrong offset!");
static_assert(offsetof(MordhauVehicleComponent_CanDrive, ReturnValue) == 0x000008, "Member 'MordhauVehicleComponent_CanDrive::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauVehicleComponent.GetDriver
// 0x0008 (0x0008 - 0x0000)
struct MordhauVehicleComponent_GetDriver final
{
public:
	class AMordhauCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauVehicleComponent_GetDriver) == 0x000008, "Wrong alignment on MordhauVehicleComponent_GetDriver");
static_assert(sizeof(MordhauVehicleComponent_GetDriver) == 0x000008, "Wrong size on MordhauVehicleComponent_GetDriver");
static_assert(offsetof(MordhauVehicleComponent_GetDriver, ReturnValue) == 0x000000, "Member 'MordhauVehicleComponent_GetDriver::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauVehicleComponent.GetLookUpValue
// 0x0004 (0x0004 - 0x0000)
struct MordhauVehicleComponent_GetLookUpValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauVehicleComponent_GetLookUpValue) == 0x000004, "Wrong alignment on MordhauVehicleComponent_GetLookUpValue");
static_assert(sizeof(MordhauVehicleComponent_GetLookUpValue) == 0x000004, "Wrong size on MordhauVehicleComponent_GetLookUpValue");
static_assert(offsetof(MordhauVehicleComponent_GetLookUpValue, ReturnValue) == 0x000000, "Member 'MordhauVehicleComponent_GetLookUpValue::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauVehicleComponent.GetMesh
// 0x0008 (0x0008 - 0x0000)
struct MordhauVehicleComponent_GetMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauVehicleComponent_GetMesh) == 0x000008, "Wrong alignment on MordhauVehicleComponent_GetMesh");
static_assert(sizeof(MordhauVehicleComponent_GetMesh) == 0x000008, "Wrong size on MordhauVehicleComponent_GetMesh");
static_assert(offsetof(MordhauVehicleComponent_GetMesh, ReturnValue) == 0x000000, "Member 'MordhauVehicleComponent_GetMesh::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauVehicleComponent.GetPawnOwner
// 0x0008 (0x0008 - 0x0000)
struct MordhauVehicleComponent_GetPawnOwner final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauVehicleComponent_GetPawnOwner) == 0x000008, "Wrong alignment on MordhauVehicleComponent_GetPawnOwner");
static_assert(sizeof(MordhauVehicleComponent_GetPawnOwner) == 0x000008, "Wrong size on MordhauVehicleComponent_GetPawnOwner");
static_assert(offsetof(MordhauVehicleComponent_GetPawnOwner, ReturnValue) == 0x000000, "Member 'MordhauVehicleComponent_GetPawnOwner::ReturnValue' has a wrong offset!");

// Function Mordhau.Interactable.HeldInteractionStart
// 0x0008 (0x0008 - 0x0000)
struct Interactable_HeldInteractionStart final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_HeldInteractionStart) == 0x000008, "Wrong alignment on Interactable_HeldInteractionStart");
static_assert(sizeof(Interactable_HeldInteractionStart) == 0x000008, "Wrong size on Interactable_HeldInteractionStart");
static_assert(offsetof(Interactable_HeldInteractionStart, Character) == 0x000000, "Member 'Interactable_HeldInteractionStart::Character' has a wrong offset!");

// Function Mordhau.Interactable.InteractionEnd
// 0x0008 (0x0008 - 0x0000)
struct Interactable_InteractionEnd final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_InteractionEnd) == 0x000008, "Wrong alignment on Interactable_InteractionEnd");
static_assert(sizeof(Interactable_InteractionEnd) == 0x000008, "Wrong size on Interactable_InteractionEnd");
static_assert(offsetof(Interactable_InteractionEnd, Character) == 0x000000, "Member 'Interactable_InteractionEnd::Character' has a wrong offset!");

// Function Mordhau.Interactable.InteractionMaintained
// 0x0010 (0x0010 - 0x0000)
struct Interactable_InteractionMaintained final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Interactable_InteractionMaintained) == 0x000008, "Wrong alignment on Interactable_InteractionMaintained");
static_assert(sizeof(Interactable_InteractionMaintained) == 0x000010, "Wrong size on Interactable_InteractionMaintained");
static_assert(offsetof(Interactable_InteractionMaintained, Character) == 0x000000, "Member 'Interactable_InteractionMaintained::Character' has a wrong offset!");
static_assert(offsetof(Interactable_InteractionMaintained, DeltaTime) == 0x000008, "Member 'Interactable_InteractionMaintained::DeltaTime' has a wrong offset!");

// Function Mordhau.Interactable.InteractionStart
// 0x0008 (0x0008 - 0x0000)
struct Interactable_InteractionStart final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_InteractionStart) == 0x000008, "Wrong alignment on Interactable_InteractionStart");
static_assert(sizeof(Interactable_InteractionStart) == 0x000008, "Wrong size on Interactable_InteractionStart");
static_assert(offsetof(Interactable_InteractionStart, Character) == 0x000000, "Member 'Interactable_InteractionStart::Character' has a wrong offset!");

// Function Mordhau.Interactable.InteractPassively
// 0x0008 (0x0008 - 0x0000)
struct Interactable_InteractPassively final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_InteractPassively) == 0x000008, "Wrong alignment on Interactable_InteractPassively");
static_assert(sizeof(Interactable_InteractPassively) == 0x000008, "Wrong size on Interactable_InteractPassively");
static_assert(offsetof(Interactable_InteractPassively, Character) == 0x000000, "Member 'Interactable_InteractPassively::Character' has a wrong offset!");

// Function Mordhau.Interactable.OnHeldInteractionStart
// 0x0008 (0x0008 - 0x0000)
struct Interactable_OnHeldInteractionStart final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_OnHeldInteractionStart) == 0x000008, "Wrong alignment on Interactable_OnHeldInteractionStart");
static_assert(sizeof(Interactable_OnHeldInteractionStart) == 0x000008, "Wrong size on Interactable_OnHeldInteractionStart");
static_assert(offsetof(Interactable_OnHeldInteractionStart, Character) == 0x000000, "Member 'Interactable_OnHeldInteractionStart::Character' has a wrong offset!");

// Function Mordhau.Interactable.OnHighlightMaintained
// 0x0008 (0x0008 - 0x0000)
struct Interactable_OnHighlightMaintained final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_OnHighlightMaintained) == 0x000008, "Wrong alignment on Interactable_OnHighlightMaintained");
static_assert(sizeof(Interactable_OnHighlightMaintained) == 0x000008, "Wrong size on Interactable_OnHighlightMaintained");
static_assert(offsetof(Interactable_OnHighlightMaintained, Character) == 0x000000, "Member 'Interactable_OnHighlightMaintained::Character' has a wrong offset!");

// Function Mordhau.Interactable.OnInteractionEnd
// 0x0008 (0x0008 - 0x0000)
struct Interactable_OnInteractionEnd final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_OnInteractionEnd) == 0x000008, "Wrong alignment on Interactable_OnInteractionEnd");
static_assert(sizeof(Interactable_OnInteractionEnd) == 0x000008, "Wrong size on Interactable_OnInteractionEnd");
static_assert(offsetof(Interactable_OnInteractionEnd, Character) == 0x000000, "Member 'Interactable_OnInteractionEnd::Character' has a wrong offset!");

// Function Mordhau.Interactable.OnInteractionMaintained
// 0x0008 (0x0008 - 0x0000)
struct Interactable_OnInteractionMaintained final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_OnInteractionMaintained) == 0x000008, "Wrong alignment on Interactable_OnInteractionMaintained");
static_assert(sizeof(Interactable_OnInteractionMaintained) == 0x000008, "Wrong size on Interactable_OnInteractionMaintained");
static_assert(offsetof(Interactable_OnInteractionMaintained, Character) == 0x000000, "Member 'Interactable_OnInteractionMaintained::Character' has a wrong offset!");

// Function Mordhau.Interactable.OnInteractionStart
// 0x0008 (0x0008 - 0x0000)
struct Interactable_OnInteractionStart final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_OnInteractionStart) == 0x000008, "Wrong alignment on Interactable_OnInteractionStart");
static_assert(sizeof(Interactable_OnInteractionStart) == 0x000008, "Wrong size on Interactable_OnInteractionStart");
static_assert(offsetof(Interactable_OnInteractionStart, Character) == 0x000000, "Member 'Interactable_OnInteractionStart::Character' has a wrong offset!");

// Function Mordhau.Interactable.OnInteractPassively
// 0x0008 (0x0008 - 0x0000)
struct Interactable_OnInteractPassively final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_OnInteractPassively) == 0x000008, "Wrong alignment on Interactable_OnInteractPassively");
static_assert(sizeof(Interactable_OnInteractPassively) == 0x000008, "Wrong size on Interactable_OnInteractPassively");
static_assert(offsetof(Interactable_OnInteractPassively, Character) == 0x000000, "Member 'Interactable_OnInteractPassively::Character' has a wrong offset!");

// Function Mordhau.Interactable.CanHeldInteract
// 0x0010 (0x0010 - 0x0000)
struct Interactable_CanHeldInteract final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Interactable_CanHeldInteract) == 0x000008, "Wrong alignment on Interactable_CanHeldInteract");
static_assert(sizeof(Interactable_CanHeldInteract) == 0x000010, "Wrong size on Interactable_CanHeldInteract");
static_assert(offsetof(Interactable_CanHeldInteract, Character) == 0x000000, "Member 'Interactable_CanHeldInteract::Character' has a wrong offset!");
static_assert(offsetof(Interactable_CanHeldInteract, ReturnValue) == 0x000008, "Member 'Interactable_CanHeldInteract::ReturnValue' has a wrong offset!");

// Function Mordhau.Interactable.CanInteract
// 0x0010 (0x0010 - 0x0000)
struct Interactable_CanInteract final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Interactable_CanInteract) == 0x000008, "Wrong alignment on Interactable_CanInteract");
static_assert(sizeof(Interactable_CanInteract) == 0x000010, "Wrong size on Interactable_CanInteract");
static_assert(offsetof(Interactable_CanInteract, Character) == 0x000000, "Member 'Interactable_CanInteract::Character' has a wrong offset!");
static_assert(offsetof(Interactable_CanInteract, ReturnValue) == 0x000008, "Member 'Interactable_CanInteract::ReturnValue' has a wrong offset!");

// Function Mordhau.Interactable.CanInteractPassively
// 0x0010 (0x0010 - 0x0000)
struct Interactable_CanInteractPassively final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Interactable_CanInteractPassively) == 0x000008, "Wrong alignment on Interactable_CanInteractPassively");
static_assert(sizeof(Interactable_CanInteractPassively) == 0x000010, "Wrong size on Interactable_CanInteractPassively");
static_assert(offsetof(Interactable_CanInteractPassively, Character) == 0x000000, "Member 'Interactable_CanInteractPassively::Character' has a wrong offset!");
static_assert(offsetof(Interactable_CanInteractPassively, ReturnValue) == 0x000008, "Member 'Interactable_CanInteractPassively::ReturnValue' has a wrong offset!");

// Function Mordhau.Interactable.GetMaxInteractionHoldTime
// 0x0004 (0x0004 - 0x0000)
struct Interactable_GetMaxInteractionHoldTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_GetMaxInteractionHoldTime) == 0x000004, "Wrong alignment on Interactable_GetMaxInteractionHoldTime");
static_assert(sizeof(Interactable_GetMaxInteractionHoldTime) == 0x000004, "Wrong size on Interactable_GetMaxInteractionHoldTime");
static_assert(offsetof(Interactable_GetMaxInteractionHoldTime, ReturnValue) == 0x000000, "Member 'Interactable_GetMaxInteractionHoldTime::ReturnValue' has a wrong offset!");

// Function Mordhau.Interactable.IsCooperativeInteractionAllowed
// 0x0001 (0x0001 - 0x0000)
struct Interactable_IsCooperativeInteractionAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_IsCooperativeInteractionAllowed) == 0x000001, "Wrong alignment on Interactable_IsCooperativeInteractionAllowed");
static_assert(sizeof(Interactable_IsCooperativeInteractionAllowed) == 0x000001, "Wrong size on Interactable_IsCooperativeInteractionAllowed");
static_assert(offsetof(Interactable_IsCooperativeInteractionAllowed, ReturnValue) == 0x000000, "Member 'Interactable_IsCooperativeInteractionAllowed::ReturnValue' has a wrong offset!");

// Function Mordhau.InteractionComponent.InteractionStart
// 0x0008 (0x0008 - 0x0000)
struct InteractionComponent_InteractionStart final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_InteractionStart) == 0x000008, "Wrong alignment on InteractionComponent_InteractionStart");
static_assert(sizeof(InteractionComponent_InteractionStart) == 0x000008, "Wrong size on InteractionComponent_InteractionStart");
static_assert(offsetof(InteractionComponent_InteractionStart, Character) == 0x000000, "Member 'InteractionComponent_InteractionStart::Character' has a wrong offset!");

// Function Mordhau.InteractionComponent.OnInteractionStart
// 0x0008 (0x0008 - 0x0000)
struct InteractionComponent_OnInteractionStart final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_OnInteractionStart) == 0x000008, "Wrong alignment on InteractionComponent_OnInteractionStart");
static_assert(sizeof(InteractionComponent_OnInteractionStart) == 0x000008, "Wrong size on InteractionComponent_OnInteractionStart");
static_assert(offsetof(InteractionComponent_OnInteractionStart, Character) == 0x000000, "Member 'InteractionComponent_OnInteractionStart::Character' has a wrong offset!");

// Function Mordhau.InteractionComponent.CanInteract
// 0x0010 (0x0010 - 0x0000)
struct InteractionComponent_CanInteract final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionComponent_CanInteract) == 0x000008, "Wrong alignment on InteractionComponent_CanInteract");
static_assert(sizeof(InteractionComponent_CanInteract) == 0x000010, "Wrong size on InteractionComponent_CanInteract");
static_assert(offsetof(InteractionComponent_CanInteract, Character) == 0x000000, "Member 'InteractionComponent_CanInteract::Character' has a wrong offset!");
static_assert(offsetof(InteractionComponent_CanInteract, ReturnValue) == 0x000008, "Member 'InteractionComponent_CanInteract::ReturnValue' has a wrong offset!");

// Function Mordhau.MasterField.ComputeDistanceIntoField
// 0x0010 (0x0010 - 0x0000)
struct MasterField_ComputeDistanceIntoField final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterField_ComputeDistanceIntoField) == 0x000004, "Wrong alignment on MasterField_ComputeDistanceIntoField");
static_assert(sizeof(MasterField_ComputeDistanceIntoField) == 0x000010, "Wrong size on MasterField_ComputeDistanceIntoField");
static_assert(offsetof(MasterField_ComputeDistanceIntoField, Location) == 0x000000, "Member 'MasterField_ComputeDistanceIntoField::Location' has a wrong offset!");
static_assert(offsetof(MasterField_ComputeDistanceIntoField, ReturnValue) == 0x00000C, "Member 'MasterField_ComputeDistanceIntoField::ReturnValue' has a wrong offset!");

// Function Mordhau.MasterField.GetSubFields
// 0x0010 (0x0010 - 0x0000)
struct MasterField_GetSubFields final
{
public:
	TArray<class ASubField*>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterField_GetSubFields) == 0x000008, "Wrong alignment on MasterField_GetSubFields");
static_assert(sizeof(MasterField_GetSubFields) == 0x000010, "Wrong size on MasterField_GetSubFields");
static_assert(offsetof(MasterField_GetSubFields, ReturnValue) == 0x000000, "Member 'MasterField_GetSubFields::ReturnValue' has a wrong offset!");

// Function Mordhau.MasterField.SetSubFieldsHidden
// 0x0001 (0x0001 - 0x0000)
struct MasterField_SetSubFieldsHidden final
{
public:
	bool                                          bAreHidden;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterField_SetSubFieldsHidden) == 0x000001, "Wrong alignment on MasterField_SetSubFieldsHidden");
static_assert(sizeof(MasterField_SetSubFieldsHidden) == 0x000001, "Wrong size on MasterField_SetSubFieldsHidden");
static_assert(offsetof(MasterField_SetSubFieldsHidden, bAreHidden) == 0x000000, "Member 'MasterField_SetSubFieldsHidden::bAreHidden' has a wrong offset!");

// Function Mordhau.MasterField.GetFieldBoundsCenter
// 0x000C (0x000C - 0x0000)
struct MasterField_GetFieldBoundsCenter final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterField_GetFieldBoundsCenter) == 0x000004, "Wrong alignment on MasterField_GetFieldBoundsCenter");
static_assert(sizeof(MasterField_GetFieldBoundsCenter) == 0x00000C, "Wrong size on MasterField_GetFieldBoundsCenter");
static_assert(offsetof(MasterField_GetFieldBoundsCenter, ReturnValue) == 0x000000, "Member 'MasterField_GetFieldBoundsCenter::ReturnValue' has a wrong offset!");

// Function Mordhau.JoinMatchmakingTicket.JoinMatchmakingTicket
// 0x0090 (0x0090 - 0x0000)
struct JoinMatchmakingTicket_JoinMatchmakingTicket final
{
public:
	class FString                                 QueueName_0;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TicketId_0;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabMatchmakingAttributes          Attributes_0;                                      // 0x0020(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJoinMatchmakingTicket*                 ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JoinMatchmakingTicket_JoinMatchmakingTicket) == 0x000008, "Wrong alignment on JoinMatchmakingTicket_JoinMatchmakingTicket");
static_assert(sizeof(JoinMatchmakingTicket_JoinMatchmakingTicket) == 0x000090, "Wrong size on JoinMatchmakingTicket_JoinMatchmakingTicket");
static_assert(offsetof(JoinMatchmakingTicket_JoinMatchmakingTicket, QueueName_0) == 0x000000, "Member 'JoinMatchmakingTicket_JoinMatchmakingTicket::QueueName_0' has a wrong offset!");
static_assert(offsetof(JoinMatchmakingTicket_JoinMatchmakingTicket, TicketId_0) == 0x000010, "Member 'JoinMatchmakingTicket_JoinMatchmakingTicket::TicketId_0' has a wrong offset!");
static_assert(offsetof(JoinMatchmakingTicket_JoinMatchmakingTicket, Attributes_0) == 0x000020, "Member 'JoinMatchmakingTicket_JoinMatchmakingTicket::Attributes_0' has a wrong offset!");
static_assert(offsetof(JoinMatchmakingTicket_JoinMatchmakingTicket, ReturnValue) == 0x000088, "Member 'JoinMatchmakingTicket_JoinMatchmakingTicket::ReturnValue' has a wrong offset!");

// Function Mordhau.CancelMatchmakingTicket.CancelMatchmakingTicket
// 0x0018 (0x0018 - 0x0000)
struct CancelMatchmakingTicket_CancelMatchmakingTicket final
{
public:
	class FString                                 QueueName_0;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCancelMatchmakingTicket*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CancelMatchmakingTicket_CancelMatchmakingTicket) == 0x000008, "Wrong alignment on CancelMatchmakingTicket_CancelMatchmakingTicket");
static_assert(sizeof(CancelMatchmakingTicket_CancelMatchmakingTicket) == 0x000018, "Wrong size on CancelMatchmakingTicket_CancelMatchmakingTicket");
static_assert(offsetof(CancelMatchmakingTicket_CancelMatchmakingTicket, QueueName_0) == 0x000000, "Member 'CancelMatchmakingTicket_CancelMatchmakingTicket::QueueName_0' has a wrong offset!");
static_assert(offsetof(CancelMatchmakingTicket_CancelMatchmakingTicket, ReturnValue) == 0x000010, "Member 'CancelMatchmakingTicket_CancelMatchmakingTicket::ReturnValue' has a wrong offset!");

// Function Mordhau.GetMatchmakingTicket.GetMatchmakingTicket
// 0x0028 (0x0028 - 0x0000)
struct GetMatchmakingTicket_GetMatchmakingTicket final
{
public:
	class FString                                 QueueName_0;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TicketId_0;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGetMatchmakingTicket*                  ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetMatchmakingTicket_GetMatchmakingTicket) == 0x000008, "Wrong alignment on GetMatchmakingTicket_GetMatchmakingTicket");
static_assert(sizeof(GetMatchmakingTicket_GetMatchmakingTicket) == 0x000028, "Wrong size on GetMatchmakingTicket_GetMatchmakingTicket");
static_assert(offsetof(GetMatchmakingTicket_GetMatchmakingTicket, QueueName_0) == 0x000000, "Member 'GetMatchmakingTicket_GetMatchmakingTicket::QueueName_0' has a wrong offset!");
static_assert(offsetof(GetMatchmakingTicket_GetMatchmakingTicket, TicketId_0) == 0x000010, "Member 'GetMatchmakingTicket_GetMatchmakingTicket::TicketId_0' has a wrong offset!");
static_assert(offsetof(GetMatchmakingTicket_GetMatchmakingTicket, ReturnValue) == 0x000020, "Member 'GetMatchmakingTicket_GetMatchmakingTicket::ReturnValue' has a wrong offset!");

// Function Mordhau.GetMatchmakingMatch.GetMatchmakingMatch
// 0x0028 (0x0028 - 0x0000)
struct GetMatchmakingMatch_GetMatchmakingMatch final
{
public:
	class FString                                 QueueName_0;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchId_0;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGetMatchmakingMatch*                   ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetMatchmakingMatch_GetMatchmakingMatch) == 0x000008, "Wrong alignment on GetMatchmakingMatch_GetMatchmakingMatch");
static_assert(sizeof(GetMatchmakingMatch_GetMatchmakingMatch) == 0x000028, "Wrong size on GetMatchmakingMatch_GetMatchmakingMatch");
static_assert(offsetof(GetMatchmakingMatch_GetMatchmakingMatch, QueueName_0) == 0x000000, "Member 'GetMatchmakingMatch_GetMatchmakingMatch::QueueName_0' has a wrong offset!");
static_assert(offsetof(GetMatchmakingMatch_GetMatchmakingMatch, MatchId_0) == 0x000010, "Member 'GetMatchmakingMatch_GetMatchmakingMatch::MatchId_0' has a wrong offset!");
static_assert(offsetof(GetMatchmakingMatch_GetMatchmakingMatch, ReturnValue) == 0x000020, "Member 'GetMatchmakingMatch_GetMatchmakingMatch::ReturnValue' has a wrong offset!");

// Function Mordhau.GetGameServers.GetGameServers
// 0x0050 (0x0050 - 0x0000)
struct GetGameServers_GetGameServers final
{
public:
	struct FGameServerFilter                      Filter_0;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UGetGameServers*                        ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetGameServers_GetGameServers) == 0x000008, "Wrong alignment on GetGameServers_GetGameServers");
static_assert(sizeof(GetGameServers_GetGameServers) == 0x000050, "Wrong size on GetGameServers_GetGameServers");
static_assert(offsetof(GetGameServers_GetGameServers, Filter_0) == 0x000000, "Member 'GetGameServers_GetGameServers::Filter_0' has a wrong offset!");
static_assert(offsetof(GetGameServers_GetGameServers, ReturnValue) == 0x000048, "Member 'GetGameServers_GetGameServers::ReturnValue' has a wrong offset!");

// Function Mordhau.GetGameServer.GetGameServer
// 0x0030 (0x0030 - 0x0000)
struct GetGameServer_GetGameServer final
{
public:
	class FString                                 ServerId_0;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IPV4Address_0;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port_0;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGetGameServer*                         ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetGameServer_GetGameServer) == 0x000008, "Wrong alignment on GetGameServer_GetGameServer");
static_assert(sizeof(GetGameServer_GetGameServer) == 0x000030, "Wrong size on GetGameServer_GetGameServer");
static_assert(offsetof(GetGameServer_GetGameServer, ServerId_0) == 0x000000, "Member 'GetGameServer_GetGameServer::ServerId_0' has a wrong offset!");
static_assert(offsetof(GetGameServer_GetGameServer, IPV4Address_0) == 0x000010, "Member 'GetGameServer_GetGameServer::IPV4Address_0' has a wrong offset!");
static_assert(offsetof(GetGameServer_GetGameServer, Port_0) == 0x000020, "Member 'GetGameServer_GetGameServer::Port_0' has a wrong offset!");
static_assert(offsetof(GetGameServer_GetGameServer, ReturnValue) == 0x000028, "Member 'GetGameServer_GetGameServer::ReturnValue' has a wrong offset!");

// Function Mordhau.ReserveServerSlots.ReserveServerSlots
// 0x0058 (0x0058 - 0x0000)
struct ReserveServerSlots_ReserveServerSlots final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabServerDetails                  ServerDetails_0;                                   // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FPlayFabMatchmakingPlayer>      Players_0;                                         // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UReserveServerSlots*                    ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReserveServerSlots_ReserveServerSlots) == 0x000008, "Wrong alignment on ReserveServerSlots_ReserveServerSlots");
static_assert(sizeof(ReserveServerSlots_ReserveServerSlots) == 0x000058, "Wrong size on ReserveServerSlots_ReserveServerSlots");
static_assert(offsetof(ReserveServerSlots_ReserveServerSlots, WorldContextObject) == 0x000000, "Member 'ReserveServerSlots_ReserveServerSlots::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ReserveServerSlots_ReserveServerSlots, ServerDetails_0) == 0x000008, "Member 'ReserveServerSlots_ReserveServerSlots::ServerDetails_0' has a wrong offset!");
static_assert(offsetof(ReserveServerSlots_ReserveServerSlots, Players_0) == 0x000040, "Member 'ReserveServerSlots_ReserveServerSlots::Players_0' has a wrong offset!");
static_assert(offsetof(ReserveServerSlots_ReserveServerSlots, ReturnValue) == 0x000050, "Member 'ReserveServerSlots_ReserveServerSlots::ReturnValue' has a wrong offset!");

// Function Mordhau.LeaveMatchmakingMatch.LeaveMatchmakingMatch
// 0x00C0 (0x00C0 - 0x0000)
struct LeaveMatchmakingMatch_LeaveMatchmakingMatch final
{
public:
	struct FPlayFabMatchmakingMatch               Match_0;                                           // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ULeaveMatchmakingMatch*                 ReturnValue;                                       // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LeaveMatchmakingMatch_LeaveMatchmakingMatch) == 0x000008, "Wrong alignment on LeaveMatchmakingMatch_LeaveMatchmakingMatch");
static_assert(sizeof(LeaveMatchmakingMatch_LeaveMatchmakingMatch) == 0x0000C0, "Wrong size on LeaveMatchmakingMatch_LeaveMatchmakingMatch");
static_assert(offsetof(LeaveMatchmakingMatch_LeaveMatchmakingMatch, Match_0) == 0x000000, "Member 'LeaveMatchmakingMatch_LeaveMatchmakingMatch::Match_0' has a wrong offset!");
static_assert(offsetof(LeaveMatchmakingMatch_LeaveMatchmakingMatch, ReturnValue) == 0x0000B8, "Member 'LeaveMatchmakingMatch_LeaveMatchmakingMatch::ReturnValue' has a wrong offset!");

// Function Mordhau.StartMatchmakingMatch.StartMatchmakingMatch
// 0x00C8 (0x00C8 - 0x0000)
struct StartMatchmakingMatch_StartMatchmakingMatch final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabMatchmakingMatch               Match_0;                                           // 0x0008(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UStartMatchmakingMatch*                 ReturnValue;                                       // 0x00C0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StartMatchmakingMatch_StartMatchmakingMatch) == 0x000008, "Wrong alignment on StartMatchmakingMatch_StartMatchmakingMatch");
static_assert(sizeof(StartMatchmakingMatch_StartMatchmakingMatch) == 0x0000C8, "Wrong size on StartMatchmakingMatch_StartMatchmakingMatch");
static_assert(offsetof(StartMatchmakingMatch_StartMatchmakingMatch, WorldContextObject) == 0x000000, "Member 'StartMatchmakingMatch_StartMatchmakingMatch::WorldContextObject' has a wrong offset!");
static_assert(offsetof(StartMatchmakingMatch_StartMatchmakingMatch, Match_0) == 0x000008, "Member 'StartMatchmakingMatch_StartMatchmakingMatch::Match_0' has a wrong offset!");
static_assert(offsetof(StartMatchmakingMatch_StartMatchmakingMatch, ReturnValue) == 0x0000C0, "Member 'StartMatchmakingMatch_StartMatchmakingMatch::ReturnValue' has a wrong offset!");

// Function Mordhau.SetMatchmakingMatchServerDetails.SetMatchmakingMatchServerDetails
// 0x00F8 (0x00F8 - 0x0000)
struct SetMatchmakingMatchServerDetails_SetMatchmakingMatchServerDetails final
{
public:
	struct FPlayFabMatchmakingMatch               Match_0;                                           // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPlayFabServerDetails                  ServerDetails_0;                                   // 0x00B8(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class USetMatchmakingMatchServerDetails*      ReturnValue;                                       // 0x00F0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SetMatchmakingMatchServerDetails_SetMatchmakingMatchServerDetails) == 0x000008, "Wrong alignment on SetMatchmakingMatchServerDetails_SetMatchmakingMatchServerDetails");
static_assert(sizeof(SetMatchmakingMatchServerDetails_SetMatchmakingMatchServerDetails) == 0x0000F8, "Wrong size on SetMatchmakingMatchServerDetails_SetMatchmakingMatchServerDetails");
static_assert(offsetof(SetMatchmakingMatchServerDetails_SetMatchmakingMatchServerDetails, Match_0) == 0x000000, "Member 'SetMatchmakingMatchServerDetails_SetMatchmakingMatchServerDetails::Match_0' has a wrong offset!");
static_assert(offsetof(SetMatchmakingMatchServerDetails_SetMatchmakingMatchServerDetails, ServerDetails_0) == 0x0000B8, "Member 'SetMatchmakingMatchServerDetails_SetMatchmakingMatchServerDetails::ServerDetails_0' has a wrong offset!");
static_assert(offsetof(SetMatchmakingMatchServerDetails_SetMatchmakingMatchServerDetails, ReturnValue) == 0x0000F0, "Member 'SetMatchmakingMatchServerDetails_SetMatchmakingMatchServerDetails::ReturnValue' has a wrong offset!");

// Function Mordhau.GetMatchmakingPenalty.GetMatchmakingPenalty
// 0x0028 (0x0028 - 0x0000)
struct GetMatchmakingPenalty_GetMatchmakingPenalty final
{
public:
	struct FPlayFabPlayerEntity                   PlayerEntity_0;                                    // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGetMatchmakingPenalty*                 ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetMatchmakingPenalty_GetMatchmakingPenalty) == 0x000008, "Wrong alignment on GetMatchmakingPenalty_GetMatchmakingPenalty");
static_assert(sizeof(GetMatchmakingPenalty_GetMatchmakingPenalty) == 0x000028, "Wrong size on GetMatchmakingPenalty_GetMatchmakingPenalty");
static_assert(offsetof(GetMatchmakingPenalty_GetMatchmakingPenalty, PlayerEntity_0) == 0x000000, "Member 'GetMatchmakingPenalty_GetMatchmakingPenalty::PlayerEntity_0' has a wrong offset!");
static_assert(offsetof(GetMatchmakingPenalty_GetMatchmakingPenalty, ReturnValue) == 0x000020, "Member 'GetMatchmakingPenalty_GetMatchmakingPenalty::ReturnValue' has a wrong offset!");

// Function Mordhau.PenalizeForLeavingActiveMatch.PenalizeForLeavingActiveMatch
// 0x0028 (0x0028 - 0x0000)
struct PenalizeForLeavingActiveMatch_PenalizeForLeavingActiveMatch final
{
public:
	struct FPlayFabPlayerEntity                   PlayerEntity_0;                                    // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPenalizeForLeavingActiveMatch*         ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PenalizeForLeavingActiveMatch_PenalizeForLeavingActiveMatch) == 0x000008, "Wrong alignment on PenalizeForLeavingActiveMatch_PenalizeForLeavingActiveMatch");
static_assert(sizeof(PenalizeForLeavingActiveMatch_PenalizeForLeavingActiveMatch) == 0x000028, "Wrong size on PenalizeForLeavingActiveMatch_PenalizeForLeavingActiveMatch");
static_assert(offsetof(PenalizeForLeavingActiveMatch_PenalizeForLeavingActiveMatch, PlayerEntity_0) == 0x000000, "Member 'PenalizeForLeavingActiveMatch_PenalizeForLeavingActiveMatch::PlayerEntity_0' has a wrong offset!");
static_assert(offsetof(PenalizeForLeavingActiveMatch_PenalizeForLeavingActiveMatch, ReturnValue) == 0x000020, "Member 'PenalizeForLeavingActiveMatch_PenalizeForLeavingActiveMatch::ReturnValue' has a wrong offset!");

// Function Mordhau.PenalizeForLeavingActiveMatch.OnGetMatchmakingPenaltyFailure
// 0x0038 (0x0038 - 0x0000)
struct PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltyFailure final
{
public:
	struct FPlayFabPlayerEntity                   InPlayerEntity;                                    // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InLeaveCount;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              InLeaveTime;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              InBanEndTime;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltyFailure) == 0x000008, "Wrong alignment on PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltyFailure");
static_assert(sizeof(PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltyFailure) == 0x000038, "Wrong size on PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltyFailure");
static_assert(offsetof(PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltyFailure, InPlayerEntity) == 0x000000, "Member 'PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltyFailure::InPlayerEntity' has a wrong offset!");
static_assert(offsetof(PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltyFailure, InLeaveCount) == 0x000020, "Member 'PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltyFailure::InLeaveCount' has a wrong offset!");
static_assert(offsetof(PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltyFailure, InLeaveTime) == 0x000028, "Member 'PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltyFailure::InLeaveTime' has a wrong offset!");
static_assert(offsetof(PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltyFailure, InBanEndTime) == 0x000030, "Member 'PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltyFailure::InBanEndTime' has a wrong offset!");

// Function Mordhau.PenalizeForLeavingActiveMatch.OnGetMatchmakingPenaltySuccess
// 0x0038 (0x0038 - 0x0000)
struct PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltySuccess final
{
public:
	struct FPlayFabPlayerEntity                   InPlayerEntity;                                    // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InLeaveCount;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              InLeaveTime;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              InBanEndTime;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltySuccess) == 0x000008, "Wrong alignment on PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltySuccess");
static_assert(sizeof(PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltySuccess) == 0x000038, "Wrong size on PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltySuccess");
static_assert(offsetof(PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltySuccess, InPlayerEntity) == 0x000000, "Member 'PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltySuccess::InPlayerEntity' has a wrong offset!");
static_assert(offsetof(PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltySuccess, InLeaveCount) == 0x000020, "Member 'PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltySuccess::InLeaveCount' has a wrong offset!");
static_assert(offsetof(PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltySuccess, InLeaveTime) == 0x000028, "Member 'PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltySuccess::InLeaveTime' has a wrong offset!");
static_assert(offsetof(PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltySuccess, InBanEndTime) == 0x000030, "Member 'PenalizeForLeavingActiveMatch_OnGetMatchmakingPenaltySuccess::InBanEndTime' has a wrong offset!");

// Function Mordhau.RequestPartyStats.RequestPartyStats
// 0x0010 (0x0010 - 0x0000)
struct RequestPartyStats_RequestPartyStats final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URequestPartyStats*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RequestPartyStats_RequestPartyStats) == 0x000008, "Wrong alignment on RequestPartyStats_RequestPartyStats");
static_assert(sizeof(RequestPartyStats_RequestPartyStats) == 0x000010, "Wrong size on RequestPartyStats_RequestPartyStats");
static_assert(offsetof(RequestPartyStats_RequestPartyStats, WorldContextObject) == 0x000000, "Member 'RequestPartyStats_RequestPartyStats::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RequestPartyStats_RequestPartyStats, ReturnValue) == 0x000008, "Member 'RequestPartyStats_RequestPartyStats::ReturnValue' has a wrong offset!");

// Function Mordhau.Mods.CancelModDownload
// 0x0004 (0x0004 - 0x0000)
struct Mods_CancelModDownload final
{
public:
	int32                                         ModId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mods_CancelModDownload) == 0x000004, "Wrong alignment on Mods_CancelModDownload");
static_assert(sizeof(Mods_CancelModDownload) == 0x000004, "Wrong size on Mods_CancelModDownload");
static_assert(offsetof(Mods_CancelModDownload, ModId) == 0x000000, "Member 'Mods_CancelModDownload::ModId' has a wrong offset!");

// Function Mordhau.Mods.GetAllInstalledMods
// 0x0010 (0x0010 - 0x0000)
struct Mods_GetAllInstalledMods final
{
public:
	TArray<struct FInstalledMod>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mods_GetAllInstalledMods) == 0x000008, "Wrong alignment on Mods_GetAllInstalledMods");
static_assert(sizeof(Mods_GetAllInstalledMods) == 0x000010, "Wrong size on Mods_GetAllInstalledMods");
static_assert(offsetof(Mods_GetAllInstalledMods, ReturnValue) == 0x000000, "Member 'Mods_GetAllInstalledMods::ReturnValue' has a wrong offset!");

// Function Mordhau.Mods.GetInstalledMod
// 0x0068 (0x0068 - 0x0000)
struct Mods_GetInstalledMod final
{
public:
	int32                                         ModId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInstalledMod                          ReturnValue;                                       // 0x0008(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mods_GetInstalledMod) == 0x000008, "Wrong alignment on Mods_GetInstalledMod");
static_assert(sizeof(Mods_GetInstalledMod) == 0x000068, "Wrong size on Mods_GetInstalledMod");
static_assert(offsetof(Mods_GetInstalledMod, ModId) == 0x000000, "Member 'Mods_GetInstalledMod::ModId' has a wrong offset!");
static_assert(offsetof(Mods_GetInstalledMod, ReturnValue) == 0x000008, "Member 'Mods_GetInstalledMod::ReturnValue' has a wrong offset!");

// Function Mordhau.Mods.GetModDownloadQueue
// 0x0010 (0x0010 - 0x0000)
struct Mods_GetModDownloadQueue final
{
public:
	TArray<struct FQueuedModDownload>             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mods_GetModDownloadQueue) == 0x000008, "Wrong alignment on Mods_GetModDownloadQueue");
static_assert(sizeof(Mods_GetModDownloadQueue) == 0x000010, "Wrong size on Mods_GetModDownloadQueue");
static_assert(offsetof(Mods_GetModDownloadQueue, ReturnValue) == 0x000000, "Member 'Mods_GetModDownloadQueue::ReturnValue' has a wrong offset!");

// Function Mordhau.Mods.IsModMounted
// 0x0008 (0x0008 - 0x0000)
struct Mods_IsModMounted final
{
public:
	int32                                         ModId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Mods_IsModMounted) == 0x000004, "Wrong alignment on Mods_IsModMounted");
static_assert(sizeof(Mods_IsModMounted) == 0x000008, "Wrong size on Mods_IsModMounted");
static_assert(offsetof(Mods_IsModMounted, ModId) == 0x000000, "Member 'Mods_IsModMounted::ModId' has a wrong offset!");
static_assert(offsetof(Mods_IsModMounted, ReturnValue) == 0x000004, "Member 'Mods_IsModMounted::ReturnValue' has a wrong offset!");

// Function Mordhau.Mods.MountAllPaksInCustomPakFolder
// 0x0004 (0x0004 - 0x0000)
struct Mods_MountAllPaksInCustomPakFolder final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mods_MountAllPaksInCustomPakFolder) == 0x000004, "Wrong alignment on Mods_MountAllPaksInCustomPakFolder");
static_assert(sizeof(Mods_MountAllPaksInCustomPakFolder) == 0x000004, "Wrong size on Mods_MountAllPaksInCustomPakFolder");
static_assert(offsetof(Mods_MountAllPaksInCustomPakFolder, ReturnValue) == 0x000000, "Member 'Mods_MountAllPaksInCustomPakFolder::ReturnValue' has a wrong offset!");

// Function Mordhau.Mods.MountMod
// 0x0008 (0x0008 - 0x0000)
struct Mods_MountMod final
{
public:
	int32                                         ModId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Mods_MountMod) == 0x000004, "Wrong alignment on Mods_MountMod");
static_assert(sizeof(Mods_MountMod) == 0x000008, "Wrong size on Mods_MountMod");
static_assert(offsetof(Mods_MountMod, ModId) == 0x000000, "Member 'Mods_MountMod::ModId' has a wrong offset!");
static_assert(offsetof(Mods_MountMod, ReturnValue) == 0x000004, "Member 'Mods_MountMod::ReturnValue' has a wrong offset!");

// Function Mordhau.Mods.MountMods
// 0x0010 (0x0010 - 0x0000)
struct Mods_MountMods final
{
public:
	TArray<int32>                                 ModIds;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mods_MountMods) == 0x000008, "Wrong alignment on Mods_MountMods");
static_assert(sizeof(Mods_MountMods) == 0x000010, "Wrong size on Mods_MountMods");
static_assert(offsetof(Mods_MountMods, ModIds) == 0x000000, "Member 'Mods_MountMods::ModIds' has a wrong offset!");

// Function Mordhau.Mods.UninstallMod
// 0x0008 (0x0008 - 0x0000)
struct Mods_UninstallMod final
{
public:
	int32                                         ModId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Mods_UninstallMod) == 0x000004, "Wrong alignment on Mods_UninstallMod");
static_assert(sizeof(Mods_UninstallMod) == 0x000008, "Wrong size on Mods_UninstallMod");
static_assert(offsetof(Mods_UninstallMod, ModId) == 0x000000, "Member 'Mods_UninstallMod::ModId' has a wrong offset!");
static_assert(offsetof(Mods_UninstallMod, ReturnValue) == 0x000004, "Member 'Mods_UninstallMod::ReturnValue' has a wrong offset!");

// Function Mordhau.Mods.UnmountMod
// 0x0008 (0x0008 - 0x0000)
struct Mods_UnmountMod final
{
public:
	int32                                         ModId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Mods_UnmountMod) == 0x000004, "Wrong alignment on Mods_UnmountMod");
static_assert(sizeof(Mods_UnmountMod) == 0x000008, "Wrong size on Mods_UnmountMod");
static_assert(offsetof(Mods_UnmountMod, ModId) == 0x000000, "Member 'Mods_UnmountMod::ModId' has a wrong offset!");
static_assert(offsetof(Mods_UnmountMod, ReturnValue) == 0x000004, "Member 'Mods_UnmountMod::ReturnValue' has a wrong offset!");

// Function Mordhau.DownloadModfilesById.DownloadModfilesById
// 0x0018 (0x0018 - 0x0000)
struct DownloadModfilesById_DownloadModfilesById final
{
public:
	TArray<int32>                                 ModIds;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UDownloadModfilesById*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloadModfilesById_DownloadModfilesById) == 0x000008, "Wrong alignment on DownloadModfilesById_DownloadModfilesById");
static_assert(sizeof(DownloadModfilesById_DownloadModfilesById) == 0x000018, "Wrong size on DownloadModfilesById_DownloadModfilesById");
static_assert(offsetof(DownloadModfilesById_DownloadModfilesById, ModIds) == 0x000000, "Member 'DownloadModfilesById_DownloadModfilesById::ModIds' has a wrong offset!");
static_assert(offsetof(DownloadModfilesById_DownloadModfilesById, ReturnValue) == 0x000010, "Member 'DownloadModfilesById_DownloadModfilesById::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauAIController.GetAllyClearanceSides
// 0x0004 (0x0004 - 0x0000)
struct MordhauAIController_GetAllyClearanceSides final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_GetAllyClearanceSides) == 0x000004, "Wrong alignment on MordhauAIController_GetAllyClearanceSides");
static_assert(sizeof(MordhauAIController_GetAllyClearanceSides) == 0x000004, "Wrong size on MordhauAIController_GetAllyClearanceSides");
static_assert(offsetof(MordhauAIController_GetAllyClearanceSides, ReturnValue) == 0x000000, "Member 'MordhauAIController_GetAllyClearanceSides::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauAIController.GetClosestAlly
// 0x0008 (0x0008 - 0x0000)
struct MordhauAIController_GetClosestAlly final
{
public:
	class AMordhauCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_GetClosestAlly) == 0x000008, "Wrong alignment on MordhauAIController_GetClosestAlly");
static_assert(sizeof(MordhauAIController_GetClosestAlly) == 0x000008, "Wrong size on MordhauAIController_GetClosestAlly");
static_assert(offsetof(MordhauAIController_GetClosestAlly, ReturnValue) == 0x000000, "Member 'MordhauAIController_GetClosestAlly::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauAIController.GetClosestEnemy
// 0x0008 (0x0008 - 0x0000)
struct MordhauAIController_GetClosestEnemy final
{
public:
	class AMordhauCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_GetClosestEnemy) == 0x000008, "Wrong alignment on MordhauAIController_GetClosestEnemy");
static_assert(sizeof(MordhauAIController_GetClosestEnemy) == 0x000008, "Wrong size on MordhauAIController_GetClosestEnemy");
static_assert(offsetof(MordhauAIController_GetClosestEnemy, ReturnValue) == 0x000000, "Member 'MordhauAIController_GetClosestEnemy::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauAIController.GetClosestEnemyOverride
// 0x0008 (0x0008 - 0x0000)
struct MordhauAIController_GetClosestEnemyOverride final
{
public:
	class AMordhauCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_GetClosestEnemyOverride) == 0x000008, "Wrong alignment on MordhauAIController_GetClosestEnemyOverride");
static_assert(sizeof(MordhauAIController_GetClosestEnemyOverride) == 0x000008, "Wrong size on MordhauAIController_GetClosestEnemyOverride");
static_assert(offsetof(MordhauAIController_GetClosestEnemyOverride, ReturnValue) == 0x000000, "Member 'MordhauAIController_GetClosestEnemyOverride::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauAIController.GetCurrentlyFacingActor
// 0x0008 (0x0008 - 0x0000)
struct MordhauAIController_GetCurrentlyFacingActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_GetCurrentlyFacingActor) == 0x000008, "Wrong alignment on MordhauAIController_GetCurrentlyFacingActor");
static_assert(sizeof(MordhauAIController_GetCurrentlyFacingActor) == 0x000008, "Wrong size on MordhauAIController_GetCurrentlyFacingActor");
static_assert(offsetof(MordhauAIController_GetCurrentlyFacingActor, ReturnValue) == 0x000000, "Member 'MordhauAIController_GetCurrentlyFacingActor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauAIController.GetKthClosestOfThree
// 0x0010 (0x0010 - 0x0000)
struct MordhauAIController_GetKthClosestOfThree final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_GetKthClosestOfThree) == 0x000008, "Wrong alignment on MordhauAIController_GetKthClosestOfThree");
static_assert(sizeof(MordhauAIController_GetKthClosestOfThree) == 0x000010, "Wrong size on MordhauAIController_GetKthClosestOfThree");
static_assert(offsetof(MordhauAIController_GetKthClosestOfThree, Idx) == 0x000000, "Member 'MordhauAIController_GetKthClosestOfThree::Idx' has a wrong offset!");
static_assert(offsetof(MordhauAIController_GetKthClosestOfThree, ReturnValue) == 0x000008, "Member 'MordhauAIController_GetKthClosestOfThree::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauAIController.GetMotionBasedRandom
// 0x0004 (0x0004 - 0x0000)
struct MordhauAIController_GetMotionBasedRandom final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_GetMotionBasedRandom) == 0x000004, "Wrong alignment on MordhauAIController_GetMotionBasedRandom");
static_assert(sizeof(MordhauAIController_GetMotionBasedRandom) == 0x000004, "Wrong size on MordhauAIController_GetMotionBasedRandom");
static_assert(offsetof(MordhauAIController_GetMotionBasedRandom, ReturnValue) == 0x000000, "Member 'MordhauAIController_GetMotionBasedRandom::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauAIController.GetPerceivedAllies
// 0x0010 (0x0010 - 0x0000)
struct MordhauAIController_GetPerceivedAllies final
{
public:
	TArray<class AMordhauCharacter*>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_GetPerceivedAllies) == 0x000008, "Wrong alignment on MordhauAIController_GetPerceivedAllies");
static_assert(sizeof(MordhauAIController_GetPerceivedAllies) == 0x000010, "Wrong size on MordhauAIController_GetPerceivedAllies");
static_assert(offsetof(MordhauAIController_GetPerceivedAllies, ReturnValue) == 0x000000, "Member 'MordhauAIController_GetPerceivedAllies::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauAIController.GetPerceivedEnemies
// 0x0010 (0x0010 - 0x0000)
struct MordhauAIController_GetPerceivedEnemies final
{
public:
	TArray<class AMordhauCharacter*>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_GetPerceivedEnemies) == 0x000008, "Wrong alignment on MordhauAIController_GetPerceivedEnemies");
static_assert(sizeof(MordhauAIController_GetPerceivedEnemies) == 0x000010, "Wrong size on MordhauAIController_GetPerceivedEnemies");
static_assert(offsetof(MordhauAIController_GetPerceivedEnemies, ReturnValue) == 0x000000, "Member 'MordhauAIController_GetPerceivedEnemies::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauAIController.GetTeam
// 0x0004 (0x0004 - 0x0000)
struct MordhauAIController_GetTeam final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_GetTeam) == 0x000004, "Wrong alignment on MordhauAIController_GetTeam");
static_assert(sizeof(MordhauAIController_GetTeam) == 0x000004, "Wrong size on MordhauAIController_GetTeam");
static_assert(offsetof(MordhauAIController_GetTeam, ReturnValue) == 0x000000, "Member 'MordhauAIController_GetTeam::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauAIController.MoveToLocationWithRandomMidpoint
// 0x0028 (0x0028 - 0x0000)
struct MordhauAIController_MoveToLocationWithRandomMidpoint final
{
public:
	struct FVector                                Dest;                                              // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AcceptanceRadius;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopOnOverlap;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePathfinding;                                   // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProjectDestinationToNavigation;                   // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanStrafe;                                        // 0x0013(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPartialPath;                                 // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPathFollowingRequestResult                   ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauAIController_MoveToLocationWithRandomMidpoint) == 0x000008, "Wrong alignment on MordhauAIController_MoveToLocationWithRandomMidpoint");
static_assert(sizeof(MordhauAIController_MoveToLocationWithRandomMidpoint) == 0x000028, "Wrong size on MordhauAIController_MoveToLocationWithRandomMidpoint");
static_assert(offsetof(MordhauAIController_MoveToLocationWithRandomMidpoint, Dest) == 0x000000, "Member 'MordhauAIController_MoveToLocationWithRandomMidpoint::Dest' has a wrong offset!");
static_assert(offsetof(MordhauAIController_MoveToLocationWithRandomMidpoint, AcceptanceRadius) == 0x00000C, "Member 'MordhauAIController_MoveToLocationWithRandomMidpoint::AcceptanceRadius' has a wrong offset!");
static_assert(offsetof(MordhauAIController_MoveToLocationWithRandomMidpoint, bStopOnOverlap) == 0x000010, "Member 'MordhauAIController_MoveToLocationWithRandomMidpoint::bStopOnOverlap' has a wrong offset!");
static_assert(offsetof(MordhauAIController_MoveToLocationWithRandomMidpoint, bUsePathfinding) == 0x000011, "Member 'MordhauAIController_MoveToLocationWithRandomMidpoint::bUsePathfinding' has a wrong offset!");
static_assert(offsetof(MordhauAIController_MoveToLocationWithRandomMidpoint, bProjectDestinationToNavigation) == 0x000012, "Member 'MordhauAIController_MoveToLocationWithRandomMidpoint::bProjectDestinationToNavigation' has a wrong offset!");
static_assert(offsetof(MordhauAIController_MoveToLocationWithRandomMidpoint, bCanStrafe) == 0x000013, "Member 'MordhauAIController_MoveToLocationWithRandomMidpoint::bCanStrafe' has a wrong offset!");
static_assert(offsetof(MordhauAIController_MoveToLocationWithRandomMidpoint, FilterClass) == 0x000018, "Member 'MordhauAIController_MoveToLocationWithRandomMidpoint::FilterClass' has a wrong offset!");
static_assert(offsetof(MordhauAIController_MoveToLocationWithRandomMidpoint, bAllowPartialPath) == 0x000020, "Member 'MordhauAIController_MoveToLocationWithRandomMidpoint::bAllowPartialPath' has a wrong offset!");
static_assert(offsetof(MordhauAIController_MoveToLocationWithRandomMidpoint, ReturnValue) == 0x000021, "Member 'MordhauAIController_MoveToLocationWithRandomMidpoint::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauAIController.OnCharacterDiedOrDestroyed
// 0x0008 (0x0008 - 0x0000)
struct MordhauAIController_OnCharacterDiedOrDestroyed final
{
public:
	class AAdvancedCharacter*                     AdvancedCharacter;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_OnCharacterDiedOrDestroyed) == 0x000008, "Wrong alignment on MordhauAIController_OnCharacterDiedOrDestroyed");
static_assert(sizeof(MordhauAIController_OnCharacterDiedOrDestroyed) == 0x000008, "Wrong size on MordhauAIController_OnCharacterDiedOrDestroyed");
static_assert(offsetof(MordhauAIController_OnCharacterDiedOrDestroyed, AdvancedCharacter) == 0x000000, "Member 'MordhauAIController_OnCharacterDiedOrDestroyed::AdvancedCharacter' has a wrong offset!");

// Function Mordhau.MordhauAIController.OnPerceptionUpdated
// 0x0010 (0x0010 - 0x0000)
struct MordhauAIController_OnPerceptionUpdated final
{
public:
	TArray<class AActor*>                         InUpdatedActors;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_OnPerceptionUpdated) == 0x000008, "Wrong alignment on MordhauAIController_OnPerceptionUpdated");
static_assert(sizeof(MordhauAIController_OnPerceptionUpdated) == 0x000010, "Wrong size on MordhauAIController_OnPerceptionUpdated");
static_assert(offsetof(MordhauAIController_OnPerceptionUpdated, InUpdatedActors) == 0x000000, "Member 'MordhauAIController_OnPerceptionUpdated::InUpdatedActors' has a wrong offset!");

// Function Mordhau.MordhauAIController.OnStartedPerceivingCharacter
// 0x0010 (0x0010 - 0x0000)
struct MordhauAIController_OnStartedPerceivingCharacter final
{
public:
	class AAdvancedCharacter*                     PerceivedCharacter;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerceptionInfo                        PerceptionInfo;                                    // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_OnStartedPerceivingCharacter) == 0x000008, "Wrong alignment on MordhauAIController_OnStartedPerceivingCharacter");
static_assert(sizeof(MordhauAIController_OnStartedPerceivingCharacter) == 0x000010, "Wrong size on MordhauAIController_OnStartedPerceivingCharacter");
static_assert(offsetof(MordhauAIController_OnStartedPerceivingCharacter, PerceivedCharacter) == 0x000000, "Member 'MordhauAIController_OnStartedPerceivingCharacter::PerceivedCharacter' has a wrong offset!");
static_assert(offsetof(MordhauAIController_OnStartedPerceivingCharacter, PerceptionInfo) == 0x000008, "Member 'MordhauAIController_OnStartedPerceivingCharacter::PerceptionInfo' has a wrong offset!");

// Function Mordhau.MordhauAIController.OnStoppedPerceivingCharacter
// 0x0010 (0x0010 - 0x0000)
struct MordhauAIController_OnStoppedPerceivingCharacter final
{
public:
	class AAdvancedCharacter*                     PerceivedCharacter;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerceptionInfo                        PerceptionInfo;                                    // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_OnStoppedPerceivingCharacter) == 0x000008, "Wrong alignment on MordhauAIController_OnStoppedPerceivingCharacter");
static_assert(sizeof(MordhauAIController_OnStoppedPerceivingCharacter) == 0x000010, "Wrong size on MordhauAIController_OnStoppedPerceivingCharacter");
static_assert(offsetof(MordhauAIController_OnStoppedPerceivingCharacter, PerceivedCharacter) == 0x000000, "Member 'MordhauAIController_OnStoppedPerceivingCharacter::PerceivedCharacter' has a wrong offset!");
static_assert(offsetof(MordhauAIController_OnStoppedPerceivingCharacter, PerceptionInfo) == 0x000008, "Member 'MordhauAIController_OnStoppedPerceivingCharacter::PerceptionInfo' has a wrong offset!");

// Function Mordhau.MordhauAIController.PauseLogic
// 0x0010 (0x0010 - 0x0000)
struct MordhauAIController_PauseLogic final
{
public:
	class FString                                 Reason;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_PauseLogic) == 0x000008, "Wrong alignment on MordhauAIController_PauseLogic");
static_assert(sizeof(MordhauAIController_PauseLogic) == 0x000010, "Wrong size on MordhauAIController_PauseLogic");
static_assert(offsetof(MordhauAIController_PauseLogic, Reason) == 0x000000, "Member 'MordhauAIController_PauseLogic::Reason' has a wrong offset!");

// Function Mordhau.MordhauAIController.PerceivesAlly
// 0x0001 (0x0001 - 0x0000)
struct MordhauAIController_PerceivesAlly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_PerceivesAlly) == 0x000001, "Wrong alignment on MordhauAIController_PerceivesAlly");
static_assert(sizeof(MordhauAIController_PerceivesAlly) == 0x000001, "Wrong size on MordhauAIController_PerceivesAlly");
static_assert(offsetof(MordhauAIController_PerceivesAlly, ReturnValue) == 0x000000, "Member 'MordhauAIController_PerceivesAlly::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauAIController.PerceivesEnemy
// 0x0001 (0x0001 - 0x0000)
struct MordhauAIController_PerceivesEnemy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_PerceivesEnemy) == 0x000001, "Wrong alignment on MordhauAIController_PerceivesEnemy");
static_assert(sizeof(MordhauAIController_PerceivesEnemy) == 0x000001, "Wrong size on MordhauAIController_PerceivesEnemy");
static_assert(offsetof(MordhauAIController_PerceivesEnemy, ReturnValue) == 0x000000, "Member 'MordhauAIController_PerceivesEnemy::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauAIController.RequestVoiceCommand
// 0x0001 (0x0001 - 0x0000)
struct MordhauAIController_RequestVoiceCommand final
{
public:
	uint8                                         Command;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_RequestVoiceCommand) == 0x000001, "Wrong alignment on MordhauAIController_RequestVoiceCommand");
static_assert(sizeof(MordhauAIController_RequestVoiceCommand) == 0x000001, "Wrong size on MordhauAIController_RequestVoiceCommand");
static_assert(offsetof(MordhauAIController_RequestVoiceCommand, Command) == 0x000000, "Member 'MordhauAIController_RequestVoiceCommand::Command' has a wrong offset!");

// Function Mordhau.MordhauAIController.ResumeLogic
// 0x0010 (0x0010 - 0x0000)
struct MordhauAIController_ResumeLogic final
{
public:
	class FString                                 Reason;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_ResumeLogic) == 0x000008, "Wrong alignment on MordhauAIController_ResumeLogic");
static_assert(sizeof(MordhauAIController_ResumeLogic) == 0x000010, "Wrong size on MordhauAIController_ResumeLogic");
static_assert(offsetof(MordhauAIController_ResumeLogic, Reason) == 0x000000, "Member 'MordhauAIController_ResumeLogic::Reason' has a wrong offset!");

// Function Mordhau.MordhauAIController.SetClosestEnemyOverride
// 0x0008 (0x0008 - 0x0000)
struct MordhauAIController_SetClosestEnemyOverride final
{
public:
	class AMordhauCharacter*                      Override;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_SetClosestEnemyOverride) == 0x000008, "Wrong alignment on MordhauAIController_SetClosestEnemyOverride");
static_assert(sizeof(MordhauAIController_SetClosestEnemyOverride) == 0x000008, "Wrong size on MordhauAIController_SetClosestEnemyOverride");
static_assert(offsetof(MordhauAIController_SetClosestEnemyOverride, Override) == 0x000000, "Member 'MordhauAIController_SetClosestEnemyOverride::Override' has a wrong offset!");

// Function Mordhau.MordhauAIController.StartFacingActor
// 0x0018 (0x0018 - 0x0000)
struct MordhauAIController_StartFacingActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocationUpOffset;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DegreeOffset;                                      // 0x000C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauAIController_StartFacingActor) == 0x000008, "Wrong alignment on MordhauAIController_StartFacingActor");
static_assert(sizeof(MordhauAIController_StartFacingActor) == 0x000018, "Wrong size on MordhauAIController_StartFacingActor");
static_assert(offsetof(MordhauAIController_StartFacingActor, Actor) == 0x000000, "Member 'MordhauAIController_StartFacingActor::Actor' has a wrong offset!");
static_assert(offsetof(MordhauAIController_StartFacingActor, LocationUpOffset) == 0x000008, "Member 'MordhauAIController_StartFacingActor::LocationUpOffset' has a wrong offset!");
static_assert(offsetof(MordhauAIController_StartFacingActor, DegreeOffset) == 0x00000C, "Member 'MordhauAIController_StartFacingActor::DegreeOffset' has a wrong offset!");

// Function Mordhau.MordhauAIController.StartFacingActor2D
// 0x0010 (0x0010 - 0x0000)
struct MordhauAIController_StartFacingActor2D final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocationUpOffset;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauAIController_StartFacingActor2D) == 0x000008, "Wrong alignment on MordhauAIController_StartFacingActor2D");
static_assert(sizeof(MordhauAIController_StartFacingActor2D) == 0x000010, "Wrong size on MordhauAIController_StartFacingActor2D");
static_assert(offsetof(MordhauAIController_StartFacingActor2D, Actor) == 0x000000, "Member 'MordhauAIController_StartFacingActor2D::Actor' has a wrong offset!");
static_assert(offsetof(MordhauAIController_StartFacingActor2D, LocationUpOffset) == 0x000008, "Member 'MordhauAIController_StartFacingActor2D::LocationUpOffset' has a wrong offset!");

// Function Mordhau.MordhauAIController.StartFacingBone
// 0x0020 (0x0020 - 0x0000)
struct MordhauAIController_StartFacingBone final
{
public:
	class USkeletalMeshComponent*                 SkelMesh;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneToFace;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocationUpOffset;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DegreeOffset;                                      // 0x0014(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauAIController_StartFacingBone) == 0x000008, "Wrong alignment on MordhauAIController_StartFacingBone");
static_assert(sizeof(MordhauAIController_StartFacingBone) == 0x000020, "Wrong size on MordhauAIController_StartFacingBone");
static_assert(offsetof(MordhauAIController_StartFacingBone, SkelMesh) == 0x000000, "Member 'MordhauAIController_StartFacingBone::SkelMesh' has a wrong offset!");
static_assert(offsetof(MordhauAIController_StartFacingBone, BoneToFace) == 0x000008, "Member 'MordhauAIController_StartFacingBone::BoneToFace' has a wrong offset!");
static_assert(offsetof(MordhauAIController_StartFacingBone, LocationUpOffset) == 0x000010, "Member 'MordhauAIController_StartFacingBone::LocationUpOffset' has a wrong offset!");
static_assert(offsetof(MordhauAIController_StartFacingBone, DegreeOffset) == 0x000014, "Member 'MordhauAIController_StartFacingBone::DegreeOffset' has a wrong offset!");

// Function Mordhau.MordhauAIController.StartFacingLocation
// 0x000C (0x000C - 0x0000)
struct MordhauAIController_StartFacingLocation final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_StartFacingLocation) == 0x000004, "Wrong alignment on MordhauAIController_StartFacingLocation");
static_assert(sizeof(MordhauAIController_StartFacingLocation) == 0x00000C, "Wrong size on MordhauAIController_StartFacingLocation");
static_assert(offsetof(MordhauAIController_StartFacingLocation, WorldLocation) == 0x000000, "Member 'MordhauAIController_StartFacingLocation::WorldLocation' has a wrong offset!");

// Function Mordhau.MordhauAIController.StartFacingMovement
// 0x0004 (0x0004 - 0x0000)
struct MordhauAIController_StartFacingMovement final
{
public:
	float                                         LocationUpOffset;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_StartFacingMovement) == 0x000004, "Wrong alignment on MordhauAIController_StartFacingMovement");
static_assert(sizeof(MordhauAIController_StartFacingMovement) == 0x000004, "Wrong size on MordhauAIController_StartFacingMovement");
static_assert(offsetof(MordhauAIController_StartFacingMovement, LocationUpOffset) == 0x000000, "Member 'MordhauAIController_StartFacingMovement::LocationUpOffset' has a wrong offset!");

// Function Mordhau.MordhauAIController.StartInteract
// 0x0008 (0x0008 - 0x0000)
struct MordhauAIController_StartInteract final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_StartInteract) == 0x000008, "Wrong alignment on MordhauAIController_StartInteract");
static_assert(sizeof(MordhauAIController_StartInteract) == 0x000008, "Wrong size on MordhauAIController_StartInteract");
static_assert(offsetof(MordhauAIController_StartInteract, Target) == 0x000000, "Member 'MordhauAIController_StartInteract::Target' has a wrong offset!");

// Function Mordhau.MordhauAIController.UpdatePerceptionInfo
// 0x0010 (0x0010 - 0x0000)
struct MordhauAIController_UpdatePerceptionInfo final
{
public:
	class AAdvancedCharacter*                     InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerceptionInfo                        PerceptionInfo;                                    // 0x0008(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_UpdatePerceptionInfo) == 0x000008, "Wrong alignment on MordhauAIController_UpdatePerceptionInfo");
static_assert(sizeof(MordhauAIController_UpdatePerceptionInfo) == 0x000010, "Wrong size on MordhauAIController_UpdatePerceptionInfo");
static_assert(offsetof(MordhauAIController_UpdatePerceptionInfo, InCharacter) == 0x000000, "Member 'MordhauAIController_UpdatePerceptionInfo::InCharacter' has a wrong offset!");
static_assert(offsetof(MordhauAIController_UpdatePerceptionInfo, PerceptionInfo) == 0x000008, "Member 'MordhauAIController_UpdatePerceptionInfo::PerceptionInfo' has a wrong offset!");

// Function Mordhau.MordhauAIController.CanInteract
// 0x0010 (0x0010 - 0x0000)
struct MordhauAIController_CanInteract final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauAIController_CanInteract) == 0x000008, "Wrong alignment on MordhauAIController_CanInteract");
static_assert(sizeof(MordhauAIController_CanInteract) == 0x000010, "Wrong size on MordhauAIController_CanInteract");
static_assert(offsetof(MordhauAIController_CanInteract, Target) == 0x000000, "Member 'MordhauAIController_CanInteract::Target' has a wrong offset!");
static_assert(offsetof(MordhauAIController_CanInteract, ReturnValue) == 0x000008, "Member 'MordhauAIController_CanInteract::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauAIController.CanSee
// 0x0010 (0x0010 - 0x0000)
struct MordhauAIController_CanSee final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauAIController_CanSee) == 0x000008, "Wrong alignment on MordhauAIController_CanSee");
static_assert(sizeof(MordhauAIController_CanSee) == 0x000010, "Wrong size on MordhauAIController_CanSee");
static_assert(offsetof(MordhauAIController_CanSee, Target) == 0x000000, "Member 'MordhauAIController_CanSee::Target' has a wrong offset!");
static_assert(offsetof(MordhauAIController_CanSee, Distance) == 0x000008, "Member 'MordhauAIController_CanSee::Distance' has a wrong offset!");
static_assert(offsetof(MordhauAIController_CanSee, ReturnValue) == 0x00000C, "Member 'MordhauAIController_CanSee::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauAIController.GetCurrentFacingMode
// 0x0001 (0x0001 - 0x0000)
struct MordhauAIController_GetCurrentFacingMode final
{
public:
	EAIFacingMode                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_GetCurrentFacingMode) == 0x000001, "Wrong alignment on MordhauAIController_GetCurrentFacingMode");
static_assert(sizeof(MordhauAIController_GetCurrentFacingMode) == 0x000001, "Wrong size on MordhauAIController_GetCurrentFacingMode");
static_assert(offsetof(MordhauAIController_GetCurrentFacingMode, ReturnValue) == 0x000000, "Member 'MordhauAIController_GetCurrentFacingMode::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauAIController.GetMoveMidpoint
// 0x0030 (0x0030 - 0x0000)
struct MordhauAIController_GetMoveMidpoint final
{
public:
	struct FVector                                Goal;                                              // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ANavigationData*                        NavData;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauAIController_GetMoveMidpoint) == 0x000008, "Wrong alignment on MordhauAIController_GetMoveMidpoint");
static_assert(sizeof(MordhauAIController_GetMoveMidpoint) == 0x000030, "Wrong size on MordhauAIController_GetMoveMidpoint");
static_assert(offsetof(MordhauAIController_GetMoveMidpoint, Goal) == 0x000000, "Member 'MordhauAIController_GetMoveMidpoint::Goal' has a wrong offset!");
static_assert(offsetof(MordhauAIController_GetMoveMidpoint, NavData) == 0x000010, "Member 'MordhauAIController_GetMoveMidpoint::NavData' has a wrong offset!");
static_assert(offsetof(MordhauAIController_GetMoveMidpoint, FilterClass) == 0x000018, "Member 'MordhauAIController_GetMoveMidpoint::FilterClass' has a wrong offset!");
static_assert(offsetof(MordhauAIController_GetMoveMidpoint, ReturnValue) == 0x000020, "Member 'MordhauAIController_GetMoveMidpoint::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauAIController.IsMovePending
// 0x0001 (0x0001 - 0x0000)
struct MordhauAIController_IsMovePending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauAIController_IsMovePending) == 0x000001, "Wrong alignment on MordhauAIController_IsMovePending");
static_assert(sizeof(MordhauAIController_IsMovePending) == 0x000001, "Wrong size on MordhauAIController_IsMovePending");
static_assert(offsetof(MordhauAIController_IsMovePending, ReturnValue) == 0x000000, "Member 'MordhauAIController_IsMovePending::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauBeaconClient.ClientNotifyReservationStatus
// 0x0008 (0x0008 - 0x0000)
struct MordhauBeaconClient_ClientNotifyReservationStatus final
{
public:
	int32                                         OpenSlots;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReservationStatus                            ReservationStatus;                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauBeaconClient_ClientNotifyReservationStatus) == 0x000004, "Wrong alignment on MordhauBeaconClient_ClientNotifyReservationStatus");
static_assert(sizeof(MordhauBeaconClient_ClientNotifyReservationStatus) == 0x000008, "Wrong size on MordhauBeaconClient_ClientNotifyReservationStatus");
static_assert(offsetof(MordhauBeaconClient_ClientNotifyReservationStatus, OpenSlots) == 0x000000, "Member 'MordhauBeaconClient_ClientNotifyReservationStatus::OpenSlots' has a wrong offset!");
static_assert(offsetof(MordhauBeaconClient_ClientNotifyReservationStatus, ReservationStatus) == 0x000004, "Member 'MordhauBeaconClient_ClientNotifyReservationStatus::ReservationStatus' has a wrong offset!");

// Function Mordhau.MordhauBeaconClient.Ping
// 0x0070 (0x0070 - 0x0000)
struct MordhauBeaconClient_Ping final
{
public:
	struct FURL                                   ConnectURL;                                        // 0x0000(0x0068)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauBeaconClient_Ping) == 0x000008, "Wrong alignment on MordhauBeaconClient_Ping");
static_assert(sizeof(MordhauBeaconClient_Ping) == 0x000070, "Wrong size on MordhauBeaconClient_Ping");
static_assert(offsetof(MordhauBeaconClient_Ping, ConnectURL) == 0x000000, "Member 'MordhauBeaconClient_Ping::ConnectURL' has a wrong offset!");
static_assert(offsetof(MordhauBeaconClient_Ping, ReturnValue) == 0x000068, "Member 'MordhauBeaconClient_Ping::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauBeaconClient.ReserveSlots
// 0x0080 (0x0080 - 0x0000)
struct MordhauBeaconClient_ReserveSlots final
{
public:
	struct FURL                                   ConnectURL;                                        // 0x0000(0x0068)(Parm, OutParm, NativeAccessSpecifierPublic)
	TArray<struct FPlayFabPlayerEntity>           InPlayerEntites;                                   // 0x0068(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauBeaconClient_ReserveSlots) == 0x000008, "Wrong alignment on MordhauBeaconClient_ReserveSlots");
static_assert(sizeof(MordhauBeaconClient_ReserveSlots) == 0x000080, "Wrong size on MordhauBeaconClient_ReserveSlots");
static_assert(offsetof(MordhauBeaconClient_ReserveSlots, ConnectURL) == 0x000000, "Member 'MordhauBeaconClient_ReserveSlots::ConnectURL' has a wrong offset!");
static_assert(offsetof(MordhauBeaconClient_ReserveSlots, InPlayerEntites) == 0x000068, "Member 'MordhauBeaconClient_ReserveSlots::InPlayerEntites' has a wrong offset!");
static_assert(offsetof(MordhauBeaconClient_ReserveSlots, ReturnValue) == 0x000078, "Member 'MordhauBeaconClient_ReserveSlots::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauBeaconClient.ServerReserveSlots
// 0x0010 (0x0010 - 0x0000)
struct MordhauBeaconClient_ServerReserveSlots final
{
public:
	TArray<struct FPlayFabPlayerEntity>           InPlayerEntities;                                  // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauBeaconClient_ServerReserveSlots) == 0x000008, "Wrong alignment on MordhauBeaconClient_ServerReserveSlots");
static_assert(sizeof(MordhauBeaconClient_ServerReserveSlots) == 0x000010, "Wrong size on MordhauBeaconClient_ServerReserveSlots");
static_assert(offsetof(MordhauBeaconClient_ServerReserveSlots, InPlayerEntities) == 0x000000, "Member 'MordhauBeaconClient_ServerReserveSlots::InPlayerEntities' has a wrong offset!");

// Function Mordhau.MordhauCharacter.AppendBodySet
// 0x0050 (0x0050 - 0x0000)
struct MordhauCharacter_AppendBodySet final
{
public:
	TSet<class FName>                             Outset;                                            // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_AppendBodySet) == 0x000008, "Wrong alignment on MordhauCharacter_AppendBodySet");
static_assert(sizeof(MordhauCharacter_AppendBodySet) == 0x000050, "Wrong size on MordhauCharacter_AppendBodySet");
static_assert(offsetof(MordhauCharacter_AppendBodySet, Outset) == 0x000000, "Member 'MordhauCharacter_AppendBodySet::Outset' has a wrong offset!");

// Function Mordhau.MordhauCharacter.AppendHeadSet
// 0x0050 (0x0050 - 0x0000)
struct MordhauCharacter_AppendHeadSet final
{
public:
	TSet<class FName>                             Outset;                                            // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_AppendHeadSet) == 0x000008, "Wrong alignment on MordhauCharacter_AppendHeadSet");
static_assert(sizeof(MordhauCharacter_AppendHeadSet) == 0x000050, "Wrong size on MordhauCharacter_AppendHeadSet");
static_assert(offsetof(MordhauCharacter_AppendHeadSet, Outset) == 0x000000, "Member 'MordhauCharacter_AppendHeadSet::Outset' has a wrong offset!");

// Function Mordhau.MordhauCharacter.AppendLeftArmSet
// 0x0050 (0x0050 - 0x0000)
struct MordhauCharacter_AppendLeftArmSet final
{
public:
	TSet<class FName>                             Outset;                                            // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_AppendLeftArmSet) == 0x000008, "Wrong alignment on MordhauCharacter_AppendLeftArmSet");
static_assert(sizeof(MordhauCharacter_AppendLeftArmSet) == 0x000050, "Wrong size on MordhauCharacter_AppendLeftArmSet");
static_assert(offsetof(MordhauCharacter_AppendLeftArmSet, Outset) == 0x000000, "Member 'MordhauCharacter_AppendLeftArmSet::Outset' has a wrong offset!");

// Function Mordhau.MordhauCharacter.AppendLeftLegSet
// 0x0050 (0x0050 - 0x0000)
struct MordhauCharacter_AppendLeftLegSet final
{
public:
	TSet<class FName>                             Outset;                                            // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_AppendLeftLegSet) == 0x000008, "Wrong alignment on MordhauCharacter_AppendLeftLegSet");
static_assert(sizeof(MordhauCharacter_AppendLeftLegSet) == 0x000050, "Wrong size on MordhauCharacter_AppendLeftLegSet");
static_assert(offsetof(MordhauCharacter_AppendLeftLegSet, Outset) == 0x000000, "Member 'MordhauCharacter_AppendLeftLegSet::Outset' has a wrong offset!");

// Function Mordhau.MordhauCharacter.AppendRightArmSet
// 0x0050 (0x0050 - 0x0000)
struct MordhauCharacter_AppendRightArmSet final
{
public:
	TSet<class FName>                             Outset;                                            // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_AppendRightArmSet) == 0x000008, "Wrong alignment on MordhauCharacter_AppendRightArmSet");
static_assert(sizeof(MordhauCharacter_AppendRightArmSet) == 0x000050, "Wrong size on MordhauCharacter_AppendRightArmSet");
static_assert(offsetof(MordhauCharacter_AppendRightArmSet, Outset) == 0x000000, "Member 'MordhauCharacter_AppendRightArmSet::Outset' has a wrong offset!");

// Function Mordhau.MordhauCharacter.AppendRightLegSet
// 0x0050 (0x0050 - 0x0000)
struct MordhauCharacter_AppendRightLegSet final
{
public:
	TSet<class FName>                             Outset;                                            // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_AppendRightLegSet) == 0x000008, "Wrong alignment on MordhauCharacter_AppendRightLegSet");
static_assert(sizeof(MordhauCharacter_AppendRightLegSet) == 0x000050, "Wrong size on MordhauCharacter_AppendRightLegSet");
static_assert(offsetof(MordhauCharacter_AppendRightLegSet, Outset) == 0x000000, "Member 'MordhauCharacter_AppendRightLegSet::Outset' has a wrong offset!");

// Function Mordhau.MordhauCharacter.IsArm
// 0x000C (0x000C - 0x0000)
struct MordhauCharacter_IsArm final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_IsArm) == 0x000004, "Wrong alignment on MordhauCharacter_IsArm");
static_assert(sizeof(MordhauCharacter_IsArm) == 0x00000C, "Wrong size on MordhauCharacter_IsArm");
static_assert(offsetof(MordhauCharacter_IsArm, bone) == 0x000000, "Member 'MordhauCharacter_IsArm::bone' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_IsArm, ReturnValue) == 0x000008, "Member 'MordhauCharacter_IsArm::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.IsBody
// 0x000C (0x000C - 0x0000)
struct MordhauCharacter_IsBody final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_IsBody) == 0x000004, "Wrong alignment on MordhauCharacter_IsBody");
static_assert(sizeof(MordhauCharacter_IsBody) == 0x00000C, "Wrong size on MordhauCharacter_IsBody");
static_assert(offsetof(MordhauCharacter_IsBody, bone) == 0x000000, "Member 'MordhauCharacter_IsBody::bone' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_IsBody, ReturnValue) == 0x000008, "Member 'MordhauCharacter_IsBody::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.IsHead
// 0x000C (0x000C - 0x0000)
struct MordhauCharacter_IsHead final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_IsHead) == 0x000004, "Wrong alignment on MordhauCharacter_IsHead");
static_assert(sizeof(MordhauCharacter_IsHead) == 0x00000C, "Wrong size on MordhauCharacter_IsHead");
static_assert(offsetof(MordhauCharacter_IsHead, bone) == 0x000000, "Member 'MordhauCharacter_IsHead::bone' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_IsHead, ReturnValue) == 0x000008, "Member 'MordhauCharacter_IsHead::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.IsLeftArm
// 0x000C (0x000C - 0x0000)
struct MordhauCharacter_IsLeftArm final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_IsLeftArm) == 0x000004, "Wrong alignment on MordhauCharacter_IsLeftArm");
static_assert(sizeof(MordhauCharacter_IsLeftArm) == 0x00000C, "Wrong size on MordhauCharacter_IsLeftArm");
static_assert(offsetof(MordhauCharacter_IsLeftArm, bone) == 0x000000, "Member 'MordhauCharacter_IsLeftArm::bone' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_IsLeftArm, ReturnValue) == 0x000008, "Member 'MordhauCharacter_IsLeftArm::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.IsLeftLeg
// 0x000C (0x000C - 0x0000)
struct MordhauCharacter_IsLeftLeg final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_IsLeftLeg) == 0x000004, "Wrong alignment on MordhauCharacter_IsLeftLeg");
static_assert(sizeof(MordhauCharacter_IsLeftLeg) == 0x00000C, "Wrong size on MordhauCharacter_IsLeftLeg");
static_assert(offsetof(MordhauCharacter_IsLeftLeg, bone) == 0x000000, "Member 'MordhauCharacter_IsLeftLeg::bone' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_IsLeftLeg, ReturnValue) == 0x000008, "Member 'MordhauCharacter_IsLeftLeg::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.IsLeg
// 0x000C (0x000C - 0x0000)
struct MordhauCharacter_IsLeg final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_IsLeg) == 0x000004, "Wrong alignment on MordhauCharacter_IsLeg");
static_assert(sizeof(MordhauCharacter_IsLeg) == 0x00000C, "Wrong size on MordhauCharacter_IsLeg");
static_assert(offsetof(MordhauCharacter_IsLeg, bone) == 0x000000, "Member 'MordhauCharacter_IsLeg::bone' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_IsLeg, ReturnValue) == 0x000008, "Member 'MordhauCharacter_IsLeg::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.IsRightArm
// 0x000C (0x000C - 0x0000)
struct MordhauCharacter_IsRightArm final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_IsRightArm) == 0x000004, "Wrong alignment on MordhauCharacter_IsRightArm");
static_assert(sizeof(MordhauCharacter_IsRightArm) == 0x00000C, "Wrong size on MordhauCharacter_IsRightArm");
static_assert(offsetof(MordhauCharacter_IsRightArm, bone) == 0x000000, "Member 'MordhauCharacter_IsRightArm::bone' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_IsRightArm, ReturnValue) == 0x000008, "Member 'MordhauCharacter_IsRightArm::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.IsRightLeg
// 0x000C (0x000C - 0x0000)
struct MordhauCharacter_IsRightLeg final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_IsRightLeg) == 0x000004, "Wrong alignment on MordhauCharacter_IsRightLeg");
static_assert(sizeof(MordhauCharacter_IsRightLeg) == 0x00000C, "Wrong size on MordhauCharacter_IsRightLeg");
static_assert(offsetof(MordhauCharacter_IsRightLeg, bone) == 0x000000, "Member 'MordhauCharacter_IsRightLeg::bone' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_IsRightLeg, ReturnValue) == 0x000008, "Member 'MordhauCharacter_IsRightLeg::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.AssignNetBlock
// 0x0018 (0x0018 - 0x0000)
struct MordhauCharacter_AssignNetBlock final
{
public:
	struct FBlockResult                           BlockResult;                                       // 0x0000(0x0009)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAttackMove                                   BlockedMove;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Weapon;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_AssignNetBlock) == 0x000008, "Wrong alignment on MordhauCharacter_AssignNetBlock");
static_assert(sizeof(MordhauCharacter_AssignNetBlock) == 0x000018, "Wrong size on MordhauCharacter_AssignNetBlock");
static_assert(offsetof(MordhauCharacter_AssignNetBlock, BlockResult) == 0x000000, "Member 'MordhauCharacter_AssignNetBlock::BlockResult' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_AssignNetBlock, BlockedMove) == 0x000009, "Member 'MordhauCharacter_AssignNetBlock::BlockedMove' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_AssignNetBlock, Weapon) == 0x000010, "Member 'MordhauCharacter_AssignNetBlock::Weapon' has a wrong offset!");

// Function Mordhau.MordhauCharacter.AssignNetMotionSimple
// 0x0004 (0x0004 - 0x0000)
struct MordhauCharacter_AssignNetMotionSimple final
{
public:
	uint8                                         MotionType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Param0;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Param1;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Param2;                                            // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_AssignNetMotionSimple) == 0x000001, "Wrong alignment on MordhauCharacter_AssignNetMotionSimple");
static_assert(sizeof(MordhauCharacter_AssignNetMotionSimple) == 0x000004, "Wrong size on MordhauCharacter_AssignNetMotionSimple");
static_assert(offsetof(MordhauCharacter_AssignNetMotionSimple, MotionType) == 0x000000, "Member 'MordhauCharacter_AssignNetMotionSimple::MotionType' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_AssignNetMotionSimple, Param0) == 0x000001, "Member 'MordhauCharacter_AssignNetMotionSimple::Param0' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_AssignNetMotionSimple, Param1) == 0x000002, "Member 'MordhauCharacter_AssignNetMotionSimple::Param1' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_AssignNetMotionSimple, Param2) == 0x000003, "Member 'MordhauCharacter_AssignNetMotionSimple::Param2' has a wrong offset!");

// Function Mordhau.MordhauCharacter.AssignProfile
// 0x00B8 (0x00B8 - 0x0000)
struct MordhauCharacter_AssignProfile final
{
public:
	struct FCharacterProfile                      NewProfile;                                        // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_AssignProfile) == 0x000008, "Wrong alignment on MordhauCharacter_AssignProfile");
static_assert(sizeof(MordhauCharacter_AssignProfile) == 0x0000B8, "Wrong size on MordhauCharacter_AssignProfile");
static_assert(offsetof(MordhauCharacter_AssignProfile, NewProfile) == 0x000000, "Member 'MordhauCharacter_AssignProfile::NewProfile' has a wrong offset!");

// Function Mordhau.MordhauCharacter.BakeFaceCustomizationTransforms
// 0x0001 (0x0001 - 0x0000)
struct MordhauCharacter_BakeFaceCustomizationTransforms final
{
public:
	bool                                          bDeferBake;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_BakeFaceCustomizationTransforms) == 0x000001, "Wrong alignment on MordhauCharacter_BakeFaceCustomizationTransforms");
static_assert(sizeof(MordhauCharacter_BakeFaceCustomizationTransforms) == 0x000001, "Wrong size on MordhauCharacter_BakeFaceCustomizationTransforms");
static_assert(offsetof(MordhauCharacter_BakeFaceCustomizationTransforms, bDeferBake) == 0x000000, "Member 'MordhauCharacter_BakeFaceCustomizationTransforms::bDeferBake' has a wrong offset!");

// Function Mordhau.MordhauCharacter.CalculateLedgeOffsetAndNormal
// 0x0020 (0x0020 - 0x0000)
struct MordhauCharacter_CalculateLedgeOffsetAndNormal final
{
public:
	class UClimbingMotion*                        ClimbingMotion;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutOffset;                                         // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutNormal;                                         // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_CalculateLedgeOffsetAndNormal) == 0x000008, "Wrong alignment on MordhauCharacter_CalculateLedgeOffsetAndNormal");
static_assert(sizeof(MordhauCharacter_CalculateLedgeOffsetAndNormal) == 0x000020, "Wrong size on MordhauCharacter_CalculateLedgeOffsetAndNormal");
static_assert(offsetof(MordhauCharacter_CalculateLedgeOffsetAndNormal, ClimbingMotion) == 0x000000, "Member 'MordhauCharacter_CalculateLedgeOffsetAndNormal::ClimbingMotion' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_CalculateLedgeOffsetAndNormal, OutOffset) == 0x000008, "Member 'MordhauCharacter_CalculateLedgeOffsetAndNormal::OutOffset' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_CalculateLedgeOffsetAndNormal, OutNormal) == 0x000014, "Member 'MordhauCharacter_CalculateLedgeOffsetAndNormal::OutNormal' has a wrong offset!");

// Function Mordhau.MordhauCharacter.CanAccomodate
// 0x0010 (0x0010 - 0x0000)
struct MordhauCharacter_CanAccomodate final
{
public:
	TSubclassOf<class AMordhauEquipment>          EquipmentToTest;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_CanAccomodate) == 0x000008, "Wrong alignment on MordhauCharacter_CanAccomodate");
static_assert(sizeof(MordhauCharacter_CanAccomodate) == 0x000010, "Wrong size on MordhauCharacter_CanAccomodate");
static_assert(offsetof(MordhauCharacter_CanAccomodate, EquipmentToTest) == 0x000000, "Member 'MordhauCharacter_CanAccomodate::EquipmentToTest' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_CanAccomodate, ReturnValue) == 0x000008, "Member 'MordhauCharacter_CanAccomodate::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.CanDismember
// 0x000C (0x000C - 0x0000)
struct MordhauCharacter_CanDismember final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_CanDismember) == 0x000004, "Wrong alignment on MordhauCharacter_CanDismember");
static_assert(sizeof(MordhauCharacter_CanDismember) == 0x00000C, "Wrong size on MordhauCharacter_CanDismember");
static_assert(offsetof(MordhauCharacter_CanDismember, bone) == 0x000000, "Member 'MordhauCharacter_CanDismember::bone' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_CanDismember, ReturnValue) == 0x000008, "Member 'MordhauCharacter_CanDismember::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.CanInitiateMotion
// 0x0010 (0x0010 - 0x0000)
struct MordhauCharacter_CanInitiateMotion final
{
public:
	TSubclassOf<class UMordhauMotion>             NewMotion;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttemptCancel;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_CanInitiateMotion) == 0x000008, "Wrong alignment on MordhauCharacter_CanInitiateMotion");
static_assert(sizeof(MordhauCharacter_CanInitiateMotion) == 0x000010, "Wrong size on MordhauCharacter_CanInitiateMotion");
static_assert(offsetof(MordhauCharacter_CanInitiateMotion, NewMotion) == 0x000000, "Member 'MordhauCharacter_CanInitiateMotion::NewMotion' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_CanInitiateMotion, bAttemptCancel) == 0x000008, "Member 'MordhauCharacter_CanInitiateMotion::bAttemptCancel' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_CanInitiateMotion, ReturnValue) == 0x000009, "Member 'MordhauCharacter_CanInitiateMotion::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.CanPerformAttack
// 0x0002 (0x0002 - 0x0000)
struct MordhauCharacter_CanPerformAttack final
{
public:
	EAttackMove                                   Move;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_CanPerformAttack) == 0x000001, "Wrong alignment on MordhauCharacter_CanPerformAttack");
static_assert(sizeof(MordhauCharacter_CanPerformAttack) == 0x000002, "Wrong size on MordhauCharacter_CanPerformAttack");
static_assert(offsetof(MordhauCharacter_CanPerformAttack, Move) == 0x000000, "Member 'MordhauCharacter_CanPerformAttack::Move' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_CanPerformAttack, ReturnValue) == 0x000001, "Member 'MordhauCharacter_CanPerformAttack::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.ClientSetNetMotion
// 0x000C (0x000C - 0x0000)
struct MordhauCharacter_ClientSetNetMotion final
{
public:
	struct FNetMotion                             NewMotion;                                         // 0x0000(0x0006)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ServerStartTime;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_ClientSetNetMotion) == 0x000004, "Wrong alignment on MordhauCharacter_ClientSetNetMotion");
static_assert(sizeof(MordhauCharacter_ClientSetNetMotion) == 0x00000C, "Wrong size on MordhauCharacter_ClientSetNetMotion");
static_assert(offsetof(MordhauCharacter_ClientSetNetMotion, NewMotion) == 0x000000, "Member 'MordhauCharacter_ClientSetNetMotion::NewMotion' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_ClientSetNetMotion, ServerStartTime) == 0x000008, "Member 'MordhauCharacter_ClientSetNetMotion::ServerStartTime' has a wrong offset!");

// Function Mordhau.MordhauCharacter.DisableLimb
// 0x0008 (0x0008 - 0x0000)
struct MordhauCharacter_DisableLimb final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_DisableLimb) == 0x000004, "Wrong alignment on MordhauCharacter_DisableLimb");
static_assert(sizeof(MordhauCharacter_DisableLimb) == 0x000008, "Wrong size on MordhauCharacter_DisableLimb");
static_assert(offsetof(MordhauCharacter_DisableLimb, BoneName) == 0x000000, "Member 'MordhauCharacter_DisableLimb::BoneName' has a wrong offset!");

// Function Mordhau.MordhauCharacter.Dismember
// 0x0028 (0x0028 - 0x0000)
struct MordhauCharacter_Dismember final
{
public:
	struct FDismemberedBoneData                   InDismemberedBoneData;                             // 0x0000(0x0020)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class ASeparatedBodyPart*                     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_Dismember) == 0x000008, "Wrong alignment on MordhauCharacter_Dismember");
static_assert(sizeof(MordhauCharacter_Dismember) == 0x000028, "Wrong size on MordhauCharacter_Dismember");
static_assert(offsetof(MordhauCharacter_Dismember, InDismemberedBoneData) == 0x000000, "Member 'MordhauCharacter_Dismember::InDismemberedBoneData' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_Dismember, ReturnValue) == 0x000020, "Member 'MordhauCharacter_Dismember::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.DoCameraShakeIfViewTarget
// 0x0020 (0x0020 - 0x0000)
struct MordhauCharacter_DoCameraShakeIfViewTarget final
{
public:
	TSubclassOf<class UMatineeCameraShake>        Shake;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraShakePlaySpace                         PlaySpace;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               UserPlaySpaceRot;                                  // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ECameraShakeType                              ShakeType;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_DoCameraShakeIfViewTarget) == 0x000008, "Wrong alignment on MordhauCharacter_DoCameraShakeIfViewTarget");
static_assert(sizeof(MordhauCharacter_DoCameraShakeIfViewTarget) == 0x000020, "Wrong size on MordhauCharacter_DoCameraShakeIfViewTarget");
static_assert(offsetof(MordhauCharacter_DoCameraShakeIfViewTarget, Shake) == 0x000000, "Member 'MordhauCharacter_DoCameraShakeIfViewTarget::Shake' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_DoCameraShakeIfViewTarget, Scale) == 0x000008, "Member 'MordhauCharacter_DoCameraShakeIfViewTarget::Scale' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_DoCameraShakeIfViewTarget, PlaySpace) == 0x00000C, "Member 'MordhauCharacter_DoCameraShakeIfViewTarget::PlaySpace' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_DoCameraShakeIfViewTarget, UserPlaySpaceRot) == 0x000010, "Member 'MordhauCharacter_DoCameraShakeIfViewTarget::UserPlaySpaceRot' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_DoCameraShakeIfViewTarget, ShakeType) == 0x00001C, "Member 'MordhauCharacter_DoCameraShakeIfViewTarget::ShakeType' has a wrong offset!");

// Function Mordhau.MordhauCharacter.DropEquipment
// 0x0018 (0x0018 - 0x0000)
struct MordhauCharacter_DropEquipment final
{
public:
	class AMordhauEquipment*                      ToDrop;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauEquipment*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_DropEquipment) == 0x000008, "Wrong alignment on MordhauCharacter_DropEquipment");
static_assert(sizeof(MordhauCharacter_DropEquipment) == 0x000018, "Wrong size on MordhauCharacter_DropEquipment");
static_assert(offsetof(MordhauCharacter_DropEquipment, ToDrop) == 0x000000, "Member 'MordhauCharacter_DropEquipment::ToDrop' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_DropEquipment, bForce) == 0x000008, "Member 'MordhauCharacter_DropEquipment::bForce' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_DropEquipment, ReturnValue) == 0x000010, "Member 'MordhauCharacter_DropEquipment::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.DropSlot
// 0x0010 (0x0010 - 0x0000)
struct MordhauCharacter_DropSlot final
{
public:
	uint8                                         Index_0;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauEquipment*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_DropSlot) == 0x000008, "Wrong alignment on MordhauCharacter_DropSlot");
static_assert(sizeof(MordhauCharacter_DropSlot) == 0x000010, "Wrong size on MordhauCharacter_DropSlot");
static_assert(offsetof(MordhauCharacter_DropSlot, Index_0) == 0x000000, "Member 'MordhauCharacter_DropSlot::Index_0' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_DropSlot, bForce) == 0x000001, "Member 'MordhauCharacter_DropSlot::bForce' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_DropSlot, ReturnValue) == 0x000008, "Member 'MordhauCharacter_DropSlot::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.EnteredTeamArea
// 0x0004 (0x0004 - 0x0000)
struct MordhauCharacter_EnteredTeamArea final
{
public:
	int32                                         OwningTeam;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_EnteredTeamArea) == 0x000004, "Wrong alignment on MordhauCharacter_EnteredTeamArea");
static_assert(sizeof(MordhauCharacter_EnteredTeamArea) == 0x000004, "Wrong size on MordhauCharacter_EnteredTeamArea");
static_assert(offsetof(MordhauCharacter_EnteredTeamArea, OwningTeam) == 0x000000, "Member 'MordhauCharacter_EnteredTeamArea::OwningTeam' has a wrong offset!");

// Function Mordhau.MordhauCharacter.EquipSlot
// 0x0003 (0x0003 - 0x0000)
struct MordhauCharacter_EquipSlot final
{
public:
	uint8                                         Index_0;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayEquipmentList;                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_EquipSlot) == 0x000001, "Wrong alignment on MordhauCharacter_EquipSlot");
static_assert(sizeof(MordhauCharacter_EquipSlot) == 0x000003, "Wrong size on MordhauCharacter_EquipSlot");
static_assert(offsetof(MordhauCharacter_EquipSlot, Index_0) == 0x000000, "Member 'MordhauCharacter_EquipSlot::Index_0' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_EquipSlot, bDisplayEquipmentList) == 0x000001, "Member 'MordhauCharacter_EquipSlot::bDisplayEquipmentList' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_EquipSlot, ReturnValue) == 0x000002, "Member 'MordhauCharacter_EquipSlot::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.ExplodeLimbs
// 0x0020 (0x0020 - 0x0000)
struct MordhauCharacter_ExplodeLimbs final
{
public:
	struct FVector                                Force;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageCauser;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedByController;                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_ExplodeLimbs) == 0x000008, "Wrong alignment on MordhauCharacter_ExplodeLimbs");
static_assert(sizeof(MordhauCharacter_ExplodeLimbs) == 0x000020, "Wrong size on MordhauCharacter_ExplodeLimbs");
static_assert(offsetof(MordhauCharacter_ExplodeLimbs, Force) == 0x000000, "Member 'MordhauCharacter_ExplodeLimbs::Force' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_ExplodeLimbs, DamageCauser) == 0x000010, "Member 'MordhauCharacter_ExplodeLimbs::DamageCauser' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_ExplodeLimbs, InstigatedByController) == 0x000018, "Member 'MordhauCharacter_ExplodeLimbs::InstigatedByController' has a wrong offset!");

// Function Mordhau.MordhauCharacter.FindBestKiller
// 0x0010 (0x0010 - 0x0000)
struct MordhauCharacter_FindBestKiller final
{
public:
	float                                         CutOffTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_FindBestKiller) == 0x000008, "Wrong alignment on MordhauCharacter_FindBestKiller");
static_assert(sizeof(MordhauCharacter_FindBestKiller) == 0x000010, "Wrong size on MordhauCharacter_FindBestKiller");
static_assert(offsetof(MordhauCharacter_FindBestKiller, CutOffTime) == 0x000000, "Member 'MordhauCharacter_FindBestKiller::CutOffTime' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_FindBestKiller, ReturnValue) == 0x000008, "Member 'MordhauCharacter_FindBestKiller::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.FindEquipmentToRestock
// 0x0018 (0x0018 - 0x0000)
struct MordhauCharacter_FindEquipmentToRestock final
{
public:
	TArray<TSubclassOf<class AMordhauEquipment>>  ValidEquipment;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	class AMordhauEquipment*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_FindEquipmentToRestock) == 0x000008, "Wrong alignment on MordhauCharacter_FindEquipmentToRestock");
static_assert(sizeof(MordhauCharacter_FindEquipmentToRestock) == 0x000018, "Wrong size on MordhauCharacter_FindEquipmentToRestock");
static_assert(offsetof(MordhauCharacter_FindEquipmentToRestock, ValidEquipment) == 0x000000, "Member 'MordhauCharacter_FindEquipmentToRestock::ValidEquipment' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_FindEquipmentToRestock, ReturnValue) == 0x000010, "Member 'MordhauCharacter_FindEquipmentToRestock::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.FreeHandsForEquipment
// 0x0008 (0x0008 - 0x0000)
struct MordhauCharacter_FreeHandsForEquipment final
{
public:
	class AMordhauEquipment*                      EquipmentInstigator;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_FreeHandsForEquipment) == 0x000008, "Wrong alignment on MordhauCharacter_FreeHandsForEquipment");
static_assert(sizeof(MordhauCharacter_FreeHandsForEquipment) == 0x000008, "Wrong size on MordhauCharacter_FreeHandsForEquipment");
static_assert(offsetof(MordhauCharacter_FreeHandsForEquipment, EquipmentInstigator) == 0x000000, "Member 'MordhauCharacter_FreeHandsForEquipment::EquipmentInstigator' has a wrong offset!");

// Function Mordhau.MordhauCharacter.GetAllFaceSelectionChildBonesRecursive
// 0x0018 (0x0018 - 0x0000)
struct MordhauCharacter_GetAllFaceSelectionChildBonesRecursive final
{
public:
	class FName                                   ParentBone;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_GetAllFaceSelectionChildBonesRecursive) == 0x000008, "Wrong alignment on MordhauCharacter_GetAllFaceSelectionChildBonesRecursive");
static_assert(sizeof(MordhauCharacter_GetAllFaceSelectionChildBonesRecursive) == 0x000018, "Wrong size on MordhauCharacter_GetAllFaceSelectionChildBonesRecursive");
static_assert(offsetof(MordhauCharacter_GetAllFaceSelectionChildBonesRecursive, ParentBone) == 0x000000, "Member 'MordhauCharacter_GetAllFaceSelectionChildBonesRecursive::ParentBone' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_GetAllFaceSelectionChildBonesRecursive, ReturnValue) == 0x000008, "Member 'MordhauCharacter_GetAllFaceSelectionChildBonesRecursive::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.GetCustomizationReplicationActor
// 0x0008 (0x0008 - 0x0000)
struct MordhauCharacter_GetCustomizationReplicationActor final
{
public:
	class ACustomizationReplicationActor*         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_GetCustomizationReplicationActor) == 0x000008, "Wrong alignment on MordhauCharacter_GetCustomizationReplicationActor");
static_assert(sizeof(MordhauCharacter_GetCustomizationReplicationActor) == 0x000008, "Wrong size on MordhauCharacter_GetCustomizationReplicationActor");
static_assert(offsetof(MordhauCharacter_GetCustomizationReplicationActor, ReturnValue) == 0x000000, "Member 'MordhauCharacter_GetCustomizationReplicationActor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.GetFaceCustomizationBoneIdx
// 0x000C (0x000C - 0x0000)
struct MordhauCharacter_GetFaceCustomizationBoneIdx final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_GetFaceCustomizationBoneIdx) == 0x000004, "Wrong alignment on MordhauCharacter_GetFaceCustomizationBoneIdx");
static_assert(sizeof(MordhauCharacter_GetFaceCustomizationBoneIdx) == 0x00000C, "Wrong size on MordhauCharacter_GetFaceCustomizationBoneIdx");
static_assert(offsetof(MordhauCharacter_GetFaceCustomizationBoneIdx, BoneName) == 0x000000, "Member 'MordhauCharacter_GetFaceCustomizationBoneIdx::BoneName' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_GetFaceCustomizationBoneIdx, ReturnValue) == 0x000008, "Member 'MordhauCharacter_GetFaceCustomizationBoneIdx::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.GetFaceCustomizationRotate
// 0x0014 (0x0014 - 0x0000)
struct MordhauCharacter_GetFaceCustomizationRotate final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_GetFaceCustomizationRotate) == 0x000004, "Wrong alignment on MordhauCharacter_GetFaceCustomizationRotate");
static_assert(sizeof(MordhauCharacter_GetFaceCustomizationRotate) == 0x000014, "Wrong size on MordhauCharacter_GetFaceCustomizationRotate");
static_assert(offsetof(MordhauCharacter_GetFaceCustomizationRotate, BoneName) == 0x000000, "Member 'MordhauCharacter_GetFaceCustomizationRotate::BoneName' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_GetFaceCustomizationRotate, ReturnValue) == 0x000008, "Member 'MordhauCharacter_GetFaceCustomizationRotate::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.GetFaceCustomizationScale
// 0x0014 (0x0014 - 0x0000)
struct MordhauCharacter_GetFaceCustomizationScale final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_GetFaceCustomizationScale) == 0x000004, "Wrong alignment on MordhauCharacter_GetFaceCustomizationScale");
static_assert(sizeof(MordhauCharacter_GetFaceCustomizationScale) == 0x000014, "Wrong size on MordhauCharacter_GetFaceCustomizationScale");
static_assert(offsetof(MordhauCharacter_GetFaceCustomizationScale, BoneName) == 0x000000, "Member 'MordhauCharacter_GetFaceCustomizationScale::BoneName' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_GetFaceCustomizationScale, ReturnValue) == 0x000008, "Member 'MordhauCharacter_GetFaceCustomizationScale::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.GetFaceCustomizationTransform
// 0x0040 (0x0040 - 0x0000)
struct MordhauCharacter_GetFaceCustomizationTransform final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_GetFaceCustomizationTransform) == 0x000010, "Wrong alignment on MordhauCharacter_GetFaceCustomizationTransform");
static_assert(sizeof(MordhauCharacter_GetFaceCustomizationTransform) == 0x000040, "Wrong size on MordhauCharacter_GetFaceCustomizationTransform");
static_assert(offsetof(MordhauCharacter_GetFaceCustomizationTransform, BoneName) == 0x000000, "Member 'MordhauCharacter_GetFaceCustomizationTransform::BoneName' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_GetFaceCustomizationTransform, ReturnValue) == 0x000010, "Member 'MordhauCharacter_GetFaceCustomizationTransform::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.GetFaceCustomizationTranslate
// 0x0014 (0x0014 - 0x0000)
struct MordhauCharacter_GetFaceCustomizationTranslate final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_GetFaceCustomizationTranslate) == 0x000004, "Wrong alignment on MordhauCharacter_GetFaceCustomizationTranslate");
static_assert(sizeof(MordhauCharacter_GetFaceCustomizationTranslate) == 0x000014, "Wrong size on MordhauCharacter_GetFaceCustomizationTranslate");
static_assert(offsetof(MordhauCharacter_GetFaceCustomizationTranslate, BoneName) == 0x000000, "Member 'MordhauCharacter_GetFaceCustomizationTranslate::BoneName' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_GetFaceCustomizationTranslate, ReturnValue) == 0x000008, "Member 'MordhauCharacter_GetFaceCustomizationTranslate::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.GetLastMovementFrontalHitActor
// 0x0010 (0x0010 - 0x0000)
struct MordhauCharacter_GetLastMovementFrontalHitActor final
{
public:
	float                                         MaxAgeSeconds;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_GetLastMovementFrontalHitActor) == 0x000008, "Wrong alignment on MordhauCharacter_GetLastMovementFrontalHitActor");
static_assert(sizeof(MordhauCharacter_GetLastMovementFrontalHitActor) == 0x000010, "Wrong size on MordhauCharacter_GetLastMovementFrontalHitActor");
static_assert(offsetof(MordhauCharacter_GetLastMovementFrontalHitActor, MaxAgeSeconds) == 0x000000, "Member 'MordhauCharacter_GetLastMovementFrontalHitActor::MaxAgeSeconds' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_GetLastMovementFrontalHitActor, ReturnValue) == 0x000008, "Member 'MordhauCharacter_GetLastMovementFrontalHitActor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.GetLastVehicleTime
// 0x0004 (0x0004 - 0x0000)
struct MordhauCharacter_GetLastVehicleTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_GetLastVehicleTime) == 0x000004, "Wrong alignment on MordhauCharacter_GetLastVehicleTime");
static_assert(sizeof(MordhauCharacter_GetLastVehicleTime) == 0x000004, "Wrong size on MordhauCharacter_GetLastVehicleTime");
static_assert(offsetof(MordhauCharacter_GetLastVehicleTime, ReturnValue) == 0x000000, "Member 'MordhauCharacter_GetLastVehicleTime::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.GetLastVoiceCommand
// 0x0008 (0x0008 - 0x0000)
struct MordhauCharacter_GetLastVoiceCommand final
{
public:
	class UAudioComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_GetLastVoiceCommand) == 0x000008, "Wrong alignment on MordhauCharacter_GetLastVoiceCommand");
static_assert(sizeof(MordhauCharacter_GetLastVoiceCommand) == 0x000008, "Wrong size on MordhauCharacter_GetLastVoiceCommand");
static_assert(offsetof(MordhauCharacter_GetLastVoiceCommand, ReturnValue) == 0x000000, "Member 'MordhauCharacter_GetLastVoiceCommand::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.HasEquipmentHeSpawnedWith
// 0x0001 (0x0001 - 0x0000)
struct MordhauCharacter_HasEquipmentHeSpawnedWith final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_HasEquipmentHeSpawnedWith) == 0x000001, "Wrong alignment on MordhauCharacter_HasEquipmentHeSpawnedWith");
static_assert(sizeof(MordhauCharacter_HasEquipmentHeSpawnedWith) == 0x000001, "Wrong size on MordhauCharacter_HasEquipmentHeSpawnedWith");
static_assert(offsetof(MordhauCharacter_HasEquipmentHeSpawnedWith, ReturnValue) == 0x000000, "Member 'MordhauCharacter_HasEquipmentHeSpawnedWith::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.Holster
// 0x0008 (0x0008 - 0x0000)
struct MordhauCharacter_Holster final
{
public:
	class AMordhauEquipment*                      ToHolster;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_Holster) == 0x000008, "Wrong alignment on MordhauCharacter_Holster");
static_assert(sizeof(MordhauCharacter_Holster) == 0x000008, "Wrong size on MordhauCharacter_Holster");
static_assert(offsetof(MordhauCharacter_Holster, ToHolster) == 0x000000, "Member 'MordhauCharacter_Holster::ToHolster' has a wrong offset!");

// Function Mordhau.MordhauCharacter.IsBoneDismembered
// 0x000C (0x000C - 0x0000)
struct MordhauCharacter_IsBoneDismembered final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_IsBoneDismembered) == 0x000004, "Wrong alignment on MordhauCharacter_IsBoneDismembered");
static_assert(sizeof(MordhauCharacter_IsBoneDismembered) == 0x00000C, "Wrong size on MordhauCharacter_IsBoneDismembered");
static_assert(offsetof(MordhauCharacter_IsBoneDismembered, bone) == 0x000000, "Member 'MordhauCharacter_IsBoneDismembered::bone' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_IsBoneDismembered, ReturnValue) == 0x000008, "Member 'MordhauCharacter_IsBoneDismembered::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.IsHoldingBlock
// 0x0001 (0x0001 - 0x0000)
struct MordhauCharacter_IsHoldingBlock final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_IsHoldingBlock) == 0x000001, "Wrong alignment on MordhauCharacter_IsHoldingBlock");
static_assert(sizeof(MordhauCharacter_IsHoldingBlock) == 0x000001, "Wrong size on MordhauCharacter_IsHoldingBlock");
static_assert(offsetof(MordhauCharacter_IsHoldingBlock, ReturnValue) == 0x000000, "Member 'MordhauCharacter_IsHoldingBlock::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.IsInKnockback
// 0x0001 (0x0001 - 0x0000)
struct MordhauCharacter_IsInKnockback final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_IsInKnockback) == 0x000001, "Wrong alignment on MordhauCharacter_IsInKnockback");
static_assert(sizeof(MordhauCharacter_IsInKnockback) == 0x000001, "Wrong size on MordhauCharacter_IsInKnockback");
static_assert(offsetof(MordhauCharacter_IsInKnockback, ReturnValue) == 0x000000, "Member 'MordhauCharacter_IsInKnockback::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.LeftTeamArea
// 0x0004 (0x0004 - 0x0000)
struct MordhauCharacter_LeftTeamArea final
{
public:
	int32                                         OwningTeam;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_LeftTeamArea) == 0x000004, "Wrong alignment on MordhauCharacter_LeftTeamArea");
static_assert(sizeof(MordhauCharacter_LeftTeamArea) == 0x000004, "Wrong size on MordhauCharacter_LeftTeamArea");
static_assert(offsetof(MordhauCharacter_LeftTeamArea, OwningTeam) == 0x000000, "Member 'MordhauCharacter_LeftTeamArea::OwningTeam' has a wrong offset!");

// Function Mordhau.MordhauCharacter.ModifyParryResult
// 0x00A0 (0x00A0 - 0x0000)
struct MordhauCharacter_ModifyParryResult final
{
public:
	bool                                          InResult;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0004(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AMordhauCharacter*                      Attacker;                                          // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_ModifyParryResult) == 0x000008, "Wrong alignment on MordhauCharacter_ModifyParryResult");
static_assert(sizeof(MordhauCharacter_ModifyParryResult) == 0x0000A0, "Wrong size on MordhauCharacter_ModifyParryResult");
static_assert(offsetof(MordhauCharacter_ModifyParryResult, InResult) == 0x000000, "Member 'MordhauCharacter_ModifyParryResult::InResult' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_ModifyParryResult, HitResult) == 0x000004, "Member 'MordhauCharacter_ModifyParryResult::HitResult' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_ModifyParryResult, Attacker) == 0x000090, "Member 'MordhauCharacter_ModifyParryResult::Attacker' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_ModifyParryResult, ReturnValue) == 0x000098, "Member 'MordhauCharacter_ModifyParryResult::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.MoveBlockedBySlow
// 0x008C (0x008C - 0x0000)
struct MordhauCharacter_MoveBlockedBySlow final
{
public:
	struct FHitResult                             Impact;                                            // 0x0000(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_MoveBlockedBySlow) == 0x000004, "Wrong alignment on MordhauCharacter_MoveBlockedBySlow");
static_assert(sizeof(MordhauCharacter_MoveBlockedBySlow) == 0x00008C, "Wrong size on MordhauCharacter_MoveBlockedBySlow");
static_assert(offsetof(MordhauCharacter_MoveBlockedBySlow, Impact) == 0x000000, "Member 'MordhauCharacter_MoveBlockedBySlow::Impact' has a wrong offset!");

// Function Mordhau.MordhauCharacter.OffsetStamina
// 0x0008 (0x0008 - 0x0000)
struct MordhauCharacter_OffsetStamina final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplicate;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_OffsetStamina) == 0x000004, "Wrong alignment on MordhauCharacter_OffsetStamina");
static_assert(sizeof(MordhauCharacter_OffsetStamina) == 0x000008, "Wrong size on MordhauCharacter_OffsetStamina");
static_assert(offsetof(MordhauCharacter_OffsetStamina, Amount) == 0x000000, "Member 'MordhauCharacter_OffsetStamina::Amount' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_OffsetStamina, bReplicate) == 0x000004, "Member 'MordhauCharacter_OffsetStamina::bReplicate' has a wrong offset!");

// Function Mordhau.MordhauCharacter.OnActionFailed
// 0x0008 (0x0008 - 0x0000)
struct MordhauCharacter_OnActionFailed final
{
public:
	class FName                                   Reason;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_OnActionFailed) == 0x000004, "Wrong alignment on MordhauCharacter_OnActionFailed");
static_assert(sizeof(MordhauCharacter_OnActionFailed) == 0x000008, "Wrong size on MordhauCharacter_OnActionFailed");
static_assert(offsetof(MordhauCharacter_OnActionFailed, Reason) == 0x000000, "Member 'MordhauCharacter_OnActionFailed::Reason' has a wrong offset!");

// Function Mordhau.MordhauCharacter.OnBlockedMelee
// 0x0098 (0x0098 - 0x0000)
struct MordhauCharacter_OnBlockedMelee final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      Attacker;                                          // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_OnBlockedMelee) == 0x000008, "Wrong alignment on MordhauCharacter_OnBlockedMelee");
static_assert(sizeof(MordhauCharacter_OnBlockedMelee) == 0x000098, "Wrong size on MordhauCharacter_OnBlockedMelee");
static_assert(offsetof(MordhauCharacter_OnBlockedMelee, HitResult) == 0x000000, "Member 'MordhauCharacter_OnBlockedMelee::HitResult' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_OnBlockedMelee, Attacker) == 0x000090, "Member 'MordhauCharacter_OnBlockedMelee::Attacker' has a wrong offset!");

// Function Mordhau.MordhauCharacter.OnDropped
// 0x0008 (0x0008 - 0x0000)
struct MordhauCharacter_OnDropped final
{
public:
	class AMordhauEquipment*                      Eq;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_OnDropped) == 0x000008, "Wrong alignment on MordhauCharacter_OnDropped");
static_assert(sizeof(MordhauCharacter_OnDropped) == 0x000008, "Wrong size on MordhauCharacter_OnDropped");
static_assert(offsetof(MordhauCharacter_OnDropped, Eq) == 0x000000, "Member 'MordhauCharacter_OnDropped::Eq' has a wrong offset!");

// Function Mordhau.MordhauCharacter.OnPickedUp
// 0x0008 (0x0008 - 0x0000)
struct MordhauCharacter_OnPickedUp final
{
public:
	class AMordhauEquipment*                      Eq;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_OnPickedUp) == 0x000008, "Wrong alignment on MordhauCharacter_OnPickedUp");
static_assert(sizeof(MordhauCharacter_OnPickedUp) == 0x000008, "Wrong size on MordhauCharacter_OnPickedUp");
static_assert(offsetof(MordhauCharacter_OnPickedUp, Eq) == 0x000000, "Member 'MordhauCharacter_OnPickedUp::Eq' has a wrong offset!");

// Function Mordhau.MordhauCharacter.OnPostDismember
// 0x0018 (0x0018 - 0x0000)
struct MordhauCharacter_OnPostDismember final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASeparatedBodyPart*                     SeparatedPart;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Agent;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_OnPostDismember) == 0x000008, "Wrong alignment on MordhauCharacter_OnPostDismember");
static_assert(sizeof(MordhauCharacter_OnPostDismember) == 0x000018, "Wrong size on MordhauCharacter_OnPostDismember");
static_assert(offsetof(MordhauCharacter_OnPostDismember, bone) == 0x000000, "Member 'MordhauCharacter_OnPostDismember::bone' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_OnPostDismember, SeparatedPart) == 0x000008, "Member 'MordhauCharacter_OnPostDismember::SeparatedPart' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_OnPostDismember, Agent) == 0x000010, "Member 'MordhauCharacter_OnPostDismember::Agent' has a wrong offset!");

// Function Mordhau.MordhauCharacter.PerformVoiceCommand
// 0x0002 (0x0002 - 0x0000)
struct MordhauCharacter_PerformVoiceCommand final
{
public:
	uint8                                         PackedVoiceCommand;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_PerformVoiceCommand) == 0x000001, "Wrong alignment on MordhauCharacter_PerformVoiceCommand");
static_assert(sizeof(MordhauCharacter_PerformVoiceCommand) == 0x000002, "Wrong size on MordhauCharacter_PerformVoiceCommand");
static_assert(offsetof(MordhauCharacter_PerformVoiceCommand, PackedVoiceCommand) == 0x000000, "Member 'MordhauCharacter_PerformVoiceCommand::PackedVoiceCommand' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_PerformVoiceCommand, ReturnValue) == 0x000001, "Member 'MordhauCharacter_PerformVoiceCommand::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.PickUp
// 0x0010 (0x0010 - 0x0000)
struct MordhauCharacter_PickUp final
{
public:
	class AMordhauEquipment*                      ToEquip;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreferredSlot;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_PickUp) == 0x000008, "Wrong alignment on MordhauCharacter_PickUp");
static_assert(sizeof(MordhauCharacter_PickUp) == 0x000010, "Wrong size on MordhauCharacter_PickUp");
static_assert(offsetof(MordhauCharacter_PickUp, ToEquip) == 0x000000, "Member 'MordhauCharacter_PickUp::ToEquip' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_PickUp, PreferredSlot) == 0x000008, "Member 'MordhauCharacter_PickUp::PreferredSlot' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_PickUp, ReturnValue) == 0x00000C, "Member 'MordhauCharacter_PickUp::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.PickUpToSlot
// 0x0010 (0x0010 - 0x0000)
struct MordhauCharacter_PickUpToSlot final
{
public:
	class AMordhauEquipment*                      ToEquip;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_PickUpToSlot) == 0x000008, "Wrong alignment on MordhauCharacter_PickUpToSlot");
static_assert(sizeof(MordhauCharacter_PickUpToSlot) == 0x000010, "Wrong size on MordhauCharacter_PickUpToSlot");
static_assert(offsetof(MordhauCharacter_PickUpToSlot, ToEquip) == 0x000000, "Member 'MordhauCharacter_PickUpToSlot::ToEquip' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_PickUpToSlot, Slot) == 0x000008, "Member 'MordhauCharacter_PickUpToSlot::Slot' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_PickUpToSlot, ReturnValue) == 0x000009, "Member 'MordhauCharacter_PickUpToSlot::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.PlayDeathYell
// 0x0001 (0x0001 - 0x0000)
struct MordhauCharacter_PlayDeathYell final
{
public:
	bool                                          bIsLongYell;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_PlayDeathYell) == 0x000001, "Wrong alignment on MordhauCharacter_PlayDeathYell");
static_assert(sizeof(MordhauCharacter_PlayDeathYell) == 0x000001, "Wrong size on MordhauCharacter_PlayDeathYell");
static_assert(offsetof(MordhauCharacter_PlayDeathYell, bIsLongYell) == 0x000000, "Member 'MordhauCharacter_PlayDeathYell::bIsLongYell' has a wrong offset!");

// Function Mordhau.MordhauCharacter.PlayMouthSound
// 0x0018 (0x0018 - 0x0000)
struct MordhauCharacter_PlayMouthSound final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_PlayMouthSound) == 0x000008, "Wrong alignment on MordhauCharacter_PlayMouthSound");
static_assert(sizeof(MordhauCharacter_PlayMouthSound) == 0x000018, "Wrong size on MordhauCharacter_PlayMouthSound");
static_assert(offsetof(MordhauCharacter_PlayMouthSound, Sound) == 0x000000, "Member 'MordhauCharacter_PlayMouthSound::Sound' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_PlayMouthSound, VolumeMultiplier) == 0x000008, "Member 'MordhauCharacter_PlayMouthSound::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_PlayMouthSound, ReturnValue) == 0x000010, "Member 'MordhauCharacter_PlayMouthSound::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.PlayNonSnappyArmorFoley
// 0x0008 (0x0008 - 0x0000)
struct MordhauCharacter_PlayNonSnappyArmorFoley final
{
public:
	class UAudioComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_PlayNonSnappyArmorFoley) == 0x000008, "Wrong alignment on MordhauCharacter_PlayNonSnappyArmorFoley");
static_assert(sizeof(MordhauCharacter_PlayNonSnappyArmorFoley) == 0x000008, "Wrong size on MordhauCharacter_PlayNonSnappyArmorFoley");
static_assert(offsetof(MordhauCharacter_PlayNonSnappyArmorFoley, ReturnValue) == 0x000000, "Member 'MordhauCharacter_PlayNonSnappyArmorFoley::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.PlaySnappyArmorFoley
// 0x0008 (0x0008 - 0x0000)
struct MordhauCharacter_PlaySnappyArmorFoley final
{
public:
	class UAudioComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_PlaySnappyArmorFoley) == 0x000008, "Wrong alignment on MordhauCharacter_PlaySnappyArmorFoley");
static_assert(sizeof(MordhauCharacter_PlaySnappyArmorFoley) == 0x000008, "Wrong size on MordhauCharacter_PlaySnappyArmorFoley");
static_assert(offsetof(MordhauCharacter_PlaySnappyArmorFoley, ReturnValue) == 0x000000, "Member 'MordhauCharacter_PlaySnappyArmorFoley::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.QueueDismember
// 0x0028 (0x0028 - 0x0000)
struct MordhauCharacter_QueueDismember final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDismemberPartial;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBluntForce;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Force;                                             // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Agent;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_QueueDismember) == 0x000008, "Wrong alignment on MordhauCharacter_QueueDismember");
static_assert(sizeof(MordhauCharacter_QueueDismember) == 0x000028, "Wrong size on MordhauCharacter_QueueDismember");
static_assert(offsetof(MordhauCharacter_QueueDismember, bone) == 0x000000, "Member 'MordhauCharacter_QueueDismember::bone' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_QueueDismember, bIsDismemberPartial) == 0x000008, "Member 'MordhauCharacter_QueueDismember::bIsDismemberPartial' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_QueueDismember, bIsBluntForce) == 0x000009, "Member 'MordhauCharacter_QueueDismember::bIsBluntForce' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_QueueDismember, Force) == 0x00000C, "Member 'MordhauCharacter_QueueDismember::Force' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_QueueDismember, Agent) == 0x000018, "Member 'MordhauCharacter_QueueDismember::Agent' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_QueueDismember, ReturnValue) == 0x000020, "Member 'MordhauCharacter_QueueDismember::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.RequestAttack
// 0x0008 (0x0008 - 0x0000)
struct MordhauCharacter_RequestAttack final
{
public:
	EAttackMove                                   Move;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Angle;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_RequestAttack) == 0x000004, "Wrong alignment on MordhauCharacter_RequestAttack");
static_assert(sizeof(MordhauCharacter_RequestAttack) == 0x000008, "Wrong size on MordhauCharacter_RequestAttack");
static_assert(offsetof(MordhauCharacter_RequestAttack, Move) == 0x000000, "Member 'MordhauCharacter_RequestAttack::Move' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_RequestAttack, Angle) == 0x000004, "Member 'MordhauCharacter_RequestAttack::Angle' has a wrong offset!");

// Function Mordhau.MordhauCharacter.RequestClimb
// 0x0010 (0x0010 - 0x0000)
struct MordhauCharacter_RequestClimb final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSlowClimb;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_RequestClimb) == 0x000004, "Wrong alignment on MordhauCharacter_RequestClimb");
static_assert(sizeof(MordhauCharacter_RequestClimb) == 0x000010, "Wrong size on MordhauCharacter_RequestClimb");
static_assert(offsetof(MordhauCharacter_RequestClimb, TargetLocation) == 0x000000, "Member 'MordhauCharacter_RequestClimb::TargetLocation' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_RequestClimb, bIsSlowClimb) == 0x00000C, "Member 'MordhauCharacter_RequestClimb::bIsSlowClimb' has a wrong offset!");

// Function Mordhau.MordhauCharacter.RequestEmote
// 0x0001 (0x0001 - 0x0000)
struct MordhauCharacter_RequestEmote final
{
public:
	uint8                                         EmoteId;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_RequestEmote) == 0x000001, "Wrong alignment on MordhauCharacter_RequestEmote");
static_assert(sizeof(MordhauCharacter_RequestEmote) == 0x000001, "Wrong size on MordhauCharacter_RequestEmote");
static_assert(offsetof(MordhauCharacter_RequestEmote, EmoteId) == 0x000000, "Member 'MordhauCharacter_RequestEmote::EmoteId' has a wrong offset!");

// Function Mordhau.MordhauCharacter.RequestHolster
// 0x0001 (0x0001 - 0x0000)
struct MordhauCharacter_RequestHolster final
{
public:
	uint8                                         Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_RequestHolster) == 0x000001, "Wrong alignment on MordhauCharacter_RequestHolster");
static_assert(sizeof(MordhauCharacter_RequestHolster) == 0x000001, "Wrong size on MordhauCharacter_RequestHolster");
static_assert(offsetof(MordhauCharacter_RequestHolster, Mode) == 0x000000, "Member 'MordhauCharacter_RequestHolster::Mode' has a wrong offset!");

// Function Mordhau.MordhauCharacter.RequestParry
// 0x0003 (0x0003 - 0x0000)
struct MordhauCharacter_RequestParry final
{
public:
	EBlockType                                    BlockType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowFTP;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_RequestParry) == 0x000001, "Wrong alignment on MordhauCharacter_RequestParry");
static_assert(sizeof(MordhauCharacter_RequestParry) == 0x000003, "Wrong size on MordhauCharacter_RequestParry");
static_assert(offsetof(MordhauCharacter_RequestParry, BlockType) == 0x000000, "Member 'MordhauCharacter_RequestParry::BlockType' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_RequestParry, bAllowFTP) == 0x000001, "Member 'MordhauCharacter_RequestParry::bAllowFTP' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_RequestParry, ReturnValue) == 0x000002, "Member 'MordhauCharacter_RequestParry::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.RequestVoiceCommand
// 0x0002 (0x0002 - 0x0000)
struct MordhauCharacter_RequestVoiceCommand final
{
public:
	uint8                                         CommandType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowQueue;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_RequestVoiceCommand) == 0x000001, "Wrong alignment on MordhauCharacter_RequestVoiceCommand");
static_assert(sizeof(MordhauCharacter_RequestVoiceCommand) == 0x000002, "Wrong size on MordhauCharacter_RequestVoiceCommand");
static_assert(offsetof(MordhauCharacter_RequestVoiceCommand, CommandType) == 0x000000, "Member 'MordhauCharacter_RequestVoiceCommand::CommandType' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_RequestVoiceCommand, bAllowQueue) == 0x000001, "Member 'MordhauCharacter_RequestVoiceCommand::bAllowQueue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.RestockDefaultEquipment
// 0x0018 (0x0018 - 0x0000)
struct MordhauCharacter_RestockDefaultEquipment final
{
public:
	int32                                         MaxSlotsToRestock;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AMordhauEquipment*>              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_RestockDefaultEquipment) == 0x000008, "Wrong alignment on MordhauCharacter_RestockDefaultEquipment");
static_assert(sizeof(MordhauCharacter_RestockDefaultEquipment) == 0x000018, "Wrong size on MordhauCharacter_RestockDefaultEquipment");
static_assert(offsetof(MordhauCharacter_RestockDefaultEquipment, MaxSlotsToRestock) == 0x000000, "Member 'MordhauCharacter_RestockDefaultEquipment::MaxSlotsToRestock' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_RestockDefaultEquipment, ReturnValue) == 0x000008, "Member 'MordhauCharacter_RestockDefaultEquipment::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.RestockEquipmentFromAmmoBox
// 0x0001 (0x0001 - 0x0000)
struct MordhauCharacter_RestockEquipmentFromAmmoBox final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_RestockEquipmentFromAmmoBox) == 0x000001, "Wrong alignment on MordhauCharacter_RestockEquipmentFromAmmoBox");
static_assert(sizeof(MordhauCharacter_RestockEquipmentFromAmmoBox) == 0x000001, "Wrong size on MordhauCharacter_RestockEquipmentFromAmmoBox");
static_assert(offsetof(MordhauCharacter_RestockEquipmentFromAmmoBox, ReturnValue) == 0x000000, "Member 'MordhauCharacter_RestockEquipmentFromAmmoBox::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.ServerAssignFireAim
// 0x0018 (0x0018 - 0x0000)
struct MordhauCharacter_ServerAssignFireAim final
{
public:
	struct FVector                                Orig;                                              // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rot;                                               // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_ServerAssignFireAim) == 0x000004, "Wrong alignment on MordhauCharacter_ServerAssignFireAim");
static_assert(sizeof(MordhauCharacter_ServerAssignFireAim) == 0x000018, "Wrong size on MordhauCharacter_ServerAssignFireAim");
static_assert(offsetof(MordhauCharacter_ServerAssignFireAim, Orig) == 0x000000, "Member 'MordhauCharacter_ServerAssignFireAim::Orig' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_ServerAssignFireAim, Rot) == 0x00000C, "Member 'MordhauCharacter_ServerAssignFireAim::Rot' has a wrong offset!");

// Function Mordhau.MordhauCharacter.ServerAssignNetMotion
// 0x0007 (0x0007 - 0x0000)
struct MordhauCharacter_ServerAssignNetMotion final
{
public:
	struct FNetMotion                             NewNetMotion;                                      // 0x0000(0x0006)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         LastAuthObserved;                                  // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_ServerAssignNetMotion) == 0x000001, "Wrong alignment on MordhauCharacter_ServerAssignNetMotion");
static_assert(sizeof(MordhauCharacter_ServerAssignNetMotion) == 0x000007, "Wrong size on MordhauCharacter_ServerAssignNetMotion");
static_assert(offsetof(MordhauCharacter_ServerAssignNetMotion, NewNetMotion) == 0x000000, "Member 'MordhauCharacter_ServerAssignNetMotion::NewNetMotion' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_ServerAssignNetMotion, LastAuthObserved) == 0x000006, "Member 'MordhauCharacter_ServerAssignNetMotion::LastAuthObserved' has a wrong offset!");

// Function Mordhau.MordhauCharacter.ServerDropParry
// 0x0001 (0x0001 - 0x0000)
struct MordhauCharacter_ServerDropParry final
{
public:
	uint8                                         MotionID;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_ServerDropParry) == 0x000001, "Wrong alignment on MordhauCharacter_ServerDropParry");
static_assert(sizeof(MordhauCharacter_ServerDropParry) == 0x000001, "Wrong size on MordhauCharacter_ServerDropParry");
static_assert(offsetof(MordhauCharacter_ServerDropParry, MotionID) == 0x000000, "Member 'MordhauCharacter_ServerDropParry::MotionID' has a wrong offset!");

// Function Mordhau.MordhauCharacter.ServerFinishInteraction
// 0x0001 (0x0001 - 0x0000)
struct MordhauCharacter_ServerFinishInteraction final
{
public:
	uint8                                         Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_ServerFinishInteraction) == 0x000001, "Wrong alignment on MordhauCharacter_ServerFinishInteraction");
static_assert(sizeof(MordhauCharacter_ServerFinishInteraction) == 0x000001, "Wrong size on MordhauCharacter_ServerFinishInteraction");
static_assert(offsetof(MordhauCharacter_ServerFinishInteraction, Result) == 0x000000, "Member 'MordhauCharacter_ServerFinishInteraction::Result' has a wrong offset!");

// Function Mordhau.MordhauCharacter.ServerQueueAttack
// 0x0003 (0x0003 - 0x0000)
struct MordhauCharacter_ServerQueueAttack final
{
public:
	EAttackMove                                   Move;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Angle;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MotionID;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_ServerQueueAttack) == 0x000001, "Wrong alignment on MordhauCharacter_ServerQueueAttack");
static_assert(sizeof(MordhauCharacter_ServerQueueAttack) == 0x000003, "Wrong size on MordhauCharacter_ServerQueueAttack");
static_assert(offsetof(MordhauCharacter_ServerQueueAttack, Move) == 0x000000, "Member 'MordhauCharacter_ServerQueueAttack::Move' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_ServerQueueAttack, Angle) == 0x000001, "Member 'MordhauCharacter_ServerQueueAttack::Angle' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_ServerQueueAttack, MotionID) == 0x000002, "Member 'MordhauCharacter_ServerQueueAttack::MotionID' has a wrong offset!");

// Function Mordhau.MordhauCharacter.ServerRequestDodge
// 0x0001 (0x0001 - 0x0000)
struct MordhauCharacter_ServerRequestDodge final
{
public:
	uint8                                         PackedWorldYaw;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_ServerRequestDodge) == 0x000001, "Wrong alignment on MordhauCharacter_ServerRequestDodge");
static_assert(sizeof(MordhauCharacter_ServerRequestDodge) == 0x000001, "Wrong size on MordhauCharacter_ServerRequestDodge");
static_assert(offsetof(MordhauCharacter_ServerRequestDodge, PackedWorldYaw) == 0x000000, "Member 'MordhauCharacter_ServerRequestDodge::PackedWorldYaw' has a wrong offset!");

// Function Mordhau.MordhauCharacter.ServerRequestPassiveInteraction
// 0x0008 (0x0008 - 0x0000)
struct MordhauCharacter_ServerRequestPassiveInteraction final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_ServerRequestPassiveInteraction) == 0x000008, "Wrong alignment on MordhauCharacter_ServerRequestPassiveInteraction");
static_assert(sizeof(MordhauCharacter_ServerRequestPassiveInteraction) == 0x000008, "Wrong size on MordhauCharacter_ServerRequestPassiveInteraction");
static_assert(offsetof(MordhauCharacter_ServerRequestPassiveInteraction, Target) == 0x000000, "Member 'MordhauCharacter_ServerRequestPassiveInteraction::Target' has a wrong offset!");

// Function Mordhau.MordhauCharacter.ServerRequestVoiceCommand
// 0x0001 (0x0001 - 0x0000)
struct MordhauCharacter_ServerRequestVoiceCommand final
{
public:
	uint8                                         VoiceRequest;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_ServerRequestVoiceCommand) == 0x000001, "Wrong alignment on MordhauCharacter_ServerRequestVoiceCommand");
static_assert(sizeof(MordhauCharacter_ServerRequestVoiceCommand) == 0x000001, "Wrong size on MordhauCharacter_ServerRequestVoiceCommand");
static_assert(offsetof(MordhauCharacter_ServerRequestVoiceCommand, VoiceRequest) == 0x000000, "Member 'MordhauCharacter_ServerRequestVoiceCommand::VoiceRequest' has a wrong offset!");

// Function Mordhau.MordhauCharacter.ServerSetInteractionTarget
// 0x0008 (0x0008 - 0x0000)
struct MordhauCharacter_ServerSetInteractionTarget final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_ServerSetInteractionTarget) == 0x000008, "Wrong alignment on MordhauCharacter_ServerSetInteractionTarget");
static_assert(sizeof(MordhauCharacter_ServerSetInteractionTarget) == 0x000008, "Wrong size on MordhauCharacter_ServerSetInteractionTarget");
static_assert(offsetof(MordhauCharacter_ServerSetInteractionTarget, Target) == 0x000000, "Member 'MordhauCharacter_ServerSetInteractionTarget::Target' has a wrong offset!");

// Function Mordhau.MordhauCharacter.ServerSuggestHitDetection
// 0x0018 (0x0018 - 0x0000)
struct MordhauCharacter_ServerSuggestHitDetection final
{
public:
	class AAdvancedCharacter*                     OtherCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    HitLocation;                                       // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BoneId;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_ServerSuggestHitDetection) == 0x000008, "Wrong alignment on MordhauCharacter_ServerSuggestHitDetection");
static_assert(sizeof(MordhauCharacter_ServerSuggestHitDetection) == 0x000018, "Wrong size on MordhauCharacter_ServerSuggestHitDetection");
static_assert(offsetof(MordhauCharacter_ServerSuggestHitDetection, OtherCharacter) == 0x000000, "Member 'MordhauCharacter_ServerSuggestHitDetection::OtherCharacter' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_ServerSuggestHitDetection, HitLocation) == 0x000008, "Member 'MordhauCharacter_ServerSuggestHitDetection::HitLocation' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_ServerSuggestHitDetection, BoneId) == 0x000014, "Member 'MordhauCharacter_ServerSuggestHitDetection::BoneId' has a wrong offset!");

// Function Mordhau.MordhauCharacter.SetCameraStyle
// 0x0002 (0x0002 - 0x0000)
struct MordhauCharacter_SetCameraStyle final
{
public:
	uint8                                         NewStyle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlendCamera;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_SetCameraStyle) == 0x000001, "Wrong alignment on MordhauCharacter_SetCameraStyle");
static_assert(sizeof(MordhauCharacter_SetCameraStyle) == 0x000002, "Wrong size on MordhauCharacter_SetCameraStyle");
static_assert(offsetof(MordhauCharacter_SetCameraStyle, NewStyle) == 0x000000, "Member 'MordhauCharacter_SetCameraStyle::NewStyle' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_SetCameraStyle, bBlendCamera) == 0x000001, "Member 'MordhauCharacter_SetCameraStyle::bBlendCamera' has a wrong offset!");

// Function Mordhau.MordhauCharacter.SetCurrentlyTracking
// 0x0008 (0x0008 - 0x0000)
struct MordhauCharacter_SetCurrentlyTracking final
{
public:
	class AActor*                                 NewTrackingTarget;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_SetCurrentlyTracking) == 0x000008, "Wrong alignment on MordhauCharacter_SetCurrentlyTracking");
static_assert(sizeof(MordhauCharacter_SetCurrentlyTracking) == 0x000008, "Wrong size on MordhauCharacter_SetCurrentlyTracking");
static_assert(offsetof(MordhauCharacter_SetCurrentlyTracking, NewTrackingTarget) == 0x000000, "Member 'MordhauCharacter_SetCurrentlyTracking::NewTrackingTarget' has a wrong offset!");

// Function Mordhau.MordhauCharacter.SetCustomizationReplicationActor
// 0x0008 (0x0008 - 0x0000)
struct MordhauCharacter_SetCustomizationReplicationActor final
{
public:
	class ACustomizationReplicationActor*         CRA;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_SetCustomizationReplicationActor) == 0x000008, "Wrong alignment on MordhauCharacter_SetCustomizationReplicationActor");
static_assert(sizeof(MordhauCharacter_SetCustomizationReplicationActor) == 0x000008, "Wrong size on MordhauCharacter_SetCustomizationReplicationActor");
static_assert(offsetof(MordhauCharacter_SetCustomizationReplicationActor, CRA) == 0x000000, "Member 'MordhauCharacter_SetCustomizationReplicationActor::CRA' has a wrong offset!");

// Function Mordhau.MordhauCharacter.SetFaceCustomizationRotate
// 0x0014 (0x0014 - 0x0000)
struct MordhauCharacter_SetFaceCustomizationRotate final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vector;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_SetFaceCustomizationRotate) == 0x000004, "Wrong alignment on MordhauCharacter_SetFaceCustomizationRotate");
static_assert(sizeof(MordhauCharacter_SetFaceCustomizationRotate) == 0x000014, "Wrong size on MordhauCharacter_SetFaceCustomizationRotate");
static_assert(offsetof(MordhauCharacter_SetFaceCustomizationRotate, BoneName) == 0x000000, "Member 'MordhauCharacter_SetFaceCustomizationRotate::BoneName' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_SetFaceCustomizationRotate, Vector) == 0x000008, "Member 'MordhauCharacter_SetFaceCustomizationRotate::Vector' has a wrong offset!");

// Function Mordhau.MordhauCharacter.SetFaceCustomizationScale
// 0x0014 (0x0014 - 0x0000)
struct MordhauCharacter_SetFaceCustomizationScale final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vector;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_SetFaceCustomizationScale) == 0x000004, "Wrong alignment on MordhauCharacter_SetFaceCustomizationScale");
static_assert(sizeof(MordhauCharacter_SetFaceCustomizationScale) == 0x000014, "Wrong size on MordhauCharacter_SetFaceCustomizationScale");
static_assert(offsetof(MordhauCharacter_SetFaceCustomizationScale, BoneName) == 0x000000, "Member 'MordhauCharacter_SetFaceCustomizationScale::BoneName' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_SetFaceCustomizationScale, Vector) == 0x000008, "Member 'MordhauCharacter_SetFaceCustomizationScale::Vector' has a wrong offset!");

// Function Mordhau.MordhauCharacter.SetFaceCustomizationTranslate
// 0x0014 (0x0014 - 0x0000)
struct MordhauCharacter_SetFaceCustomizationTranslate final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vector;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_SetFaceCustomizationTranslate) == 0x000004, "Wrong alignment on MordhauCharacter_SetFaceCustomizationTranslate");
static_assert(sizeof(MordhauCharacter_SetFaceCustomizationTranslate) == 0x000014, "Wrong size on MordhauCharacter_SetFaceCustomizationTranslate");
static_assert(offsetof(MordhauCharacter_SetFaceCustomizationTranslate, BoneName) == 0x000000, "Member 'MordhauCharacter_SetFaceCustomizationTranslate::BoneName' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_SetFaceCustomizationTranslate, Vector) == 0x000008, "Member 'MordhauCharacter_SetFaceCustomizationTranslate::Vector' has a wrong offset!");

// Function Mordhau.MordhauCharacter.SetQuiver
// 0x0008 (0x0008 - 0x0000)
struct MordhauCharacter_SetQuiver final
{
public:
	TSubclassOf<class UQuiver>                    NewQuiver;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_SetQuiver) == 0x000008, "Wrong alignment on MordhauCharacter_SetQuiver");
static_assert(sizeof(MordhauCharacter_SetQuiver) == 0x000008, "Wrong size on MordhauCharacter_SetQuiver");
static_assert(offsetof(MordhauCharacter_SetQuiver, NewQuiver) == 0x000000, "Member 'MordhauCharacter_SetQuiver::NewQuiver' has a wrong offset!");

// Function Mordhau.MordhauCharacter.SprintingMoveBlockedBy
// 0x0008 (0x0008 - 0x0000)
struct MordhauCharacter_SprintingMoveBlockedBy final
{
public:
	class AActor*                                 BlockedBy;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_SprintingMoveBlockedBy) == 0x000008, "Wrong alignment on MordhauCharacter_SprintingMoveBlockedBy");
static_assert(sizeof(MordhauCharacter_SprintingMoveBlockedBy) == 0x000008, "Wrong size on MordhauCharacter_SprintingMoveBlockedBy");
static_assert(offsetof(MordhauCharacter_SprintingMoveBlockedBy, BlockedBy) == 0x000000, "Member 'MordhauCharacter_SprintingMoveBlockedBy::BlockedBy' has a wrong offset!");

// Function Mordhau.MordhauCharacter.StopStaminaRegen
// 0x0004 (0x0004 - 0x0000)
struct MordhauCharacter_StopStaminaRegen final
{
public:
	float                                         ExtraTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_StopStaminaRegen) == 0x000004, "Wrong alignment on MordhauCharacter_StopStaminaRegen");
static_assert(sizeof(MordhauCharacter_StopStaminaRegen) == 0x000004, "Wrong size on MordhauCharacter_StopStaminaRegen");
static_assert(offsetof(MordhauCharacter_StopStaminaRegen, ExtraTime) == 0x000000, "Member 'MordhauCharacter_StopStaminaRegen::ExtraTime' has a wrong offset!");

// Function Mordhau.MordhauCharacter.SwitchEquipment
// 0x0008 (0x0008 - 0x0000)
struct MordhauCharacter_SwitchEquipment final
{
public:
	class AMordhauEquipment*                      ToSwitch;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_SwitchEquipment) == 0x000008, "Wrong alignment on MordhauCharacter_SwitchEquipment");
static_assert(sizeof(MordhauCharacter_SwitchEquipment) == 0x000008, "Wrong size on MordhauCharacter_SwitchEquipment");
static_assert(offsetof(MordhauCharacter_SwitchEquipment, ToSwitch) == 0x000000, "Member 'MordhauCharacter_SwitchEquipment::ToSwitch' has a wrong offset!");

// Function Mordhau.MordhauCharacter.SwitchEquipmentByIndex
// 0x0001 (0x0001 - 0x0000)
struct MordhauCharacter_SwitchEquipmentByIndex final
{
public:
	uint8                                         Index_0;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_SwitchEquipmentByIndex) == 0x000001, "Wrong alignment on MordhauCharacter_SwitchEquipmentByIndex");
static_assert(sizeof(MordhauCharacter_SwitchEquipmentByIndex) == 0x000001, "Wrong size on MordhauCharacter_SwitchEquipmentByIndex");
static_assert(offsetof(MordhauCharacter_SwitchEquipmentByIndex, Index_0) == 0x000000, "Member 'MordhauCharacter_SwitchEquipmentByIndex::Index_0' has a wrong offset!");

// Function Mordhau.MordhauCharacter.SwitchModeAndReAttach
// 0x0008 (0x0008 - 0x0000)
struct MordhauCharacter_SwitchModeAndReAttach final
{
public:
	class AMordhauEquipment*                      ToSwitch;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_SwitchModeAndReAttach) == 0x000008, "Wrong alignment on MordhauCharacter_SwitchModeAndReAttach");
static_assert(sizeof(MordhauCharacter_SwitchModeAndReAttach) == 0x000008, "Wrong size on MordhauCharacter_SwitchModeAndReAttach");
static_assert(offsetof(MordhauCharacter_SwitchModeAndReAttach, ToSwitch) == 0x000000, "Member 'MordhauCharacter_SwitchModeAndReAttach::ToSwitch' has a wrong offset!");

// Function Mordhau.MordhauCharacter.TryClimbing
// 0x0001 (0x0001 - 0x0000)
struct MordhauCharacter_TryClimbing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_TryClimbing) == 0x000001, "Wrong alignment on MordhauCharacter_TryClimbing");
static_assert(sizeof(MordhauCharacter_TryClimbing) == 0x000001, "Wrong size on MordhauCharacter_TryClimbing");
static_assert(offsetof(MordhauCharacter_TryClimbing, ReturnValue) == 0x000000, "Member 'MordhauCharacter_TryClimbing::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.TryDismember
// 0x0028 (0x0028 - 0x0000)
struct MordhauCharacter_TryDismember final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauWeapon*                         Weapon;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackMove                                   Move;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRagdollDismember;                               // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_TryDismember) == 0x000008, "Wrong alignment on MordhauCharacter_TryDismember");
static_assert(sizeof(MordhauCharacter_TryDismember) == 0x000028, "Wrong size on MordhauCharacter_TryDismember");
static_assert(offsetof(MordhauCharacter_TryDismember, bone) == 0x000000, "Member 'MordhauCharacter_TryDismember::bone' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_TryDismember, Point) == 0x000008, "Member 'MordhauCharacter_TryDismember::Point' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_TryDismember, Weapon) == 0x000018, "Member 'MordhauCharacter_TryDismember::Weapon' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_TryDismember, Move) == 0x000020, "Member 'MordhauCharacter_TryDismember::Move' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_TryDismember, bIsRagdollDismember) == 0x000021, "Member 'MordhauCharacter_TryDismember::bIsRagdollDismember' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_TryDismember, ReturnValue) == 0x000022, "Member 'MordhauCharacter_TryDismember::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.UpdateFPCamera
// 0x0018 (0x0018 - 0x0000)
struct MordhauCharacter_UpdateFPCamera final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLookUpValue;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyUpdateRotation;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Offset;                                            // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_UpdateFPCamera) == 0x000004, "Wrong alignment on MordhauCharacter_UpdateFPCamera");
static_assert(sizeof(MordhauCharacter_UpdateFPCamera) == 0x000018, "Wrong size on MordhauCharacter_UpdateFPCamera");
static_assert(offsetof(MordhauCharacter_UpdateFPCamera, DeltaSeconds) == 0x000000, "Member 'MordhauCharacter_UpdateFPCamera::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_UpdateFPCamera, InLookUpValue) == 0x000004, "Member 'MordhauCharacter_UpdateFPCamera::InLookUpValue' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_UpdateFPCamera, bOnlyUpdateRotation) == 0x000008, "Member 'MordhauCharacter_UpdateFPCamera::bOnlyUpdateRotation' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_UpdateFPCamera, Offset) == 0x00000C, "Member 'MordhauCharacter_UpdateFPCamera::Offset' has a wrong offset!");

// Function Mordhau.MordhauCharacter.UpdateLOD
// 0x0004 (0x0004 - 0x0000)
struct MordhauCharacter_UpdateLOD final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_UpdateLOD) == 0x000004, "Wrong alignment on MordhauCharacter_UpdateLOD");
static_assert(sizeof(MordhauCharacter_UpdateLOD) == 0x000004, "Wrong size on MordhauCharacter_UpdateLOD");
static_assert(offsetof(MordhauCharacter_UpdateLOD, DeltaTime) == 0x000000, "Member 'MordhauCharacter_UpdateLOD::DeltaTime' has a wrong offset!");

// Function Mordhau.MordhauCharacter.ValidateInteractionTarget
// 0x0010 (0x0010 - 0x0000)
struct MordhauCharacter_ValidateInteractionTarget final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_ValidateInteractionTarget) == 0x000008, "Wrong alignment on MordhauCharacter_ValidateInteractionTarget");
static_assert(sizeof(MordhauCharacter_ValidateInteractionTarget) == 0x000010, "Wrong size on MordhauCharacter_ValidateInteractionTarget");
static_assert(offsetof(MordhauCharacter_ValidateInteractionTarget, TargetActor) == 0x000000, "Member 'MordhauCharacter_ValidateInteractionTarget::TargetActor' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_ValidateInteractionTarget, ReturnValue) == 0x000008, "Member 'MordhauCharacter_ValidateInteractionTarget::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.CanEasyParry
// 0x0001 (0x0001 - 0x0000)
struct MordhauCharacter_CanEasyParry final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_CanEasyParry) == 0x000001, "Wrong alignment on MordhauCharacter_CanEasyParry");
static_assert(sizeof(MordhauCharacter_CanEasyParry) == 0x000001, "Wrong size on MordhauCharacter_CanEasyParry");
static_assert(offsetof(MordhauCharacter_CanEasyParry, ReturnValue) == 0x000000, "Member 'MordhauCharacter_CanEasyParry::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.CanEmote
// 0x0001 (0x0001 - 0x0000)
struct MordhauCharacter_CanEmote final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_CanEmote) == 0x000001, "Wrong alignment on MordhauCharacter_CanEmote");
static_assert(sizeof(MordhauCharacter_CanEmote) == 0x000001, "Wrong size on MordhauCharacter_CanEmote");
static_assert(offsetof(MordhauCharacter_CanEmote, ReturnValue) == 0x000000, "Member 'MordhauCharacter_CanEmote::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.CheckCanEquip
// 0x0010 (0x0010 - 0x0000)
struct MordhauCharacter_CheckCanEquip final
{
public:
	class AMordhauEquipment*                      Equip;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_CheckCanEquip) == 0x000008, "Wrong alignment on MordhauCharacter_CheckCanEquip");
static_assert(sizeof(MordhauCharacter_CheckCanEquip) == 0x000010, "Wrong size on MordhauCharacter_CheckCanEquip");
static_assert(offsetof(MordhauCharacter_CheckCanEquip, Equip) == 0x000000, "Member 'MordhauCharacter_CheckCanEquip::Equip' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_CheckCanEquip, ReturnValue) == 0x000008, "Member 'MordhauCharacter_CheckCanEquip::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.CheckCanEquipAlt
// 0x0010 (0x0010 - 0x0000)
struct MordhauCharacter_CheckCanEquipAlt final
{
public:
	class AMordhauEquipment*                      Equip;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_CheckCanEquipAlt) == 0x000008, "Wrong alignment on MordhauCharacter_CheckCanEquipAlt");
static_assert(sizeof(MordhauCharacter_CheckCanEquipAlt) == 0x000010, "Wrong size on MordhauCharacter_CheckCanEquipAlt");
static_assert(offsetof(MordhauCharacter_CheckCanEquipAlt, Equip) == 0x000000, "Member 'MordhauCharacter_CheckCanEquipAlt::Equip' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_CheckCanEquipAlt, ReturnValue) == 0x000008, "Member 'MordhauCharacter_CheckCanEquipAlt::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.GetClothMesh
// 0x0008 (0x0008 - 0x0000)
struct MordhauCharacter_GetClothMesh final
{
public:
	class ULODSkeletalMeshComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_GetClothMesh) == 0x000008, "Wrong alignment on MordhauCharacter_GetClothMesh");
static_assert(sizeof(MordhauCharacter_GetClothMesh) == 0x000008, "Wrong size on MordhauCharacter_GetClothMesh");
static_assert(offsetof(MordhauCharacter_GetClothMesh, ReturnValue) == 0x000000, "Member 'MordhauCharacter_GetClothMesh::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.GetCurrentNetMotion
// 0x0006 (0x0006 - 0x0000)
struct MordhauCharacter_GetCurrentNetMotion final
{
public:
	struct FNetMotion                             ReturnValue;                                       // 0x0000(0x0006)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_GetCurrentNetMotion) == 0x000001, "Wrong alignment on MordhauCharacter_GetCurrentNetMotion");
static_assert(sizeof(MordhauCharacter_GetCurrentNetMotion) == 0x000006, "Wrong size on MordhauCharacter_GetCurrentNetMotion");
static_assert(offsetof(MordhauCharacter_GetCurrentNetMotion, ReturnValue) == 0x000000, "Member 'MordhauCharacter_GetCurrentNetMotion::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.GetEquipmentIndex
// 0x0010 (0x0010 - 0x0000)
struct MordhauCharacter_GetEquipmentIndex final
{
public:
	const class AMordhauEquipment*                Equip;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OutIndex;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauCharacter_GetEquipmentIndex) == 0x000008, "Wrong alignment on MordhauCharacter_GetEquipmentIndex");
static_assert(sizeof(MordhauCharacter_GetEquipmentIndex) == 0x000010, "Wrong size on MordhauCharacter_GetEquipmentIndex");
static_assert(offsetof(MordhauCharacter_GetEquipmentIndex, Equip) == 0x000000, "Member 'MordhauCharacter_GetEquipmentIndex::Equip' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_GetEquipmentIndex, OutIndex) == 0x000008, "Member 'MordhauCharacter_GetEquipmentIndex::OutIndex' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_GetEquipmentIndex, ReturnValue) == 0x000009, "Member 'MordhauCharacter_GetEquipmentIndex::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.GetLastUsedVehicle
// 0x0010 (0x0010 - 0x0000)
struct MordhauCharacter_GetLastUsedVehicle final
{
public:
	float                                         MaximumTimeDiscrepancy;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauVehicleComponent*               ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_GetLastUsedVehicle) == 0x000008, "Wrong alignment on MordhauCharacter_GetLastUsedVehicle");
static_assert(sizeof(MordhauCharacter_GetLastUsedVehicle) == 0x000010, "Wrong size on MordhauCharacter_GetLastUsedVehicle");
static_assert(offsetof(MordhauCharacter_GetLastUsedVehicle, MaximumTimeDiscrepancy) == 0x000000, "Member 'MordhauCharacter_GetLastUsedVehicle::MaximumTimeDiscrepancy' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_GetLastUsedVehicle, ReturnValue) == 0x000008, "Member 'MordhauCharacter_GetLastUsedVehicle::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.GetMovementRestriction
// 0x0001 (0x0001 - 0x0000)
struct MordhauCharacter_GetMovementRestriction final
{
public:
	EMovementRestriction                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_GetMovementRestriction) == 0x000001, "Wrong alignment on MordhauCharacter_GetMovementRestriction");
static_assert(sizeof(MordhauCharacter_GetMovementRestriction) == 0x000001, "Wrong size on MordhauCharacter_GetMovementRestriction");
static_assert(offsetof(MordhauCharacter_GetMovementRestriction, ReturnValue) == 0x000000, "Member 'MordhauCharacter_GetMovementRestriction::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.HasPerk
// 0x0002 (0x0002 - 0x0000)
struct MordhauCharacter_HasPerk final
{
public:
	uint8                                         PerkId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_HasPerk) == 0x000001, "Wrong alignment on MordhauCharacter_HasPerk");
static_assert(sizeof(MordhauCharacter_HasPerk) == 0x000002, "Wrong size on MordhauCharacter_HasPerk");
static_assert(offsetof(MordhauCharacter_HasPerk, PerkId) == 0x000000, "Member 'MordhauCharacter_HasPerk::PerkId' has a wrong offset!");
static_assert(offsetof(MordhauCharacter_HasPerk, ReturnValue) == 0x000001, "Member 'MordhauCharacter_HasPerk::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.IsInAnyTeamArea
// 0x0001 (0x0001 - 0x0000)
struct MordhauCharacter_IsInAnyTeamArea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_IsInAnyTeamArea) == 0x000001, "Wrong alignment on MordhauCharacter_IsInAnyTeamArea");
static_assert(sizeof(MordhauCharacter_IsInAnyTeamArea) == 0x000001, "Wrong size on MordhauCharacter_IsInAnyTeamArea");
static_assert(offsetof(MordhauCharacter_IsInAnyTeamArea, ReturnValue) == 0x000000, "Member 'MordhauCharacter_IsInAnyTeamArea::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauCharacter.IsInEnemyTeamArea
// 0x0001 (0x0001 - 0x0000)
struct MordhauCharacter_IsInEnemyTeamArea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauCharacter_IsInEnemyTeamArea) == 0x000001, "Wrong alignment on MordhauCharacter_IsInEnemyTeamArea");
static_assert(sizeof(MordhauCharacter_IsInEnemyTeamArea) == 0x000001, "Wrong size on MordhauCharacter_IsInEnemyTeamArea");
static_assert(offsetof(MordhauCharacter_IsInEnemyTeamArea, ReturnValue) == 0x000000, "Member 'MordhauCharacter_IsInEnemyTeamArea::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauEquipmentRemapper.RemapPawn
// 0x0010 (0x0010 - 0x0000)
struct MordhauEquipmentRemapper_RemapPawn final
{
public:
	TSubclassOf<class APawn>                      InCharacterClass;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APawn>                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipmentRemapper_RemapPawn) == 0x000008, "Wrong alignment on MordhauEquipmentRemapper_RemapPawn");
static_assert(sizeof(MordhauEquipmentRemapper_RemapPawn) == 0x000010, "Wrong size on MordhauEquipmentRemapper_RemapPawn");
static_assert(offsetof(MordhauEquipmentRemapper_RemapPawn, InCharacterClass) == 0x000000, "Member 'MordhauEquipmentRemapper_RemapPawn::InCharacterClass' has a wrong offset!");
static_assert(offsetof(MordhauEquipmentRemapper_RemapPawn, ReturnValue) == 0x000008, "Member 'MordhauEquipmentRemapper_RemapPawn::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauEquipmentRemapper.RemapEquipment
// 0x0050 (0x0050 - 0x0000)
struct MordhauEquipmentRemapper_RemapEquipment final
{
public:
	TSoftClassPtr<class UClass>                   InEquipmentClass;                                  // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0028(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipmentRemapper_RemapEquipment) == 0x000008, "Wrong alignment on MordhauEquipmentRemapper_RemapEquipment");
static_assert(sizeof(MordhauEquipmentRemapper_RemapEquipment) == 0x000050, "Wrong size on MordhauEquipmentRemapper_RemapEquipment");
static_assert(offsetof(MordhauEquipmentRemapper_RemapEquipment, InEquipmentClass) == 0x000000, "Member 'MordhauEquipmentRemapper_RemapEquipment::InEquipmentClass' has a wrong offset!");
static_assert(offsetof(MordhauEquipmentRemapper_RemapEquipment, ReturnValue) == 0x000028, "Member 'MordhauEquipmentRemapper_RemapEquipment::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauEquipmentRemapper.RemapMotion
// 0x0010 (0x0010 - 0x0000)
struct MordhauEquipmentRemapper_RemapMotion final
{
public:
	TSubclassOf<class UMordhauMotion>             InMotionClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMordhauMotion>             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauEquipmentRemapper_RemapMotion) == 0x000008, "Wrong alignment on MordhauEquipmentRemapper_RemapMotion");
static_assert(sizeof(MordhauEquipmentRemapper_RemapMotion) == 0x000010, "Wrong size on MordhauEquipmentRemapper_RemapMotion");
static_assert(offsetof(MordhauEquipmentRemapper_RemapMotion, InMotionClass) == 0x000000, "Member 'MordhauEquipmentRemapper_RemapMotion::InMotionClass' has a wrong offset!");
static_assert(offsetof(MordhauEquipmentRemapper_RemapMotion, ReturnValue) == 0x000008, "Member 'MordhauEquipmentRemapper_RemapMotion::ReturnValue' has a wrong offset!");

// Function Mordhau.GetFriendsList.GetFriendsList
// 0x0010 (0x0010 - 0x0000)
struct GetFriendsList_GetFriendsList final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGetFriendsList*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetFriendsList_GetFriendsList) == 0x000008, "Wrong alignment on GetFriendsList_GetFriendsList");
static_assert(sizeof(GetFriendsList_GetFriendsList) == 0x000010, "Wrong size on GetFriendsList_GetFriendsList");
static_assert(offsetof(GetFriendsList_GetFriendsList, WorldContextObject) == 0x000000, "Member 'GetFriendsList_GetFriendsList::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GetFriendsList_GetFriendsList, ReturnValue) == 0x000008, "Member 'GetFriendsList_GetFriendsList::ReturnValue' has a wrong offset!");

// Function Mordhau.FindPlayerByEntityId.FindPlayerByEntityId
// 0x0018 (0x0018 - 0x0000)
struct FindPlayerByEntityId_FindPlayerByEntityId final
{
public:
	class FString                                 EntityId_0;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFindPlayerByEntityId*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FindPlayerByEntityId_FindPlayerByEntityId) == 0x000008, "Wrong alignment on FindPlayerByEntityId_FindPlayerByEntityId");
static_assert(sizeof(FindPlayerByEntityId_FindPlayerByEntityId) == 0x000018, "Wrong size on FindPlayerByEntityId_FindPlayerByEntityId");
static_assert(offsetof(FindPlayerByEntityId_FindPlayerByEntityId, EntityId_0) == 0x000000, "Member 'FindPlayerByEntityId_FindPlayerByEntityId::EntityId_0' has a wrong offset!");
static_assert(offsetof(FindPlayerByEntityId_FindPlayerByEntityId, ReturnValue) == 0x000010, "Member 'FindPlayerByEntityId_FindPlayerByEntityId::ReturnValue' has a wrong offset!");

// Function Mordhau.GetFriendRequests.GetFriendRequests
// 0x0008 (0x0008 - 0x0000)
struct GetFriendRequests_GetFriendRequests final
{
public:
	class UGetFriendRequests*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetFriendRequests_GetFriendRequests) == 0x000008, "Wrong alignment on GetFriendRequests_GetFriendRequests");
static_assert(sizeof(GetFriendRequests_GetFriendRequests) == 0x000008, "Wrong size on GetFriendRequests_GetFriendRequests");
static_assert(offsetof(GetFriendRequests_GetFriendRequests, ReturnValue) == 0x000000, "Member 'GetFriendRequests_GetFriendRequests::ReturnValue' has a wrong offset!");

// Function Mordhau.DeclineFriendRequest.DeclineFriendRequest
// 0x0068 (0x0068 - 0x0000)
struct DeclineFriendRequest_DeclineFriendRequest final
{
public:
	struct FPlayFabPlayer                         Player_0;                                          // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDeclineFriendRequest*                  ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeclineFriendRequest_DeclineFriendRequest) == 0x000008, "Wrong alignment on DeclineFriendRequest_DeclineFriendRequest");
static_assert(sizeof(DeclineFriendRequest_DeclineFriendRequest) == 0x000068, "Wrong size on DeclineFriendRequest_DeclineFriendRequest");
static_assert(offsetof(DeclineFriendRequest_DeclineFriendRequest, Player_0) == 0x000000, "Member 'DeclineFriendRequest_DeclineFriendRequest::Player_0' has a wrong offset!");
static_assert(offsetof(DeclineFriendRequest_DeclineFriendRequest, ReturnValue) == 0x000060, "Member 'DeclineFriendRequest_DeclineFriendRequest::ReturnValue' has a wrong offset!");

// Function Mordhau.RemoveFriend.RemoveFriend
// 0x0070 (0x0070 - 0x0000)
struct RemoveFriend_RemoveFriend final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabPlayer                         Player_0;                                          // 0x0008(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URemoveFriend*                          ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RemoveFriend_RemoveFriend) == 0x000008, "Wrong alignment on RemoveFriend_RemoveFriend");
static_assert(sizeof(RemoveFriend_RemoveFriend) == 0x000070, "Wrong size on RemoveFriend_RemoveFriend");
static_assert(offsetof(RemoveFriend_RemoveFriend, WorldContextObject) == 0x000000, "Member 'RemoveFriend_RemoveFriend::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RemoveFriend_RemoveFriend, Player_0) == 0x000008, "Member 'RemoveFriend_RemoveFriend::Player_0' has a wrong offset!");
static_assert(offsetof(RemoveFriend_RemoveFriend, ReturnValue) == 0x000068, "Member 'RemoveFriend_RemoveFriend::ReturnValue' has a wrong offset!");

// Function Mordhau.GetBlockedPlayers.GetBlockedPlayers
// 0x0010 (0x0010 - 0x0000)
struct GetBlockedPlayers_GetBlockedPlayers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGetBlockedPlayers*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetBlockedPlayers_GetBlockedPlayers) == 0x000008, "Wrong alignment on GetBlockedPlayers_GetBlockedPlayers");
static_assert(sizeof(GetBlockedPlayers_GetBlockedPlayers) == 0x000010, "Wrong size on GetBlockedPlayers_GetBlockedPlayers");
static_assert(offsetof(GetBlockedPlayers_GetBlockedPlayers, WorldContextObject) == 0x000000, "Member 'GetBlockedPlayers_GetBlockedPlayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GetBlockedPlayers_GetBlockedPlayers, ReturnValue) == 0x000008, "Member 'GetBlockedPlayers_GetBlockedPlayers::ReturnValue' has a wrong offset!");

// Function Mordhau.UnblockPlayer.UnblockPlayer
// 0x0070 (0x0070 - 0x0000)
struct UnblockPlayer_UnblockPlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabPlayer                         Player_0;                                          // 0x0008(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUnblockPlayer*                         ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnblockPlayer_UnblockPlayer) == 0x000008, "Wrong alignment on UnblockPlayer_UnblockPlayer");
static_assert(sizeof(UnblockPlayer_UnblockPlayer) == 0x000070, "Wrong size on UnblockPlayer_UnblockPlayer");
static_assert(offsetof(UnblockPlayer_UnblockPlayer, WorldContextObject) == 0x000000, "Member 'UnblockPlayer_UnblockPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UnblockPlayer_UnblockPlayer, Player_0) == 0x000008, "Member 'UnblockPlayer_UnblockPlayer::Player_0' has a wrong offset!");
static_assert(offsetof(UnblockPlayer_UnblockPlayer, ReturnValue) == 0x000068, "Member 'UnblockPlayer_UnblockPlayer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameMode.AddBots
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameMode_AddBots final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Team;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameMode_AddBots) == 0x000004, "Wrong alignment on MordhauGameMode_AddBots");
static_assert(sizeof(MordhauGameMode_AddBots) == 0x000008, "Wrong size on MordhauGameMode_AddBots");
static_assert(offsetof(MordhauGameMode_AddBots, Amount) == 0x000000, "Member 'MordhauGameMode_AddBots::Amount' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_AddBots, Team) == 0x000004, "Member 'MordhauGameMode_AddBots::Team' has a wrong offset!");

// Function Mordhau.MordhauGameMode.AddTeamScore
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameMode_AddTeamScore final
{
public:
	int32                                         Team;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameMode_AddTeamScore) == 0x000004, "Wrong alignment on MordhauGameMode_AddTeamScore");
static_assert(sizeof(MordhauGameMode_AddTeamScore) == 0x000008, "Wrong size on MordhauGameMode_AddTeamScore");
static_assert(offsetof(MordhauGameMode_AddTeamScore, Team) == 0x000000, "Member 'MordhauGameMode_AddTeamScore::Team' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_AddTeamScore, Amount) == 0x000004, "Member 'MordhauGameMode_AddTeamScore::Amount' has a wrong offset!");

// Function Mordhau.MordhauGameMode.Broadcast
// 0x0020 (0x0020 - 0x0000)
struct MordhauGameMode_Broadcast final
{
public:
	class AActor*                                 Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Msg;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Type;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameMode_Broadcast) == 0x000008, "Wrong alignment on MordhauGameMode_Broadcast");
static_assert(sizeof(MordhauGameMode_Broadcast) == 0x000020, "Wrong size on MordhauGameMode_Broadcast");
static_assert(offsetof(MordhauGameMode_Broadcast, Sender) == 0x000000, "Member 'MordhauGameMode_Broadcast::Sender' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_Broadcast, Msg) == 0x000008, "Member 'MordhauGameMode_Broadcast::Msg' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_Broadcast, Type) == 0x000018, "Member 'MordhauGameMode_Broadcast::Type' has a wrong offset!");

// Function Mordhau.MordhauGameMode.CanChamber
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameMode_CanChamber final
{
public:
	class APawn*                                  Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameMode_CanChamber) == 0x000008, "Wrong alignment on MordhauGameMode_CanChamber");
static_assert(sizeof(MordhauGameMode_CanChamber) == 0x000018, "Wrong size on MordhauGameMode_CanChamber");
static_assert(offsetof(MordhauGameMode_CanChamber, Source) == 0x000000, "Member 'MordhauGameMode_CanChamber::Source' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_CanChamber, Target) == 0x000008, "Member 'MordhauGameMode_CanChamber::Target' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_CanChamber, ReturnValue) == 0x000010, "Member 'MordhauGameMode_CanChamber::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameMode.CanClash
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameMode_CanClash final
{
public:
	class APawn*                                  Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameMode_CanClash) == 0x000008, "Wrong alignment on MordhauGameMode_CanClash");
static_assert(sizeof(MordhauGameMode_CanClash) == 0x000018, "Wrong size on MordhauGameMode_CanClash");
static_assert(offsetof(MordhauGameMode_CanClash, Source) == 0x000000, "Member 'MordhauGameMode_CanClash::Source' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_CanClash, Target) == 0x000008, "Member 'MordhauGameMode_CanClash::Target' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_CanClash, ReturnValue) == 0x000010, "Member 'MordhauGameMode_CanClash::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameMode.CanDealDamage
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameMode_CanDealDamage final
{
public:
	class AActor*                                 DamageSource;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageTarget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameMode_CanDealDamage) == 0x000008, "Wrong alignment on MordhauGameMode_CanDealDamage");
static_assert(sizeof(MordhauGameMode_CanDealDamage) == 0x000018, "Wrong size on MordhauGameMode_CanDealDamage");
static_assert(offsetof(MordhauGameMode_CanDealDamage, DamageSource) == 0x000000, "Member 'MordhauGameMode_CanDealDamage::DamageSource' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_CanDealDamage, DamageTarget) == 0x000008, "Member 'MordhauGameMode_CanDealDamage::DamageTarget' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_CanDealDamage, ReturnValue) == 0x000010, "Member 'MordhauGameMode_CanDealDamage::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameMode.ChangeLevel
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameMode_ChangeLevel final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameMode_ChangeLevel) == 0x000008, "Wrong alignment on MordhauGameMode_ChangeLevel");
static_assert(sizeof(MordhauGameMode_ChangeLevel) == 0x000018, "Wrong size on MordhauGameMode_ChangeLevel");
static_assert(offsetof(MordhauGameMode_ChangeLevel, LevelName) == 0x000000, "Member 'MordhauGameMode_ChangeLevel::LevelName' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_ChangeLevel, ReturnValue) == 0x000010, "Member 'MordhauGameMode_ChangeLevel::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameMode.ControllerCanRestart
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameMode_ControllerCanRestart final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameMode_ControllerCanRestart) == 0x000008, "Wrong alignment on MordhauGameMode_ControllerCanRestart");
static_assert(sizeof(MordhauGameMode_ControllerCanRestart) == 0x000010, "Wrong size on MordhauGameMode_ControllerCanRestart");
static_assert(offsetof(MordhauGameMode_ControllerCanRestart, Controller) == 0x000000, "Member 'MordhauGameMode_ControllerCanRestart::Controller' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_ControllerCanRestart, ReturnValue) == 0x000008, "Member 'MordhauGameMode_ControllerCanRestart::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameMode.GetDamageFactor
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameMode_GetDamageFactor final
{
public:
	class AActor*                                 DamageSource;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageTarget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameMode_GetDamageFactor) == 0x000008, "Wrong alignment on MordhauGameMode_GetDamageFactor");
static_assert(sizeof(MordhauGameMode_GetDamageFactor) == 0x000018, "Wrong size on MordhauGameMode_GetDamageFactor");
static_assert(offsetof(MordhauGameMode_GetDamageFactor, DamageSource) == 0x000000, "Member 'MordhauGameMode_GetDamageFactor::DamageSource' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_GetDamageFactor, DamageTarget) == 0x000008, "Member 'MordhauGameMode_GetDamageFactor::DamageTarget' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_GetDamageFactor, ReturnValue) == 0x000010, "Member 'MordhauGameMode_GetDamageFactor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameMode.GetMapVoteCounts
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameMode_GetMapVoteCounts final
{
public:
	TArray<uint8>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameMode_GetMapVoteCounts) == 0x000008, "Wrong alignment on MordhauGameMode_GetMapVoteCounts");
static_assert(sizeof(MordhauGameMode_GetMapVoteCounts) == 0x000010, "Wrong size on MordhauGameMode_GetMapVoteCounts");
static_assert(offsetof(MordhauGameMode_GetMapVoteCounts, ReturnValue) == 0x000000, "Member 'MordhauGameMode_GetMapVoteCounts::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameMode.GetMapVoteMaps
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameMode_GetMapVoteMaps final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameMode_GetMapVoteMaps) == 0x000008, "Wrong alignment on MordhauGameMode_GetMapVoteMaps");
static_assert(sizeof(MordhauGameMode_GetMapVoteMaps) == 0x000010, "Wrong size on MordhauGameMode_GetMapVoteMaps");
static_assert(offsetof(MordhauGameMode_GetMapVoteMaps, ReturnValue) == 0x000000, "Member 'MordhauGameMode_GetMapVoteMaps::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameMode.GetNextMap
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameMode_GetNextMap final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameMode_GetNextMap) == 0x000008, "Wrong alignment on MordhauGameMode_GetNextMap");
static_assert(sizeof(MordhauGameMode_GetNextMap) == 0x000010, "Wrong size on MordhauGameMode_GetNextMap");
static_assert(offsetof(MordhauGameMode_GetNextMap, ReturnValue) == 0x000000, "Member 'MordhauGameMode_GetNextMap::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameMode.GetNextMaps
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameMode_GetNextMaps final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowCurrentMap;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameMode_GetNextMaps) == 0x000008, "Wrong alignment on MordhauGameMode_GetNextMaps");
static_assert(sizeof(MordhauGameMode_GetNextMaps) == 0x000018, "Wrong size on MordhauGameMode_GetNextMaps");
static_assert(offsetof(MordhauGameMode_GetNextMaps, Count) == 0x000000, "Member 'MordhauGameMode_GetNextMaps::Count' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_GetNextMaps, bAllowCurrentMap) == 0x000004, "Member 'MordhauGameMode_GetNextMaps::bAllowCurrentMap' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_GetNextMaps, ReturnValue) == 0x000008, "Member 'MordhauGameMode_GetNextMaps::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameMode.GetSpawnpointPreference
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameMode_GetSpawnpointPreference final
{
public:
	class APlayerStart*                           PlayerStart;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameMode_GetSpawnpointPreference) == 0x000008, "Wrong alignment on MordhauGameMode_GetSpawnpointPreference");
static_assert(sizeof(MordhauGameMode_GetSpawnpointPreference) == 0x000018, "Wrong size on MordhauGameMode_GetSpawnpointPreference");
static_assert(offsetof(MordhauGameMode_GetSpawnpointPreference, PlayerStart) == 0x000000, "Member 'MordhauGameMode_GetSpawnpointPreference::PlayerStart' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_GetSpawnpointPreference, Player) == 0x000008, "Member 'MordhauGameMode_GetSpawnpointPreference::Player' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_GetSpawnpointPreference, ReturnValue) == 0x000010, "Member 'MordhauGameMode_GetSpawnpointPreference::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameMode.IsSpawnpointAllowed
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameMode_IsSpawnpointAllowed final
{
public:
	class APlayerStart*                           PlayerStart;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameMode_IsSpawnpointAllowed) == 0x000008, "Wrong alignment on MordhauGameMode_IsSpawnpointAllowed");
static_assert(sizeof(MordhauGameMode_IsSpawnpointAllowed) == 0x000018, "Wrong size on MordhauGameMode_IsSpawnpointAllowed");
static_assert(offsetof(MordhauGameMode_IsSpawnpointAllowed, PlayerStart) == 0x000000, "Member 'MordhauGameMode_IsSpawnpointAllowed::PlayerStart' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_IsSpawnpointAllowed, Player) == 0x000008, "Member 'MordhauGameMode_IsSpawnpointAllowed::Player' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_IsSpawnpointAllowed, ReturnValue) == 0x000010, "Member 'MordhauGameMode_IsSpawnpointAllowed::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameMode.IsSpawnQueueEmpty
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameMode_IsSpawnQueueEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameMode_IsSpawnQueueEmpty) == 0x000001, "Wrong alignment on MordhauGameMode_IsSpawnQueueEmpty");
static_assert(sizeof(MordhauGameMode_IsSpawnQueueEmpty) == 0x000001, "Wrong size on MordhauGameMode_IsSpawnQueueEmpty");
static_assert(offsetof(MordhauGameMode_IsSpawnQueueEmpty, ReturnValue) == 0x000000, "Member 'MordhauGameMode_IsSpawnQueueEmpty::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameMode.OnAssistsChanged
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameMode_OnAssistsChanged final
{
public:
	class APlayerState*                           State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameMode_OnAssistsChanged) == 0x000008, "Wrong alignment on MordhauGameMode_OnAssistsChanged");
static_assert(sizeof(MordhauGameMode_OnAssistsChanged) == 0x000010, "Wrong size on MordhauGameMode_OnAssistsChanged");
static_assert(offsetof(MordhauGameMode_OnAssistsChanged, State) == 0x000000, "Member 'MordhauGameMode_OnAssistsChanged::State' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_OnAssistsChanged, OldValue) == 0x000008, "Member 'MordhauGameMode_OnAssistsChanged::OldValue' has a wrong offset!");

// Function Mordhau.MordhauGameMode.OnDeathsChanged
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameMode_OnDeathsChanged final
{
public:
	class APlayerState*                           State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameMode_OnDeathsChanged) == 0x000008, "Wrong alignment on MordhauGameMode_OnDeathsChanged");
static_assert(sizeof(MordhauGameMode_OnDeathsChanged) == 0x000010, "Wrong size on MordhauGameMode_OnDeathsChanged");
static_assert(offsetof(MordhauGameMode_OnDeathsChanged, State) == 0x000000, "Member 'MordhauGameMode_OnDeathsChanged::State' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_OnDeathsChanged, OldValue) == 0x000008, "Member 'MordhauGameMode_OnDeathsChanged::OldValue' has a wrong offset!");

// Function Mordhau.MordhauGameMode.OnKilled
// 0x0030 (0x0030 - 0x0000)
struct MordhauGameMode_OnKilled final
{
public:
	class AController*                            Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            KilledPlayer;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  KilledPawn;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMordhauDamageType                            Type;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SubType;                                           // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageSource;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageAgent;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameMode_OnKilled) == 0x000008, "Wrong alignment on MordhauGameMode_OnKilled");
static_assert(sizeof(MordhauGameMode_OnKilled) == 0x000030, "Wrong size on MordhauGameMode_OnKilled");
static_assert(offsetof(MordhauGameMode_OnKilled, Killer) == 0x000000, "Member 'MordhauGameMode_OnKilled::Killer' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_OnKilled, KilledPlayer) == 0x000008, "Member 'MordhauGameMode_OnKilled::KilledPlayer' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_OnKilled, KilledPawn) == 0x000010, "Member 'MordhauGameMode_OnKilled::KilledPawn' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_OnKilled, Type) == 0x000018, "Member 'MordhauGameMode_OnKilled::Type' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_OnKilled, SubType) == 0x000019, "Member 'MordhauGameMode_OnKilled::SubType' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_OnKilled, DamageSource) == 0x000020, "Member 'MordhauGameMode_OnKilled::DamageSource' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_OnKilled, DamageAgent) == 0x000028, "Member 'MordhauGameMode_OnKilled::DamageAgent' has a wrong offset!");

// Function Mordhau.MordhauGameMode.OnKillsChanged
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameMode_OnKillsChanged final
{
public:
	class APlayerState*                           State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameMode_OnKillsChanged) == 0x000008, "Wrong alignment on MordhauGameMode_OnKillsChanged");
static_assert(sizeof(MordhauGameMode_OnKillsChanged) == 0x000010, "Wrong size on MordhauGameMode_OnKillsChanged");
static_assert(offsetof(MordhauGameMode_OnKillsChanged, State) == 0x000000, "Member 'MordhauGameMode_OnKillsChanged::State' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_OnKillsChanged, OldValue) == 0x000008, "Member 'MordhauGameMode_OnKillsChanged::OldValue' has a wrong offset!");

// Function Mordhau.MordhauGameMode.OnMatchStateChanged
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameMode_OnMatchStateChanged final
{
public:
	class FName                                   OldState;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewState;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameMode_OnMatchStateChanged) == 0x000004, "Wrong alignment on MordhauGameMode_OnMatchStateChanged");
static_assert(sizeof(MordhauGameMode_OnMatchStateChanged) == 0x000010, "Wrong size on MordhauGameMode_OnMatchStateChanged");
static_assert(offsetof(MordhauGameMode_OnMatchStateChanged, OldState) == 0x000000, "Member 'MordhauGameMode_OnMatchStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_OnMatchStateChanged, NewState) == 0x000008, "Member 'MordhauGameMode_OnMatchStateChanged::NewState' has a wrong offset!");

// Function Mordhau.MordhauGameMode.OnScoreChanged
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameMode_OnScoreChanged final
{
public:
	class APlayerState*                           State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameMode_OnScoreChanged) == 0x000008, "Wrong alignment on MordhauGameMode_OnScoreChanged");
static_assert(sizeof(MordhauGameMode_OnScoreChanged) == 0x000010, "Wrong size on MordhauGameMode_OnScoreChanged");
static_assert(offsetof(MordhauGameMode_OnScoreChanged, State) == 0x000000, "Member 'MordhauGameMode_OnScoreChanged::State' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_OnScoreChanged, OldValue) == 0x000008, "Member 'MordhauGameMode_OnScoreChanged::OldValue' has a wrong offset!");

// Function Mordhau.MordhauGameMode.OnTeamScoreChanged
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameMode_OnTeamScoreChanged final
{
public:
	int32                                         Team;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameMode_OnTeamScoreChanged) == 0x000004, "Wrong alignment on MordhauGameMode_OnTeamScoreChanged");
static_assert(sizeof(MordhauGameMode_OnTeamScoreChanged) == 0x000008, "Wrong size on MordhauGameMode_OnTeamScoreChanged");
static_assert(offsetof(MordhauGameMode_OnTeamScoreChanged, Team) == 0x000000, "Member 'MordhauGameMode_OnTeamScoreChanged::Team' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_OnTeamScoreChanged, OldValue) == 0x000004, "Member 'MordhauGameMode_OnTeamScoreChanged::OldValue' has a wrong offset!");

// Function Mordhau.MordhauGameMode.OverrideEquipment
// 0x0030 (0x0030 - 0x0000)
struct MordhauGameMode_OverrideEquipment final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   EquipmentClass;                                    // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameMode_OverrideEquipment) == 0x000008, "Wrong alignment on MordhauGameMode_OverrideEquipment");
static_assert(sizeof(MordhauGameMode_OverrideEquipment) == 0x000030, "Wrong size on MordhauGameMode_OverrideEquipment");
static_assert(offsetof(MordhauGameMode_OverrideEquipment, Character) == 0x000000, "Member 'MordhauGameMode_OverrideEquipment::Character' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_OverrideEquipment, EquipmentClass) == 0x000008, "Member 'MordhauGameMode_OverrideEquipment::EquipmentClass' has a wrong offset!");

// Function Mordhau.MordhauGameMode.RemoveBots
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameMode_RemoveBots final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Team;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameMode_RemoveBots) == 0x000004, "Wrong alignment on MordhauGameMode_RemoveBots");
static_assert(sizeof(MordhauGameMode_RemoveBots) == 0x000008, "Wrong size on MordhauGameMode_RemoveBots");
static_assert(offsetof(MordhauGameMode_RemoveBots, Amount) == 0x000000, "Member 'MordhauGameMode_RemoveBots::Amount' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_RemoveBots, Team) == 0x000004, "Member 'MordhauGameMode_RemoveBots::Team' has a wrong offset!");

// Function Mordhau.MordhauGameMode.RequestedAssignTeam
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameMode_RequestedAssignTeam final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Team;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameMode_RequestedAssignTeam) == 0x000008, "Wrong alignment on MordhauGameMode_RequestedAssignTeam");
static_assert(sizeof(MordhauGameMode_RequestedAssignTeam) == 0x000010, "Wrong size on MordhauGameMode_RequestedAssignTeam");
static_assert(offsetof(MordhauGameMode_RequestedAssignTeam, Controller) == 0x000000, "Member 'MordhauGameMode_RequestedAssignTeam::Controller' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_RequestedAssignTeam, Team) == 0x000008, "Member 'MordhauGameMode_RequestedAssignTeam::Team' has a wrong offset!");

// Function Mordhau.MordhauGameMode.SetRconEvent
// 0x0038 (0x0038 - 0x0000)
struct MordhauGameMode_SetRconEvent final
{
public:
	struct FRconEventStruct                       InStruct;                                          // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             InEvent;                                           // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideExisting;                                 // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameMode_SetRconEvent) == 0x000008, "Wrong alignment on MordhauGameMode_SetRconEvent");
static_assert(sizeof(MordhauGameMode_SetRconEvent) == 0x000038, "Wrong size on MordhauGameMode_SetRconEvent");
static_assert(offsetof(MordhauGameMode_SetRconEvent, InStruct) == 0x000000, "Member 'MordhauGameMode_SetRconEvent::InStruct' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_SetRconEvent, InEvent) == 0x000020, "Member 'MordhauGameMode_SetRconEvent::InEvent' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_SetRconEvent, bOverrideExisting) == 0x000030, "Member 'MordhauGameMode_SetRconEvent::bOverrideExisting' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_SetRconEvent, ReturnValue) == 0x000031, "Member 'MordhauGameMode_SetRconEvent::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameMode.SetTeamScore
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameMode_SetTeamScore final
{
public:
	int32                                         Team;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameMode_SetTeamScore) == 0x000004, "Wrong alignment on MordhauGameMode_SetTeamScore");
static_assert(sizeof(MordhauGameMode_SetTeamScore) == 0x000008, "Wrong size on MordhauGameMode_SetTeamScore");
static_assert(offsetof(MordhauGameMode_SetTeamScore, Team) == 0x000000, "Member 'MordhauGameMode_SetTeamScore::Team' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_SetTeamScore, Amount) == 0x000004, "Member 'MordhauGameMode_SetTeamScore::Amount' has a wrong offset!");

// Function Mordhau.MordhauGameMode.VoteLevel
// 0x0020 (0x0020 - 0x0000)
struct MordhauGameMode_VoteLevel final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameMode_VoteLevel) == 0x000008, "Wrong alignment on MordhauGameMode_VoteLevel");
static_assert(sizeof(MordhauGameMode_VoteLevel) == 0x000020, "Wrong size on MordhauGameMode_VoteLevel");
static_assert(offsetof(MordhauGameMode_VoteLevel, Player) == 0x000000, "Member 'MordhauGameMode_VoteLevel::Player' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_VoteLevel, LevelName) == 0x000008, "Member 'MordhauGameMode_VoteLevel::LevelName' has a wrong offset!");
static_assert(offsetof(MordhauGameMode_VoteLevel, ReturnValue) == 0x000018, "Member 'MordhauGameMode_VoteLevel::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameMode.GetSuicideAllowed
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameMode_GetSuicideAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameMode_GetSuicideAllowed) == 0x000001, "Wrong alignment on MordhauGameMode_GetSuicideAllowed");
static_assert(sizeof(MordhauGameMode_GetSuicideAllowed) == 0x000001, "Wrong size on MordhauGameMode_GetSuicideAllowed");
static_assert(offsetof(MordhauGameMode_GetSuicideAllowed, ReturnValue) == 0x000000, "Member 'MordhauGameMode_GetSuicideAllowed::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameMode.IsConsoleServer
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameMode_IsConsoleServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameMode_IsConsoleServer) == 0x000001, "Wrong alignment on MordhauGameMode_IsConsoleServer");
static_assert(sizeof(MordhauGameMode_IsConsoleServer) == 0x000001, "Wrong size on MordhauGameMode_IsConsoleServer");
static_assert(offsetof(MordhauGameMode_IsConsoleServer, ReturnValue) == 0x000000, "Member 'MordhauGameMode_IsConsoleServer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameSession.AddAdmin
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameSession_AddAdmin final
{
public:
	class APlayerController*                      AdminPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameSession_AddAdmin) == 0x000008, "Wrong alignment on MordhauGameSession_AddAdmin");
static_assert(sizeof(MordhauGameSession_AddAdmin) == 0x000008, "Wrong size on MordhauGameSession_AddAdmin");
static_assert(offsetof(MordhauGameSession_AddAdmin, AdminPlayer) == 0x000000, "Member 'MordhauGameSession_AddAdmin::AdminPlayer' has a wrong offset!");

// Function Mordhau.MordhauGameSession.AddTieredAdmin
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameSession_AddTieredAdmin final
{
public:
	class APlayerController*                      AdminPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tier;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameSession_AddTieredAdmin) == 0x000008, "Wrong alignment on MordhauGameSession_AddTieredAdmin");
static_assert(sizeof(MordhauGameSession_AddTieredAdmin) == 0x000018, "Wrong size on MordhauGameSession_AddTieredAdmin");
static_assert(offsetof(MordhauGameSession_AddTieredAdmin, AdminPlayer) == 0x000000, "Member 'MordhauGameSession_AddTieredAdmin::AdminPlayer' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_AddTieredAdmin, Tier) == 0x000008, "Member 'MordhauGameSession_AddTieredAdmin::Tier' has a wrong offset!");

// Function Mordhau.MordhauGameSession.AllowJoin
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameSession_AllowJoin final
{
public:
	bool                                          bInAllowJoin;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameSession_AllowJoin) == 0x000001, "Wrong alignment on MordhauGameSession_AllowJoin");
static_assert(sizeof(MordhauGameSession_AllowJoin) == 0x000001, "Wrong size on MordhauGameSession_AllowJoin");
static_assert(offsetof(MordhauGameSession_AllowJoin, bInAllowJoin) == 0x000000, "Member 'MordhauGameSession_AllowJoin::bInAllowJoin' has a wrong offset!");

// Function Mordhau.MordhauGameSession.AllowsJoin
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameSession_AllowsJoin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameSession_AllowsJoin) == 0x000001, "Wrong alignment on MordhauGameSession_AllowsJoin");
static_assert(sizeof(MordhauGameSession_AllowsJoin) == 0x000001, "Wrong size on MordhauGameSession_AllowsJoin");
static_assert(offsetof(MordhauGameSession_AllowsJoin, ReturnValue) == 0x000000, "Member 'MordhauGameSession_AllowsJoin::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameSession.BanPlayer
// 0x0028 (0x0028 - 0x0000)
struct MordhauGameSession_BanPlayer final
{
public:
	class APlayerController*                      BannedPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   BanReason;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameSession_BanPlayer) == 0x000008, "Wrong alignment on MordhauGameSession_BanPlayer");
static_assert(sizeof(MordhauGameSession_BanPlayer) == 0x000028, "Wrong size on MordhauGameSession_BanPlayer");
static_assert(offsetof(MordhauGameSession_BanPlayer, BannedPlayer) == 0x000000, "Member 'MordhauGameSession_BanPlayer::BannedPlayer' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_BanPlayer, BanReason) == 0x000008, "Member 'MordhauGameSession_BanPlayer::BanReason' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_BanPlayer, ReturnValue) == 0x000020, "Member 'MordhauGameSession_BanPlayer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameSession.BanPlayerWithDuration
// 0x0030 (0x0030 - 0x0000)
struct MordhauGameSession_BanPlayerWithDuration final
{
public:
	class APlayerController*                      BannedPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BanDuration;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BanReason;                                         // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameSession_BanPlayerWithDuration) == 0x000008, "Wrong alignment on MordhauGameSession_BanPlayerWithDuration");
static_assert(sizeof(MordhauGameSession_BanPlayerWithDuration) == 0x000030, "Wrong size on MordhauGameSession_BanPlayerWithDuration");
static_assert(offsetof(MordhauGameSession_BanPlayerWithDuration, BannedPlayer) == 0x000000, "Member 'MordhauGameSession_BanPlayerWithDuration::BannedPlayer' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_BanPlayerWithDuration, BanDuration) == 0x000008, "Member 'MordhauGameSession_BanPlayerWithDuration::BanDuration' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_BanPlayerWithDuration, BanReason) == 0x000010, "Member 'MordhauGameSession_BanPlayerWithDuration::BanReason' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_BanPlayerWithDuration, ReturnValue) == 0x000028, "Member 'MordhauGameSession_BanPlayerWithDuration::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameSession.GetPlayerBanDuration
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameSession_GetPlayerBanDuration final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameSession_GetPlayerBanDuration) == 0x000008, "Wrong alignment on MordhauGameSession_GetPlayerBanDuration");
static_assert(sizeof(MordhauGameSession_GetPlayerBanDuration) == 0x000018, "Wrong size on MordhauGameSession_GetPlayerBanDuration");
static_assert(offsetof(MordhauGameSession_GetPlayerBanDuration, PlayFabId) == 0x000000, "Member 'MordhauGameSession_GetPlayerBanDuration::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_GetPlayerBanDuration, ReturnValue) == 0x000010, "Member 'MordhauGameSession_GetPlayerBanDuration::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameSession.GetPlayerMuteDuration
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameSession_GetPlayerMuteDuration final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameSession_GetPlayerMuteDuration) == 0x000008, "Wrong alignment on MordhauGameSession_GetPlayerMuteDuration");
static_assert(sizeof(MordhauGameSession_GetPlayerMuteDuration) == 0x000018, "Wrong size on MordhauGameSession_GetPlayerMuteDuration");
static_assert(offsetof(MordhauGameSession_GetPlayerMuteDuration, PlayFabId) == 0x000000, "Member 'MordhauGameSession_GetPlayerMuteDuration::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_GetPlayerMuteDuration, ReturnValue) == 0x000010, "Member 'MordhauGameSession_GetPlayerMuteDuration::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameSession.IsPlayerBanned
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameSession_IsPlayerBanned final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameSession_IsPlayerBanned) == 0x000008, "Wrong alignment on MordhauGameSession_IsPlayerBanned");
static_assert(sizeof(MordhauGameSession_IsPlayerBanned) == 0x000018, "Wrong size on MordhauGameSession_IsPlayerBanned");
static_assert(offsetof(MordhauGameSession_IsPlayerBanned, PlayFabId) == 0x000000, "Member 'MordhauGameSession_IsPlayerBanned::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_IsPlayerBanned, ReturnValue) == 0x000010, "Member 'MordhauGameSession_IsPlayerBanned::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameSession.IsPlayerMuted
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameSession_IsPlayerMuted final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameSession_IsPlayerMuted) == 0x000008, "Wrong alignment on MordhauGameSession_IsPlayerMuted");
static_assert(sizeof(MordhauGameSession_IsPlayerMuted) == 0x000018, "Wrong size on MordhauGameSession_IsPlayerMuted");
static_assert(offsetof(MordhauGameSession_IsPlayerMuted, PlayFabId) == 0x000000, "Member 'MordhauGameSession_IsPlayerMuted::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_IsPlayerMuted, ReturnValue) == 0x000010, "Member 'MordhauGameSession_IsPlayerMuted::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameSession.KickPlayer
// 0x0028 (0x0028 - 0x0000)
struct MordhauGameSession_KickPlayer final
{
public:
	class APlayerController*                      KickedPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   KickReason;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameSession_KickPlayer) == 0x000008, "Wrong alignment on MordhauGameSession_KickPlayer");
static_assert(sizeof(MordhauGameSession_KickPlayer) == 0x000028, "Wrong size on MordhauGameSession_KickPlayer");
static_assert(offsetof(MordhauGameSession_KickPlayer, KickedPlayer) == 0x000000, "Member 'MordhauGameSession_KickPlayer::KickedPlayer' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_KickPlayer, KickReason) == 0x000008, "Member 'MordhauGameSession_KickPlayer::KickReason' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_KickPlayer, ReturnValue) == 0x000020, "Member 'MordhauGameSession_KickPlayer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameSession.MutePlayer
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameSession_MutePlayer final
{
public:
	class APlayerController*                      MutedPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameSession_MutePlayer) == 0x000008, "Wrong alignment on MordhauGameSession_MutePlayer");
static_assert(sizeof(MordhauGameSession_MutePlayer) == 0x000010, "Wrong size on MordhauGameSession_MutePlayer");
static_assert(offsetof(MordhauGameSession_MutePlayer, MutedPlayer) == 0x000000, "Member 'MordhauGameSession_MutePlayer::MutedPlayer' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_MutePlayer, ReturnValue) == 0x000008, "Member 'MordhauGameSession_MutePlayer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameSession.MutePlayerWithDuration
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameSession_MutePlayerWithDuration final
{
public:
	class APlayerController*                      MutedPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MuteDuration;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameSession_MutePlayerWithDuration) == 0x000008, "Wrong alignment on MordhauGameSession_MutePlayerWithDuration");
static_assert(sizeof(MordhauGameSession_MutePlayerWithDuration) == 0x000010, "Wrong size on MordhauGameSession_MutePlayerWithDuration");
static_assert(offsetof(MordhauGameSession_MutePlayerWithDuration, MutedPlayer) == 0x000000, "Member 'MordhauGameSession_MutePlayerWithDuration::MutedPlayer' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_MutePlayerWithDuration, MuteDuration) == 0x000008, "Member 'MordhauGameSession_MutePlayerWithDuration::MuteDuration' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_MutePlayerWithDuration, ReturnValue) == 0x00000C, "Member 'MordhauGameSession_MutePlayerWithDuration::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameSession.RemoveAdmin
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameSession_RemoveAdmin final
{
public:
	class APlayerController*                      AdminPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameSession_RemoveAdmin) == 0x000008, "Wrong alignment on MordhauGameSession_RemoveAdmin");
static_assert(sizeof(MordhauGameSession_RemoveAdmin) == 0x000008, "Wrong size on MordhauGameSession_RemoveAdmin");
static_assert(offsetof(MordhauGameSession_RemoveAdmin, AdminPlayer) == 0x000000, "Member 'MordhauGameSession_RemoveAdmin::AdminPlayer' has a wrong offset!");

// Function Mordhau.MordhauGameSession.ReportPlayer
// 0x0048 (0x0048 - 0x0000)
struct MordhauGameSession_ReportPlayer final
{
public:
	class FString                                 ReporteePlayFabID;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReporterPlayFabID;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReportType;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScreenshotFilename;                                // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameSession_ReportPlayer) == 0x000008, "Wrong alignment on MordhauGameSession_ReportPlayer");
static_assert(sizeof(MordhauGameSession_ReportPlayer) == 0x000048, "Wrong size on MordhauGameSession_ReportPlayer");
static_assert(offsetof(MordhauGameSession_ReportPlayer, ReporteePlayFabID) == 0x000000, "Member 'MordhauGameSession_ReportPlayer::ReporteePlayFabID' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_ReportPlayer, ReporterPlayFabID) == 0x000010, "Member 'MordhauGameSession_ReportPlayer::ReporterPlayFabID' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_ReportPlayer, ReportType) == 0x000020, "Member 'MordhauGameSession_ReportPlayer::ReportType' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_ReportPlayer, ScreenshotFilename) == 0x000030, "Member 'MordhauGameSession_ReportPlayer::ScreenshotFilename' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_ReportPlayer, ReturnValue) == 0x000040, "Member 'MordhauGameSession_ReportPlayer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameSession.ReportTimeLeft
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameSession_ReportTimeLeft final
{
public:
	TArray<float>                                 TimeLeft;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameSession_ReportTimeLeft) == 0x000008, "Wrong alignment on MordhauGameSession_ReportTimeLeft");
static_assert(sizeof(MordhauGameSession_ReportTimeLeft) == 0x000010, "Wrong size on MordhauGameSession_ReportTimeLeft");
static_assert(offsetof(MordhauGameSession_ReportTimeLeft, TimeLeft) == 0x000000, "Member 'MordhauGameSession_ReportTimeLeft::TimeLeft' has a wrong offset!");

// Function Mordhau.MordhauGameSession.TriggerRewardDropForPlayer
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameSession_TriggerRewardDropForPlayer final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameSession_TriggerRewardDropForPlayer) == 0x000008, "Wrong alignment on MordhauGameSession_TriggerRewardDropForPlayer");
static_assert(sizeof(MordhauGameSession_TriggerRewardDropForPlayer) == 0x000008, "Wrong size on MordhauGameSession_TriggerRewardDropForPlayer");
static_assert(offsetof(MordhauGameSession_TriggerRewardDropForPlayer, Player) == 0x000000, "Member 'MordhauGameSession_TriggerRewardDropForPlayer::Player' has a wrong offset!");

// Function Mordhau.MordhauGameSession.UnbanPlayer
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameSession_UnbanPlayer final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExpired;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameSession_UnbanPlayer) == 0x000008, "Wrong alignment on MordhauGameSession_UnbanPlayer");
static_assert(sizeof(MordhauGameSession_UnbanPlayer) == 0x000018, "Wrong size on MordhauGameSession_UnbanPlayer");
static_assert(offsetof(MordhauGameSession_UnbanPlayer, PlayFabId) == 0x000000, "Member 'MordhauGameSession_UnbanPlayer::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_UnbanPlayer, bExpired) == 0x000010, "Member 'MordhauGameSession_UnbanPlayer::bExpired' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_UnbanPlayer, ReturnValue) == 0x000011, "Member 'MordhauGameSession_UnbanPlayer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameSession.UnmutePlayer
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameSession_UnmutePlayer final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExpired;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameSession_UnmutePlayer) == 0x000008, "Wrong alignment on MordhauGameSession_UnmutePlayer");
static_assert(sizeof(MordhauGameSession_UnmutePlayer) == 0x000018, "Wrong size on MordhauGameSession_UnmutePlayer");
static_assert(offsetof(MordhauGameSession_UnmutePlayer, PlayFabId) == 0x000000, "Member 'MordhauGameSession_UnmutePlayer::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_UnmutePlayer, bExpired) == 0x000010, "Member 'MordhauGameSession_UnmutePlayer::bExpired' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_UnmutePlayer, ReturnValue) == 0x000011, "Member 'MordhauGameSession_UnmutePlayer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameSession.UploadAdminActionDataToWebhook
// 0x0080 (0x0080 - 0x0000)
struct MordhauGameSession_UploadAdminActionDataToWebhook final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabPlayer                         Sender;                                            // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Details;                                           // 0x0070(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameSession_UploadAdminActionDataToWebhook) == 0x000008, "Wrong alignment on MordhauGameSession_UploadAdminActionDataToWebhook");
static_assert(sizeof(MordhauGameSession_UploadAdminActionDataToWebhook) == 0x000080, "Wrong size on MordhauGameSession_UploadAdminActionDataToWebhook");
static_assert(offsetof(MordhauGameSession_UploadAdminActionDataToWebhook, Command) == 0x000000, "Member 'MordhauGameSession_UploadAdminActionDataToWebhook::Command' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_UploadAdminActionDataToWebhook, Sender) == 0x000010, "Member 'MordhauGameSession_UploadAdminActionDataToWebhook::Sender' has a wrong offset!");
static_assert(offsetof(MordhauGameSession_UploadAdminActionDataToWebhook, Details) == 0x000070, "Member 'MordhauGameSession_UploadAdminActionDataToWebhook::Details' has a wrong offset!");

// Function Mordhau.MordhauGameState.CanImmediatelyChangeProfile
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameState_CanImmediatelyChangeProfile final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameState_CanImmediatelyChangeProfile) == 0x000008, "Wrong alignment on MordhauGameState_CanImmediatelyChangeProfile");
static_assert(sizeof(MordhauGameState_CanImmediatelyChangeProfile) == 0x000010, "Wrong size on MordhauGameState_CanImmediatelyChangeProfile");
static_assert(offsetof(MordhauGameState_CanImmediatelyChangeProfile, Controller) == 0x000000, "Member 'MordhauGameState_CanImmediatelyChangeProfile::Controller' has a wrong offset!");
static_assert(offsetof(MordhauGameState_CanImmediatelyChangeProfile, ReturnValue) == 0x000008, "Member 'MordhauGameState_CanImmediatelyChangeProfile::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameState.CanPlayerJoinTeam
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameState_CanPlayerJoinTeam final
{
public:
	class AMordhauPlayerState*                    Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Team;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameState_CanPlayerJoinTeam) == 0x000008, "Wrong alignment on MordhauGameState_CanPlayerJoinTeam");
static_assert(sizeof(MordhauGameState_CanPlayerJoinTeam) == 0x000010, "Wrong size on MordhauGameState_CanPlayerJoinTeam");
static_assert(offsetof(MordhauGameState_CanPlayerJoinTeam, Player) == 0x000000, "Member 'MordhauGameState_CanPlayerJoinTeam::Player' has a wrong offset!");
static_assert(offsetof(MordhauGameState_CanPlayerJoinTeam, Team) == 0x000008, "Member 'MordhauGameState_CanPlayerJoinTeam::Team' has a wrong offset!");
static_assert(offsetof(MordhauGameState_CanPlayerJoinTeam, ReturnValue) == 0x00000C, "Member 'MordhauGameState_CanPlayerJoinTeam::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameState.GetAppropriateMapCameraActor
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameState_GetAppropriateMapCameraActor final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMapCameraActor*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameState_GetAppropriateMapCameraActor) == 0x000008, "Wrong alignment on MordhauGameState_GetAppropriateMapCameraActor");
static_assert(sizeof(MordhauGameState_GetAppropriateMapCameraActor) == 0x000010, "Wrong size on MordhauGameState_GetAppropriateMapCameraActor");
static_assert(offsetof(MordhauGameState_GetAppropriateMapCameraActor, Controller) == 0x000000, "Member 'MordhauGameState_GetAppropriateMapCameraActor::Controller' has a wrong offset!");
static_assert(offsetof(MordhauGameState_GetAppropriateMapCameraActor, ReturnValue) == 0x000008, "Member 'MordhauGameState_GetAppropriateMapCameraActor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameState.GetBindPoseTransform
// 0x0040 (0x0040 - 0x0000)
struct MordhauGameState_GetBindPoseTransform final
{
public:
	class USkeletalMesh*                          Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameState_GetBindPoseTransform) == 0x000010, "Wrong alignment on MordhauGameState_GetBindPoseTransform");
static_assert(sizeof(MordhauGameState_GetBindPoseTransform) == 0x000040, "Wrong size on MordhauGameState_GetBindPoseTransform");
static_assert(offsetof(MordhauGameState_GetBindPoseTransform, Mesh) == 0x000000, "Member 'MordhauGameState_GetBindPoseTransform::Mesh' has a wrong offset!");
static_assert(offsetof(MordhauGameState_GetBindPoseTransform, SocketName) == 0x000008, "Member 'MordhauGameState_GetBindPoseTransform::SocketName' has a wrong offset!");
static_assert(offsetof(MordhauGameState_GetBindPoseTransform, ReturnValue) == 0x000010, "Member 'MordhauGameState_GetBindPoseTransform::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameState.GetCharacterByDistanceRank
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameState_GetCharacterByDistanceRank final
{
public:
	int32                                         DistanceRank;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAdvancedCharacter*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameState_GetCharacterByDistanceRank) == 0x000008, "Wrong alignment on MordhauGameState_GetCharacterByDistanceRank");
static_assert(sizeof(MordhauGameState_GetCharacterByDistanceRank) == 0x000010, "Wrong size on MordhauGameState_GetCharacterByDistanceRank");
static_assert(offsetof(MordhauGameState_GetCharacterByDistanceRank, DistanceRank) == 0x000000, "Member 'MordhauGameState_GetCharacterByDistanceRank::DistanceRank' has a wrong offset!");
static_assert(offsetof(MordhauGameState_GetCharacterByDistanceRank, ReturnValue) == 0x000008, "Member 'MordhauGameState_GetCharacterByDistanceRank::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameState.GetCurrentFrame
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameState_GetCurrentFrame final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameState_GetCurrentFrame) == 0x000004, "Wrong alignment on MordhauGameState_GetCurrentFrame");
static_assert(sizeof(MordhauGameState_GetCurrentFrame) == 0x000004, "Wrong size on MordhauGameState_GetCurrentFrame");
static_assert(offsetof(MordhauGameState_GetCurrentFrame, ReturnValue) == 0x000000, "Member 'MordhauGameState_GetCurrentFrame::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameState.GetEquipmentCacheHash
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameState_GetEquipmentCacheHash final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Skin;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Part1;                                             // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Part2;                                             // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Part3;                                             // 0x0007(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAuxiliaryMesh;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameState_GetEquipmentCacheHash) == 0x000008, "Wrong alignment on MordhauGameState_GetEquipmentCacheHash");
static_assert(sizeof(MordhauGameState_GetEquipmentCacheHash) == 0x000018, "Wrong size on MordhauGameState_GetEquipmentCacheHash");
static_assert(offsetof(MordhauGameState_GetEquipmentCacheHash, ID) == 0x000000, "Member 'MordhauGameState_GetEquipmentCacheHash::ID' has a wrong offset!");
static_assert(offsetof(MordhauGameState_GetEquipmentCacheHash, Skin) == 0x000004, "Member 'MordhauGameState_GetEquipmentCacheHash::Skin' has a wrong offset!");
static_assert(offsetof(MordhauGameState_GetEquipmentCacheHash, Part1) == 0x000005, "Member 'MordhauGameState_GetEquipmentCacheHash::Part1' has a wrong offset!");
static_assert(offsetof(MordhauGameState_GetEquipmentCacheHash, Part2) == 0x000006, "Member 'MordhauGameState_GetEquipmentCacheHash::Part2' has a wrong offset!");
static_assert(offsetof(MordhauGameState_GetEquipmentCacheHash, Part3) == 0x000007, "Member 'MordhauGameState_GetEquipmentCacheHash::Part3' has a wrong offset!");
static_assert(offsetof(MordhauGameState_GetEquipmentCacheHash, bUseAuxiliaryMesh) == 0x000008, "Member 'MordhauGameState_GetEquipmentCacheHash::bUseAuxiliaryMesh' has a wrong offset!");
static_assert(offsetof(MordhauGameState_GetEquipmentCacheHash, ReturnValue) == 0x000010, "Member 'MordhauGameState_GetEquipmentCacheHash::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameState.GetEquipmentMeshFromCache
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameState_GetEquipmentMeshFromCache final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Skin;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Part1;                                             // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Part2;                                             // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Part3;                                             // 0x0007(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAuxiliaryMesh;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameState_GetEquipmentMeshFromCache) == 0x000008, "Wrong alignment on MordhauGameState_GetEquipmentMeshFromCache");
static_assert(sizeof(MordhauGameState_GetEquipmentMeshFromCache) == 0x000018, "Wrong size on MordhauGameState_GetEquipmentMeshFromCache");
static_assert(offsetof(MordhauGameState_GetEquipmentMeshFromCache, ID) == 0x000000, "Member 'MordhauGameState_GetEquipmentMeshFromCache::ID' has a wrong offset!");
static_assert(offsetof(MordhauGameState_GetEquipmentMeshFromCache, Skin) == 0x000004, "Member 'MordhauGameState_GetEquipmentMeshFromCache::Skin' has a wrong offset!");
static_assert(offsetof(MordhauGameState_GetEquipmentMeshFromCache, Part1) == 0x000005, "Member 'MordhauGameState_GetEquipmentMeshFromCache::Part1' has a wrong offset!");
static_assert(offsetof(MordhauGameState_GetEquipmentMeshFromCache, Part2) == 0x000006, "Member 'MordhauGameState_GetEquipmentMeshFromCache::Part2' has a wrong offset!");
static_assert(offsetof(MordhauGameState_GetEquipmentMeshFromCache, Part3) == 0x000007, "Member 'MordhauGameState_GetEquipmentMeshFromCache::Part3' has a wrong offset!");
static_assert(offsetof(MordhauGameState_GetEquipmentMeshFromCache, bUseAuxiliaryMesh) == 0x000008, "Member 'MordhauGameState_GetEquipmentMeshFromCache::bUseAuxiliaryMesh' has a wrong offset!");
static_assert(offsetof(MordhauGameState_GetEquipmentMeshFromCache, ReturnValue) == 0x000010, "Member 'MordhauGameState_GetEquipmentMeshFromCache::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameState.GetPlayerCountsPerTeam
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameState_GetPlayerCountsPerTeam final
{
public:
	bool                                          bOnlyLiving;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyWithValidProfiles;                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameState_GetPlayerCountsPerTeam) == 0x000008, "Wrong alignment on MordhauGameState_GetPlayerCountsPerTeam");
static_assert(sizeof(MordhauGameState_GetPlayerCountsPerTeam) == 0x000018, "Wrong size on MordhauGameState_GetPlayerCountsPerTeam");
static_assert(offsetof(MordhauGameState_GetPlayerCountsPerTeam, bOnlyLiving) == 0x000000, "Member 'MordhauGameState_GetPlayerCountsPerTeam::bOnlyLiving' has a wrong offset!");
static_assert(offsetof(MordhauGameState_GetPlayerCountsPerTeam, bOnlyWithValidProfiles) == 0x000001, "Member 'MordhauGameState_GetPlayerCountsPerTeam::bOnlyWithValidProfiles' has a wrong offset!");
static_assert(offsetof(MordhauGameState_GetPlayerCountsPerTeam, ReturnValue) == 0x000008, "Member 'MordhauGameState_GetPlayerCountsPerTeam::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameState.GetSecondaryTeamColor
// 0x0014 (0x0014 - 0x0000)
struct MordhauGameState_GetSecondaryTeamColor final
{
public:
	int32                                         Team;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameState_GetSecondaryTeamColor) == 0x000004, "Wrong alignment on MordhauGameState_GetSecondaryTeamColor");
static_assert(sizeof(MordhauGameState_GetSecondaryTeamColor) == 0x000014, "Wrong size on MordhauGameState_GetSecondaryTeamColor");
static_assert(offsetof(MordhauGameState_GetSecondaryTeamColor, Team) == 0x000000, "Member 'MordhauGameState_GetSecondaryTeamColor::Team' has a wrong offset!");
static_assert(offsetof(MordhauGameState_GetSecondaryTeamColor, ReturnValue) == 0x000004, "Member 'MordhauGameState_GetSecondaryTeamColor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameState.GetTeamColor
// 0x0014 (0x0014 - 0x0000)
struct MordhauGameState_GetTeamColor final
{
public:
	int32                                         Team;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameState_GetTeamColor) == 0x000004, "Wrong alignment on MordhauGameState_GetTeamColor");
static_assert(sizeof(MordhauGameState_GetTeamColor) == 0x000014, "Wrong size on MordhauGameState_GetTeamColor");
static_assert(offsetof(MordhauGameState_GetTeamColor, Team) == 0x000000, "Member 'MordhauGameState_GetTeamColor::Team' has a wrong offset!");
static_assert(offsetof(MordhauGameState_GetTeamColor, ReturnValue) == 0x000004, "Member 'MordhauGameState_GetTeamColor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameState.GetTeamName
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameState_GetTeamName final
{
public:
	int32                                         Team;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameState_GetTeamName) == 0x000008, "Wrong alignment on MordhauGameState_GetTeamName");
static_assert(sizeof(MordhauGameState_GetTeamName) == 0x000018, "Wrong size on MordhauGameState_GetTeamName");
static_assert(offsetof(MordhauGameState_GetTeamName, Team) == 0x000000, "Member 'MordhauGameState_GetTeamName::Team' has a wrong offset!");
static_assert(offsetof(MordhauGameState_GetTeamName, ReturnValue) == 0x000008, "Member 'MordhauGameState_GetTeamName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameState.IsFriendly
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameState_IsFriendly final
{
public:
	class AActor*                                 ActorA;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorB;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFriendlyIfSelf;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameState_IsFriendly) == 0x000008, "Wrong alignment on MordhauGameState_IsFriendly");
static_assert(sizeof(MordhauGameState_IsFriendly) == 0x000018, "Wrong size on MordhauGameState_IsFriendly");
static_assert(offsetof(MordhauGameState_IsFriendly, ActorA) == 0x000000, "Member 'MordhauGameState_IsFriendly::ActorA' has a wrong offset!");
static_assert(offsetof(MordhauGameState_IsFriendly, ActorB) == 0x000008, "Member 'MordhauGameState_IsFriendly::ActorB' has a wrong offset!");
static_assert(offsetof(MordhauGameState_IsFriendly, bIsFriendlyIfSelf) == 0x000010, "Member 'MordhauGameState_IsFriendly::bIsFriendlyIfSelf' has a wrong offset!");
static_assert(offsetof(MordhauGameState_IsFriendly, ReturnValue) == 0x000011, "Member 'MordhauGameState_IsFriendly::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameState.LastDemotableTick
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameState_LastDemotableTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameState_LastDemotableTick) == 0x000004, "Wrong alignment on MordhauGameState_LastDemotableTick");
static_assert(sizeof(MordhauGameState_LastDemotableTick) == 0x000004, "Wrong size on MordhauGameState_LastDemotableTick");
static_assert(offsetof(MordhauGameState_LastDemotableTick, DeltaTime) == 0x000000, "Member 'MordhauGameState_LastDemotableTick::DeltaTime' has a wrong offset!");

// Function Mordhau.MordhauGameState.LineTraceCharacters
// 0x0080 (0x0080 - 0x0000)
struct MordhauGameState_LineTraceCharacters final
{
public:
	struct FVector                                LineStart;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineEnd;                                           // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class AAdvancedCharacter*>               IgnoreCharacters;                                  // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     Results;                                           // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameState_LineTraceCharacters) == 0x000008, "Wrong alignment on MordhauGameState_LineTraceCharacters");
static_assert(sizeof(MordhauGameState_LineTraceCharacters) == 0x000080, "Wrong size on MordhauGameState_LineTraceCharacters");
static_assert(offsetof(MordhauGameState_LineTraceCharacters, LineStart) == 0x000000, "Member 'MordhauGameState_LineTraceCharacters::LineStart' has a wrong offset!");
static_assert(offsetof(MordhauGameState_LineTraceCharacters, LineEnd) == 0x00000C, "Member 'MordhauGameState_LineTraceCharacters::LineEnd' has a wrong offset!");
static_assert(offsetof(MordhauGameState_LineTraceCharacters, IgnoreCharacters) == 0x000018, "Member 'MordhauGameState_LineTraceCharacters::IgnoreCharacters' has a wrong offset!");
static_assert(offsetof(MordhauGameState_LineTraceCharacters, Results) == 0x000068, "Member 'MordhauGameState_LineTraceCharacters::Results' has a wrong offset!");
static_assert(offsetof(MordhauGameState_LineTraceCharacters, ReturnValue) == 0x000078, "Member 'MordhauGameState_LineTraceCharacters::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameState.PostPhysicsTick
// 0x0004 (0x0004 - 0x0000)
struct MordhauGameState_PostPhysicsTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameState_PostPhysicsTick) == 0x000004, "Wrong alignment on MordhauGameState_PostPhysicsTick");
static_assert(sizeof(MordhauGameState_PostPhysicsTick) == 0x000004, "Wrong size on MordhauGameState_PostPhysicsTick");
static_assert(offsetof(MordhauGameState_PostPhysicsTick, DeltaTime) == 0x000000, "Member 'MordhauGameState_PostPhysicsTick::DeltaTime' has a wrong offset!");

// Function Mordhau.MordhauGameState.RegisterParticleSystemActor
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameState_RegisterParticleSystemActor final
{
public:
	class AParticleSystemActor*                   ParticleActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameState_RegisterParticleSystemActor) == 0x000008, "Wrong alignment on MordhauGameState_RegisterParticleSystemActor");
static_assert(sizeof(MordhauGameState_RegisterParticleSystemActor) == 0x000008, "Wrong size on MordhauGameState_RegisterParticleSystemActor");
static_assert(offsetof(MordhauGameState_RegisterParticleSystemActor, ParticleActor) == 0x000000, "Member 'MordhauGameState_RegisterParticleSystemActor::ParticleActor' has a wrong offset!");

// Function Mordhau.MordhauGameState.RemoveCharacterFromDistanceArray
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameState_RemoveCharacterFromDistanceArray final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameState_RemoveCharacterFromDistanceArray) == 0x000008, "Wrong alignment on MordhauGameState_RemoveCharacterFromDistanceArray");
static_assert(sizeof(MordhauGameState_RemoveCharacterFromDistanceArray) == 0x000008, "Wrong size on MordhauGameState_RemoveCharacterFromDistanceArray");
static_assert(offsetof(MordhauGameState_RemoveCharacterFromDistanceArray, Character) == 0x000000, "Member 'MordhauGameState_RemoveCharacterFromDistanceArray::Character' has a wrong offset!");

// Function Mordhau.MordhauGameState.ReserveCharacterRagdoll
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameState_ReserveCharacterRagdoll final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameState_ReserveCharacterRagdoll) == 0x000008, "Wrong alignment on MordhauGameState_ReserveCharacterRagdoll");
static_assert(sizeof(MordhauGameState_ReserveCharacterRagdoll) == 0x000008, "Wrong size on MordhauGameState_ReserveCharacterRagdoll");
static_assert(offsetof(MordhauGameState_ReserveCharacterRagdoll, Character) == 0x000000, "Member 'MordhauGameState_ReserveCharacterRagdoll::Character' has a wrong offset!");

// Function Mordhau.MordhauGameState.ShouldBlockPawnInput
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameState_ShouldBlockPawnInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameState_ShouldBlockPawnInput) == 0x000001, "Wrong alignment on MordhauGameState_ShouldBlockPawnInput");
static_assert(sizeof(MordhauGameState_ShouldBlockPawnInput) == 0x000001, "Wrong size on MordhauGameState_ShouldBlockPawnInput");
static_assert(offsetof(MordhauGameState_ShouldBlockPawnInput, ReturnValue) == 0x000000, "Member 'MordhauGameState_ShouldBlockPawnInput::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameState.ShouldTickAnimationThisFrame
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameState_ShouldTickAnimationThisFrame final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameState_ShouldTickAnimationThisFrame) == 0x000008, "Wrong alignment on MordhauGameState_ShouldTickAnimationThisFrame");
static_assert(sizeof(MordhauGameState_ShouldTickAnimationThisFrame) == 0x000010, "Wrong size on MordhauGameState_ShouldTickAnimationThisFrame");
static_assert(offsetof(MordhauGameState_ShouldTickAnimationThisFrame, Character) == 0x000000, "Member 'MordhauGameState_ShouldTickAnimationThisFrame::Character' has a wrong offset!");
static_assert(offsetof(MordhauGameState_ShouldTickAnimationThisFrame, ReturnValue) == 0x000008, "Member 'MordhauGameState_ShouldTickAnimationThisFrame::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameState.ShouldTickThisFrame
// 0x0010 (0x0010 - 0x0000)
struct MordhauGameState_ShouldTickThisFrame final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameState_ShouldTickThisFrame) == 0x000008, "Wrong alignment on MordhauGameState_ShouldTickThisFrame");
static_assert(sizeof(MordhauGameState_ShouldTickThisFrame) == 0x000010, "Wrong size on MordhauGameState_ShouldTickThisFrame");
static_assert(offsetof(MordhauGameState_ShouldTickThisFrame, Character) == 0x000000, "Member 'MordhauGameState_ShouldTickThisFrame::Character' has a wrong offset!");
static_assert(offsetof(MordhauGameState_ShouldTickThisFrame, ReturnValue) == 0x000008, "Member 'MordhauGameState_ShouldTickThisFrame::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauGameState.StoreEquipmentMeshInCache
// 0x0018 (0x0018 - 0x0000)
struct MordhauGameState_StoreEquipmentMeshInCache final
{
public:
	class USkeletalMesh*                          Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Skin;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Part1;                                             // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Part2;                                             // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Part3;                                             // 0x000F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAuxiliaryMesh;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauGameState_StoreEquipmentMeshInCache) == 0x000008, "Wrong alignment on MordhauGameState_StoreEquipmentMeshInCache");
static_assert(sizeof(MordhauGameState_StoreEquipmentMeshInCache) == 0x000018, "Wrong size on MordhauGameState_StoreEquipmentMeshInCache");
static_assert(offsetof(MordhauGameState_StoreEquipmentMeshInCache, Mesh) == 0x000000, "Member 'MordhauGameState_StoreEquipmentMeshInCache::Mesh' has a wrong offset!");
static_assert(offsetof(MordhauGameState_StoreEquipmentMeshInCache, ID) == 0x000008, "Member 'MordhauGameState_StoreEquipmentMeshInCache::ID' has a wrong offset!");
static_assert(offsetof(MordhauGameState_StoreEquipmentMeshInCache, Skin) == 0x00000C, "Member 'MordhauGameState_StoreEquipmentMeshInCache::Skin' has a wrong offset!");
static_assert(offsetof(MordhauGameState_StoreEquipmentMeshInCache, Part1) == 0x00000D, "Member 'MordhauGameState_StoreEquipmentMeshInCache::Part1' has a wrong offset!");
static_assert(offsetof(MordhauGameState_StoreEquipmentMeshInCache, Part2) == 0x00000E, "Member 'MordhauGameState_StoreEquipmentMeshInCache::Part2' has a wrong offset!");
static_assert(offsetof(MordhauGameState_StoreEquipmentMeshInCache, Part3) == 0x00000F, "Member 'MordhauGameState_StoreEquipmentMeshInCache::Part3' has a wrong offset!");
static_assert(offsetof(MordhauGameState_StoreEquipmentMeshInCache, bUseAuxiliaryMesh) == 0x000010, "Member 'MordhauGameState_StoreEquipmentMeshInCache::bUseAuxiliaryMesh' has a wrong offset!");

// Function Mordhau.MordhauGameState.UnregisterParticleSystemActor
// 0x0008 (0x0008 - 0x0000)
struct MordhauGameState_UnregisterParticleSystemActor final
{
public:
	class AParticleSystemActor*                   ParticleActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameState_UnregisterParticleSystemActor) == 0x000008, "Wrong alignment on MordhauGameState_UnregisterParticleSystemActor");
static_assert(sizeof(MordhauGameState_UnregisterParticleSystemActor) == 0x000008, "Wrong size on MordhauGameState_UnregisterParticleSystemActor");
static_assert(offsetof(MordhauGameState_UnregisterParticleSystemActor, ParticleActor) == 0x000000, "Member 'MordhauGameState_UnregisterParticleSystemActor::ParticleActor' has a wrong offset!");

// Function Mordhau.MordhauGameState.ShouldPaintGearWithTeamColors
// 0x0001 (0x0001 - 0x0000)
struct MordhauGameState_ShouldPaintGearWithTeamColors final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauGameState_ShouldPaintGearWithTeamColors) == 0x000001, "Wrong alignment on MordhauGameState_ShouldPaintGearWithTeamColors");
static_assert(sizeof(MordhauGameState_ShouldPaintGearWithTeamColors) == 0x000001, "Wrong size on MordhauGameState_ShouldPaintGearWithTeamColors");
static_assert(offsetof(MordhauGameState_ShouldPaintGearWithTeamColors, ReturnValue) == 0x000000, "Member 'MordhauGameState_ShouldPaintGearWithTeamColors::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauHttpRequest.MordhauHttpRequest
// 0x0088 (0x0088 - 0x0000)
struct MordhauHttpRequest_MordhauHttpRequest final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InUrl;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InVerb;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            InHeaderMap;                                       // 0x0028(0x0050)(Parm, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InPlayFabJsonObject;                               // 0x0078(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMordhauHttpRequest*                    ReturnValue;                                       // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauHttpRequest_MordhauHttpRequest) == 0x000008, "Wrong alignment on MordhauHttpRequest_MordhauHttpRequest");
static_assert(sizeof(MordhauHttpRequest_MordhauHttpRequest) == 0x000088, "Wrong size on MordhauHttpRequest_MordhauHttpRequest");
static_assert(offsetof(MordhauHttpRequest_MordhauHttpRequest, WorldContext) == 0x000000, "Member 'MordhauHttpRequest_MordhauHttpRequest::WorldContext' has a wrong offset!");
static_assert(offsetof(MordhauHttpRequest_MordhauHttpRequest, InUrl) == 0x000008, "Member 'MordhauHttpRequest_MordhauHttpRequest::InUrl' has a wrong offset!");
static_assert(offsetof(MordhauHttpRequest_MordhauHttpRequest, InVerb) == 0x000018, "Member 'MordhauHttpRequest_MordhauHttpRequest::InVerb' has a wrong offset!");
static_assert(offsetof(MordhauHttpRequest_MordhauHttpRequest, InHeaderMap) == 0x000028, "Member 'MordhauHttpRequest_MordhauHttpRequest::InHeaderMap' has a wrong offset!");
static_assert(offsetof(MordhauHttpRequest_MordhauHttpRequest, InPlayFabJsonObject) == 0x000078, "Member 'MordhauHttpRequest_MordhauHttpRequest::InPlayFabJsonObject' has a wrong offset!");
static_assert(offsetof(MordhauHttpRequest_MordhauHttpRequest, ReturnValue) == 0x000080, "Member 'MordhauHttpRequest_MordhauHttpRequest::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauHUD.EnqueueMordhauDialog
// 0x0008 (0x0008 - 0x0000)
struct MordhauHUD_EnqueueMordhauDialog final
{
public:
	class UMordhauDialog*                         Dialog;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauHUD_EnqueueMordhauDialog) == 0x000008, "Wrong alignment on MordhauHUD_EnqueueMordhauDialog");
static_assert(sizeof(MordhauHUD_EnqueueMordhauDialog) == 0x000008, "Wrong size on MordhauHUD_EnqueueMordhauDialog");
static_assert(offsetof(MordhauHUD_EnqueueMordhauDialog, Dialog) == 0x000000, "Member 'MordhauHUD_EnqueueMordhauDialog::Dialog' has a wrong offset!");

// Function Mordhau.MordhauInput.CustomSetInputModeGameAndUI
// 0x0018 (0x0018 - 0x0000)
struct MordhauInput_CustomSetInputModeGameAndUI final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                InWidgetToFocus;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMouseLockMode                                InMouseLockMode;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideCursorDuringCapture;                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauInput_CustomSetInputModeGameAndUI) == 0x000008, "Wrong alignment on MordhauInput_CustomSetInputModeGameAndUI");
static_assert(sizeof(MordhauInput_CustomSetInputModeGameAndUI) == 0x000018, "Wrong size on MordhauInput_CustomSetInputModeGameAndUI");
static_assert(offsetof(MordhauInput_CustomSetInputModeGameAndUI, PlayerController) == 0x000000, "Member 'MordhauInput_CustomSetInputModeGameAndUI::PlayerController' has a wrong offset!");
static_assert(offsetof(MordhauInput_CustomSetInputModeGameAndUI, InWidgetToFocus) == 0x000008, "Member 'MordhauInput_CustomSetInputModeGameAndUI::InWidgetToFocus' has a wrong offset!");
static_assert(offsetof(MordhauInput_CustomSetInputModeGameAndUI, InMouseLockMode) == 0x000010, "Member 'MordhauInput_CustomSetInputModeGameAndUI::InMouseLockMode' has a wrong offset!");
static_assert(offsetof(MordhauInput_CustomSetInputModeGameAndUI, bHideCursorDuringCapture) == 0x000011, "Member 'MordhauInput_CustomSetInputModeGameAndUI::bHideCursorDuringCapture' has a wrong offset!");

// Function Mordhau.MordhauInput.CustomSetInputModeGameOnly
// 0x0008 (0x0008 - 0x0000)
struct MordhauInput_CustomSetInputModeGameOnly final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_CustomSetInputModeGameOnly) == 0x000008, "Wrong alignment on MordhauInput_CustomSetInputModeGameOnly");
static_assert(sizeof(MordhauInput_CustomSetInputModeGameOnly) == 0x000008, "Wrong size on MordhauInput_CustomSetInputModeGameOnly");
static_assert(offsetof(MordhauInput_CustomSetInputModeGameOnly, PlayerController) == 0x000000, "Member 'MordhauInput_CustomSetInputModeGameOnly::PlayerController' has a wrong offset!");

// Function Mordhau.MordhauInput.CustomSetInputModeUIOnly
// 0x0018 (0x0018 - 0x0000)
struct MordhauInput_CustomSetInputModeUIOnly final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                InWidgetToFocus;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMouseLockMode                                InMouseLockMode;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauInput_CustomSetInputModeUIOnly) == 0x000008, "Wrong alignment on MordhauInput_CustomSetInputModeUIOnly");
static_assert(sizeof(MordhauInput_CustomSetInputModeUIOnly) == 0x000018, "Wrong size on MordhauInput_CustomSetInputModeUIOnly");
static_assert(offsetof(MordhauInput_CustomSetInputModeUIOnly, PlayerController) == 0x000000, "Member 'MordhauInput_CustomSetInputModeUIOnly::PlayerController' has a wrong offset!");
static_assert(offsetof(MordhauInput_CustomSetInputModeUIOnly, InWidgetToFocus) == 0x000008, "Member 'MordhauInput_CustomSetInputModeUIOnly::InWidgetToFocus' has a wrong offset!");
static_assert(offsetof(MordhauInput_CustomSetInputModeUIOnly, InMouseLockMode) == 0x000010, "Member 'MordhauInput_CustomSetInputModeUIOnly::InMouseLockMode' has a wrong offset!");

// Function Mordhau.MordhauInput.GetActionKey
// 0x0040 (0x0040 - 0x0000)
struct MordhauInput_GetActionKey final
{
public:
	struct FInputActionKeyMapping                 ActionKeyBinding;                                  // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FKey                                   ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetActionKey) == 0x000008, "Wrong alignment on MordhauInput_GetActionKey");
static_assert(sizeof(MordhauInput_GetActionKey) == 0x000040, "Wrong size on MordhauInput_GetActionKey");
static_assert(offsetof(MordhauInput_GetActionKey, ActionKeyBinding) == 0x000000, "Member 'MordhauInput_GetActionKey::ActionKeyBinding' has a wrong offset!");
static_assert(offsetof(MordhauInput_GetActionKey, ReturnValue) == 0x000028, "Member 'MordhauInput_GetActionKey::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetActionName
// 0x0030 (0x0030 - 0x0000)
struct MordhauInput_GetActionName final
{
public:
	struct FInputActionKeyMapping                 ActionKeyBinding;                                  // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetActionName) == 0x000008, "Wrong alignment on MordhauInput_GetActionName");
static_assert(sizeof(MordhauInput_GetActionName) == 0x000030, "Wrong size on MordhauInput_GetActionName");
static_assert(offsetof(MordhauInput_GetActionName, ActionKeyBinding) == 0x000000, "Member 'MordhauInput_GetActionName::ActionKeyBinding' has a wrong offset!");
static_assert(offsetof(MordhauInput_GetActionName, ReturnValue) == 0x000028, "Member 'MordhauInput_GetActionName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetAxisKey
// 0x0040 (0x0040 - 0x0000)
struct MordhauInput_GetAxisKey final
{
public:
	struct FInputAxisKeyMapping                   AxisKeyBinding;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FKey                                   ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetAxisKey) == 0x000008, "Wrong alignment on MordhauInput_GetAxisKey");
static_assert(sizeof(MordhauInput_GetAxisKey) == 0x000040, "Wrong size on MordhauInput_GetAxisKey");
static_assert(offsetof(MordhauInput_GetAxisKey, AxisKeyBinding) == 0x000000, "Member 'MordhauInput_GetAxisKey::AxisKeyBinding' has a wrong offset!");
static_assert(offsetof(MordhauInput_GetAxisKey, ReturnValue) == 0x000028, "Member 'MordhauInput_GetAxisKey::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetAxisName
// 0x0030 (0x0030 - 0x0000)
struct MordhauInput_GetAxisName final
{
public:
	struct FInputAxisKeyMapping                   AxisKeyBinding;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetAxisName) == 0x000008, "Wrong alignment on MordhauInput_GetAxisName");
static_assert(sizeof(MordhauInput_GetAxisName) == 0x000030, "Wrong size on MordhauInput_GetAxisName");
static_assert(offsetof(MordhauInput_GetAxisName, AxisKeyBinding) == 0x000000, "Member 'MordhauInput_GetAxisName::AxisKeyBinding' has a wrong offset!");
static_assert(offsetof(MordhauInput_GetAxisName, ReturnValue) == 0x000028, "Member 'MordhauInput_GetAxisName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetAxisOppositeDirectionName
// 0x0010 (0x0010 - 0x0000)
struct MordhauInput_GetAxisOppositeDirectionName final
{
public:
	class FName                                   AxisName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetAxisOppositeDirectionName) == 0x000004, "Wrong alignment on MordhauInput_GetAxisOppositeDirectionName");
static_assert(sizeof(MordhauInput_GetAxisOppositeDirectionName) == 0x000010, "Wrong size on MordhauInput_GetAxisOppositeDirectionName");
static_assert(offsetof(MordhauInput_GetAxisOppositeDirectionName, AxisName) == 0x000000, "Member 'MordhauInput_GetAxisOppositeDirectionName::AxisName' has a wrong offset!");
static_assert(offsetof(MordhauInput_GetAxisOppositeDirectionName, ReturnValue) == 0x000008, "Member 'MordhauInput_GetAxisOppositeDirectionName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetAxisScale
// 0x0030 (0x0030 - 0x0000)
struct MordhauInput_GetAxisScale final
{
public:
	struct FInputAxisKeyMapping                   AxisKeyBinding;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauInput_GetAxisScale) == 0x000008, "Wrong alignment on MordhauInput_GetAxisScale");
static_assert(sizeof(MordhauInput_GetAxisScale) == 0x000030, "Wrong size on MordhauInput_GetAxisScale");
static_assert(offsetof(MordhauInput_GetAxisScale, AxisKeyBinding) == 0x000000, "Member 'MordhauInput_GetAxisScale::AxisKeyBinding' has a wrong offset!");
static_assert(offsetof(MordhauInput_GetAxisScale, ReturnValue) == 0x000028, "Member 'MordhauInput_GetAxisScale::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.AddActionKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct MordhauInput_AddActionKeyBinding final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_AddActionKeyBinding) == 0x000008, "Wrong alignment on MordhauInput_AddActionKeyBinding");
static_assert(sizeof(MordhauInput_AddActionKeyBinding) == 0x000020, "Wrong size on MordhauInput_AddActionKeyBinding");
static_assert(offsetof(MordhauInput_AddActionKeyBinding, ActionName) == 0x000000, "Member 'MordhauInput_AddActionKeyBinding::ActionName' has a wrong offset!");
static_assert(offsetof(MordhauInput_AddActionKeyBinding, Key) == 0x000008, "Member 'MordhauInput_AddActionKeyBinding::Key' has a wrong offset!");

// Function Mordhau.MordhauInput.AddAxisKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct MordhauInput_AddAxisKeyBinding final
{
public:
	class FName                                   AxisName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_AddAxisKeyBinding) == 0x000008, "Wrong alignment on MordhauInput_AddAxisKeyBinding");
static_assert(sizeof(MordhauInput_AddAxisKeyBinding) == 0x000020, "Wrong size on MordhauInput_AddAxisKeyBinding");
static_assert(offsetof(MordhauInput_AddAxisKeyBinding, AxisName) == 0x000000, "Member 'MordhauInput_AddAxisKeyBinding::AxisName' has a wrong offset!");
static_assert(offsetof(MordhauInput_AddAxisKeyBinding, Key) == 0x000008, "Member 'MordhauInput_AddAxisKeyBinding::Key' has a wrong offset!");

// Function Mordhau.MordhauInput.AddConsoleKeyBinding
// 0x0018 (0x0018 - 0x0000)
struct MordhauInput_AddConsoleKeyBinding final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_AddConsoleKeyBinding) == 0x000008, "Wrong alignment on MordhauInput_AddConsoleKeyBinding");
static_assert(sizeof(MordhauInput_AddConsoleKeyBinding) == 0x000018, "Wrong size on MordhauInput_AddConsoleKeyBinding");
static_assert(offsetof(MordhauInput_AddConsoleKeyBinding, Key) == 0x000000, "Member 'MordhauInput_AddConsoleKeyBinding::Key' has a wrong offset!");

// Function Mordhau.MordhauInput.GetActionKeyBindings
// 0x0010 (0x0010 - 0x0000)
struct MordhauInput_GetActionKeyBindings final
{
public:
	TArray<struct FInputActionKeyMapping>         ActionKeyBindings;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetActionKeyBindings) == 0x000008, "Wrong alignment on MordhauInput_GetActionKeyBindings");
static_assert(sizeof(MordhauInput_GetActionKeyBindings) == 0x000010, "Wrong size on MordhauInput_GetActionKeyBindings");
static_assert(offsetof(MordhauInput_GetActionKeyBindings, ActionKeyBindings) == 0x000000, "Member 'MordhauInput_GetActionKeyBindings::ActionKeyBindings' has a wrong offset!");

// Function Mordhau.MordhauInput.GetAllKeyBindingsForAction
// 0x0018 (0x0018 - 0x0000)
struct MordhauInput_GetAllKeyBindingsForAction final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInputActionKeyMapping>         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetAllKeyBindingsForAction) == 0x000008, "Wrong alignment on MordhauInput_GetAllKeyBindingsForAction");
static_assert(sizeof(MordhauInput_GetAllKeyBindingsForAction) == 0x000018, "Wrong size on MordhauInput_GetAllKeyBindingsForAction");
static_assert(offsetof(MordhauInput_GetAllKeyBindingsForAction, ActionName) == 0x000000, "Member 'MordhauInput_GetAllKeyBindingsForAction::ActionName' has a wrong offset!");
static_assert(offsetof(MordhauInput_GetAllKeyBindingsForAction, ReturnValue) == 0x000008, "Member 'MordhauInput_GetAllKeyBindingsForAction::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetAxisKeyBindings
// 0x0010 (0x0010 - 0x0000)
struct MordhauInput_GetAxisKeyBindings final
{
public:
	TArray<struct FInputAxisKeyMapping>           AxisKeyBindings;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetAxisKeyBindings) == 0x000008, "Wrong alignment on MordhauInput_GetAxisKeyBindings");
static_assert(sizeof(MordhauInput_GetAxisKeyBindings) == 0x000010, "Wrong size on MordhauInput_GetAxisKeyBindings");
static_assert(offsetof(MordhauInput_GetAxisKeyBindings, AxisKeyBindings) == 0x000000, "Member 'MordhauInput_GetAxisKeyBindings::AxisKeyBindings' has a wrong offset!");

// Function Mordhau.MordhauInput.GetConsoleKeyBindings
// 0x0010 (0x0010 - 0x0000)
struct MordhauInput_GetConsoleKeyBindings final
{
public:
	TArray<struct FKey>                           ConsoleKeyBindings;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetConsoleKeyBindings) == 0x000008, "Wrong alignment on MordhauInput_GetConsoleKeyBindings");
static_assert(sizeof(MordhauInput_GetConsoleKeyBindings) == 0x000010, "Wrong size on MordhauInput_GetConsoleKeyBindings");
static_assert(offsetof(MordhauInput_GetConsoleKeyBindings, ConsoleKeyBindings) == 0x000000, "Member 'MordhauInput_GetConsoleKeyBindings::ConsoleKeyBindings' has a wrong offset!");

// Function Mordhau.MordhauInput.GetPrimaryActionKeyBinding
// 0x0030 (0x0030 - 0x0000)
struct MordhauInput_GetPrimaryActionKeyBinding final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputActionKeyMapping                 ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetPrimaryActionKeyBinding) == 0x000008, "Wrong alignment on MordhauInput_GetPrimaryActionKeyBinding");
static_assert(sizeof(MordhauInput_GetPrimaryActionKeyBinding) == 0x000030, "Wrong size on MordhauInput_GetPrimaryActionKeyBinding");
static_assert(offsetof(MordhauInput_GetPrimaryActionKeyBinding, ActionName) == 0x000000, "Member 'MordhauInput_GetPrimaryActionKeyBinding::ActionName' has a wrong offset!");
static_assert(offsetof(MordhauInput_GetPrimaryActionKeyBinding, ReturnValue) == 0x000008, "Member 'MordhauInput_GetPrimaryActionKeyBinding::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetPrimaryAxisKeyBinding
// 0x0030 (0x0030 - 0x0000)
struct MordhauInput_GetPrimaryAxisKeyBinding final
{
public:
	class FName                                   AxisName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputAxisKeyMapping                   ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetPrimaryAxisKeyBinding) == 0x000008, "Wrong alignment on MordhauInput_GetPrimaryAxisKeyBinding");
static_assert(sizeof(MordhauInput_GetPrimaryAxisKeyBinding) == 0x000030, "Wrong size on MordhauInput_GetPrimaryAxisKeyBinding");
static_assert(offsetof(MordhauInput_GetPrimaryAxisKeyBinding, AxisName) == 0x000000, "Member 'MordhauInput_GetPrimaryAxisKeyBinding::AxisName' has a wrong offset!");
static_assert(offsetof(MordhauInput_GetPrimaryAxisKeyBinding, ReturnValue) == 0x000008, "Member 'MordhauInput_GetPrimaryAxisKeyBinding::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetSecondaryActionKeyBinding
// 0x0030 (0x0030 - 0x0000)
struct MordhauInput_GetSecondaryActionKeyBinding final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputActionKeyMapping                 ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetSecondaryActionKeyBinding) == 0x000008, "Wrong alignment on MordhauInput_GetSecondaryActionKeyBinding");
static_assert(sizeof(MordhauInput_GetSecondaryActionKeyBinding) == 0x000030, "Wrong size on MordhauInput_GetSecondaryActionKeyBinding");
static_assert(offsetof(MordhauInput_GetSecondaryActionKeyBinding, ActionName) == 0x000000, "Member 'MordhauInput_GetSecondaryActionKeyBinding::ActionName' has a wrong offset!");
static_assert(offsetof(MordhauInput_GetSecondaryActionKeyBinding, ReturnValue) == 0x000008, "Member 'MordhauInput_GetSecondaryActionKeyBinding::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetSecondaryAxisKeyBinding
// 0x0030 (0x0030 - 0x0000)
struct MordhauInput_GetSecondaryAxisKeyBinding final
{
public:
	class FName                                   AxisName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputAxisKeyMapping                   ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetSecondaryAxisKeyBinding) == 0x000008, "Wrong alignment on MordhauInput_GetSecondaryAxisKeyBinding");
static_assert(sizeof(MordhauInput_GetSecondaryAxisKeyBinding) == 0x000030, "Wrong size on MordhauInput_GetSecondaryAxisKeyBinding");
static_assert(offsetof(MordhauInput_GetSecondaryAxisKeyBinding, AxisName) == 0x000000, "Member 'MordhauInput_GetSecondaryAxisKeyBinding::AxisName' has a wrong offset!");
static_assert(offsetof(MordhauInput_GetSecondaryAxisKeyBinding, ReturnValue) == 0x000008, "Member 'MordhauInput_GetSecondaryAxisKeyBinding::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.SetAngleAttackAfterPress
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_SetAngleAttackAfterPress final
{
public:
	int32                                         NewAngleAttackAfterPress;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetAngleAttackAfterPress) == 0x000004, "Wrong alignment on MordhauInput_SetAngleAttackAfterPress");
static_assert(sizeof(MordhauInput_SetAngleAttackAfterPress) == 0x000004, "Wrong size on MordhauInput_SetAngleAttackAfterPress");
static_assert(offsetof(MordhauInput_SetAngleAttackAfterPress, NewAngleAttackAfterPress) == 0x000000, "Member 'MordhauInput_SetAngleAttackAfterPress::NewAngleAttackAfterPress' has a wrong offset!");

// Function Mordhau.MordhauInput.SetAngleAttacksWithMovement
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_SetAngleAttacksWithMovement final
{
public:
	int32                                         NewAngleAttacksWithMovement;                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetAngleAttacksWithMovement) == 0x000004, "Wrong alignment on MordhauInput_SetAngleAttacksWithMovement");
static_assert(sizeof(MordhauInput_SetAngleAttacksWithMovement) == 0x000004, "Wrong size on MordhauInput_SetAngleAttacksWithMovement");
static_assert(offsetof(MordhauInput_SetAngleAttacksWithMovement, NewAngleAttacksWithMovement) == 0x000000, "Member 'MordhauInput_SetAngleAttacksWithMovement::NewAngleAttacksWithMovement' has a wrong offset!");

// Function Mordhau.MordhauInput.SetControlScheme
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_SetControlScheme final
{
public:
	int32                                         NewControlScheme;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetControlScheme) == 0x000004, "Wrong alignment on MordhauInput_SetControlScheme");
static_assert(sizeof(MordhauInput_SetControlScheme) == 0x000004, "Wrong size on MordhauInput_SetControlScheme");
static_assert(offsetof(MordhauInput_SetControlScheme, NewControlScheme) == 0x000000, "Member 'MordhauInput_SetControlScheme::NewControlScheme' has a wrong offset!");

// Function Mordhau.MordhauInput.SetGamepadLeftXDeadzone
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_SetGamepadLeftXDeadzone final
{
public:
	float                                         NewDeadzone;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetGamepadLeftXDeadzone) == 0x000004, "Wrong alignment on MordhauInput_SetGamepadLeftXDeadzone");
static_assert(sizeof(MordhauInput_SetGamepadLeftXDeadzone) == 0x000004, "Wrong size on MordhauInput_SetGamepadLeftXDeadzone");
static_assert(offsetof(MordhauInput_SetGamepadLeftXDeadzone, NewDeadzone) == 0x000000, "Member 'MordhauInput_SetGamepadLeftXDeadzone::NewDeadzone' has a wrong offset!");

// Function Mordhau.MordhauInput.SetGamepadLeftXInverted
// 0x0001 (0x0001 - 0x0000)
struct MordhauInput_SetGamepadLeftXInverted final
{
public:
	bool                                          bNewInverted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetGamepadLeftXInverted) == 0x000001, "Wrong alignment on MordhauInput_SetGamepadLeftXInverted");
static_assert(sizeof(MordhauInput_SetGamepadLeftXInverted) == 0x000001, "Wrong size on MordhauInput_SetGamepadLeftXInverted");
static_assert(offsetof(MordhauInput_SetGamepadLeftXInverted, bNewInverted) == 0x000000, "Member 'MordhauInput_SetGamepadLeftXInverted::bNewInverted' has a wrong offset!");

// Function Mordhau.MordhauInput.SetGamepadLeftXSensitivity
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_SetGamepadLeftXSensitivity final
{
public:
	float                                         NewSensitivity;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetGamepadLeftXSensitivity) == 0x000004, "Wrong alignment on MordhauInput_SetGamepadLeftXSensitivity");
static_assert(sizeof(MordhauInput_SetGamepadLeftXSensitivity) == 0x000004, "Wrong size on MordhauInput_SetGamepadLeftXSensitivity");
static_assert(offsetof(MordhauInput_SetGamepadLeftXSensitivity, NewSensitivity) == 0x000000, "Member 'MordhauInput_SetGamepadLeftXSensitivity::NewSensitivity' has a wrong offset!");

// Function Mordhau.MordhauInput.SetGamepadLeftYDeadzone
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_SetGamepadLeftYDeadzone final
{
public:
	float                                         NewDeadzone;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetGamepadLeftYDeadzone) == 0x000004, "Wrong alignment on MordhauInput_SetGamepadLeftYDeadzone");
static_assert(sizeof(MordhauInput_SetGamepadLeftYDeadzone) == 0x000004, "Wrong size on MordhauInput_SetGamepadLeftYDeadzone");
static_assert(offsetof(MordhauInput_SetGamepadLeftYDeadzone, NewDeadzone) == 0x000000, "Member 'MordhauInput_SetGamepadLeftYDeadzone::NewDeadzone' has a wrong offset!");

// Function Mordhau.MordhauInput.SetGamepadLeftYInverted
// 0x0001 (0x0001 - 0x0000)
struct MordhauInput_SetGamepadLeftYInverted final
{
public:
	bool                                          bNewInverted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetGamepadLeftYInverted) == 0x000001, "Wrong alignment on MordhauInput_SetGamepadLeftYInverted");
static_assert(sizeof(MordhauInput_SetGamepadLeftYInverted) == 0x000001, "Wrong size on MordhauInput_SetGamepadLeftYInverted");
static_assert(offsetof(MordhauInput_SetGamepadLeftYInverted, bNewInverted) == 0x000000, "Member 'MordhauInput_SetGamepadLeftYInverted::bNewInverted' has a wrong offset!");

// Function Mordhau.MordhauInput.SetGamepadLeftYSensitivity
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_SetGamepadLeftYSensitivity final
{
public:
	float                                         NewSensitivity;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetGamepadLeftYSensitivity) == 0x000004, "Wrong alignment on MordhauInput_SetGamepadLeftYSensitivity");
static_assert(sizeof(MordhauInput_SetGamepadLeftYSensitivity) == 0x000004, "Wrong size on MordhauInput_SetGamepadLeftYSensitivity");
static_assert(offsetof(MordhauInput_SetGamepadLeftYSensitivity, NewSensitivity) == 0x000000, "Member 'MordhauInput_SetGamepadLeftYSensitivity::NewSensitivity' has a wrong offset!");

// Function Mordhau.MordhauInput.SetGamepadRightXDeadzone
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_SetGamepadRightXDeadzone final
{
public:
	float                                         NewDeadzone;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetGamepadRightXDeadzone) == 0x000004, "Wrong alignment on MordhauInput_SetGamepadRightXDeadzone");
static_assert(sizeof(MordhauInput_SetGamepadRightXDeadzone) == 0x000004, "Wrong size on MordhauInput_SetGamepadRightXDeadzone");
static_assert(offsetof(MordhauInput_SetGamepadRightXDeadzone, NewDeadzone) == 0x000000, "Member 'MordhauInput_SetGamepadRightXDeadzone::NewDeadzone' has a wrong offset!");

// Function Mordhau.MordhauInput.SetGamepadRightXInverted
// 0x0001 (0x0001 - 0x0000)
struct MordhauInput_SetGamepadRightXInverted final
{
public:
	bool                                          bNewInverted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetGamepadRightXInverted) == 0x000001, "Wrong alignment on MordhauInput_SetGamepadRightXInverted");
static_assert(sizeof(MordhauInput_SetGamepadRightXInverted) == 0x000001, "Wrong size on MordhauInput_SetGamepadRightXInverted");
static_assert(offsetof(MordhauInput_SetGamepadRightXInverted, bNewInverted) == 0x000000, "Member 'MordhauInput_SetGamepadRightXInverted::bNewInverted' has a wrong offset!");

// Function Mordhau.MordhauInput.SetGamepadRightXSensitivity
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_SetGamepadRightXSensitivity final
{
public:
	float                                         NewSensitivity;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetGamepadRightXSensitivity) == 0x000004, "Wrong alignment on MordhauInput_SetGamepadRightXSensitivity");
static_assert(sizeof(MordhauInput_SetGamepadRightXSensitivity) == 0x000004, "Wrong size on MordhauInput_SetGamepadRightXSensitivity");
static_assert(offsetof(MordhauInput_SetGamepadRightXSensitivity, NewSensitivity) == 0x000000, "Member 'MordhauInput_SetGamepadRightXSensitivity::NewSensitivity' has a wrong offset!");

// Function Mordhau.MordhauInput.SetGamepadRightYDeadzone
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_SetGamepadRightYDeadzone final
{
public:
	float                                         NewDeadzone;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetGamepadRightYDeadzone) == 0x000004, "Wrong alignment on MordhauInput_SetGamepadRightYDeadzone");
static_assert(sizeof(MordhauInput_SetGamepadRightYDeadzone) == 0x000004, "Wrong size on MordhauInput_SetGamepadRightYDeadzone");
static_assert(offsetof(MordhauInput_SetGamepadRightYDeadzone, NewDeadzone) == 0x000000, "Member 'MordhauInput_SetGamepadRightYDeadzone::NewDeadzone' has a wrong offset!");

// Function Mordhau.MordhauInput.SetGamepadRightYInverted
// 0x0001 (0x0001 - 0x0000)
struct MordhauInput_SetGamepadRightYInverted final
{
public:
	bool                                          bNewInverted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetGamepadRightYInverted) == 0x000001, "Wrong alignment on MordhauInput_SetGamepadRightYInverted");
static_assert(sizeof(MordhauInput_SetGamepadRightYInverted) == 0x000001, "Wrong size on MordhauInput_SetGamepadRightYInverted");
static_assert(offsetof(MordhauInput_SetGamepadRightYInverted, bNewInverted) == 0x000000, "Member 'MordhauInput_SetGamepadRightYInverted::bNewInverted' has a wrong offset!");

// Function Mordhau.MordhauInput.SetGamepadRightYSensitivity
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_SetGamepadRightYSensitivity final
{
public:
	float                                         NewSensitivity;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetGamepadRightYSensitivity) == 0x000004, "Wrong alignment on MordhauInput_SetGamepadRightYSensitivity");
static_assert(sizeof(MordhauInput_SetGamepadRightYSensitivity) == 0x000004, "Wrong size on MordhauInput_SetGamepadRightYSensitivity");
static_assert(offsetof(MordhauInput_SetGamepadRightYSensitivity, NewSensitivity) == 0x000000, "Member 'MordhauInput_SetGamepadRightYSensitivity::NewSensitivity' has a wrong offset!");

// Function Mordhau.MordhauInput.SetInverseAttackDirectionX
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_SetInverseAttackDirectionX final
{
public:
	int32                                         NewInverseAttackDirectionX;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetInverseAttackDirectionX) == 0x000004, "Wrong alignment on MordhauInput_SetInverseAttackDirectionX");
static_assert(sizeof(MordhauInput_SetInverseAttackDirectionX) == 0x000004, "Wrong size on MordhauInput_SetInverseAttackDirectionX");
static_assert(offsetof(MordhauInput_SetInverseAttackDirectionX, NewInverseAttackDirectionX) == 0x000000, "Member 'MordhauInput_SetInverseAttackDirectionX::NewInverseAttackDirectionX' has a wrong offset!");

// Function Mordhau.MordhauInput.SetInverseAttackDirectionY
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_SetInverseAttackDirectionY final
{
public:
	int32                                         NewInverseAttackDirectionX;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetInverseAttackDirectionY) == 0x000004, "Wrong alignment on MordhauInput_SetInverseAttackDirectionY");
static_assert(sizeof(MordhauInput_SetInverseAttackDirectionY) == 0x000004, "Wrong size on MordhauInput_SetInverseAttackDirectionY");
static_assert(offsetof(MordhauInput_SetInverseAttackDirectionY, NewInverseAttackDirectionX) == 0x000000, "Member 'MordhauInput_SetInverseAttackDirectionY::NewInverseAttackDirectionX' has a wrong offset!");

// Function Mordhau.MordhauInput.SetMouseXInverted
// 0x0001 (0x0001 - 0x0000)
struct MordhauInput_SetMouseXInverted final
{
public:
	bool                                          bNewInverted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetMouseXInverted) == 0x000001, "Wrong alignment on MordhauInput_SetMouseXInverted");
static_assert(sizeof(MordhauInput_SetMouseXInverted) == 0x000001, "Wrong size on MordhauInput_SetMouseXInverted");
static_assert(offsetof(MordhauInput_SetMouseXInverted, bNewInverted) == 0x000000, "Member 'MordhauInput_SetMouseXInverted::bNewInverted' has a wrong offset!");

// Function Mordhau.MordhauInput.SetMouseXIsFlipAttackSide
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_SetMouseXIsFlipAttackSide final
{
public:
	int32                                         NewIsFlipAttackSide;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetMouseXIsFlipAttackSide) == 0x000004, "Wrong alignment on MordhauInput_SetMouseXIsFlipAttackSide");
static_assert(sizeof(MordhauInput_SetMouseXIsFlipAttackSide) == 0x000004, "Wrong size on MordhauInput_SetMouseXIsFlipAttackSide");
static_assert(offsetof(MordhauInput_SetMouseXIsFlipAttackSide, NewIsFlipAttackSide) == 0x000000, "Member 'MordhauInput_SetMouseXIsFlipAttackSide::NewIsFlipAttackSide' has a wrong offset!");

// Function Mordhau.MordhauInput.SetMouseXSensitivity
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_SetMouseXSensitivity final
{
public:
	float                                         NewSensitivity;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetMouseXSensitivity) == 0x000004, "Wrong alignment on MordhauInput_SetMouseXSensitivity");
static_assert(sizeof(MordhauInput_SetMouseXSensitivity) == 0x000004, "Wrong size on MordhauInput_SetMouseXSensitivity");
static_assert(offsetof(MordhauInput_SetMouseXSensitivity, NewSensitivity) == 0x000000, "Member 'MordhauInput_SetMouseXSensitivity::NewSensitivity' has a wrong offset!");

// Function Mordhau.MordhauInput.SetMouseYInverted
// 0x0001 (0x0001 - 0x0000)
struct MordhauInput_SetMouseYInverted final
{
public:
	bool                                          bNewInverted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetMouseYInverted) == 0x000001, "Wrong alignment on MordhauInput_SetMouseYInverted");
static_assert(sizeof(MordhauInput_SetMouseYInverted) == 0x000001, "Wrong size on MordhauInput_SetMouseYInverted");
static_assert(offsetof(MordhauInput_SetMouseYInverted, bNewInverted) == 0x000000, "Member 'MordhauInput_SetMouseYInverted::bNewInverted' has a wrong offset!");

// Function Mordhau.MordhauInput.SetMouseYSensitivity
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_SetMouseYSensitivity final
{
public:
	float                                         NewSensitivity;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetMouseYSensitivity) == 0x000004, "Wrong alignment on MordhauInput_SetMouseYSensitivity");
static_assert(sizeof(MordhauInput_SetMouseYSensitivity) == 0x000004, "Wrong size on MordhauInput_SetMouseYSensitivity");
static_assert(offsetof(MordhauInput_SetMouseYSensitivity, NewSensitivity) == 0x000000, "Member 'MordhauInput_SetMouseYSensitivity::NewSensitivity' has a wrong offset!");

// Function Mordhau.MordhauInput.SetToggleCrouch
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_SetToggleCrouch final
{
public:
	int32                                         NewToggleCrouch;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetToggleCrouch) == 0x000004, "Wrong alignment on MordhauInput_SetToggleCrouch");
static_assert(sizeof(MordhauInput_SetToggleCrouch) == 0x000004, "Wrong size on MordhauInput_SetToggleCrouch");
static_assert(offsetof(MordhauInput_SetToggleCrouch, NewToggleCrouch) == 0x000000, "Member 'MordhauInput_SetToggleCrouch::NewToggleCrouch' has a wrong offset!");

// Function Mordhau.MordhauInput.SetToggleSprint
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_SetToggleSprint final
{
public:
	int32                                         NewToggleSprint;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_SetToggleSprint) == 0x000004, "Wrong alignment on MordhauInput_SetToggleSprint");
static_assert(sizeof(MordhauInput_SetToggleSprint) == 0x000004, "Wrong size on MordhauInput_SetToggleSprint");
static_assert(offsetof(MordhauInput_SetToggleSprint, NewToggleSprint) == 0x000000, "Member 'MordhauInput_SetToggleSprint::NewToggleSprint' has a wrong offset!");

// Function Mordhau.MordhauInput.GetAngleAttackAfterPress
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_GetAngleAttackAfterPress final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetAngleAttackAfterPress) == 0x000004, "Wrong alignment on MordhauInput_GetAngleAttackAfterPress");
static_assert(sizeof(MordhauInput_GetAngleAttackAfterPress) == 0x000004, "Wrong size on MordhauInput_GetAngleAttackAfterPress");
static_assert(offsetof(MordhauInput_GetAngleAttackAfterPress, ReturnValue) == 0x000000, "Member 'MordhauInput_GetAngleAttackAfterPress::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetAngleAttacksWithMovement
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_GetAngleAttacksWithMovement final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetAngleAttacksWithMovement) == 0x000004, "Wrong alignment on MordhauInput_GetAngleAttacksWithMovement");
static_assert(sizeof(MordhauInput_GetAngleAttacksWithMovement) == 0x000004, "Wrong size on MordhauInput_GetAngleAttacksWithMovement");
static_assert(offsetof(MordhauInput_GetAngleAttacksWithMovement, ReturnValue) == 0x000000, "Member 'MordhauInput_GetAngleAttacksWithMovement::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetControlScheme
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_GetControlScheme final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetControlScheme) == 0x000004, "Wrong alignment on MordhauInput_GetControlScheme");
static_assert(sizeof(MordhauInput_GetControlScheme) == 0x000004, "Wrong size on MordhauInput_GetControlScheme");
static_assert(offsetof(MordhauInput_GetControlScheme, ReturnValue) == 0x000000, "Member 'MordhauInput_GetControlScheme::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetGamepadDeadzoneLimits
// 0x0008 (0x0008 - 0x0000)
struct MordhauInput_GetGamepadDeadzoneLimits final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetGamepadDeadzoneLimits) == 0x000004, "Wrong alignment on MordhauInput_GetGamepadDeadzoneLimits");
static_assert(sizeof(MordhauInput_GetGamepadDeadzoneLimits) == 0x000008, "Wrong size on MordhauInput_GetGamepadDeadzoneLimits");
static_assert(offsetof(MordhauInput_GetGamepadDeadzoneLimits, ReturnValue) == 0x000000, "Member 'MordhauInput_GetGamepadDeadzoneLimits::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetGamepadLeftXDeadzone
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_GetGamepadLeftXDeadzone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetGamepadLeftXDeadzone) == 0x000004, "Wrong alignment on MordhauInput_GetGamepadLeftXDeadzone");
static_assert(sizeof(MordhauInput_GetGamepadLeftXDeadzone) == 0x000004, "Wrong size on MordhauInput_GetGamepadLeftXDeadzone");
static_assert(offsetof(MordhauInput_GetGamepadLeftXDeadzone, ReturnValue) == 0x000000, "Member 'MordhauInput_GetGamepadLeftXDeadzone::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetGamepadLeftXInverted
// 0x0001 (0x0001 - 0x0000)
struct MordhauInput_GetGamepadLeftXInverted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetGamepadLeftXInverted) == 0x000001, "Wrong alignment on MordhauInput_GetGamepadLeftXInverted");
static_assert(sizeof(MordhauInput_GetGamepadLeftXInverted) == 0x000001, "Wrong size on MordhauInput_GetGamepadLeftXInverted");
static_assert(offsetof(MordhauInput_GetGamepadLeftXInverted, ReturnValue) == 0x000000, "Member 'MordhauInput_GetGamepadLeftXInverted::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetGamepadLeftXSensitivity
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_GetGamepadLeftXSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetGamepadLeftXSensitivity) == 0x000004, "Wrong alignment on MordhauInput_GetGamepadLeftXSensitivity");
static_assert(sizeof(MordhauInput_GetGamepadLeftXSensitivity) == 0x000004, "Wrong size on MordhauInput_GetGamepadLeftXSensitivity");
static_assert(offsetof(MordhauInput_GetGamepadLeftXSensitivity, ReturnValue) == 0x000000, "Member 'MordhauInput_GetGamepadLeftXSensitivity::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetGamepadLeftYDeadzone
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_GetGamepadLeftYDeadzone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetGamepadLeftYDeadzone) == 0x000004, "Wrong alignment on MordhauInput_GetGamepadLeftYDeadzone");
static_assert(sizeof(MordhauInput_GetGamepadLeftYDeadzone) == 0x000004, "Wrong size on MordhauInput_GetGamepadLeftYDeadzone");
static_assert(offsetof(MordhauInput_GetGamepadLeftYDeadzone, ReturnValue) == 0x000000, "Member 'MordhauInput_GetGamepadLeftYDeadzone::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetGamepadLeftYInverted
// 0x0001 (0x0001 - 0x0000)
struct MordhauInput_GetGamepadLeftYInverted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetGamepadLeftYInverted) == 0x000001, "Wrong alignment on MordhauInput_GetGamepadLeftYInverted");
static_assert(sizeof(MordhauInput_GetGamepadLeftYInverted) == 0x000001, "Wrong size on MordhauInput_GetGamepadLeftYInverted");
static_assert(offsetof(MordhauInput_GetGamepadLeftYInverted, ReturnValue) == 0x000000, "Member 'MordhauInput_GetGamepadLeftYInverted::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetGamepadLeftYSensitivity
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_GetGamepadLeftYSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetGamepadLeftYSensitivity) == 0x000004, "Wrong alignment on MordhauInput_GetGamepadLeftYSensitivity");
static_assert(sizeof(MordhauInput_GetGamepadLeftYSensitivity) == 0x000004, "Wrong size on MordhauInput_GetGamepadLeftYSensitivity");
static_assert(offsetof(MordhauInput_GetGamepadLeftYSensitivity, ReturnValue) == 0x000000, "Member 'MordhauInput_GetGamepadLeftYSensitivity::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetGamepadRightXDeadzone
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_GetGamepadRightXDeadzone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetGamepadRightXDeadzone) == 0x000004, "Wrong alignment on MordhauInput_GetGamepadRightXDeadzone");
static_assert(sizeof(MordhauInput_GetGamepadRightXDeadzone) == 0x000004, "Wrong size on MordhauInput_GetGamepadRightXDeadzone");
static_assert(offsetof(MordhauInput_GetGamepadRightXDeadzone, ReturnValue) == 0x000000, "Member 'MordhauInput_GetGamepadRightXDeadzone::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetGamepadRightXInverted
// 0x0001 (0x0001 - 0x0000)
struct MordhauInput_GetGamepadRightXInverted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetGamepadRightXInverted) == 0x000001, "Wrong alignment on MordhauInput_GetGamepadRightXInverted");
static_assert(sizeof(MordhauInput_GetGamepadRightXInverted) == 0x000001, "Wrong size on MordhauInput_GetGamepadRightXInverted");
static_assert(offsetof(MordhauInput_GetGamepadRightXInverted, ReturnValue) == 0x000000, "Member 'MordhauInput_GetGamepadRightXInverted::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetGamepadRightXSensitivity
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_GetGamepadRightXSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetGamepadRightXSensitivity) == 0x000004, "Wrong alignment on MordhauInput_GetGamepadRightXSensitivity");
static_assert(sizeof(MordhauInput_GetGamepadRightXSensitivity) == 0x000004, "Wrong size on MordhauInput_GetGamepadRightXSensitivity");
static_assert(offsetof(MordhauInput_GetGamepadRightXSensitivity, ReturnValue) == 0x000000, "Member 'MordhauInput_GetGamepadRightXSensitivity::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetGamepadRightYDeadzone
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_GetGamepadRightYDeadzone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetGamepadRightYDeadzone) == 0x000004, "Wrong alignment on MordhauInput_GetGamepadRightYDeadzone");
static_assert(sizeof(MordhauInput_GetGamepadRightYDeadzone) == 0x000004, "Wrong size on MordhauInput_GetGamepadRightYDeadzone");
static_assert(offsetof(MordhauInput_GetGamepadRightYDeadzone, ReturnValue) == 0x000000, "Member 'MordhauInput_GetGamepadRightYDeadzone::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetGamepadRightYInverted
// 0x0001 (0x0001 - 0x0000)
struct MordhauInput_GetGamepadRightYInverted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetGamepadRightYInverted) == 0x000001, "Wrong alignment on MordhauInput_GetGamepadRightYInverted");
static_assert(sizeof(MordhauInput_GetGamepadRightYInverted) == 0x000001, "Wrong size on MordhauInput_GetGamepadRightYInverted");
static_assert(offsetof(MordhauInput_GetGamepadRightYInverted, ReturnValue) == 0x000000, "Member 'MordhauInput_GetGamepadRightYInverted::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetGamepadRightYSensitivity
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_GetGamepadRightYSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetGamepadRightYSensitivity) == 0x000004, "Wrong alignment on MordhauInput_GetGamepadRightYSensitivity");
static_assert(sizeof(MordhauInput_GetGamepadRightYSensitivity) == 0x000004, "Wrong size on MordhauInput_GetGamepadRightYSensitivity");
static_assert(offsetof(MordhauInput_GetGamepadRightYSensitivity, ReturnValue) == 0x000000, "Member 'MordhauInput_GetGamepadRightYSensitivity::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetGamepadSensitivityLimits
// 0x0008 (0x0008 - 0x0000)
struct MordhauInput_GetGamepadSensitivityLimits final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetGamepadSensitivityLimits) == 0x000004, "Wrong alignment on MordhauInput_GetGamepadSensitivityLimits");
static_assert(sizeof(MordhauInput_GetGamepadSensitivityLimits) == 0x000008, "Wrong size on MordhauInput_GetGamepadSensitivityLimits");
static_assert(offsetof(MordhauInput_GetGamepadSensitivityLimits, ReturnValue) == 0x000000, "Member 'MordhauInput_GetGamepadSensitivityLimits::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetInverseAttackDirectionX
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_GetInverseAttackDirectionX final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetInverseAttackDirectionX) == 0x000004, "Wrong alignment on MordhauInput_GetInverseAttackDirectionX");
static_assert(sizeof(MordhauInput_GetInverseAttackDirectionX) == 0x000004, "Wrong size on MordhauInput_GetInverseAttackDirectionX");
static_assert(offsetof(MordhauInput_GetInverseAttackDirectionX, ReturnValue) == 0x000000, "Member 'MordhauInput_GetInverseAttackDirectionX::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetInverseAttackDirectionY
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_GetInverseAttackDirectionY final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetInverseAttackDirectionY) == 0x000004, "Wrong alignment on MordhauInput_GetInverseAttackDirectionY");
static_assert(sizeof(MordhauInput_GetInverseAttackDirectionY) == 0x000004, "Wrong size on MordhauInput_GetInverseAttackDirectionY");
static_assert(offsetof(MordhauInput_GetInverseAttackDirectionY, ReturnValue) == 0x000000, "Member 'MordhauInput_GetInverseAttackDirectionY::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetMouseSensitivityLimits
// 0x0008 (0x0008 - 0x0000)
struct MordhauInput_GetMouseSensitivityLimits final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetMouseSensitivityLimits) == 0x000004, "Wrong alignment on MordhauInput_GetMouseSensitivityLimits");
static_assert(sizeof(MordhauInput_GetMouseSensitivityLimits) == 0x000008, "Wrong size on MordhauInput_GetMouseSensitivityLimits");
static_assert(offsetof(MordhauInput_GetMouseSensitivityLimits, ReturnValue) == 0x000000, "Member 'MordhauInput_GetMouseSensitivityLimits::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetMouseXInverted
// 0x0001 (0x0001 - 0x0000)
struct MordhauInput_GetMouseXInverted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetMouseXInverted) == 0x000001, "Wrong alignment on MordhauInput_GetMouseXInverted");
static_assert(sizeof(MordhauInput_GetMouseXInverted) == 0x000001, "Wrong size on MordhauInput_GetMouseXInverted");
static_assert(offsetof(MordhauInput_GetMouseXInverted, ReturnValue) == 0x000000, "Member 'MordhauInput_GetMouseXInverted::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetMouseXIsFlipAttackSide
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_GetMouseXIsFlipAttackSide final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetMouseXIsFlipAttackSide) == 0x000004, "Wrong alignment on MordhauInput_GetMouseXIsFlipAttackSide");
static_assert(sizeof(MordhauInput_GetMouseXIsFlipAttackSide) == 0x000004, "Wrong size on MordhauInput_GetMouseXIsFlipAttackSide");
static_assert(offsetof(MordhauInput_GetMouseXIsFlipAttackSide, ReturnValue) == 0x000000, "Member 'MordhauInput_GetMouseXIsFlipAttackSide::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetMouseXSensitivity
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_GetMouseXSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetMouseXSensitivity) == 0x000004, "Wrong alignment on MordhauInput_GetMouseXSensitivity");
static_assert(sizeof(MordhauInput_GetMouseXSensitivity) == 0x000004, "Wrong size on MordhauInput_GetMouseXSensitivity");
static_assert(offsetof(MordhauInput_GetMouseXSensitivity, ReturnValue) == 0x000000, "Member 'MordhauInput_GetMouseXSensitivity::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetMouseYInverted
// 0x0001 (0x0001 - 0x0000)
struct MordhauInput_GetMouseYInverted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetMouseYInverted) == 0x000001, "Wrong alignment on MordhauInput_GetMouseYInverted");
static_assert(sizeof(MordhauInput_GetMouseYInverted) == 0x000001, "Wrong size on MordhauInput_GetMouseYInverted");
static_assert(offsetof(MordhauInput_GetMouseYInverted, ReturnValue) == 0x000000, "Member 'MordhauInput_GetMouseYInverted::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetMouseYSensitivity
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_GetMouseYSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetMouseYSensitivity) == 0x000004, "Wrong alignment on MordhauInput_GetMouseYSensitivity");
static_assert(sizeof(MordhauInput_GetMouseYSensitivity) == 0x000004, "Wrong size on MordhauInput_GetMouseYSensitivity");
static_assert(offsetof(MordhauInput_GetMouseYSensitivity, ReturnValue) == 0x000000, "Member 'MordhauInput_GetMouseYSensitivity::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetToggleCrouch
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_GetToggleCrouch final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetToggleCrouch) == 0x000004, "Wrong alignment on MordhauInput_GetToggleCrouch");
static_assert(sizeof(MordhauInput_GetToggleCrouch) == 0x000004, "Wrong size on MordhauInput_GetToggleCrouch");
static_assert(offsetof(MordhauInput_GetToggleCrouch, ReturnValue) == 0x000000, "Member 'MordhauInput_GetToggleCrouch::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInput.GetToggleSprint
// 0x0004 (0x0004 - 0x0000)
struct MordhauInput_GetToggleSprint final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInput_GetToggleSprint) == 0x000004, "Wrong alignment on MordhauInput_GetToggleSprint");
static_assert(sizeof(MordhauInput_GetToggleSprint) == 0x000004, "Wrong size on MordhauInput_GetToggleSprint");
static_assert(offsetof(MordhauInput_GetToggleSprint, ReturnValue) == 0x000000, "Member 'MordhauInput_GetToggleSprint::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauInteractable.OnInteractionsChanged
// 0x0001 (0x0001 - 0x0000)
struct MordhauInteractable_OnInteractionsChanged final
{
public:
	uint8                                         OldValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInteractable_OnInteractionsChanged) == 0x000001, "Wrong alignment on MordhauInteractable_OnInteractionsChanged");
static_assert(sizeof(MordhauInteractable_OnInteractionsChanged) == 0x000001, "Wrong size on MordhauInteractable_OnInteractionsChanged");
static_assert(offsetof(MordhauInteractable_OnInteractionsChanged, OldValue) == 0x000000, "Member 'MordhauInteractable_OnInteractionsChanged::OldValue' has a wrong offset!");

// Function Mordhau.MordhauInteractable.OnRep_Interactions
// 0x0001 (0x0001 - 0x0000)
struct MordhauInteractable_OnRep_Interactions final
{
public:
	uint8                                         OldValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauInteractable_OnRep_Interactions) == 0x000001, "Wrong alignment on MordhauInteractable_OnRep_Interactions");
static_assert(sizeof(MordhauInteractable_OnRep_Interactions) == 0x000001, "Wrong size on MordhauInteractable_OnRep_Interactions");
static_assert(offsetof(MordhauInteractable_OnRep_Interactions, OldValue) == 0x000000, "Member 'MordhauInteractable_OnRep_Interactions::OldValue' has a wrong offset!");

// Function Mordhau.MordhauMovementComponent.Knockback
// 0x000C (0x000C - 0x0000)
struct MordhauMovementComponent_Knockback final
{
public:
	struct FVector                                Amount;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauMovementComponent_Knockback) == 0x000004, "Wrong alignment on MordhauMovementComponent_Knockback");
static_assert(sizeof(MordhauMovementComponent_Knockback) == 0x00000C, "Wrong size on MordhauMovementComponent_Knockback");
static_assert(offsetof(MordhauMovementComponent_Knockback, Amount) == 0x000000, "Member 'MordhauMovementComponent_Knockback::Amount' has a wrong offset!");

// Function Mordhau.MordhauMovementComponent.OnCharacterLODTick
// 0x0004 (0x0004 - 0x0000)
struct MordhauMovementComponent_OnCharacterLODTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauMovementComponent_OnCharacterLODTick) == 0x000004, "Wrong alignment on MordhauMovementComponent_OnCharacterLODTick");
static_assert(sizeof(MordhauMovementComponent_OnCharacterLODTick) == 0x000004, "Wrong size on MordhauMovementComponent_OnCharacterLODTick");
static_assert(offsetof(MordhauMovementComponent_OnCharacterLODTick, DeltaTime) == 0x000000, "Member 'MordhauMovementComponent_OnCharacterLODTick::DeltaTime' has a wrong offset!");

// Function Mordhau.MordhauMovementComponent.OnInputTypeChange
// 0x0001 (0x0001 - 0x0000)
struct MordhauMovementComponent_OnInputTypeChange final
{
public:
	bool                                          bIsUsingGamepad;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauMovementComponent_OnInputTypeChange) == 0x000001, "Wrong alignment on MordhauMovementComponent_OnInputTypeChange");
static_assert(sizeof(MordhauMovementComponent_OnInputTypeChange) == 0x000001, "Wrong size on MordhauMovementComponent_OnInputTypeChange");
static_assert(offsetof(MordhauMovementComponent_OnInputTypeChange, bIsUsingGamepad) == 0x000000, "Member 'MordhauMovementComponent_OnInputTypeChange::bIsUsingGamepad' has a wrong offset!");

// Function Mordhau.MordhauMovementComponent.GetAccelerationFactor
// 0x0004 (0x0004 - 0x0000)
struct MordhauMovementComponent_GetAccelerationFactor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauMovementComponent_GetAccelerationFactor) == 0x000004, "Wrong alignment on MordhauMovementComponent_GetAccelerationFactor");
static_assert(sizeof(MordhauMovementComponent_GetAccelerationFactor) == 0x000004, "Wrong size on MordhauMovementComponent_GetAccelerationFactor");
static_assert(offsetof(MordhauMovementComponent_GetAccelerationFactor, ReturnValue) == 0x000000, "Member 'MordhauMovementComponent_GetAccelerationFactor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauMovementComponent.GetSpeedFactor
// 0x0008 (0x0008 - 0x0000)
struct MordhauMovementComponent_GetSpeedFactor final
{
public:
	float                                         PartialSprintToSprintWeight;                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauMovementComponent_GetSpeedFactor) == 0x000004, "Wrong alignment on MordhauMovementComponent_GetSpeedFactor");
static_assert(sizeof(MordhauMovementComponent_GetSpeedFactor) == 0x000008, "Wrong size on MordhauMovementComponent_GetSpeedFactor");
static_assert(offsetof(MordhauMovementComponent_GetSpeedFactor, PartialSprintToSprintWeight) == 0x000000, "Member 'MordhauMovementComponent_GetSpeedFactor::PartialSprintToSprintWeight' has a wrong offset!");
static_assert(offsetof(MordhauMovementComponent_GetSpeedFactor, ReturnValue) == 0x000004, "Member 'MordhauMovementComponent_GetSpeedFactor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauMovementComponent.IsInKnockback
// 0x0001 (0x0001 - 0x0000)
struct MordhauMovementComponent_IsInKnockback final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauMovementComponent_IsInKnockback) == 0x000001, "Wrong alignment on MordhauMovementComponent_IsInKnockback");
static_assert(sizeof(MordhauMovementComponent_IsInKnockback) == 0x000001, "Wrong size on MordhauMovementComponent_IsInKnockback");
static_assert(offsetof(MordhauMovementComponent_IsInKnockback, ReturnValue) == 0x000000, "Member 'MordhauMovementComponent_IsInKnockback::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauObjectiveTracker.GetObjectiveInfo
// 0x0060 (0x0060 - 0x0000)
struct MordhauObjectiveTracker_GetObjectiveInfo final
{
public:
	struct FObjective                             Objective;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 Progress;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Goal;                                              // 0x0040(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauObjectiveTracker_GetObjectiveInfo) == 0x000008, "Wrong alignment on MordhauObjectiveTracker_GetObjectiveInfo");
static_assert(sizeof(MordhauObjectiveTracker_GetObjectiveInfo) == 0x000060, "Wrong size on MordhauObjectiveTracker_GetObjectiveInfo");
static_assert(offsetof(MordhauObjectiveTracker_GetObjectiveInfo, Objective) == 0x000000, "Member 'MordhauObjectiveTracker_GetObjectiveInfo::Objective' has a wrong offset!");
static_assert(offsetof(MordhauObjectiveTracker_GetObjectiveInfo, Progress) == 0x000030, "Member 'MordhauObjectiveTracker_GetObjectiveInfo::Progress' has a wrong offset!");
static_assert(offsetof(MordhauObjectiveTracker_GetObjectiveInfo, Goal) == 0x000040, "Member 'MordhauObjectiveTracker_GetObjectiveInfo::Goal' has a wrong offset!");
static_assert(offsetof(MordhauObjectiveTracker_GetObjectiveInfo, ReturnValue) == 0x000050, "Member 'MordhauObjectiveTracker_GetObjectiveInfo::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauObjectiveTracker.OnObjectivesUpdated
// 0x0020 (0x0020 - 0x0000)
struct MordhauObjectiveTracker_OnObjectivesUpdated final
{
public:
	TArray<class FText>                           List;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<bool>                                  Completed;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauObjectiveTracker_OnObjectivesUpdated) == 0x000008, "Wrong alignment on MordhauObjectiveTracker_OnObjectivesUpdated");
static_assert(sizeof(MordhauObjectiveTracker_OnObjectivesUpdated) == 0x000020, "Wrong size on MordhauObjectiveTracker_OnObjectivesUpdated");
static_assert(offsetof(MordhauObjectiveTracker_OnObjectivesUpdated, List) == 0x000000, "Member 'MordhauObjectiveTracker_OnObjectivesUpdated::List' has a wrong offset!");
static_assert(offsetof(MordhauObjectiveTracker_OnObjectivesUpdated, Completed) == 0x000010, "Member 'MordhauObjectiveTracker_OnObjectivesUpdated::Completed' has a wrong offset!");

// Function Mordhau.MordhauObjectiveTracker.GetObjectiveGoal
// 0x0048 (0x0048 - 0x0000)
struct MordhauObjectiveTracker_GetObjectiveGoal final
{
public:
	class AControlPoint*                          ControlPoint;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FObjective                             Objective;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauObjectiveTracker_GetObjectiveGoal) == 0x000008, "Wrong alignment on MordhauObjectiveTracker_GetObjectiveGoal");
static_assert(sizeof(MordhauObjectiveTracker_GetObjectiveGoal) == 0x000048, "Wrong size on MordhauObjectiveTracker_GetObjectiveGoal");
static_assert(offsetof(MordhauObjectiveTracker_GetObjectiveGoal, ControlPoint) == 0x000000, "Member 'MordhauObjectiveTracker_GetObjectiveGoal::ControlPoint' has a wrong offset!");
static_assert(offsetof(MordhauObjectiveTracker_GetObjectiveGoal, Objective) == 0x000008, "Member 'MordhauObjectiveTracker_GetObjectiveGoal::Objective' has a wrong offset!");
static_assert(offsetof(MordhauObjectiveTracker_GetObjectiveGoal, ReturnValue) == 0x000038, "Member 'MordhauObjectiveTracker_GetObjectiveGoal::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauObjectiveTracker.GetObjectiveProgress
// 0x0048 (0x0048 - 0x0000)
struct MordhauObjectiveTracker_GetObjectiveProgress final
{
public:
	class AControlPoint*                          ControlPoint;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FObjective                             Objective;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauObjectiveTracker_GetObjectiveProgress) == 0x000008, "Wrong alignment on MordhauObjectiveTracker_GetObjectiveProgress");
static_assert(sizeof(MordhauObjectiveTracker_GetObjectiveProgress) == 0x000048, "Wrong size on MordhauObjectiveTracker_GetObjectiveProgress");
static_assert(offsetof(MordhauObjectiveTracker_GetObjectiveProgress, ControlPoint) == 0x000000, "Member 'MordhauObjectiveTracker_GetObjectiveProgress::ControlPoint' has a wrong offset!");
static_assert(offsetof(MordhauObjectiveTracker_GetObjectiveProgress, Objective) == 0x000008, "Member 'MordhauObjectiveTracker_GetObjectiveProgress::Objective' has a wrong offset!");
static_assert(offsetof(MordhauObjectiveTracker_GetObjectiveProgress, ReturnValue) == 0x000038, "Member 'MordhauObjectiveTracker_GetObjectiveProgress::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauObjectiveTracker.GetTeam
// 0x0008 (0x0008 - 0x0000)
struct MordhauObjectiveTracker_GetTeam final
{
public:
	int32                                         ViewingTeam;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauObjectiveTracker_GetTeam) == 0x000004, "Wrong alignment on MordhauObjectiveTracker_GetTeam");
static_assert(sizeof(MordhauObjectiveTracker_GetTeam) == 0x000008, "Wrong size on MordhauObjectiveTracker_GetTeam");
static_assert(offsetof(MordhauObjectiveTracker_GetTeam, ViewingTeam) == 0x000000, "Member 'MordhauObjectiveTracker_GetTeam::ViewingTeam' has a wrong offset!");
static_assert(offsetof(MordhauObjectiveTracker_GetTeam, ReturnValue) == 0x000004, "Member 'MordhauObjectiveTracker_GetTeam::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.AddAdmin
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_AddAdmin final
{
public:
	class FString                                 PlayerNameOrPlayFabID;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_AddAdmin) == 0x000008, "Wrong alignment on MordhauPlayerController_AddAdmin");
static_assert(sizeof(MordhauPlayerController_AddAdmin) == 0x000010, "Wrong size on MordhauPlayerController_AddAdmin");
static_assert(offsetof(MordhauPlayerController_AddAdmin, PlayerNameOrPlayFabID) == 0x000000, "Member 'MordhauPlayerController_AddAdmin::PlayerNameOrPlayFabID' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.AddBots
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_AddBots final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_AddBots) == 0x000004, "Wrong alignment on MordhauPlayerController_AddBots");
static_assert(sizeof(MordhauPlayerController_AddBots) == 0x000004, "Wrong size on MordhauPlayerController_AddBots");
static_assert(offsetof(MordhauPlayerController_AddBots, Amount) == 0x000000, "Member 'MordhauPlayerController_AddBots::Amount' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.AddBotsTeam
// 0x0008 (0x0008 - 0x0000)
struct MordhauPlayerController_AddBotsTeam final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Team;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_AddBotsTeam) == 0x000004, "Wrong alignment on MordhauPlayerController_AddBotsTeam");
static_assert(sizeof(MordhauPlayerController_AddBotsTeam) == 0x000008, "Wrong size on MordhauPlayerController_AddBotsTeam");
static_assert(offsetof(MordhauPlayerController_AddBotsTeam, Amount) == 0x000000, "Member 'MordhauPlayerController_AddBotsTeam::Amount' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_AddBotsTeam, Team) == 0x000004, "Member 'MordhauPlayerController_AddBotsTeam::Team' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.AddRandomBots
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_AddRandomBots final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_AddRandomBots) == 0x000004, "Wrong alignment on MordhauPlayerController_AddRandomBots");
static_assert(sizeof(MordhauPlayerController_AddRandomBots) == 0x000004, "Wrong size on MordhauPlayerController_AddRandomBots");
static_assert(offsetof(MordhauPlayerController_AddRandomBots, Amount) == 0x000000, "Member 'MordhauPlayerController_AddRandomBots::Amount' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.AddRandomCharacters
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_AddRandomCharacters final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_AddRandomCharacters) == 0x000004, "Wrong alignment on MordhauPlayerController_AddRandomCharacters");
static_assert(sizeof(MordhauPlayerController_AddRandomCharacters) == 0x000004, "Wrong size on MordhauPlayerController_AddRandomCharacters");
static_assert(offsetof(MordhauPlayerController_AddRandomCharacters, Num) == 0x000000, "Member 'MordhauPlayerController_AddRandomCharacters::Num' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.AdminLogin
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_AdminLogin final
{
public:
	class FString                                 Password;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_AdminLogin) == 0x000008, "Wrong alignment on MordhauPlayerController_AdminLogin");
static_assert(sizeof(MordhauPlayerController_AdminLogin) == 0x000010, "Wrong size on MordhauPlayerController_AdminLogin");
static_assert(offsetof(MordhauPlayerController_AdminLogin, Password) == 0x000000, "Member 'MordhauPlayerController_AdminLogin::Password' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.AreStatsAvailable
// 0x0001 (0x0001 - 0x0000)
struct MordhauPlayerController_AreStatsAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_AreStatsAvailable) == 0x000001, "Wrong alignment on MordhauPlayerController_AreStatsAvailable");
static_assert(sizeof(MordhauPlayerController_AreStatsAvailable) == 0x000001, "Wrong size on MordhauPlayerController_AreStatsAvailable");
static_assert(offsetof(MordhauPlayerController_AreStatsAvailable, ReturnValue) == 0x000000, "Member 'MordhauPlayerController_AreStatsAvailable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.Ban
// 0x0028 (0x0028 - 0x0000)
struct MordhauPlayerController_Ban final
{
public:
	class FString                                 PlayerNameOrPlayFabID;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BanDuration;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BanReason;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_Ban) == 0x000008, "Wrong alignment on MordhauPlayerController_Ban");
static_assert(sizeof(MordhauPlayerController_Ban) == 0x000028, "Wrong size on MordhauPlayerController_Ban");
static_assert(offsetof(MordhauPlayerController_Ban, PlayerNameOrPlayFabID) == 0x000000, "Member 'MordhauPlayerController_Ban::PlayerNameOrPlayFabID' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_Ban, BanDuration) == 0x000010, "Member 'MordhauPlayerController_Ban::BanDuration' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_Ban, BanReason) == 0x000018, "Member 'MordhauPlayerController_Ban::BanReason' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.CanAskForSpawn
// 0x0001 (0x0001 - 0x0000)
struct MordhauPlayerController_CanAskForSpawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_CanAskForSpawn) == 0x000001, "Wrong alignment on MordhauPlayerController_CanAskForSpawn");
static_assert(sizeof(MordhauPlayerController_CanAskForSpawn) == 0x000001, "Wrong size on MordhauPlayerController_CanAskForSpawn");
static_assert(offsetof(MordhauPlayerController_CanAskForSpawn, ReturnValue) == 0x000000, "Member 'MordhauPlayerController_CanAskForSpawn::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ChangeLevel
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_ChangeLevel final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ChangeLevel) == 0x000008, "Wrong alignment on MordhauPlayerController_ChangeLevel");
static_assert(sizeof(MordhauPlayerController_ChangeLevel) == 0x000010, "Wrong size on MordhauPlayerController_ChangeLevel");
static_assert(offsetof(MordhauPlayerController_ChangeLevel, LevelName) == 0x000000, "Member 'MordhauPlayerController_ChangeLevel::LevelName' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ChangeMap
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_ChangeMap final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ChangeMap) == 0x000008, "Wrong alignment on MordhauPlayerController_ChangeMap");
static_assert(sizeof(MordhauPlayerController_ChangeMap) == 0x000010, "Wrong size on MordhauPlayerController_ChangeMap");
static_assert(offsetof(MordhauPlayerController_ChangeMap, MapName) == 0x000000, "Member 'MordhauPlayerController_ChangeMap::MapName' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ChoiceMenu
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_ChoiceMenu final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ChoiceMenu) == 0x000004, "Wrong alignment on MordhauPlayerController_ChoiceMenu");
static_assert(sizeof(MordhauPlayerController_ChoiceMenu) == 0x000004, "Wrong size on MordhauPlayerController_ChoiceMenu");
static_assert(offsetof(MordhauPlayerController_ChoiceMenu, Index_0) == 0x000000, "Member 'MordhauPlayerController_ChoiceMenu::Index_0' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ChoiceMenuOptionSelected
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_ChoiceMenuOptionSelected final
{
public:
	int32                                         Choice;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ChoiceMenuOptionSelected) == 0x000004, "Wrong alignment on MordhauPlayerController_ChoiceMenuOptionSelected");
static_assert(sizeof(MordhauPlayerController_ChoiceMenuOptionSelected) == 0x000004, "Wrong size on MordhauPlayerController_ChoiceMenuOptionSelected");
static_assert(offsetof(MordhauPlayerController_ChoiceMenuOptionSelected, Choice) == 0x000000, "Member 'MordhauPlayerController_ChoiceMenuOptionSelected::Choice' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ClientDrawTracer
// 0x0018 (0x0018 - 0x0000)
struct MordhauPlayerController_ClientDrawTracer final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ClientDrawTracer) == 0x000004, "Wrong alignment on MordhauPlayerController_ClientDrawTracer");
static_assert(sizeof(MordhauPlayerController_ClientDrawTracer) == 0x000018, "Wrong size on MordhauPlayerController_ClientDrawTracer");
static_assert(offsetof(MordhauPlayerController_ClientDrawTracer, Start) == 0x000000, "Member 'MordhauPlayerController_ClientDrawTracer::Start' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ClientDrawTracer, End) == 0x00000C, "Member 'MordhauPlayerController_ClientDrawTracer::End' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ClientMessageBP
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_ClientMessageBP final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ClientMessageBP) == 0x000008, "Wrong alignment on MordhauPlayerController_ClientMessageBP");
static_assert(sizeof(MordhauPlayerController_ClientMessageBP) == 0x000010, "Wrong size on MordhauPlayerController_ClientMessageBP");
static_assert(offsetof(MordhauPlayerController_ClientMessageBP, String) == 0x000000, "Member 'MordhauPlayerController_ClientMessageBP::String' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ClientReceiveMessage
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_ClientReceiveMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ClientReceiveMessage) == 0x000008, "Wrong alignment on MordhauPlayerController_ClientReceiveMessage");
static_assert(sizeof(MordhauPlayerController_ClientReceiveMessage) == 0x000010, "Wrong size on MordhauPlayerController_ClientReceiveMessage");
static_assert(offsetof(MordhauPlayerController_ClientReceiveMessage, Message) == 0x000000, "Member 'MordhauPlayerController_ClientReceiveMessage::Message' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ClientReceiveScore
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_ClientReceiveScore final
{
public:
	uint8                                         ReasonAndParam;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         ScoreAmount;                                       // 0x0002(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauPlayerState*                    AssociatedPlayer;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ClientReceiveScore) == 0x000008, "Wrong alignment on MordhauPlayerController_ClientReceiveScore");
static_assert(sizeof(MordhauPlayerController_ClientReceiveScore) == 0x000010, "Wrong size on MordhauPlayerController_ClientReceiveScore");
static_assert(offsetof(MordhauPlayerController_ClientReceiveScore, ReasonAndParam) == 0x000000, "Member 'MordhauPlayerController_ClientReceiveScore::ReasonAndParam' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ClientReceiveScore, ScoreAmount) == 0x000002, "Member 'MordhauPlayerController_ClientReceiveScore::ScoreAmount' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ClientReceiveScore, AssociatedPlayer) == 0x000008, "Member 'MordhauPlayerController_ClientReceiveScore::AssociatedPlayer' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ClientReceiveScoreBP
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_ClientReceiveScoreBP final
{
public:
	EScoreFeedReason                              Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReasonParam;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScoreAmount;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMordhauPlayerState*                    AssociatedPlayer;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ClientReceiveScoreBP) == 0x000008, "Wrong alignment on MordhauPlayerController_ClientReceiveScoreBP");
static_assert(sizeof(MordhauPlayerController_ClientReceiveScoreBP) == 0x000010, "Wrong size on MordhauPlayerController_ClientReceiveScoreBP");
static_assert(offsetof(MordhauPlayerController_ClientReceiveScoreBP, Reason) == 0x000000, "Member 'MordhauPlayerController_ClientReceiveScoreBP::Reason' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ClientReceiveScoreBP, ReasonParam) == 0x000001, "Member 'MordhauPlayerController_ClientReceiveScoreBP::ReasonParam' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ClientReceiveScoreBP, ScoreAmount) == 0x000004, "Member 'MordhauPlayerController_ClientReceiveScoreBP::ScoreAmount' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ClientReceiveScoreBP, AssociatedPlayer) == 0x000008, "Member 'MordhauPlayerController_ClientReceiveScoreBP::AssociatedPlayer' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ClientReceiveScoreNoState
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_ClientReceiveScoreNoState final
{
public:
	uint8                                         ReasonAndParam;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         ScoreAmount;                                       // 0x0002(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ClientReceiveScoreNoState) == 0x000002, "Wrong alignment on MordhauPlayerController_ClientReceiveScoreNoState");
static_assert(sizeof(MordhauPlayerController_ClientReceiveScoreNoState) == 0x000004, "Wrong size on MordhauPlayerController_ClientReceiveScoreNoState");
static_assert(offsetof(MordhauPlayerController_ClientReceiveScoreNoState, ReasonAndParam) == 0x000000, "Member 'MordhauPlayerController_ClientReceiveScoreNoState::ReasonAndParam' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ClientReceiveScoreNoState, ScoreAmount) == 0x000002, "Member 'MordhauPlayerController_ClientReceiveScoreNoState::ScoreAmount' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ClientReceiveSphericalHitboxes
// 0x0028 (0x0028 - 0x0000)
struct MordhauPlayerController_ClientReceiveSphericalHitboxes final
{
public:
	TArray<struct FVector>                        Locations;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                WeaponTraceStart;                                  // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WeaponTraceEnd;                                    // 0x001C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ClientReceiveSphericalHitboxes) == 0x000008, "Wrong alignment on MordhauPlayerController_ClientReceiveSphericalHitboxes");
static_assert(sizeof(MordhauPlayerController_ClientReceiveSphericalHitboxes) == 0x000028, "Wrong size on MordhauPlayerController_ClientReceiveSphericalHitboxes");
static_assert(offsetof(MordhauPlayerController_ClientReceiveSphericalHitboxes, Locations) == 0x000000, "Member 'MordhauPlayerController_ClientReceiveSphericalHitboxes::Locations' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ClientReceiveSphericalHitboxes, WeaponTraceStart) == 0x000010, "Member 'MordhauPlayerController_ClientReceiveSphericalHitboxes::WeaponTraceStart' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ClientReceiveSphericalHitboxes, WeaponTraceEnd) == 0x00001C, "Member 'MordhauPlayerController_ClientReceiveSphericalHitboxes::WeaponTraceEnd' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ClientSetControlAndPawnRotation
// 0x0018 (0x0018 - 0x0000)
struct MordhauPlayerController_ClientSetControlAndPawnRotation final
{
public:
	class APawn*                                  APawn;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewRotation;                                       // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauPlayerController_ClientSetControlAndPawnRotation) == 0x000008, "Wrong alignment on MordhauPlayerController_ClientSetControlAndPawnRotation");
static_assert(sizeof(MordhauPlayerController_ClientSetControlAndPawnRotation) == 0x000018, "Wrong size on MordhauPlayerController_ClientSetControlAndPawnRotation");
static_assert(offsetof(MordhauPlayerController_ClientSetControlAndPawnRotation, APawn) == 0x000000, "Member 'MordhauPlayerController_ClientSetControlAndPawnRotation::APawn' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ClientSetControlAndPawnRotation, NewRotation) == 0x000008, "Member 'MordhauPlayerController_ClientSetControlAndPawnRotation::NewRotation' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ClientSetFlags
// 0x0020 (0x0020 - 0x0000)
struct MordhauPlayerController_ClientSetFlags final
{
public:
	class FString                                 InMyFlags;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAdminFlag>                     InAdminFlags;                                      // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ClientSetFlags) == 0x000008, "Wrong alignment on MordhauPlayerController_ClientSetFlags");
static_assert(sizeof(MordhauPlayerController_ClientSetFlags) == 0x000020, "Wrong size on MordhauPlayerController_ClientSetFlags");
static_assert(offsetof(MordhauPlayerController_ClientSetFlags, InMyFlags) == 0x000000, "Member 'MordhauPlayerController_ClientSetFlags::InMyFlags' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ClientSetFlags, InAdminFlags) == 0x000010, "Member 'MordhauPlayerController_ClientSetFlags::InAdminFlags' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ClientSetMapVoteCounts
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_ClientSetMapVoteCounts final
{
public:
	TArray<uint8>                                 InMapVoteCounts;                                   // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ClientSetMapVoteCounts) == 0x000008, "Wrong alignment on MordhauPlayerController_ClientSetMapVoteCounts");
static_assert(sizeof(MordhauPlayerController_ClientSetMapVoteCounts) == 0x000010, "Wrong size on MordhauPlayerController_ClientSetMapVoteCounts");
static_assert(offsetof(MordhauPlayerController_ClientSetMapVoteCounts, InMapVoteCounts) == 0x000000, "Member 'MordhauPlayerController_ClientSetMapVoteCounts::InMapVoteCounts' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ClientSetMapVoteMaps
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_ClientSetMapVoteMaps final
{
public:
	TArray<class FString>                         InMapVoteMaps;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ClientSetMapVoteMaps) == 0x000008, "Wrong alignment on MordhauPlayerController_ClientSetMapVoteMaps");
static_assert(sizeof(MordhauPlayerController_ClientSetMapVoteMaps) == 0x000010, "Wrong size on MordhauPlayerController_ClientSetMapVoteMaps");
static_assert(offsetof(MordhauPlayerController_ClientSetMapVoteMaps, InMapVoteMaps) == 0x000000, "Member 'MordhauPlayerController_ClientSetMapVoteMaps::InMapVoteMaps' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ClientSetPlayFabMatch
// 0x0060 (0x0060 - 0x0000)
struct MordhauPlayerController_ClientSetPlayFabMatch final
{
public:
	struct FPlayFabMatch                          InMatch;                                           // 0x0000(0x0060)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ClientSetPlayFabMatch) == 0x000008, "Wrong alignment on MordhauPlayerController_ClientSetPlayFabMatch");
static_assert(sizeof(MordhauPlayerController_ClientSetPlayFabMatch) == 0x000060, "Wrong size on MordhauPlayerController_ClientSetPlayFabMatch");
static_assert(offsetof(MordhauPlayerController_ClientSetPlayFabMatch, InMatch) == 0x000000, "Member 'MordhauPlayerController_ClientSetPlayFabMatch::InMatch' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ClientSetServerInfo
// 0x0028 (0x0028 - 0x0000)
struct MordhauPlayerController_ClientSetServerInfo final
{
public:
	struct FBasicServerInfo                       ServerInfo;                                        // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ClientSetServerInfo) == 0x000008, "Wrong alignment on MordhauPlayerController_ClientSetServerInfo");
static_assert(sizeof(MordhauPlayerController_ClientSetServerInfo) == 0x000028, "Wrong size on MordhauPlayerController_ClientSetServerInfo");
static_assert(offsetof(MordhauPlayerController_ClientSetServerInfo, ServerInfo) == 0x000000, "Member 'MordhauPlayerController_ClientSetServerInfo::ServerInfo' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ClientSetServerStats
// 0x0018 (0x0018 - 0x0000)
struct MordhauPlayerController_ClientSetServerStats final
{
public:
	struct FServerStats                           InServerStats;                                     // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ClientSetServerStats) == 0x000004, "Wrong alignment on MordhauPlayerController_ClientSetServerStats");
static_assert(sizeof(MordhauPlayerController_ClientSetServerStats) == 0x000018, "Wrong size on MordhauPlayerController_ClientSetServerStats");
static_assert(offsetof(MordhauPlayerController_ClientSetServerStats, InServerStats) == 0x000000, "Member 'MordhauPlayerController_ClientSetServerStats::InServerStats' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ClientWasKicked_Implementation
// 0x0018 (0x0018 - 0x0000)
struct MordhauPlayerController_ClientWasKicked_Implementation final
{
public:
	class FText                                   KickReason;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ClientWasKicked_Implementation) == 0x000008, "Wrong alignment on MordhauPlayerController_ClientWasKicked_Implementation");
static_assert(sizeof(MordhauPlayerController_ClientWasKicked_Implementation) == 0x000018, "Wrong size on MordhauPlayerController_ClientWasKicked_Implementation");
static_assert(offsetof(MordhauPlayerController_ClientWasKicked_Implementation, KickReason) == 0x000000, "Member 'MordhauPlayerController_ClientWasKicked_Implementation::KickReason' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ComputePlayerRank
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_ComputePlayerRank final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ComputePlayerRank) == 0x000004, "Wrong alignment on MordhauPlayerController_ComputePlayerRank");
static_assert(sizeof(MordhauPlayerController_ComputePlayerRank) == 0x000004, "Wrong size on MordhauPlayerController_ComputePlayerRank");
static_assert(offsetof(MordhauPlayerController_ComputePlayerRank, ReturnValue) == 0x000000, "Member 'MordhauPlayerController_ComputePlayerRank::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.CopyID
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_CopyID final
{
public:
	class FString                                 UniqueId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_CopyID) == 0x000008, "Wrong alignment on MordhauPlayerController_CopyID");
static_assert(sizeof(MordhauPlayerController_CopyID) == 0x000010, "Wrong size on MordhauPlayerController_CopyID");
static_assert(offsetof(MordhauPlayerController_CopyID, UniqueId) == 0x000000, "Member 'MordhauPlayerController_CopyID::UniqueId' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.CopyName
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_CopyName final
{
public:
	class FString                                 UniqueId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_CopyName) == 0x000008, "Wrong alignment on MordhauPlayerController_CopyName");
static_assert(sizeof(MordhauPlayerController_CopyName) == 0x000010, "Wrong size on MordhauPlayerController_CopyName");
static_assert(offsetof(MordhauPlayerController_CopyName, UniqueId) == 0x000000, "Member 'MordhauPlayerController_CopyName::UniqueId' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.DisplayAnnouncement
// 0x0028 (0x0028 - 0x0000)
struct MordhauPlayerController_DisplayAnnouncement final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Subtext;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauPlayerController_DisplayAnnouncement) == 0x000008, "Wrong alignment on MordhauPlayerController_DisplayAnnouncement");
static_assert(sizeof(MordhauPlayerController_DisplayAnnouncement) == 0x000028, "Wrong size on MordhauPlayerController_DisplayAnnouncement");
static_assert(offsetof(MordhauPlayerController_DisplayAnnouncement, Text) == 0x000000, "Member 'MordhauPlayerController_DisplayAnnouncement::Text' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_DisplayAnnouncement, Subtext) == 0x000010, "Member 'MordhauPlayerController_DisplayAnnouncement::Subtext' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_DisplayAnnouncement, Duration) == 0x000020, "Member 'MordhauPlayerController_DisplayAnnouncement::Duration' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.DisplayMessage
// 0x0028 (0x0028 - 0x0000)
struct MordhauPlayerController_DisplayMessage final
{
public:
	class APlayerState*                           SenderPlayerState;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 S;                                                 // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Type;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MsgLifeTime;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauPlayerController_DisplayMessage) == 0x000008, "Wrong alignment on MordhauPlayerController_DisplayMessage");
static_assert(sizeof(MordhauPlayerController_DisplayMessage) == 0x000028, "Wrong size on MordhauPlayerController_DisplayMessage");
static_assert(offsetof(MordhauPlayerController_DisplayMessage, SenderPlayerState) == 0x000000, "Member 'MordhauPlayerController_DisplayMessage::SenderPlayerState' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_DisplayMessage, S) == 0x000008, "Member 'MordhauPlayerController_DisplayMessage::S' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_DisplayMessage, Type) == 0x000018, "Member 'MordhauPlayerController_DisplayMessage::Type' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_DisplayMessage, MsgLifeTime) == 0x000020, "Member 'MordhauPlayerController_DisplayMessage::MsgLifeTime' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.EquipmentCommand
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_EquipmentCommand final
{
public:
	int32                                         Command;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_EquipmentCommand) == 0x000004, "Wrong alignment on MordhauPlayerController_EquipmentCommand");
static_assert(sizeof(MordhauPlayerController_EquipmentCommand) == 0x000004, "Wrong size on MordhauPlayerController_EquipmentCommand");
static_assert(offsetof(MordhauPlayerController_EquipmentCommand, Command) == 0x000000, "Member 'MordhauPlayerController_EquipmentCommand::Command' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.GetAnglingAngle
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_GetAnglingAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_GetAnglingAngle) == 0x000004, "Wrong alignment on MordhauPlayerController_GetAnglingAngle");
static_assert(sizeof(MordhauPlayerController_GetAnglingAngle) == 0x000004, "Wrong size on MordhauPlayerController_GetAnglingAngle");
static_assert(offsetof(MordhauPlayerController_GetAnglingAngle, ReturnValue) == 0x000000, "Member 'MordhauPlayerController_GetAnglingAngle::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.GetAnglingVector
// 0x0008 (0x0008 - 0x0000)
struct MordhauPlayerController_GetAnglingVector final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_GetAnglingVector) == 0x000004, "Wrong alignment on MordhauPlayerController_GetAnglingVector");
static_assert(sizeof(MordhauPlayerController_GetAnglingVector) == 0x000008, "Wrong size on MordhauPlayerController_GetAnglingVector");
static_assert(offsetof(MordhauPlayerController_GetAnglingVector, ReturnValue) == 0x000000, "Member 'MordhauPlayerController_GetAnglingVector::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.GetDefaultEquipmentCustomizationFor
// 0x0040 (0x0040 - 0x0000)
struct MordhauPlayerController_GetDefaultEquipmentCustomizationFor final
{
public:
	TSubclassOf<class AMordhauEquipment>          ForEquipmentClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEquipmentCustomization                OutCustomization;                                  // 0x0008(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauPlayerController_GetDefaultEquipmentCustomizationFor) == 0x000008, "Wrong alignment on MordhauPlayerController_GetDefaultEquipmentCustomizationFor");
static_assert(sizeof(MordhauPlayerController_GetDefaultEquipmentCustomizationFor) == 0x000040, "Wrong size on MordhauPlayerController_GetDefaultEquipmentCustomizationFor");
static_assert(offsetof(MordhauPlayerController_GetDefaultEquipmentCustomizationFor, ForEquipmentClass) == 0x000000, "Member 'MordhauPlayerController_GetDefaultEquipmentCustomizationFor::ForEquipmentClass' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_GetDefaultEquipmentCustomizationFor, OutCustomization) == 0x000008, "Member 'MordhauPlayerController_GetDefaultEquipmentCustomizationFor::OutCustomization' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_GetDefaultEquipmentCustomizationFor, ReturnValue) == 0x000038, "Member 'MordhauPlayerController_GetDefaultEquipmentCustomizationFor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.GetDefaultTierCustomizationForSlot
// 0x0060 (0x0060 - 0x0000)
struct MordhauPlayerController_GetDefaultTierCustomizationForSlot final
{
public:
	EMainWearableSlot                             MainSlot;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ArmorTier;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EWearableSlot, struct FWearableCustomization> OutMap;                                            // 0x0008(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauPlayerController_GetDefaultTierCustomizationForSlot) == 0x000008, "Wrong alignment on MordhauPlayerController_GetDefaultTierCustomizationForSlot");
static_assert(sizeof(MordhauPlayerController_GetDefaultTierCustomizationForSlot) == 0x000060, "Wrong size on MordhauPlayerController_GetDefaultTierCustomizationForSlot");
static_assert(offsetof(MordhauPlayerController_GetDefaultTierCustomizationForSlot, MainSlot) == 0x000000, "Member 'MordhauPlayerController_GetDefaultTierCustomizationForSlot::MainSlot' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_GetDefaultTierCustomizationForSlot, ArmorTier) == 0x000001, "Member 'MordhauPlayerController_GetDefaultTierCustomizationForSlot::ArmorTier' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_GetDefaultTierCustomizationForSlot, OutMap) == 0x000008, "Member 'MordhauPlayerController_GetDefaultTierCustomizationForSlot::OutMap' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_GetDefaultTierCustomizationForSlot, ReturnValue) == 0x000058, "Member 'MordhauPlayerController_GetDefaultTierCustomizationForSlot::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.GetLastControlledCharacter
// 0x0008 (0x0008 - 0x0000)
struct MordhauPlayerController_GetLastControlledCharacter final
{
public:
	class AMordhauCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_GetLastControlledCharacter) == 0x000008, "Wrong alignment on MordhauPlayerController_GetLastControlledCharacter");
static_assert(sizeof(MordhauPlayerController_GetLastControlledCharacter) == 0x000008, "Wrong size on MordhauPlayerController_GetLastControlledCharacter");
static_assert(offsetof(MordhauPlayerController_GetLastControlledCharacter, ReturnValue) == 0x000000, "Member 'MordhauPlayerController_GetLastControlledCharacter::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.GetNextViewablePlayerNonAuth
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_GetNextViewablePlayerNonAuth final
{
public:
	bool                                          bReverse;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyOwnTeam;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAdvancedCharacter*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_GetNextViewablePlayerNonAuth) == 0x000008, "Wrong alignment on MordhauPlayerController_GetNextViewablePlayerNonAuth");
static_assert(sizeof(MordhauPlayerController_GetNextViewablePlayerNonAuth) == 0x000010, "Wrong size on MordhauPlayerController_GetNextViewablePlayerNonAuth");
static_assert(offsetof(MordhauPlayerController_GetNextViewablePlayerNonAuth, bReverse) == 0x000000, "Member 'MordhauPlayerController_GetNextViewablePlayerNonAuth::bReverse' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_GetNextViewablePlayerNonAuth, bOnlyOwnTeam) == 0x000001, "Member 'MordhauPlayerController_GetNextViewablePlayerNonAuth::bOnlyOwnTeam' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_GetNextViewablePlayerNonAuth, ReturnValue) == 0x000008, "Member 'MordhauPlayerController_GetNextViewablePlayerNonAuth::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.GetPlayFabId
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_GetPlayFabId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_GetPlayFabId) == 0x000008, "Wrong alignment on MordhauPlayerController_GetPlayFabId");
static_assert(sizeof(MordhauPlayerController_GetPlayFabId) == 0x000010, "Wrong size on MordhauPlayerController_GetPlayFabId");
static_assert(offsetof(MordhauPlayerController_GetPlayFabId, ReturnValue) == 0x000000, "Member 'MordhauPlayerController_GetPlayFabId::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.GiveClientScoreBP
// 0x0008 (0x0008 - 0x0000)
struct MordhauPlayerController_GiveClientScoreBP final
{
public:
	EScoreFeedReason                              Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScoreAmount;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_GiveClientScoreBP) == 0x000004, "Wrong alignment on MordhauPlayerController_GiveClientScoreBP");
static_assert(sizeof(MordhauPlayerController_GiveClientScoreBP) == 0x000008, "Wrong size on MordhauPlayerController_GiveClientScoreBP");
static_assert(offsetof(MordhauPlayerController_GiveClientScoreBP, Reason) == 0x000000, "Member 'MordhauPlayerController_GiveClientScoreBP::Reason' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_GiveClientScoreBP, ScoreAmount) == 0x000004, "Member 'MordhauPlayerController_GiveClientScoreBP::ScoreAmount' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.IsAllowedClient
// 0x0018 (0x0018 - 0x0000)
struct MordhauPlayerController_IsAllowedClient final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauPlayerController_IsAllowedClient) == 0x000008, "Wrong alignment on MordhauPlayerController_IsAllowedClient");
static_assert(sizeof(MordhauPlayerController_IsAllowedClient) == 0x000018, "Wrong size on MordhauPlayerController_IsAllowedClient");
static_assert(offsetof(MordhauPlayerController_IsAllowedClient, Command) == 0x000000, "Member 'MordhauPlayerController_IsAllowedClient::Command' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_IsAllowedClient, ReturnValue) == 0x000010, "Member 'MordhauPlayerController_IsAllowedClient::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.IsAllowedServer
// 0x0018 (0x0018 - 0x0000)
struct MordhauPlayerController_IsAllowedServer final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauPlayerController_IsAllowedServer) == 0x000008, "Wrong alignment on MordhauPlayerController_IsAllowedServer");
static_assert(sizeof(MordhauPlayerController_IsAllowedServer) == 0x000018, "Wrong size on MordhauPlayerController_IsAllowedServer");
static_assert(offsetof(MordhauPlayerController_IsAllowedServer, Command) == 0x000000, "Member 'MordhauPlayerController_IsAllowedServer::Command' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_IsAllowedServer, ReturnValue) == 0x000010, "Member 'MordhauPlayerController_IsAllowedServer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.IsAuthenticated
// 0x0001 (0x0001 - 0x0000)
struct MordhauPlayerController_IsAuthenticated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_IsAuthenticated) == 0x000001, "Wrong alignment on MordhauPlayerController_IsAuthenticated");
static_assert(sizeof(MordhauPlayerController_IsAuthenticated) == 0x000001, "Wrong size on MordhauPlayerController_IsAuthenticated");
static_assert(offsetof(MordhauPlayerController_IsAuthenticated, ReturnValue) == 0x000000, "Member 'MordhauPlayerController_IsAuthenticated::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.IsAuthenticating
// 0x0001 (0x0001 - 0x0000)
struct MordhauPlayerController_IsAuthenticating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_IsAuthenticating) == 0x000001, "Wrong alignment on MordhauPlayerController_IsAuthenticating");
static_assert(sizeof(MordhauPlayerController_IsAuthenticating) == 0x000001, "Wrong size on MordhauPlayerController_IsAuthenticating");
static_assert(offsetof(MordhauPlayerController_IsAuthenticating, ReturnValue) == 0x000000, "Member 'MordhauPlayerController_IsAuthenticating::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.IsConsoleCommandRegistered
// 0x0018 (0x0018 - 0x0000)
struct MordhauPlayerController_IsConsoleCommandRegistered final
{
public:
	class FString                                 CommandName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauPlayerController_IsConsoleCommandRegistered) == 0x000008, "Wrong alignment on MordhauPlayerController_IsConsoleCommandRegistered");
static_assert(sizeof(MordhauPlayerController_IsConsoleCommandRegistered) == 0x000018, "Wrong size on MordhauPlayerController_IsConsoleCommandRegistered");
static_assert(offsetof(MordhauPlayerController_IsConsoleCommandRegistered, CommandName) == 0x000000, "Member 'MordhauPlayerController_IsConsoleCommandRegistered::CommandName' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_IsConsoleCommandRegistered, ReturnValue) == 0x000010, "Member 'MordhauPlayerController_IsConsoleCommandRegistered::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.IsConsoleOpen
// 0x0001 (0x0001 - 0x0000)
struct MordhauPlayerController_IsConsoleOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_IsConsoleOpen) == 0x000001, "Wrong alignment on MordhauPlayerController_IsConsoleOpen");
static_assert(sizeof(MordhauPlayerController_IsConsoleOpen) == 0x000001, "Wrong size on MordhauPlayerController_IsConsoleOpen");
static_assert(offsetof(MordhauPlayerController_IsConsoleOpen, ReturnValue) == 0x000000, "Member 'MordhauPlayerController_IsConsoleOpen::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.IsInventoryAvailable
// 0x0001 (0x0001 - 0x0000)
struct MordhauPlayerController_IsInventoryAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_IsInventoryAvailable) == 0x000001, "Wrong alignment on MordhauPlayerController_IsInventoryAvailable");
static_assert(sizeof(MordhauPlayerController_IsInventoryAvailable) == 0x000001, "Wrong size on MordhauPlayerController_IsInventoryAvailable");
static_assert(offsetof(MordhauPlayerController_IsInventoryAvailable, ReturnValue) == 0x000000, "Member 'MordhauPlayerController_IsInventoryAvailable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.IsSessionTicketAvailable
// 0x0001 (0x0001 - 0x0000)
struct MordhauPlayerController_IsSessionTicketAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_IsSessionTicketAvailable) == 0x000001, "Wrong alignment on MordhauPlayerController_IsSessionTicketAvailable");
static_assert(sizeof(MordhauPlayerController_IsSessionTicketAvailable) == 0x000001, "Wrong size on MordhauPlayerController_IsSessionTicketAvailable");
static_assert(offsetof(MordhauPlayerController_IsSessionTicketAvailable, ReturnValue) == 0x000000, "Member 'MordhauPlayerController_IsSessionTicketAvailable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.Kick
// 0x0020 (0x0020 - 0x0000)
struct MordhauPlayerController_Kick final
{
public:
	class FString                                 PlayerNameOrPlayFabID;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KickReason;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_Kick) == 0x000008, "Wrong alignment on MordhauPlayerController_Kick");
static_assert(sizeof(MordhauPlayerController_Kick) == 0x000020, "Wrong size on MordhauPlayerController_Kick");
static_assert(offsetof(MordhauPlayerController_Kick, PlayerNameOrPlayFabID) == 0x000000, "Member 'MordhauPlayerController_Kick::PlayerNameOrPlayFabID' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_Kick, KickReason) == 0x000010, "Member 'MordhauPlayerController_Kick::KickReason' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.LookUp
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_LookUp final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_LookUp) == 0x000004, "Wrong alignment on MordhauPlayerController_LookUp");
static_assert(sizeof(MordhauPlayerController_LookUp) == 0x000004, "Wrong size on MordhauPlayerController_LookUp");
static_assert(offsetof(MordhauPlayerController_LookUp, Value) == 0x000000, "Member 'MordhauPlayerController_LookUp::Value' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.LookupPlayer
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_LookupPlayer final
{
public:
	class FString                                 UniqueId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_LookupPlayer) == 0x000008, "Wrong alignment on MordhauPlayerController_LookupPlayer");
static_assert(sizeof(MordhauPlayerController_LookupPlayer) == 0x000010, "Wrong size on MordhauPlayerController_LookupPlayer");
static_assert(offsetof(MordhauPlayerController_LookupPlayer, UniqueId) == 0x000000, "Member 'MordhauPlayerController_LookupPlayer::UniqueId' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.MountPak
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_MountPak final
{
public:
	class FString                                 PakPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_MountPak) == 0x000008, "Wrong alignment on MordhauPlayerController_MountPak");
static_assert(sizeof(MordhauPlayerController_MountPak) == 0x000010, "Wrong size on MordhauPlayerController_MountPak");
static_assert(offsetof(MordhauPlayerController_MountPak, PakPath) == 0x000000, "Member 'MordhauPlayerController_MountPak::PakPath' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.Mute
// 0x0018 (0x0018 - 0x0000)
struct MordhauPlayerController_Mute final
{
public:
	class FString                                 PlayerNameOrPlayFabID;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MuteDuration;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauPlayerController_Mute) == 0x000008, "Wrong alignment on MordhauPlayerController_Mute");
static_assert(sizeof(MordhauPlayerController_Mute) == 0x000018, "Wrong size on MordhauPlayerController_Mute");
static_assert(offsetof(MordhauPlayerController_Mute, PlayerNameOrPlayFabID) == 0x000000, "Member 'MordhauPlayerController_Mute::PlayerNameOrPlayFabID' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_Mute, MuteDuration) == 0x000010, "Member 'MordhauPlayerController_Mute::MuteDuration' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.OnActionFailed
// 0x0008 (0x0008 - 0x0000)
struct MordhauPlayerController_OnActionFailed final
{
public:
	class FName                                   Reason;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_OnActionFailed) == 0x000004, "Wrong alignment on MordhauPlayerController_OnActionFailed");
static_assert(sizeof(MordhauPlayerController_OnActionFailed) == 0x000008, "Wrong size on MordhauPlayerController_OnActionFailed");
static_assert(offsetof(MordhauPlayerController_OnActionFailed, Reason) == 0x000000, "Member 'MordhauPlayerController_OnActionFailed::Reason' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.OnAddRandomBots
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_OnAddRandomBots final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_OnAddRandomBots) == 0x000004, "Wrong alignment on MordhauPlayerController_OnAddRandomBots");
static_assert(sizeof(MordhauPlayerController_OnAddRandomBots) == 0x000004, "Wrong size on MordhauPlayerController_OnAddRandomBots");
static_assert(offsetof(MordhauPlayerController_OnAddRandomBots, Num) == 0x000000, "Member 'MordhauPlayerController_OnAddRandomBots::Num' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.OnAfterPossess
// 0x0008 (0x0008 - 0x0000)
struct MordhauPlayerController_OnAfterPossess final
{
public:
	class APawn*                                  APawn;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_OnAfterPossess) == 0x000008, "Wrong alignment on MordhauPlayerController_OnAfterPossess");
static_assert(sizeof(MordhauPlayerController_OnAfterPossess) == 0x000008, "Wrong size on MordhauPlayerController_OnAfterPossess");
static_assert(offsetof(MordhauPlayerController_OnAfterPossess, APawn) == 0x000000, "Member 'MordhauPlayerController_OnAfterPossess::APawn' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.OnAmmoChanged
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_OnAmmoChanged final
{
public:
	class AMordhauEquipment*                      Equipment;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmmoDifference;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauPlayerController_OnAmmoChanged) == 0x000008, "Wrong alignment on MordhauPlayerController_OnAmmoChanged");
static_assert(sizeof(MordhauPlayerController_OnAmmoChanged) == 0x000010, "Wrong size on MordhauPlayerController_OnAmmoChanged");
static_assert(offsetof(MordhauPlayerController_OnAmmoChanged, Equipment) == 0x000000, "Member 'MordhauPlayerController_OnAmmoChanged::Equipment' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_OnAmmoChanged, AmmoDifference) == 0x000008, "Member 'MordhauPlayerController_OnAmmoChanged::AmmoDifference' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.OnGetPlayFabIDsFromPlatformIDsComplete
// 0x0090 (0x0090 - 0x0000)
struct MordhauPlayerController_OnGetPlayFabIDsFromPlatformIDsComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayFabApiError                       Error;                                             // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            PlayFabIds;                                        // 0x0040(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_OnGetPlayFabIDsFromPlatformIDsComplete) == 0x000008, "Wrong alignment on MordhauPlayerController_OnGetPlayFabIDsFromPlatformIDsComplete");
static_assert(sizeof(MordhauPlayerController_OnGetPlayFabIDsFromPlatformIDsComplete) == 0x000090, "Wrong size on MordhauPlayerController_OnGetPlayFabIDsFromPlatformIDsComplete");
static_assert(offsetof(MordhauPlayerController_OnGetPlayFabIDsFromPlatformIDsComplete, bWasSuccessful) == 0x000000, "Member 'MordhauPlayerController_OnGetPlayFabIDsFromPlatformIDsComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_OnGetPlayFabIDsFromPlatformIDsComplete, Error) == 0x000008, "Member 'MordhauPlayerController_OnGetPlayFabIDsFromPlatformIDsComplete::Error' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_OnGetPlayFabIDsFromPlatformIDsComplete, PlayFabIds) == 0x000040, "Member 'MordhauPlayerController_OnGetPlayFabIDsFromPlatformIDsComplete::PlayFabIds' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.OnGetPlayFabPlayerComplete
// 0x00B0 (0x00B0 - 0x0000)
struct MordhauPlayerController_OnGetPlayFabPlayerComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayFabApiError                       Error;                                             // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabPlayer                         PlayFabPlayer;                                     // 0x0050(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_OnGetPlayFabPlayerComplete) == 0x000008, "Wrong alignment on MordhauPlayerController_OnGetPlayFabPlayerComplete");
static_assert(sizeof(MordhauPlayerController_OnGetPlayFabPlayerComplete) == 0x0000B0, "Wrong size on MordhauPlayerController_OnGetPlayFabPlayerComplete");
static_assert(offsetof(MordhauPlayerController_OnGetPlayFabPlayerComplete, bWasSuccessful) == 0x000000, "Member 'MordhauPlayerController_OnGetPlayFabPlayerComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_OnGetPlayFabPlayerComplete, Error) == 0x000008, "Member 'MordhauPlayerController_OnGetPlayFabPlayerComplete::Error' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_OnGetPlayFabPlayerComplete, PlayFabId) == 0x000040, "Member 'MordhauPlayerController_OnGetPlayFabPlayerComplete::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_OnGetPlayFabPlayerComplete, PlayFabPlayer) == 0x000050, "Member 'MordhauPlayerController_OnGetPlayFabPlayerComplete::PlayFabPlayer' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.OnHighlightEnd
// 0x0008 (0x0008 - 0x0000)
struct MordhauPlayerController_OnHighlightEnd final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_OnHighlightEnd) == 0x000008, "Wrong alignment on MordhauPlayerController_OnHighlightEnd");
static_assert(sizeof(MordhauPlayerController_OnHighlightEnd) == 0x000008, "Wrong size on MordhauPlayerController_OnHighlightEnd");
static_assert(offsetof(MordhauPlayerController_OnHighlightEnd, Actor) == 0x000000, "Member 'MordhauPlayerController_OnHighlightEnd::Actor' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.OnHighlightStart
// 0x0008 (0x0008 - 0x0000)
struct MordhauPlayerController_OnHighlightStart final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_OnHighlightStart) == 0x000008, "Wrong alignment on MordhauPlayerController_OnHighlightStart");
static_assert(sizeof(MordhauPlayerController_OnHighlightStart) == 0x000008, "Wrong size on MordhauPlayerController_OnHighlightStart");
static_assert(offsetof(MordhauPlayerController_OnHighlightStart, Actor) == 0x000000, "Member 'MordhauPlayerController_OnHighlightStart::Actor' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.OnInventoryItemsUnlocked
// 0x0018 (0x0018 - 0x0000)
struct MordhauPlayerController_OnInventoryItemsUnlocked final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FItemStack>                     ItemStacks;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_OnInventoryItemsUnlocked) == 0x000008, "Wrong alignment on MordhauPlayerController_OnInventoryItemsUnlocked");
static_assert(sizeof(MordhauPlayerController_OnInventoryItemsUnlocked) == 0x000018, "Wrong size on MordhauPlayerController_OnInventoryItemsUnlocked");
static_assert(offsetof(MordhauPlayerController_OnInventoryItemsUnlocked, bWasSuccessful) == 0x000000, "Member 'MordhauPlayerController_OnInventoryItemsUnlocked::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_OnInventoryItemsUnlocked, ItemStacks) == 0x000008, "Member 'MordhauPlayerController_OnInventoryItemsUnlocked::ItemStacks' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.OnMordhauCharacterSpawned
// 0x0008 (0x0008 - 0x0000)
struct MordhauPlayerController_OnMordhauCharacterSpawned final
{
public:
	class AMordhauCharacter*                      SpawnedCharacter;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_OnMordhauCharacterSpawned) == 0x000008, "Wrong alignment on MordhauPlayerController_OnMordhauCharacterSpawned");
static_assert(sizeof(MordhauPlayerController_OnMordhauCharacterSpawned) == 0x000008, "Wrong size on MordhauPlayerController_OnMordhauCharacterSpawned");
static_assert(offsetof(MordhauPlayerController_OnMordhauCharacterSpawned, SpawnedCharacter) == 0x000000, "Member 'MordhauPlayerController_OnMordhauCharacterSpawned::SpawnedCharacter' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.OnPlayFabLoginComplete
// 0x0050 (0x0050 - 0x0000)
struct MordhauPlayerController_OnPlayFabLoginComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayFabApiError                       Error;                                             // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_OnPlayFabLoginComplete) == 0x000008, "Wrong alignment on MordhauPlayerController_OnPlayFabLoginComplete");
static_assert(sizeof(MordhauPlayerController_OnPlayFabLoginComplete) == 0x000050, "Wrong size on MordhauPlayerController_OnPlayFabLoginComplete");
static_assert(offsetof(MordhauPlayerController_OnPlayFabLoginComplete, bWasSuccessful) == 0x000000, "Member 'MordhauPlayerController_OnPlayFabLoginComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_OnPlayFabLoginComplete, Error) == 0x000008, "Member 'MordhauPlayerController_OnPlayFabLoginComplete::Error' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_OnPlayFabLoginComplete, PlayFabId) == 0x000040, "Member 'MordhauPlayerController_OnPlayFabLoginComplete::PlayFabId' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.OnReceivedAssistScore
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_OnReceivedAssistScore final
{
public:
	float                                         Percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      Killed;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_OnReceivedAssistScore) == 0x000008, "Wrong alignment on MordhauPlayerController_OnReceivedAssistScore");
static_assert(sizeof(MordhauPlayerController_OnReceivedAssistScore) == 0x000010, "Wrong size on MordhauPlayerController_OnReceivedAssistScore");
static_assert(offsetof(MordhauPlayerController_OnReceivedAssistScore, Percentage) == 0x000000, "Member 'MordhauPlayerController_OnReceivedAssistScore::Percentage' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_OnReceivedAssistScore, Killed) == 0x000008, "Member 'MordhauPlayerController_OnReceivedAssistScore::Killed' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.OnReceivedKillScore
// 0x0008 (0x0008 - 0x0000)
struct MordhauPlayerController_OnReceivedKillScore final
{
public:
	class AMordhauCharacter*                      Killed;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_OnReceivedKillScore) == 0x000008, "Wrong alignment on MordhauPlayerController_OnReceivedKillScore");
static_assert(sizeof(MordhauPlayerController_OnReceivedKillScore) == 0x000008, "Wrong size on MordhauPlayerController_OnReceivedKillScore");
static_assert(offsetof(MordhauPlayerController_OnReceivedKillScore, Killed) == 0x000000, "Member 'MordhauPlayerController_OnReceivedKillScore::Killed' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.OnRequestVoteKick
// 0x0008 (0x0008 - 0x0000)
struct MordhauPlayerController_OnRequestVoteKick final
{
public:
	class AMordhauPlayerState*                    TargetPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_OnRequestVoteKick) == 0x000008, "Wrong alignment on MordhauPlayerController_OnRequestVoteKick");
static_assert(sizeof(MordhauPlayerController_OnRequestVoteKick) == 0x000008, "Wrong size on MordhauPlayerController_OnRequestVoteKick");
static_assert(offsetof(MordhauPlayerController_OnRequestVoteKick, TargetPlayer) == 0x000000, "Member 'MordhauPlayerController_OnRequestVoteKick::TargetPlayer' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.OnSpectatorAction
// 0x0001 (0x0001 - 0x0000)
struct MordhauPlayerController_OnSpectatorAction final
{
public:
	uint8                                         Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_OnSpectatorAction) == 0x000001, "Wrong alignment on MordhauPlayerController_OnSpectatorAction");
static_assert(sizeof(MordhauPlayerController_OnSpectatorAction) == 0x000001, "Wrong size on MordhauPlayerController_OnSpectatorAction");
static_assert(offsetof(MordhauPlayerController_OnSpectatorAction, Action) == 0x000000, "Member 'MordhauPlayerController_OnSpectatorAction::Action' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.OnSpectatorCmd
// 0x0020 (0x0020 - 0x0000)
struct MordhauPlayerController_OnSpectatorCmd final
{
public:
	class FString                                 Cmd;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Param;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_OnSpectatorCmd) == 0x000008, "Wrong alignment on MordhauPlayerController_OnSpectatorCmd");
static_assert(sizeof(MordhauPlayerController_OnSpectatorCmd) == 0x000020, "Wrong size on MordhauPlayerController_OnSpectatorCmd");
static_assert(offsetof(MordhauPlayerController_OnSpectatorCmd, Cmd) == 0x000000, "Member 'MordhauPlayerController_OnSpectatorCmd::Cmd' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_OnSpectatorCmd, Param) == 0x000010, "Member 'MordhauPlayerController_OnSpectatorCmd::Param' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.PlayerStatus
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_PlayerStatus final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_PlayerStatus) == 0x000008, "Wrong alignment on MordhauPlayerController_PlayerStatus");
static_assert(sizeof(MordhauPlayerController_PlayerStatus) == 0x000010, "Wrong size on MordhauPlayerController_PlayerStatus");
static_assert(offsetof(MordhauPlayerController_PlayerStatus, PlayFabId) == 0x000000, "Member 'MordhauPlayerController_PlayerStatus::PlayFabId' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ProcessChatCommand
// 0x0030 (0x0030 - 0x0000)
struct MordhauPlayerController_ProcessChatCommand final
{
public:
	class FString                                 Prefix;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Command;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Args;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ProcessChatCommand) == 0x000008, "Wrong alignment on MordhauPlayerController_ProcessChatCommand");
static_assert(sizeof(MordhauPlayerController_ProcessChatCommand) == 0x000030, "Wrong size on MordhauPlayerController_ProcessChatCommand");
static_assert(offsetof(MordhauPlayerController_ProcessChatCommand, Prefix) == 0x000000, "Member 'MordhauPlayerController_ProcessChatCommand::Prefix' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ProcessChatCommand, Command) == 0x000010, "Member 'MordhauPlayerController_ProcessChatCommand::Command' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ProcessChatCommand, Args) == 0x000020, "Member 'MordhauPlayerController_ProcessChatCommand::Args' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.QuickReportPlayer
// 0x0058 (0x0058 - 0x0000)
struct MordhauPlayerController_QuickReportPlayer final
{
public:
	EPlayerReportType                             PlayerReportType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Platform;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReporterId;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OffenderId;                                        // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerId;                                          // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_QuickReportPlayer) == 0x000008, "Wrong alignment on MordhauPlayerController_QuickReportPlayer");
static_assert(sizeof(MordhauPlayerController_QuickReportPlayer) == 0x000058, "Wrong size on MordhauPlayerController_QuickReportPlayer");
static_assert(offsetof(MordhauPlayerController_QuickReportPlayer, PlayerReportType) == 0x000000, "Member 'MordhauPlayerController_QuickReportPlayer::PlayerReportType' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_QuickReportPlayer, Platform) == 0x000008, "Member 'MordhauPlayerController_QuickReportPlayer::Platform' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_QuickReportPlayer, ReporterId) == 0x000018, "Member 'MordhauPlayerController_QuickReportPlayer::ReporterId' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_QuickReportPlayer, OffenderId) == 0x000028, "Member 'MordhauPlayerController_QuickReportPlayer::OffenderId' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_QuickReportPlayer, ErrorMessage) == 0x000038, "Member 'MordhauPlayerController_QuickReportPlayer::ErrorMessage' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_QuickReportPlayer, ServerId) == 0x000048, "Member 'MordhauPlayerController_QuickReportPlayer::ServerId' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ReceiveServerRestrictionInfo
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_ReceiveServerRestrictionInfo final
{
public:
	struct FServerRestrictionInfo                 Info;                                              // 0x0000(0x0010)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ReceiveServerRestrictionInfo) == 0x000004, "Wrong alignment on MordhauPlayerController_ReceiveServerRestrictionInfo");
static_assert(sizeof(MordhauPlayerController_ReceiveServerRestrictionInfo) == 0x000010, "Wrong size on MordhauPlayerController_ReceiveServerRestrictionInfo");
static_assert(offsetof(MordhauPlayerController_ReceiveServerRestrictionInfo, Info) == 0x000000, "Member 'MordhauPlayerController_ReceiveServerRestrictionInfo::Info' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.RegisterAnglingXInput
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_RegisterAnglingXInput final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_RegisterAnglingXInput) == 0x000004, "Wrong alignment on MordhauPlayerController_RegisterAnglingXInput");
static_assert(sizeof(MordhauPlayerController_RegisterAnglingXInput) == 0x000004, "Wrong size on MordhauPlayerController_RegisterAnglingXInput");
static_assert(offsetof(MordhauPlayerController_RegisterAnglingXInput, Value) == 0x000000, "Member 'MordhauPlayerController_RegisterAnglingXInput::Value' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.RegisterAnglingYInput
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_RegisterAnglingYInput final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_RegisterAnglingYInput) == 0x000004, "Wrong alignment on MordhauPlayerController_RegisterAnglingYInput");
static_assert(sizeof(MordhauPlayerController_RegisterAnglingYInput) == 0x000004, "Wrong size on MordhauPlayerController_RegisterAnglingYInput");
static_assert(offsetof(MordhauPlayerController_RegisterAnglingYInput, Value) == 0x000000, "Member 'MordhauPlayerController_RegisterAnglingYInput::Value' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.RegisterConsoleCommand
// 0x0030 (0x0030 - 0x0000)
struct MordhauPlayerController_RegisterConsoleCommand final
{
public:
	struct FMordhauConsoleCommand                 ConsoleCommand;                                    // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_RegisterConsoleCommand) == 0x000008, "Wrong alignment on MordhauPlayerController_RegisterConsoleCommand");
static_assert(sizeof(MordhauPlayerController_RegisterConsoleCommand) == 0x000030, "Wrong size on MordhauPlayerController_RegisterConsoleCommand");
static_assert(offsetof(MordhauPlayerController_RegisterConsoleCommand, ConsoleCommand) == 0x000000, "Member 'MordhauPlayerController_RegisterConsoleCommand::ConsoleCommand' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.RemoveAdmin
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_RemoveAdmin final
{
public:
	class FString                                 PlayerNameOrPlayFabID;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_RemoveAdmin) == 0x000008, "Wrong alignment on MordhauPlayerController_RemoveAdmin");
static_assert(sizeof(MordhauPlayerController_RemoveAdmin) == 0x000010, "Wrong size on MordhauPlayerController_RemoveAdmin");
static_assert(offsetof(MordhauPlayerController_RemoveAdmin, PlayerNameOrPlayFabID) == 0x000000, "Member 'MordhauPlayerController_RemoveAdmin::PlayerNameOrPlayFabID' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.RemoveBots
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_RemoveBots final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_RemoveBots) == 0x000004, "Wrong alignment on MordhauPlayerController_RemoveBots");
static_assert(sizeof(MordhauPlayerController_RemoveBots) == 0x000004, "Wrong size on MordhauPlayerController_RemoveBots");
static_assert(offsetof(MordhauPlayerController_RemoveBots, Amount) == 0x000000, "Member 'MordhauPlayerController_RemoveBots::Amount' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.RemoveBotsTeam
// 0x0008 (0x0008 - 0x0000)
struct MordhauPlayerController_RemoveBotsTeam final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Team;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_RemoveBotsTeam) == 0x000004, "Wrong alignment on MordhauPlayerController_RemoveBotsTeam");
static_assert(sizeof(MordhauPlayerController_RemoveBotsTeam) == 0x000008, "Wrong size on MordhauPlayerController_RemoveBotsTeam");
static_assert(offsetof(MordhauPlayerController_RemoveBotsTeam, Amount) == 0x000000, "Member 'MordhauPlayerController_RemoveBotsTeam::Amount' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_RemoveBotsTeam, Team) == 0x000004, "Member 'MordhauPlayerController_RemoveBotsTeam::Team' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ReportPlayer
// 0x0030 (0x0030 - 0x0000)
struct MordhauPlayerController_ReportPlayer final
{
public:
	class FString                                 ReporteePlayFabID;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReportType;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScreenshotFilename;                                // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ReportPlayer) == 0x000008, "Wrong alignment on MordhauPlayerController_ReportPlayer");
static_assert(sizeof(MordhauPlayerController_ReportPlayer) == 0x000030, "Wrong size on MordhauPlayerController_ReportPlayer");
static_assert(offsetof(MordhauPlayerController_ReportPlayer, ReporteePlayFabID) == 0x000000, "Member 'MordhauPlayerController_ReportPlayer::ReporteePlayFabID' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ReportPlayer, ReportType) == 0x000010, "Member 'MordhauPlayerController_ReportPlayer::ReportType' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ReportPlayer, ScreenshotFilename) == 0x000020, "Member 'MordhauPlayerController_ReportPlayer::ScreenshotFilename' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.RequestQuickReportPlayer
// 0x0058 (0x0058 - 0x0000)
struct MordhauPlayerController_RequestQuickReportPlayer final
{
public:
	EPlayerReportType                             PlayerReportType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Platform;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReporterId;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OffenderId;                                        // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerId;                                          // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_RequestQuickReportPlayer) == 0x000008, "Wrong alignment on MordhauPlayerController_RequestQuickReportPlayer");
static_assert(sizeof(MordhauPlayerController_RequestQuickReportPlayer) == 0x000058, "Wrong size on MordhauPlayerController_RequestQuickReportPlayer");
static_assert(offsetof(MordhauPlayerController_RequestQuickReportPlayer, PlayerReportType) == 0x000000, "Member 'MordhauPlayerController_RequestQuickReportPlayer::PlayerReportType' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_RequestQuickReportPlayer, Platform) == 0x000008, "Member 'MordhauPlayerController_RequestQuickReportPlayer::Platform' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_RequestQuickReportPlayer, ReporterId) == 0x000018, "Member 'MordhauPlayerController_RequestQuickReportPlayer::ReporterId' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_RequestQuickReportPlayer, OffenderId) == 0x000028, "Member 'MordhauPlayerController_RequestQuickReportPlayer::OffenderId' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_RequestQuickReportPlayer, ErrorMessage) == 0x000038, "Member 'MordhauPlayerController_RequestQuickReportPlayer::ErrorMessage' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_RequestQuickReportPlayer, ServerId) == 0x000048, "Member 'MordhauPlayerController_RequestQuickReportPlayer::ServerId' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.RequestReportPlayer
// 0x0030 (0x0030 - 0x0000)
struct MordhauPlayerController_RequestReportPlayer final
{
public:
	class FString                                 ReporteePlayFabID;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReportType;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Screenshot;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_RequestReportPlayer) == 0x000008, "Wrong alignment on MordhauPlayerController_RequestReportPlayer");
static_assert(sizeof(MordhauPlayerController_RequestReportPlayer) == 0x000030, "Wrong size on MordhauPlayerController_RequestReportPlayer");
static_assert(offsetof(MordhauPlayerController_RequestReportPlayer, ReporteePlayFabID) == 0x000000, "Member 'MordhauPlayerController_RequestReportPlayer::ReporteePlayFabID' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_RequestReportPlayer, ReportType) == 0x000010, "Member 'MordhauPlayerController_RequestReportPlayer::ReportType' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_RequestReportPlayer, Screenshot) == 0x000020, "Member 'MordhauPlayerController_RequestReportPlayer::Screenshot' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerAddAdmin
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_ServerAddAdmin final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerAddAdmin) == 0x000008, "Wrong alignment on MordhauPlayerController_ServerAddAdmin");
static_assert(sizeof(MordhauPlayerController_ServerAddAdmin) == 0x000010, "Wrong size on MordhauPlayerController_ServerAddAdmin");
static_assert(offsetof(MordhauPlayerController_ServerAddAdmin, PlayFabId) == 0x000000, "Member 'MordhauPlayerController_ServerAddAdmin::PlayFabId' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerAddBots
// 0x0008 (0x0008 - 0x0000)
struct MordhauPlayerController_ServerAddBots final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Team;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerAddBots) == 0x000004, "Wrong alignment on MordhauPlayerController_ServerAddBots");
static_assert(sizeof(MordhauPlayerController_ServerAddBots) == 0x000008, "Wrong size on MordhauPlayerController_ServerAddBots");
static_assert(offsetof(MordhauPlayerController_ServerAddBots, Amount) == 0x000000, "Member 'MordhauPlayerController_ServerAddBots::Amount' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ServerAddBots, Team) == 0x000004, "Member 'MordhauPlayerController_ServerAddBots::Team' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerAdminLogin
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_ServerAdminLogin final
{
public:
	class FString                                 Password;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerAdminLogin) == 0x000008, "Wrong alignment on MordhauPlayerController_ServerAdminLogin");
static_assert(sizeof(MordhauPlayerController_ServerAdminLogin) == 0x000010, "Wrong size on MordhauPlayerController_ServerAdminLogin");
static_assert(offsetof(MordhauPlayerController_ServerAdminLogin, Password) == 0x000000, "Member 'MordhauPlayerController_ServerAdminLogin::Password' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerBanPlayer
// 0x0028 (0x0028 - 0x0000)
struct MordhauPlayerController_ServerBanPlayer final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BanDuration;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BanReason;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerBanPlayer) == 0x000008, "Wrong alignment on MordhauPlayerController_ServerBanPlayer");
static_assert(sizeof(MordhauPlayerController_ServerBanPlayer) == 0x000028, "Wrong size on MordhauPlayerController_ServerBanPlayer");
static_assert(offsetof(MordhauPlayerController_ServerBanPlayer, PlayFabId) == 0x000000, "Member 'MordhauPlayerController_ServerBanPlayer::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ServerBanPlayer, BanDuration) == 0x000010, "Member 'MordhauPlayerController_ServerBanPlayer::BanDuration' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ServerBanPlayer, BanReason) == 0x000018, "Member 'MordhauPlayerController_ServerBanPlayer::BanReason' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerChangeLevel
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_ServerChangeLevel final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerChangeLevel) == 0x000008, "Wrong alignment on MordhauPlayerController_ServerChangeLevel");
static_assert(sizeof(MordhauPlayerController_ServerChangeLevel) == 0x000010, "Wrong size on MordhauPlayerController_ServerChangeLevel");
static_assert(offsetof(MordhauPlayerController_ServerChangeLevel, LevelName) == 0x000000, "Member 'MordhauPlayerController_ServerChangeLevel::LevelName' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerChatMutePlayer
// 0x0018 (0x0018 - 0x0000)
struct MordhauPlayerController_ServerChatMutePlayer final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MuteDuration;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauPlayerController_ServerChatMutePlayer) == 0x000008, "Wrong alignment on MordhauPlayerController_ServerChatMutePlayer");
static_assert(sizeof(MordhauPlayerController_ServerChatMutePlayer) == 0x000018, "Wrong size on MordhauPlayerController_ServerChatMutePlayer");
static_assert(offsetof(MordhauPlayerController_ServerChatMutePlayer, PlayFabId) == 0x000000, "Member 'MordhauPlayerController_ServerChatMutePlayer::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ServerChatMutePlayer, MuteDuration) == 0x000010, "Member 'MordhauPlayerController_ServerChatMutePlayer::MuteDuration' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerChatUnmutePlayer
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_ServerChatUnmutePlayer final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerChatUnmutePlayer) == 0x000008, "Wrong alignment on MordhauPlayerController_ServerChatUnmutePlayer");
static_assert(sizeof(MordhauPlayerController_ServerChatUnmutePlayer) == 0x000010, "Wrong size on MordhauPlayerController_ServerChatUnmutePlayer");
static_assert(offsetof(MordhauPlayerController_ServerChatUnmutePlayer, PlayFabId) == 0x000000, "Member 'MordhauPlayerController_ServerChatUnmutePlayer::PlayFabId' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerHasPassedCheck
// 0x0001 (0x0001 - 0x0000)
struct MordhauPlayerController_ServerHasPassedCheck final
{
public:
	uint8                                         Param;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerHasPassedCheck) == 0x000001, "Wrong alignment on MordhauPlayerController_ServerHasPassedCheck");
static_assert(sizeof(MordhauPlayerController_ServerHasPassedCheck) == 0x000001, "Wrong size on MordhauPlayerController_ServerHasPassedCheck");
static_assert(offsetof(MordhauPlayerController_ServerHasPassedCheck, Param) == 0x000000, "Member 'MordhauPlayerController_ServerHasPassedCheck::Param' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerKickPlayer
// 0x0020 (0x0020 - 0x0000)
struct MordhauPlayerController_ServerKickPlayer final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KickReason;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerKickPlayer) == 0x000008, "Wrong alignment on MordhauPlayerController_ServerKickPlayer");
static_assert(sizeof(MordhauPlayerController_ServerKickPlayer) == 0x000020, "Wrong size on MordhauPlayerController_ServerKickPlayer");
static_assert(offsetof(MordhauPlayerController_ServerKickPlayer, PlayFabId) == 0x000000, "Member 'MordhauPlayerController_ServerKickPlayer::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ServerKickPlayer, KickReason) == 0x000010, "Member 'MordhauPlayerController_ServerKickPlayer::KickReason' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerPlayerStatus
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_ServerPlayerStatus final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerPlayerStatus) == 0x000008, "Wrong alignment on MordhauPlayerController_ServerPlayerStatus");
static_assert(sizeof(MordhauPlayerController_ServerPlayerStatus) == 0x000010, "Wrong size on MordhauPlayerController_ServerPlayerStatus");
static_assert(offsetof(MordhauPlayerController_ServerPlayerStatus, PlayFabId) == 0x000000, "Member 'MordhauPlayerController_ServerPlayerStatus::PlayFabId' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerRemoveAdmin
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_ServerRemoveAdmin final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerRemoveAdmin) == 0x000008, "Wrong alignment on MordhauPlayerController_ServerRemoveAdmin");
static_assert(sizeof(MordhauPlayerController_ServerRemoveAdmin) == 0x000010, "Wrong size on MordhauPlayerController_ServerRemoveAdmin");
static_assert(offsetof(MordhauPlayerController_ServerRemoveAdmin, PlayFabId) == 0x000000, "Member 'MordhauPlayerController_ServerRemoveAdmin::PlayFabId' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerRemoveBots
// 0x0008 (0x0008 - 0x0000)
struct MordhauPlayerController_ServerRemoveBots final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Team;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerRemoveBots) == 0x000004, "Wrong alignment on MordhauPlayerController_ServerRemoveBots");
static_assert(sizeof(MordhauPlayerController_ServerRemoveBots) == 0x000008, "Wrong size on MordhauPlayerController_ServerRemoveBots");
static_assert(offsetof(MordhauPlayerController_ServerRemoveBots, Amount) == 0x000000, "Member 'MordhauPlayerController_ServerRemoveBots::Amount' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ServerRemoveBots, Team) == 0x000004, "Member 'MordhauPlayerController_ServerRemoveBots::Team' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerRequestAuthTraces
// 0x0001 (0x0001 - 0x0000)
struct MordhauPlayerController_ServerRequestAuthTraces final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerRequestAuthTraces) == 0x000001, "Wrong alignment on MordhauPlayerController_ServerRequestAuthTraces");
static_assert(sizeof(MordhauPlayerController_ServerRequestAuthTraces) == 0x000001, "Wrong size on MordhauPlayerController_ServerRequestAuthTraces");
static_assert(offsetof(MordhauPlayerController_ServerRequestAuthTraces, bEnabled) == 0x000000, "Member 'MordhauPlayerController_ServerRequestAuthTraces::bEnabled' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerRequestSetAppearanceCustomization
// 0x0028 (0x0028 - 0x0000)
struct MordhauPlayerController_ServerRequestSetAppearanceCustomization final
{
public:
	struct FAppearanceCustomization               NewCharacterAppearance;                            // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerRequestSetAppearanceCustomization) == 0x000008, "Wrong alignment on MordhauPlayerController_ServerRequestSetAppearanceCustomization");
static_assert(sizeof(MordhauPlayerController_ServerRequestSetAppearanceCustomization) == 0x000028, "Wrong size on MordhauPlayerController_ServerRequestSetAppearanceCustomization");
static_assert(offsetof(MordhauPlayerController_ServerRequestSetAppearanceCustomization, NewCharacterAppearance) == 0x000000, "Member 'MordhauPlayerController_ServerRequestSetAppearanceCustomization::NewCharacterAppearance' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerRequestSetDefaultCharacterEquipment
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_ServerRequestSetDefaultCharacterEquipment final
{
public:
	TArray<struct FEquipmentCustomization>        Equip;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerRequestSetDefaultCharacterEquipment) == 0x000008, "Wrong alignment on MordhauPlayerController_ServerRequestSetDefaultCharacterEquipment");
static_assert(sizeof(MordhauPlayerController_ServerRequestSetDefaultCharacterEquipment) == 0x000010, "Wrong size on MordhauPlayerController_ServerRequestSetDefaultCharacterEquipment");
static_assert(offsetof(MordhauPlayerController_ServerRequestSetDefaultCharacterEquipment, Equip) == 0x000000, "Member 'MordhauPlayerController_ServerRequestSetDefaultCharacterEquipment::Equip' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerRequestSetDefaultCharacterTiers
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_ServerRequestSetDefaultCharacterTiers final
{
public:
	TArray<struct FCharacterGearCustomization>    Tiers;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerRequestSetDefaultCharacterTiers) == 0x000008, "Wrong alignment on MordhauPlayerController_ServerRequestSetDefaultCharacterTiers");
static_assert(sizeof(MordhauPlayerController_ServerRequestSetDefaultCharacterTiers) == 0x000010, "Wrong size on MordhauPlayerController_ServerRequestSetDefaultCharacterTiers");
static_assert(offsetof(MordhauPlayerController_ServerRequestSetDefaultCharacterTiers, Tiers) == 0x000000, "Member 'MordhauPlayerController_ServerRequestSetDefaultCharacterTiers::Tiers' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerRequestSetDefaultProfile
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_ServerRequestSetDefaultProfile final
{
public:
	int32                                         NewDefaultProfile;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerRequestSetDefaultProfile) == 0x000004, "Wrong alignment on MordhauPlayerController_ServerRequestSetDefaultProfile");
static_assert(sizeof(MordhauPlayerController_ServerRequestSetDefaultProfile) == 0x000004, "Wrong size on MordhauPlayerController_ServerRequestSetDefaultProfile");
static_assert(offsetof(MordhauPlayerController_ServerRequestSetDefaultProfile, NewDefaultProfile) == 0x000000, "Member 'MordhauPlayerController_ServerRequestSetDefaultProfile::NewDefaultProfile' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerRequestSetFaceCustomization
// 0x0030 (0x0030 - 0x0000)
struct MordhauPlayerController_ServerRequestSetFaceCustomization final
{
public:
	struct FFaceCustomization                     NewCharacterFace;                                  // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerRequestSetFaceCustomization) == 0x000008, "Wrong alignment on MordhauPlayerController_ServerRequestSetFaceCustomization");
static_assert(sizeof(MordhauPlayerController_ServerRequestSetFaceCustomization) == 0x000030, "Wrong size on MordhauPlayerController_ServerRequestSetFaceCustomization");
static_assert(offsetof(MordhauPlayerController_ServerRequestSetFaceCustomization, NewCharacterFace) == 0x000000, "Member 'MordhauPlayerController_ServerRequestSetFaceCustomization::NewCharacterFace' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerRequestSetGearCustomization
// 0x0020 (0x0020 - 0x0000)
struct MordhauPlayerController_ServerRequestSetGearCustomization final
{
public:
	struct FCharacterGearCustomization            NewCharacterGear;                                  // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerRequestSetGearCustomization) == 0x000008, "Wrong alignment on MordhauPlayerController_ServerRequestSetGearCustomization");
static_assert(sizeof(MordhauPlayerController_ServerRequestSetGearCustomization) == 0x000020, "Wrong size on MordhauPlayerController_ServerRequestSetGearCustomization");
static_assert(offsetof(MordhauPlayerController_ServerRequestSetGearCustomization, NewCharacterGear) == 0x000000, "Member 'MordhauPlayerController_ServerRequestSetGearCustomization::NewCharacterGear' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerRequestSetSkillsCustomization
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_ServerRequestSetSkillsCustomization final
{
public:
	struct FSkillsCustomization                   NewCharacterSkills;                                // 0x0000(0x0004)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerRequestSetSkillsCustomization) == 0x000004, "Wrong alignment on MordhauPlayerController_ServerRequestSetSkillsCustomization");
static_assert(sizeof(MordhauPlayerController_ServerRequestSetSkillsCustomization) == 0x000004, "Wrong size on MordhauPlayerController_ServerRequestSetSkillsCustomization");
static_assert(offsetof(MordhauPlayerController_ServerRequestSetSkillsCustomization, NewCharacterSkills) == 0x000000, "Member 'MordhauPlayerController_ServerRequestSetSkillsCustomization::NewCharacterSkills' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerRequestSetTeam
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_ServerRequestSetTeam final
{
public:
	int32                                         NewTeam;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerRequestSetTeam) == 0x000004, "Wrong alignment on MordhauPlayerController_ServerRequestSetTeam");
static_assert(sizeof(MordhauPlayerController_ServerRequestSetTeam) == 0x000004, "Wrong size on MordhauPlayerController_ServerRequestSetTeam");
static_assert(offsetof(MordhauPlayerController_ServerRequestSetTeam, NewTeam) == 0x000000, "Member 'MordhauPlayerController_ServerRequestSetTeam::NewTeam' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerSetBadge
// 0x0001 (0x0001 - 0x0000)
struct MordhauPlayerController_ServerSetBadge final
{
public:
	uint8                                         NewBadge;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerSetBadge) == 0x000001, "Wrong alignment on MordhauPlayerController_ServerSetBadge");
static_assert(sizeof(MordhauPlayerController_ServerSetBadge) == 0x000001, "Wrong size on MordhauPlayerController_ServerSetBadge");
static_assert(offsetof(MordhauPlayerController_ServerSetBadge, NewBadge) == 0x000000, "Member 'MordhauPlayerController_ServerSetBadge::NewBadge' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerSetFriendlyNetSkipOffset
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_ServerSetFriendlyNetSkipOffset final
{
public:
	int32                                         NewFriendlyNetSkipOffset;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerSetFriendlyNetSkipOffset) == 0x000004, "Wrong alignment on MordhauPlayerController_ServerSetFriendlyNetSkipOffset");
static_assert(sizeof(MordhauPlayerController_ServerSetFriendlyNetSkipOffset) == 0x000004, "Wrong size on MordhauPlayerController_ServerSetFriendlyNetSkipOffset");
static_assert(offsetof(MordhauPlayerController_ServerSetFriendlyNetSkipOffset, NewFriendlyNetSkipOffset) == 0x000000, "Member 'MordhauPlayerController_ServerSetFriendlyNetSkipOffset::NewFriendlyNetSkipOffset' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerSetLevelDisplayType
// 0x0001 (0x0001 - 0x0000)
struct MordhauPlayerController_ServerSetLevelDisplayType final
{
public:
	uint8                                         NewLevelDisplayType;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerSetLevelDisplayType) == 0x000001, "Wrong alignment on MordhauPlayerController_ServerSetLevelDisplayType");
static_assert(sizeof(MordhauPlayerController_ServerSetLevelDisplayType) == 0x000001, "Wrong size on MordhauPlayerController_ServerSetLevelDisplayType");
static_assert(offsetof(MordhauPlayerController_ServerSetLevelDisplayType, NewLevelDisplayType) == 0x000000, "Member 'MordhauPlayerController_ServerSetLevelDisplayType::NewLevelDisplayType' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerSetMatchmakingMatchID
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_ServerSetMatchmakingMatchID final
{
public:
	class FString                                 InMatchmakingMatchID;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerSetMatchmakingMatchID) == 0x000008, "Wrong alignment on MordhauPlayerController_ServerSetMatchmakingMatchID");
static_assert(sizeof(MordhauPlayerController_ServerSetMatchmakingMatchID) == 0x000010, "Wrong size on MordhauPlayerController_ServerSetMatchmakingMatchID");
static_assert(offsetof(MordhauPlayerController_ServerSetMatchmakingMatchID, InMatchmakingMatchID) == 0x000000, "Member 'MordhauPlayerController_ServerSetMatchmakingMatchID::InMatchmakingMatchID' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerSetMaxNetSkip
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_ServerSetMaxNetSkip final
{
public:
	int32                                         NewMaxNetSkip;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerSetMaxNetSkip) == 0x000004, "Wrong alignment on MordhauPlayerController_ServerSetMaxNetSkip");
static_assert(sizeof(MordhauPlayerController_ServerSetMaxNetSkip) == 0x000004, "Wrong size on MordhauPlayerController_ServerSetMaxNetSkip");
static_assert(offsetof(MordhauPlayerController_ServerSetMaxNetSkip, NewMaxNetSkip) == 0x000000, "Member 'MordhauPlayerController_ServerSetMaxNetSkip::NewMaxNetSkip' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerSetPartyInfo
// 0x0018 (0x0018 - 0x0000)
struct MordhauPlayerController_ServerSetPartyInfo final
{
public:
	class FString                                 InPartyID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPartySize;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauPlayerController_ServerSetPartyInfo) == 0x000008, "Wrong alignment on MordhauPlayerController_ServerSetPartyInfo");
static_assert(sizeof(MordhauPlayerController_ServerSetPartyInfo) == 0x000018, "Wrong size on MordhauPlayerController_ServerSetPartyInfo");
static_assert(offsetof(MordhauPlayerController_ServerSetPartyInfo, InPartyID) == 0x000000, "Member 'MordhauPlayerController_ServerSetPartyInfo::InPartyID' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ServerSetPartyInfo, InPartySize) == 0x000010, "Member 'MordhauPlayerController_ServerSetPartyInfo::InPartySize' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerSetSessionTicket
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_ServerSetSessionTicket final
{
public:
	class FString                                 InSessionTicket;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerSetSessionTicket) == 0x000008, "Wrong alignment on MordhauPlayerController_ServerSetSessionTicket");
static_assert(sizeof(MordhauPlayerController_ServerSetSessionTicket) == 0x000010, "Wrong size on MordhauPlayerController_ServerSetSessionTicket");
static_assert(offsetof(MordhauPlayerController_ServerSetSessionTicket, InSessionTicket) == 0x000000, "Member 'MordhauPlayerController_ServerSetSessionTicket::InSessionTicket' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerSetSpawnToken
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_ServerSetSpawnToken final
{
public:
	int32                                         NewToken;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerSetSpawnToken) == 0x000004, "Wrong alignment on MordhauPlayerController_ServerSetSpawnToken");
static_assert(sizeof(MordhauPlayerController_ServerSetSpawnToken) == 0x000004, "Wrong size on MordhauPlayerController_ServerSetSpawnToken");
static_assert(offsetof(MordhauPlayerController_ServerSetSpawnToken, NewToken) == 0x000000, "Member 'MordhauPlayerController_ServerSetSpawnToken::NewToken' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerSetXPAndMMR
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_ServerSetXPAndMMR final
{
public:
	int32                                         XP;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DuelMMR;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamfightMMR;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CasualMMR;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerSetXPAndMMR) == 0x000004, "Wrong alignment on MordhauPlayerController_ServerSetXPAndMMR");
static_assert(sizeof(MordhauPlayerController_ServerSetXPAndMMR) == 0x000010, "Wrong size on MordhauPlayerController_ServerSetXPAndMMR");
static_assert(offsetof(MordhauPlayerController_ServerSetXPAndMMR, XP) == 0x000000, "Member 'MordhauPlayerController_ServerSetXPAndMMR::XP' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ServerSetXPAndMMR, DuelMMR) == 0x000004, "Member 'MordhauPlayerController_ServerSetXPAndMMR::DuelMMR' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ServerSetXPAndMMR, TeamfightMMR) == 0x000008, "Member 'MordhauPlayerController_ServerSetXPAndMMR::TeamfightMMR' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_ServerSetXPAndMMR, CasualMMR) == 0x00000C, "Member 'MordhauPlayerController_ServerSetXPAndMMR::CasualMMR' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerSlomo
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_ServerSlomo final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerSlomo) == 0x000004, "Wrong alignment on MordhauPlayerController_ServerSlomo");
static_assert(sizeof(MordhauPlayerController_ServerSlomo) == 0x000004, "Wrong size on MordhauPlayerController_ServerSlomo");
static_assert(offsetof(MordhauPlayerController_ServerSlomo, Value) == 0x000000, "Member 'MordhauPlayerController_ServerSlomo::Value' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerUnbanPlayer
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_ServerUnbanPlayer final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerUnbanPlayer) == 0x000008, "Wrong alignment on MordhauPlayerController_ServerUnbanPlayer");
static_assert(sizeof(MordhauPlayerController_ServerUnbanPlayer) == 0x000010, "Wrong size on MordhauPlayerController_ServerUnbanPlayer");
static_assert(offsetof(MordhauPlayerController_ServerUnbanPlayer, PlayFabId) == 0x000000, "Member 'MordhauPlayerController_ServerUnbanPlayer::PlayFabId' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ServerVoteLevel
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_ServerVoteLevel final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ServerVoteLevel) == 0x000008, "Wrong alignment on MordhauPlayerController_ServerVoteLevel");
static_assert(sizeof(MordhauPlayerController_ServerVoteLevel) == 0x000010, "Wrong size on MordhauPlayerController_ServerVoteLevel");
static_assert(offsetof(MordhauPlayerController_ServerVoteLevel, LevelName) == 0x000000, "Member 'MordhauPlayerController_ServerVoteLevel::LevelName' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.SetChoiceMenuConsumesInput
// 0x0001 (0x0001 - 0x0000)
struct MordhauPlayerController_SetChoiceMenuConsumesInput final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_SetChoiceMenuConsumesInput) == 0x000001, "Wrong alignment on MordhauPlayerController_SetChoiceMenuConsumesInput");
static_assert(sizeof(MordhauPlayerController_SetChoiceMenuConsumesInput) == 0x000001, "Wrong size on MordhauPlayerController_SetChoiceMenuConsumesInput");
static_assert(offsetof(MordhauPlayerController_SetChoiceMenuConsumesInput, Value) == 0x000000, "Member 'MordhauPlayerController_SetChoiceMenuConsumesInput::Value' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.SetFriendlyNetSkipOffset
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_SetFriendlyNetSkipOffset final
{
public:
	int32                                         NewFriendlyNetSkipOffset;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_SetFriendlyNetSkipOffset) == 0x000004, "Wrong alignment on MordhauPlayerController_SetFriendlyNetSkipOffset");
static_assert(sizeof(MordhauPlayerController_SetFriendlyNetSkipOffset) == 0x000004, "Wrong size on MordhauPlayerController_SetFriendlyNetSkipOffset");
static_assert(offsetof(MordhauPlayerController_SetFriendlyNetSkipOffset, NewFriendlyNetSkipOffset) == 0x000000, "Member 'MordhauPlayerController_SetFriendlyNetSkipOffset::NewFriendlyNetSkipOffset' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.SetMaxNetSkip
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_SetMaxNetSkip final
{
public:
	int32                                         NewMaxNetSkip;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_SetMaxNetSkip) == 0x000004, "Wrong alignment on MordhauPlayerController_SetMaxNetSkip");
static_assert(sizeof(MordhauPlayerController_SetMaxNetSkip) == 0x000004, "Wrong size on MordhauPlayerController_SetMaxNetSkip");
static_assert(offsetof(MordhauPlayerController_SetMaxNetSkip, NewMaxNetSkip) == 0x000000, "Member 'MordhauPlayerController_SetMaxNetSkip::NewMaxNetSkip' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.SetServerSupportsLagReports
// 0x0001 (0x0001 - 0x0000)
struct MordhauPlayerController_SetServerSupportsLagReports final
{
public:
	bool                                          bSupported;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_SetServerSupportsLagReports) == 0x000001, "Wrong alignment on MordhauPlayerController_SetServerSupportsLagReports");
static_assert(sizeof(MordhauPlayerController_SetServerSupportsLagReports) == 0x000001, "Wrong size on MordhauPlayerController_SetServerSupportsLagReports");
static_assert(offsetof(MordhauPlayerController_SetServerSupportsLagReports, bSupported) == 0x000000, "Member 'MordhauPlayerController_SetServerSupportsLagReports::bSupported' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.SetWeaponModesArray
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_SetWeaponModesArray final
{
public:
	TArray<TSubclassOf<class AMordhauEquipment>>  InWeapons;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_SetWeaponModesArray) == 0x000008, "Wrong alignment on MordhauPlayerController_SetWeaponModesArray");
static_assert(sizeof(MordhauPlayerController_SetWeaponModesArray) == 0x000010, "Wrong size on MordhauPlayerController_SetWeaponModesArray");
static_assert(offsetof(MordhauPlayerController_SetWeaponModesArray, InWeapons) == 0x000000, "Member 'MordhauPlayerController_SetWeaponModesArray::InWeapons' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.ShowAuthTraces
// 0x0001 (0x0001 - 0x0000)
struct MordhauPlayerController_ShowAuthTraces final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_ShowAuthTraces) == 0x000001, "Wrong alignment on MordhauPlayerController_ShowAuthTraces");
static_assert(sizeof(MordhauPlayerController_ShowAuthTraces) == 0x000001, "Wrong size on MordhauPlayerController_ShowAuthTraces");
static_assert(offsetof(MordhauPlayerController_ShowAuthTraces, bValue) == 0x000000, "Member 'MordhauPlayerController_ShowAuthTraces::bValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.Slomo
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_Slomo final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_Slomo) == 0x000004, "Wrong alignment on MordhauPlayerController_Slomo");
static_assert(sizeof(MordhauPlayerController_Slomo) == 0x000004, "Wrong size on MordhauPlayerController_Slomo");
static_assert(offsetof(MordhauPlayerController_Slomo, Value) == 0x000000, "Member 'MordhauPlayerController_Slomo::Value' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.SpectatorCmd
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_SpectatorCmd final
{
public:
	class FString                                 SpecCmd;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_SpectatorCmd) == 0x000008, "Wrong alignment on MordhauPlayerController_SpectatorCmd");
static_assert(sizeof(MordhauPlayerController_SpectatorCmd) == 0x000010, "Wrong size on MordhauPlayerController_SpectatorCmd");
static_assert(offsetof(MordhauPlayerController_SpectatorCmd, SpecCmd) == 0x000000, "Member 'MordhauPlayerController_SpectatorCmd::SpecCmd' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.Turn
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerController_Turn final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_Turn) == 0x000004, "Wrong alignment on MordhauPlayerController_Turn");
static_assert(sizeof(MordhauPlayerController_Turn) == 0x000004, "Wrong size on MordhauPlayerController_Turn");
static_assert(offsetof(MordhauPlayerController_Turn, Value) == 0x000000, "Member 'MordhauPlayerController_Turn::Value' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.Unban
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_Unban final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_Unban) == 0x000008, "Wrong alignment on MordhauPlayerController_Unban");
static_assert(sizeof(MordhauPlayerController_Unban) == 0x000010, "Wrong size on MordhauPlayerController_Unban");
static_assert(offsetof(MordhauPlayerController_Unban, PlayFabId) == 0x000000, "Member 'MordhauPlayerController_Unban::PlayFabId' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.UnmountPak
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_UnmountPak final
{
public:
	class FString                                 PakPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_UnmountPak) == 0x000008, "Wrong alignment on MordhauPlayerController_UnmountPak");
static_assert(sizeof(MordhauPlayerController_UnmountPak) == 0x000010, "Wrong size on MordhauPlayerController_UnmountPak");
static_assert(offsetof(MordhauPlayerController_UnmountPak, PakPath) == 0x000000, "Member 'MordhauPlayerController_UnmountPak::PakPath' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.Unmute
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_Unmute final
{
public:
	class FString                                 PlayerNameOrPlayFabID;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_Unmute) == 0x000008, "Wrong alignment on MordhauPlayerController_Unmute");
static_assert(sizeof(MordhauPlayerController_Unmute) == 0x000010, "Wrong size on MordhauPlayerController_Unmute");
static_assert(offsetof(MordhauPlayerController_Unmute, PlayerNameOrPlayFabID) == 0x000000, "Member 'MordhauPlayerController_Unmute::PlayerNameOrPlayFabID' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.UnregisterConsoleCommand
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_UnregisterConsoleCommand final
{
public:
	class FString                                 CommandName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_UnregisterConsoleCommand) == 0x000008, "Wrong alignment on MordhauPlayerController_UnregisterConsoleCommand");
static_assert(sizeof(MordhauPlayerController_UnregisterConsoleCommand) == 0x000010, "Wrong size on MordhauPlayerController_UnregisterConsoleCommand");
static_assert(offsetof(MordhauPlayerController_UnregisterConsoleCommand, CommandName) == 0x000000, "Member 'MordhauPlayerController_UnregisterConsoleCommand::CommandName' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.UpdateWeaponMode
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_UpdateWeaponMode final
{
public:
	TSubclassOf<class AMordhauEquipment>          WeaponToUpdate;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAltMode;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauPlayerController_UpdateWeaponMode) == 0x000008, "Wrong alignment on MordhauPlayerController_UpdateWeaponMode");
static_assert(sizeof(MordhauPlayerController_UpdateWeaponMode) == 0x000010, "Wrong size on MordhauPlayerController_UpdateWeaponMode");
static_assert(offsetof(MordhauPlayerController_UpdateWeaponMode, WeaponToUpdate) == 0x000000, "Member 'MordhauPlayerController_UpdateWeaponMode::WeaponToUpdate' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_UpdateWeaponMode, bAltMode) == 0x000008, "Member 'MordhauPlayerController_UpdateWeaponMode::bAltMode' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.UploadImage
// 0x0030 (0x0030 - 0x0000)
struct MordhauPlayerController_UploadImage final
{
public:
	TArray<uint8>                                 ImageData;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& response, bool bSuccess)> ImageUploadCompletedDelegate;                      // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_UploadImage) == 0x000008, "Wrong alignment on MordhauPlayerController_UploadImage");
static_assert(sizeof(MordhauPlayerController_UploadImage) == 0x000030, "Wrong size on MordhauPlayerController_UploadImage");
static_assert(offsetof(MordhauPlayerController_UploadImage, ImageData) == 0x000000, "Member 'MordhauPlayerController_UploadImage::ImageData' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_UploadImage, URL) == 0x000010, "Member 'MordhauPlayerController_UploadImage::URL' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_UploadImage, ImageUploadCompletedDelegate) == 0x000020, "Member 'MordhauPlayerController_UploadImage::ImageUploadCompletedDelegate' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.VoteKick
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_VoteKick final
{
public:
	class FString                                 PlayerNameOrPlayFabID;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_VoteKick) == 0x000008, "Wrong alignment on MordhauPlayerController_VoteKick");
static_assert(sizeof(MordhauPlayerController_VoteKick) == 0x000010, "Wrong size on MordhauPlayerController_VoteKick");
static_assert(offsetof(MordhauPlayerController_VoteKick, PlayerNameOrPlayFabID) == 0x000000, "Member 'MordhauPlayerController_VoteKick::PlayerNameOrPlayFabID' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.VoteLevel
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_VoteLevel final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_VoteLevel) == 0x000008, "Wrong alignment on MordhauPlayerController_VoteLevel");
static_assert(sizeof(MordhauPlayerController_VoteLevel) == 0x000010, "Wrong size on MordhauPlayerController_VoteLevel");
static_assert(offsetof(MordhauPlayerController_VoteLevel, LevelName) == 0x000000, "Member 'MordhauPlayerController_VoteLevel::LevelName' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.VoteMap
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_VoteMap final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_VoteMap) == 0x000008, "Wrong alignment on MordhauPlayerController_VoteMap");
static_assert(sizeof(MordhauPlayerController_VoteMap) == 0x000010, "Wrong size on MordhauPlayerController_VoteMap");
static_assert(offsetof(MordhauPlayerController_VoteMap, MapName) == 0x000000, "Member 'MordhauPlayerController_VoteMap::MapName' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.GetControlledMordhauCharacter
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_GetControlledMordhauCharacter final
{
public:
	bool                                          bAlsoSearchVehicle;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_GetControlledMordhauCharacter) == 0x000008, "Wrong alignment on MordhauPlayerController_GetControlledMordhauCharacter");
static_assert(sizeof(MordhauPlayerController_GetControlledMordhauCharacter) == 0x000010, "Wrong size on MordhauPlayerController_GetControlledMordhauCharacter");
static_assert(offsetof(MordhauPlayerController_GetControlledMordhauCharacter, bAlsoSearchVehicle) == 0x000000, "Member 'MordhauPlayerController_GetControlledMordhauCharacter::bAlsoSearchVehicle' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_GetControlledMordhauCharacter, ReturnValue) == 0x000008, "Member 'MordhauPlayerController_GetControlledMordhauCharacter::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.GetPlayFabPlayer
// 0x0060 (0x0060 - 0x0000)
struct MordhauPlayerController_GetPlayFabPlayer final
{
public:
	struct FPlayFabPlayer                         ReturnValue;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_GetPlayFabPlayer) == 0x000008, "Wrong alignment on MordhauPlayerController_GetPlayFabPlayer");
static_assert(sizeof(MordhauPlayerController_GetPlayFabPlayer) == 0x000060, "Wrong size on MordhauPlayerController_GetPlayFabPlayer");
static_assert(offsetof(MordhauPlayerController_GetPlayFabPlayer, ReturnValue) == 0x000000, "Member 'MordhauPlayerController_GetPlayFabPlayer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.IsAdmin
// 0x0001 (0x0001 - 0x0000)
struct MordhauPlayerController_IsAdmin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerController_IsAdmin) == 0x000001, "Wrong alignment on MordhauPlayerController_IsAdmin");
static_assert(sizeof(MordhauPlayerController_IsAdmin) == 0x000001, "Wrong size on MordhauPlayerController_IsAdmin");
static_assert(offsetof(MordhauPlayerController_IsAdmin, ReturnValue) == 0x000000, "Member 'MordhauPlayerController_IsAdmin::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerController.SharesInstanceWith
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerController_SharesInstanceWith final
{
public:
	const class AActor*                           OtherActor;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauPlayerController_SharesInstanceWith) == 0x000008, "Wrong alignment on MordhauPlayerController_SharesInstanceWith");
static_assert(sizeof(MordhauPlayerController_SharesInstanceWith) == 0x000010, "Wrong size on MordhauPlayerController_SharesInstanceWith");
static_assert(offsetof(MordhauPlayerController_SharesInstanceWith, OtherActor) == 0x000000, "Member 'MordhauPlayerController_SharesInstanceWith::OtherActor' has a wrong offset!");
static_assert(offsetof(MordhauPlayerController_SharesInstanceWith, ReturnValue) == 0x000008, "Member 'MordhauPlayerController_SharesInstanceWith::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerStart.GetSpawnPreferenceFor
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerStart_GetSpawnPreferenceFor final
{
public:
	class AController*                            Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauPlayerStart_GetSpawnPreferenceFor) == 0x000008, "Wrong alignment on MordhauPlayerStart_GetSpawnPreferenceFor");
static_assert(sizeof(MordhauPlayerStart_GetSpawnPreferenceFor) == 0x000010, "Wrong size on MordhauPlayerStart_GetSpawnPreferenceFor");
static_assert(offsetof(MordhauPlayerStart_GetSpawnPreferenceFor, Player) == 0x000000, "Member 'MordhauPlayerStart_GetSpawnPreferenceFor::Player' has a wrong offset!");
static_assert(offsetof(MordhauPlayerStart_GetSpawnPreferenceFor, ReturnValue) == 0x000008, "Member 'MordhauPlayerStart_GetSpawnPreferenceFor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerStart.IsAllowedSpawnFor
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerStart_IsAllowedSpawnFor final
{
public:
	class AController*                            Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauPlayerStart_IsAllowedSpawnFor) == 0x000008, "Wrong alignment on MordhauPlayerStart_IsAllowedSpawnFor");
static_assert(sizeof(MordhauPlayerStart_IsAllowedSpawnFor) == 0x000010, "Wrong size on MordhauPlayerStart_IsAllowedSpawnFor");
static_assert(offsetof(MordhauPlayerStart_IsAllowedSpawnFor, Player) == 0x000000, "Member 'MordhauPlayerStart_IsAllowedSpawnFor::Player' has a wrong offset!");
static_assert(offsetof(MordhauPlayerStart_IsAllowedSpawnFor, ReturnValue) == 0x000008, "Member 'MordhauPlayerStart_IsAllowedSpawnFor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerStart.OnSpawnChosen
// 0x0008 (0x0008 - 0x0000)
struct MordhauPlayerStart_OnSpawnChosen final
{
public:
	class AController*                            Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerStart_OnSpawnChosen) == 0x000008, "Wrong alignment on MordhauPlayerStart_OnSpawnChosen");
static_assert(sizeof(MordhauPlayerStart_OnSpawnChosen) == 0x000008, "Wrong size on MordhauPlayerStart_OnSpawnChosen");
static_assert(offsetof(MordhauPlayerStart_OnSpawnChosen, Player) == 0x000000, "Member 'MordhauPlayerStart_OnSpawnChosen::Player' has a wrong offset!");

// Function Mordhau.MordhauPlayerState.AddAssists
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerState_AddAssists final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerState_AddAssists) == 0x000004, "Wrong alignment on MordhauPlayerState_AddAssists");
static_assert(sizeof(MordhauPlayerState_AddAssists) == 0x000004, "Wrong size on MordhauPlayerState_AddAssists");
static_assert(offsetof(MordhauPlayerState_AddAssists, Amount) == 0x000000, "Member 'MordhauPlayerState_AddAssists::Amount' has a wrong offset!");

// Function Mordhau.MordhauPlayerState.AddDeaths
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerState_AddDeaths final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerState_AddDeaths) == 0x000004, "Wrong alignment on MordhauPlayerState_AddDeaths");
static_assert(sizeof(MordhauPlayerState_AddDeaths) == 0x000004, "Wrong size on MordhauPlayerState_AddDeaths");
static_assert(offsetof(MordhauPlayerState_AddDeaths, Amount) == 0x000000, "Member 'MordhauPlayerState_AddDeaths::Amount' has a wrong offset!");

// Function Mordhau.MordhauPlayerState.AddKills
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerState_AddKills final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerState_AddKills) == 0x000004, "Wrong alignment on MordhauPlayerState_AddKills");
static_assert(sizeof(MordhauPlayerState_AddKills) == 0x000004, "Wrong size on MordhauPlayerState_AddKills");
static_assert(offsetof(MordhauPlayerState_AddKills, Amount) == 0x000000, "Member 'MordhauPlayerState_AddKills::Amount' has a wrong offset!");

// Function Mordhau.MordhauPlayerState.AddScore
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerState_AddScore final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerState_AddScore) == 0x000004, "Wrong alignment on MordhauPlayerState_AddScore");
static_assert(sizeof(MordhauPlayerState_AddScore) == 0x000004, "Wrong size on MordhauPlayerState_AddScore");
static_assert(offsetof(MordhauPlayerState_AddScore, Amount) == 0x000000, "Member 'MordhauPlayerState_AddScore::Amount' has a wrong offset!");

// Function Mordhau.MordhauPlayerState.BanPlayer
// 0x0020 (0x0020 - 0x0000)
struct MordhauPlayerState_BanPlayer final
{
public:
	int32                                         BanDuration;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BanReason;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOfficialServerBan;                              // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBanType                                      BanType;                                           // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauPlayerState_BanPlayer) == 0x000008, "Wrong alignment on MordhauPlayerState_BanPlayer");
static_assert(sizeof(MordhauPlayerState_BanPlayer) == 0x000020, "Wrong size on MordhauPlayerState_BanPlayer");
static_assert(offsetof(MordhauPlayerState_BanPlayer, BanDuration) == 0x000000, "Member 'MordhauPlayerState_BanPlayer::BanDuration' has a wrong offset!");
static_assert(offsetof(MordhauPlayerState_BanPlayer, BanReason) == 0x000008, "Member 'MordhauPlayerState_BanPlayer::BanReason' has a wrong offset!");
static_assert(offsetof(MordhauPlayerState_BanPlayer, bIsOfficialServerBan) == 0x000018, "Member 'MordhauPlayerState_BanPlayer::bIsOfficialServerBan' has a wrong offset!");
static_assert(offsetof(MordhauPlayerState_BanPlayer, BanType) == 0x000019, "Member 'MordhauPlayerState_BanPlayer::BanType' has a wrong offset!");

// Function Mordhau.MordhauPlayerState.GetLastPossessedMordhauCharacter
// 0x0008 (0x0008 - 0x0000)
struct MordhauPlayerState_GetLastPossessedMordhauCharacter final
{
public:
	class AMordhauCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerState_GetLastPossessedMordhauCharacter) == 0x000008, "Wrong alignment on MordhauPlayerState_GetLastPossessedMordhauCharacter");
static_assert(sizeof(MordhauPlayerState_GetLastPossessedMordhauCharacter) == 0x000008, "Wrong size on MordhauPlayerState_GetLastPossessedMordhauCharacter");
static_assert(offsetof(MordhauPlayerState_GetLastPossessedMordhauCharacter, ReturnValue) == 0x000000, "Member 'MordhauPlayerState_GetLastPossessedMordhauCharacter::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerState.GetPlayFabId
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerState_GetPlayFabId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerState_GetPlayFabId) == 0x000008, "Wrong alignment on MordhauPlayerState_GetPlayFabId");
static_assert(sizeof(MordhauPlayerState_GetPlayFabId) == 0x000010, "Wrong size on MordhauPlayerState_GetPlayFabId");
static_assert(offsetof(MordhauPlayerState_GetPlayFabId, ReturnValue) == 0x000000, "Member 'MordhauPlayerState_GetPlayFabId::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerState.GetPlayFabPlayer
// 0x0060 (0x0060 - 0x0000)
struct MordhauPlayerState_GetPlayFabPlayer final
{
public:
	struct FPlayFabPlayer                         ReturnValue;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerState_GetPlayFabPlayer) == 0x000008, "Wrong alignment on MordhauPlayerState_GetPlayFabPlayer");
static_assert(sizeof(MordhauPlayerState_GetPlayFabPlayer) == 0x000060, "Wrong size on MordhauPlayerState_GetPlayFabPlayer");
static_assert(offsetof(MordhauPlayerState_GetPlayFabPlayer, ReturnValue) == 0x000000, "Member 'MordhauPlayerState_GetPlayFabPlayer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauPlayerState.SetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct MordhauPlayerState_SetPlayerName final
{
public:
	class FString                                 S;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerState_SetPlayerName) == 0x000008, "Wrong alignment on MordhauPlayerState_SetPlayerName");
static_assert(sizeof(MordhauPlayerState_SetPlayerName) == 0x000010, "Wrong size on MordhauPlayerState_SetPlayerName");
static_assert(offsetof(MordhauPlayerState_SetPlayerName, S) == 0x000000, "Member 'MordhauPlayerState_SetPlayerName::S' has a wrong offset!");

// Function Mordhau.MordhauPlayerState.SetTeam
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerState_SetTeam final
{
public:
	int32                                         NewTeam;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerState_SetTeam) == 0x000004, "Wrong alignment on MordhauPlayerState_SetTeam");
static_assert(sizeof(MordhauPlayerState_SetTeam) == 0x000004, "Wrong size on MordhauPlayerState_SetTeam");
static_assert(offsetof(MordhauPlayerState_SetTeam, NewTeam) == 0x000000, "Member 'MordhauPlayerState_SetTeam::NewTeam' has a wrong offset!");

// Function Mordhau.MordhauPlayerState.GetRank
// 0x0004 (0x0004 - 0x0000)
struct MordhauPlayerState_GetRank final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauPlayerState_GetRank) == 0x000004, "Wrong alignment on MordhauPlayerState_GetRank");
static_assert(sizeof(MordhauPlayerState_GetRank) == 0x000004, "Wrong size on MordhauPlayerState_GetRank");
static_assert(offsetof(MordhauPlayerState_GetRank, ReturnValue) == 0x000000, "Member 'MordhauPlayerState_GetRank::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauProjectile.GetProjectileMovementForProjectileClass
// 0x0010 (0x0010 - 0x0000)
struct MordhauProjectile_GetProjectileMovementForProjectileClass final
{
public:
	TSubclassOf<class AMordhauProjectile>         ProjectileClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAdvProjectileMovementComponent*        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauProjectile_GetProjectileMovementForProjectileClass) == 0x000008, "Wrong alignment on MordhauProjectile_GetProjectileMovementForProjectileClass");
static_assert(sizeof(MordhauProjectile_GetProjectileMovementForProjectileClass) == 0x000010, "Wrong size on MordhauProjectile_GetProjectileMovementForProjectileClass");
static_assert(offsetof(MordhauProjectile_GetProjectileMovementForProjectileClass, ProjectileClass) == 0x000000, "Member 'MordhauProjectile_GetProjectileMovementForProjectileClass::ProjectileClass' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_GetProjectileMovementForProjectileClass, ReturnValue) == 0x000008, "Member 'MordhauProjectile_GetProjectileMovementForProjectileClass::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauProjectile.AttachProjectile
// 0x0090 (0x0090 - 0x0000)
struct MordhauProjectile_AttachProjectile final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x008C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauProjectile_AttachProjectile) == 0x000004, "Wrong alignment on MordhauProjectile_AttachProjectile");
static_assert(sizeof(MordhauProjectile_AttachProjectile) == 0x000090, "Wrong size on MordhauProjectile_AttachProjectile");
static_assert(offsetof(MordhauProjectile_AttachProjectile, Hit) == 0x000000, "Member 'MordhauProjectile_AttachProjectile::Hit' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_AttachProjectile, ReturnValue) == 0x00008C, "Member 'MordhauProjectile_AttachProjectile::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauProjectile.BounceComponent
// 0x0020 (0x0020 - 0x0000)
struct MordhauProjectile_BounceComponent final
{
public:
	class USkeletalMeshComponent*                 ComponentToBounce;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewVelocity;                                       // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewAngularVelocity;                                // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauProjectile_BounceComponent) == 0x000008, "Wrong alignment on MordhauProjectile_BounceComponent");
static_assert(sizeof(MordhauProjectile_BounceComponent) == 0x000020, "Wrong size on MordhauProjectile_BounceComponent");
static_assert(offsetof(MordhauProjectile_BounceComponent, ComponentToBounce) == 0x000000, "Member 'MordhauProjectile_BounceComponent::ComponentToBounce' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_BounceComponent, NewVelocity) == 0x000008, "Member 'MordhauProjectile_BounceComponent::NewVelocity' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_BounceComponent, NewAngularVelocity) == 0x000014, "Member 'MordhauProjectile_BounceComponent::NewAngularVelocity' has a wrong offset!");

// Function Mordhau.MordhauProjectile.CarryOverTrail
// 0x0008 (0x0008 - 0x0000)
struct MordhauProjectile_CarryOverTrail final
{
public:
	class AMordhauProjectile*                     NewProjectile;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauProjectile_CarryOverTrail) == 0x000008, "Wrong alignment on MordhauProjectile_CarryOverTrail");
static_assert(sizeof(MordhauProjectile_CarryOverTrail) == 0x000008, "Wrong size on MordhauProjectile_CarryOverTrail");
static_assert(offsetof(MordhauProjectile_CarryOverTrail, NewProjectile) == 0x000000, "Member 'MordhauProjectile_CarryOverTrail::NewProjectile' has a wrong offset!");

// Function Mordhau.MordhauProjectile.GetBlendedActorTransform
// 0x0040 (0x0040 - 0x0000)
struct MordhauProjectile_GetBlendedActorTransform final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauProjectile_GetBlendedActorTransform) == 0x000010, "Wrong alignment on MordhauProjectile_GetBlendedActorTransform");
static_assert(sizeof(MordhauProjectile_GetBlendedActorTransform) == 0x000040, "Wrong size on MordhauProjectile_GetBlendedActorTransform");
static_assert(offsetof(MordhauProjectile_GetBlendedActorTransform, T) == 0x000000, "Member 'MordhauProjectile_GetBlendedActorTransform::T' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_GetBlendedActorTransform, ReturnValue) == 0x000010, "Member 'MordhauProjectile_GetBlendedActorTransform::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauProjectile.GetBlendedMeshTransform
// 0x0040 (0x0040 - 0x0000)
struct MordhauProjectile_GetBlendedMeshTransform final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauProjectile_GetBlendedMeshTransform) == 0x000010, "Wrong alignment on MordhauProjectile_GetBlendedMeshTransform");
static_assert(sizeof(MordhauProjectile_GetBlendedMeshTransform) == 0x000040, "Wrong size on MordhauProjectile_GetBlendedMeshTransform");
static_assert(offsetof(MordhauProjectile_GetBlendedMeshTransform, T) == 0x000000, "Member 'MordhauProjectile_GetBlendedMeshTransform::T' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_GetBlendedMeshTransform, ReturnValue) == 0x000010, "Member 'MordhauProjectile_GetBlendedMeshTransform::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauProjectile.GetBlendedTransform
// 0x00A0 (0x00A0 - 0x0000)
struct MordhauProjectile_GetBlendedTransform final
{
public:
	struct FTransform                             Ours;                                              // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             Associated;                                        // 0x0030(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         T;                                                 // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0070(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauProjectile_GetBlendedTransform) == 0x000010, "Wrong alignment on MordhauProjectile_GetBlendedTransform");
static_assert(sizeof(MordhauProjectile_GetBlendedTransform) == 0x0000A0, "Wrong size on MordhauProjectile_GetBlendedTransform");
static_assert(offsetof(MordhauProjectile_GetBlendedTransform, Ours) == 0x000000, "Member 'MordhauProjectile_GetBlendedTransform::Ours' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_GetBlendedTransform, Associated) == 0x000030, "Member 'MordhauProjectile_GetBlendedTransform::Associated' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_GetBlendedTransform, T) == 0x000060, "Member 'MordhauProjectile_GetBlendedTransform::T' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_GetBlendedTransform, ReturnValue) == 0x000070, "Member 'MordhauProjectile_GetBlendedTransform::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauProjectile.GetCurrentTrailParticles
// 0x0008 (0x0008 - 0x0000)
struct MordhauProjectile_GetCurrentTrailParticles final
{
public:
	class UParticleSystemComponent*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauProjectile_GetCurrentTrailParticles) == 0x000008, "Wrong alignment on MordhauProjectile_GetCurrentTrailParticles");
static_assert(sizeof(MordhauProjectile_GetCurrentTrailParticles) == 0x000008, "Wrong size on MordhauProjectile_GetCurrentTrailParticles");
static_assert(offsetof(MordhauProjectile_GetCurrentTrailParticles, ReturnValue) == 0x000000, "Member 'MordhauProjectile_GetCurrentTrailParticles::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauProjectile.GetPercentageOfMaxVelocityClamped
// 0x0004 (0x0004 - 0x0000)
struct MordhauProjectile_GetPercentageOfMaxVelocityClamped final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauProjectile_GetPercentageOfMaxVelocityClamped) == 0x000004, "Wrong alignment on MordhauProjectile_GetPercentageOfMaxVelocityClamped");
static_assert(sizeof(MordhauProjectile_GetPercentageOfMaxVelocityClamped) == 0x000004, "Wrong size on MordhauProjectile_GetPercentageOfMaxVelocityClamped");
static_assert(offsetof(MordhauProjectile_GetPercentageOfMaxVelocityClamped, ReturnValue) == 0x000000, "Member 'MordhauProjectile_GetPercentageOfMaxVelocityClamped::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauProjectile.GetProjectileCreator
// 0x0008 (0x0008 - 0x0000)
struct MordhauProjectile_GetProjectileCreator final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauProjectile_GetProjectileCreator) == 0x000008, "Wrong alignment on MordhauProjectile_GetProjectileCreator");
static_assert(sizeof(MordhauProjectile_GetProjectileCreator) == 0x000008, "Wrong size on MordhauProjectile_GetProjectileCreator");
static_assert(offsetof(MordhauProjectile_GetProjectileCreator, ReturnValue) == 0x000000, "Member 'MordhauProjectile_GetProjectileCreator::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauProjectile.GetProjectileOwningController
// 0x0008 (0x0008 - 0x0000)
struct MordhauProjectile_GetProjectileOwningController final
{
public:
	class AController*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauProjectile_GetProjectileOwningController) == 0x000008, "Wrong alignment on MordhauProjectile_GetProjectileOwningController");
static_assert(sizeof(MordhauProjectile_GetProjectileOwningController) == 0x000008, "Wrong size on MordhauProjectile_GetProjectileOwningController");
static_assert(offsetof(MordhauProjectile_GetProjectileOwningController, ReturnValue) == 0x000000, "Member 'MordhauProjectile_GetProjectileOwningController::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauProjectile.InitializeProjectile
// 0x0018 (0x0018 - 0x0000)
struct MordhauProjectile_InitializeProjectile final
{
public:
	class AController*                            InOwningController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsLocallyPredicted;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InCreator;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauProjectile_InitializeProjectile) == 0x000008, "Wrong alignment on MordhauProjectile_InitializeProjectile");
static_assert(sizeof(MordhauProjectile_InitializeProjectile) == 0x000018, "Wrong size on MordhauProjectile_InitializeProjectile");
static_assert(offsetof(MordhauProjectile_InitializeProjectile, InOwningController) == 0x000000, "Member 'MordhauProjectile_InitializeProjectile::InOwningController' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_InitializeProjectile, bInIsLocallyPredicted) == 0x000008, "Member 'MordhauProjectile_InitializeProjectile::bInIsLocallyPredicted' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_InitializeProjectile, InCreator) == 0x000010, "Member 'MordhauProjectile_InitializeProjectile::InCreator' has a wrong offset!");

// Function Mordhau.MordhauProjectile.OnProjectileDamagedDamagable
// 0x0020 (0x0020 - 0x0000)
struct MordhauProjectile_OnProjectileDamagedDamagable final
{
public:
	class UDamageableComponent*                   DamagableComp;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWillKill;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldLocation;                                     // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bone;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauProjectile_OnProjectileDamagedDamagable) == 0x000008, "Wrong alignment on MordhauProjectile_OnProjectileDamagedDamagable");
static_assert(sizeof(MordhauProjectile_OnProjectileDamagedDamagable) == 0x000020, "Wrong size on MordhauProjectile_OnProjectileDamagedDamagable");
static_assert(offsetof(MordhauProjectile_OnProjectileDamagedDamagable, DamagableComp) == 0x000000, "Member 'MordhauProjectile_OnProjectileDamagedDamagable::DamagableComp' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_OnProjectileDamagedDamagable, bWillKill) == 0x000008, "Member 'MordhauProjectile_OnProjectileDamagedDamagable::bWillKill' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_OnProjectileDamagedDamagable, WorldLocation) == 0x00000C, "Member 'MordhauProjectile_OnProjectileDamagedDamagable::WorldLocation' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_OnProjectileDamagedDamagable, bone) == 0x000018, "Member 'MordhauProjectile_OnProjectileDamagedDamagable::bone' has a wrong offset!");

// Function Mordhau.MordhauProjectile.OnProjectileHit
// 0x0020 (0x0020 - 0x0000)
struct MordhauProjectile_OnProjectileHit final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BounceForce;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Surface;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasHitWorld;                                      // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasStopped;                                       // 0x001E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauProjectile_OnProjectileHit) == 0x000004, "Wrong alignment on MordhauProjectile_OnProjectileHit");
static_assert(sizeof(MordhauProjectile_OnProjectileHit) == 0x000020, "Wrong size on MordhauProjectile_OnProjectileHit");
static_assert(offsetof(MordhauProjectile_OnProjectileHit, HitLocation) == 0x000000, "Member 'MordhauProjectile_OnProjectileHit::HitLocation' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_OnProjectileHit, HitNormal) == 0x00000C, "Member 'MordhauProjectile_OnProjectileHit::HitNormal' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_OnProjectileHit, BounceForce) == 0x000018, "Member 'MordhauProjectile_OnProjectileHit::BounceForce' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_OnProjectileHit, Surface) == 0x00001C, "Member 'MordhauProjectile_OnProjectileHit::Surface' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_OnProjectileHit, bHasHitWorld) == 0x00001D, "Member 'MordhauProjectile_OnProjectileHit::bHasHitWorld' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_OnProjectileHit, bHasStopped) == 0x00001E, "Member 'MordhauProjectile_OnProjectileHit::bHasStopped' has a wrong offset!");

// Function Mordhau.MordhauProjectile.OnProjectileHitCosmetic
// 0x0098 (0x0098 - 0x0000)
struct MordhauProjectile_OnProjectileHitCosmetic final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0008(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauProjectile_OnProjectileHitCosmetic) == 0x000008, "Wrong alignment on MordhauProjectile_OnProjectileHitCosmetic");
static_assert(sizeof(MordhauProjectile_OnProjectileHitCosmetic) == 0x000098, "Wrong size on MordhauProjectile_OnProjectileHitCosmetic");
static_assert(offsetof(MordhauProjectile_OnProjectileHitCosmetic, OtherActor) == 0x000000, "Member 'MordhauProjectile_OnProjectileHitCosmetic::OtherActor' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_OnProjectileHitCosmetic, Hit) == 0x000008, "Member 'MordhauProjectile_OnProjectileHitCosmetic::Hit' has a wrong offset!");

// Function Mordhau.MordhauProjectile.ProcessProjectileHit
// 0x0090 (0x0090 - 0x0000)
struct MordhauProjectile_ProcessProjectileHit final
{
public:
	bool                                          bIsBlocking;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0004(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauProjectile_ProcessProjectileHit) == 0x000004, "Wrong alignment on MordhauProjectile_ProcessProjectileHit");
static_assert(sizeof(MordhauProjectile_ProcessProjectileHit) == 0x000090, "Wrong size on MordhauProjectile_ProcessProjectileHit");
static_assert(offsetof(MordhauProjectile_ProcessProjectileHit, bIsBlocking) == 0x000000, "Member 'MordhauProjectile_ProcessProjectileHit::bIsBlocking' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_ProcessProjectileHit, Hit) == 0x000004, "Member 'MordhauProjectile_ProcessProjectileHit::Hit' has a wrong offset!");

// Function Mordhau.MordhauProjectile.RestockCharacter
// 0x0010 (0x0010 - 0x0000)
struct MordhauProjectile_RestockCharacter final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauProjectile_RestockCharacter) == 0x000008, "Wrong alignment on MordhauProjectile_RestockCharacter");
static_assert(sizeof(MordhauProjectile_RestockCharacter) == 0x000010, "Wrong size on MordhauProjectile_RestockCharacter");
static_assert(offsetof(MordhauProjectile_RestockCharacter, Character) == 0x000000, "Member 'MordhauProjectile_RestockCharacter::Character' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_RestockCharacter, ReturnValue) == 0x000008, "Member 'MordhauProjectile_RestockCharacter::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauProjectile.SetCurrentTrailParticles
// 0x0008 (0x0008 - 0x0000)
struct MordhauProjectile_SetCurrentTrailParticles final
{
public:
	class UParticleSystemComponent*               ParticleSystemComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauProjectile_SetCurrentTrailParticles) == 0x000008, "Wrong alignment on MordhauProjectile_SetCurrentTrailParticles");
static_assert(sizeof(MordhauProjectile_SetCurrentTrailParticles) == 0x000008, "Wrong size on MordhauProjectile_SetCurrentTrailParticles");
static_assert(offsetof(MordhauProjectile_SetCurrentTrailParticles, ParticleSystemComponent) == 0x000000, "Member 'MordhauProjectile_SetCurrentTrailParticles::ParticleSystemComponent' has a wrong offset!");

// Function Mordhau.MordhauProjectile.SpawnDecal
// 0x0030 (0x0030 - 0x0000)
struct MordhauProjectile_SpawnDecal final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDecalInfo                             DecalInfo;                                         // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauProjectile_SpawnDecal) == 0x000008, "Wrong alignment on MordhauProjectile_SpawnDecal");
static_assert(sizeof(MordhauProjectile_SpawnDecal) == 0x000030, "Wrong size on MordhauProjectile_SpawnDecal");
static_assert(offsetof(MordhauProjectile_SpawnDecal, Location) == 0x000000, "Member 'MordhauProjectile_SpawnDecal::Location' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_SpawnDecal, Rotation) == 0x00000C, "Member 'MordhauProjectile_SpawnDecal::Rotation' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_SpawnDecal, DecalInfo) == 0x000018, "Member 'MordhauProjectile_SpawnDecal::DecalInfo' has a wrong offset!");

// Function Mordhau.MordhauProjectile.SpawnParticles
// 0x0020 (0x0020 - 0x0000)
struct MordhauProjectile_SpawnParticles final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UParticleSystem*                        System;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauProjectile_SpawnParticles) == 0x000008, "Wrong alignment on MordhauProjectile_SpawnParticles");
static_assert(sizeof(MordhauProjectile_SpawnParticles) == 0x000020, "Wrong size on MordhauProjectile_SpawnParticles");
static_assert(offsetof(MordhauProjectile_SpawnParticles, Location) == 0x000000, "Member 'MordhauProjectile_SpawnParticles::Location' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_SpawnParticles, Rotation) == 0x00000C, "Member 'MordhauProjectile_SpawnParticles::Rotation' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_SpawnParticles, System) == 0x000018, "Member 'MordhauProjectile_SpawnParticles::System' has a wrong offset!");

// Function Mordhau.MordhauProjectile.UpdateProjectileState
// 0x0004 (0x0004 - 0x0000)
struct MordhauProjectile_UpdateProjectileState final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauProjectile_UpdateProjectileState) == 0x000004, "Wrong alignment on MordhauProjectile_UpdateProjectileState");
static_assert(sizeof(MordhauProjectile_UpdateProjectileState) == 0x000004, "Wrong size on MordhauProjectile_UpdateProjectileState");
static_assert(offsetof(MordhauProjectile_UpdateProjectileState, DeltaTime) == 0x000000, "Member 'MordhauProjectile_UpdateProjectileState::DeltaTime' has a wrong offset!");

// Function Mordhau.MordhauProjectile.WillPassThrough
// 0x0002 (0x0002 - 0x0000)
struct MordhauProjectile_WillPassThrough final
{
public:
	uint8                                         Surface;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauProjectile_WillPassThrough) == 0x000001, "Wrong alignment on MordhauProjectile_WillPassThrough");
static_assert(sizeof(MordhauProjectile_WillPassThrough) == 0x000002, "Wrong size on MordhauProjectile_WillPassThrough");
static_assert(offsetof(MordhauProjectile_WillPassThrough, Surface) == 0x000000, "Member 'MordhauProjectile_WillPassThrough::Surface' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_WillPassThrough, ReturnValue) == 0x000001, "Member 'MordhauProjectile_WillPassThrough::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauProjectile.WillSticky
// 0x0002 (0x0002 - 0x0000)
struct MordhauProjectile_WillSticky final
{
public:
	uint8                                         Surface;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauProjectile_WillSticky) == 0x000001, "Wrong alignment on MordhauProjectile_WillSticky");
static_assert(sizeof(MordhauProjectile_WillSticky) == 0x000002, "Wrong size on MordhauProjectile_WillSticky");
static_assert(offsetof(MordhauProjectile_WillSticky, Surface) == 0x000000, "Member 'MordhauProjectile_WillSticky::Surface' has a wrong offset!");
static_assert(offsetof(MordhauProjectile_WillSticky, ReturnValue) == 0x000001, "Member 'MordhauProjectile_WillSticky::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauProjectile.GetWorldMeshTransformWithOffsets
// 0x0030 (0x0030 - 0x0000)
struct MordhauProjectile_GetWorldMeshTransformWithOffsets final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauProjectile_GetWorldMeshTransformWithOffsets) == 0x000010, "Wrong alignment on MordhauProjectile_GetWorldMeshTransformWithOffsets");
static_assert(sizeof(MordhauProjectile_GetWorldMeshTransformWithOffsets) == 0x000030, "Wrong size on MordhauProjectile_GetWorldMeshTransformWithOffsets");
static_assert(offsetof(MordhauProjectile_GetWorldMeshTransformWithOffsets, ReturnValue) == 0x000000, "Member 'MordhauProjectile_GetWorldMeshTransformWithOffsets::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauProjectile.UsesProjectileBlending
// 0x0001 (0x0001 - 0x0000)
struct MordhauProjectile_UsesProjectileBlending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauProjectile_UsesProjectileBlending) == 0x000001, "Wrong alignment on MordhauProjectile_UsesProjectileBlending");
static_assert(sizeof(MordhauProjectile_UsesProjectileBlending) == 0x000001, "Wrong size on MordhauProjectile_UsesProjectileBlending");
static_assert(offsetof(MordhauProjectile_UsesProjectileBlending, ReturnValue) == 0x000000, "Member 'MordhauProjectile_UsesProjectileBlending::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessions.AllowsJoin
// 0x0118 (0x0118 - 0x0000)
struct FindMordhauServerSessions_AllowsJoin final
{
public:
	struct FServerSearchResult                    Result;                                            // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FindMordhauServerSessions_AllowsJoin) == 0x000008, "Wrong alignment on FindMordhauServerSessions_AllowsJoin");
static_assert(sizeof(FindMordhauServerSessions_AllowsJoin) == 0x000118, "Wrong size on FindMordhauServerSessions_AllowsJoin");
static_assert(offsetof(FindMordhauServerSessions_AllowsJoin, Result) == 0x000000, "Member 'FindMordhauServerSessions_AllowsJoin::Result' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_AllowsJoin, ReturnValue) == 0x000110, "Member 'FindMordhauServerSessions_AllowsJoin::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessions.FindMordhauServerSessions
// 0x0060 (0x0060 - 0x0000)
struct FindMordhauServerSessions_FindMordhauServerSessions final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EServerList                                   ServerList_0;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxResults_0;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFindServerSessionsFilter              Filter_0;                                          // 0x0010(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UFindMordhauServerSessions*             ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FindMordhauServerSessions_FindMordhauServerSessions) == 0x000008, "Wrong alignment on FindMordhauServerSessions_FindMordhauServerSessions");
static_assert(sizeof(FindMordhauServerSessions_FindMordhauServerSessions) == 0x000060, "Wrong size on FindMordhauServerSessions_FindMordhauServerSessions");
static_assert(offsetof(FindMordhauServerSessions_FindMordhauServerSessions, WorldContextObject) == 0x000000, "Member 'FindMordhauServerSessions_FindMordhauServerSessions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_FindMordhauServerSessions, ServerList_0) == 0x000008, "Member 'FindMordhauServerSessions_FindMordhauServerSessions::ServerList_0' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_FindMordhauServerSessions, MaxResults_0) == 0x00000C, "Member 'FindMordhauServerSessions_FindMordhauServerSessions::MaxResults_0' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_FindMordhauServerSessions, Filter_0) == 0x000010, "Member 'FindMordhauServerSessions_FindMordhauServerSessions::Filter_0' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_FindMordhauServerSessions, ReturnValue) == 0x000058, "Member 'FindMordhauServerSessions_FindMordhauServerSessions::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessions.GetCurrentPlayers
// 0x0118 (0x0118 - 0x0000)
struct FindMordhauServerSessions_GetCurrentPlayers final
{
public:
	struct FServerSearchResult                    Result;                                            // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0110(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FindMordhauServerSessions_GetCurrentPlayers) == 0x000008, "Wrong alignment on FindMordhauServerSessions_GetCurrentPlayers");
static_assert(sizeof(FindMordhauServerSessions_GetCurrentPlayers) == 0x000118, "Wrong size on FindMordhauServerSessions_GetCurrentPlayers");
static_assert(offsetof(FindMordhauServerSessions_GetCurrentPlayers, Result) == 0x000000, "Member 'FindMordhauServerSessions_GetCurrentPlayers::Result' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_GetCurrentPlayers, ReturnValue) == 0x000110, "Member 'FindMordhauServerSessions_GetCurrentPlayers::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessions.GetGameMode
// 0x0120 (0x0120 - 0x0000)
struct FindMordhauServerSessions_GetGameMode final
{
public:
	struct FServerSearchResult                    Result;                                            // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0110(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FindMordhauServerSessions_GetGameMode) == 0x000008, "Wrong alignment on FindMordhauServerSessions_GetGameMode");
static_assert(sizeof(FindMordhauServerSessions_GetGameMode) == 0x000120, "Wrong size on FindMordhauServerSessions_GetGameMode");
static_assert(offsetof(FindMordhauServerSessions_GetGameMode, Result) == 0x000000, "Member 'FindMordhauServerSessions_GetGameMode::Result' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_GetGameMode, ReturnValue) == 0x000110, "Member 'FindMordhauServerSessions_GetGameMode::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessions.GetMapName
// 0x0120 (0x0120 - 0x0000)
struct FindMordhauServerSessions_GetMapName final
{
public:
	struct FServerSearchResult                    Result;                                            // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0110(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FindMordhauServerSessions_GetMapName) == 0x000008, "Wrong alignment on FindMordhauServerSessions_GetMapName");
static_assert(sizeof(FindMordhauServerSessions_GetMapName) == 0x000120, "Wrong size on FindMordhauServerSessions_GetMapName");
static_assert(offsetof(FindMordhauServerSessions_GetMapName, Result) == 0x000000, "Member 'FindMordhauServerSessions_GetMapName::Result' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_GetMapName, ReturnValue) == 0x000110, "Member 'FindMordhauServerSessions_GetMapName::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessions.GetMaxPlayers
// 0x0118 (0x0118 - 0x0000)
struct FindMordhauServerSessions_GetMaxPlayers final
{
public:
	struct FServerSearchResult                    Result;                                            // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0110(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FindMordhauServerSessions_GetMaxPlayers) == 0x000008, "Wrong alignment on FindMordhauServerSessions_GetMaxPlayers");
static_assert(sizeof(FindMordhauServerSessions_GetMaxPlayers) == 0x000118, "Wrong size on FindMordhauServerSessions_GetMaxPlayers");
static_assert(offsetof(FindMordhauServerSessions_GetMaxPlayers, Result) == 0x000000, "Member 'FindMordhauServerSessions_GetMaxPlayers::Result' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_GetMaxPlayers, ReturnValue) == 0x000110, "Member 'FindMordhauServerSessions_GetMaxPlayers::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessions.GetMods
// 0x0120 (0x0120 - 0x0000)
struct FindMordhauServerSessions_GetMods final
{
public:
	struct FServerSearchResult                    Result;                                            // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0110(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FindMordhauServerSessions_GetMods) == 0x000008, "Wrong alignment on FindMordhauServerSessions_GetMods");
static_assert(sizeof(FindMordhauServerSessions_GetMods) == 0x000120, "Wrong size on FindMordhauServerSessions_GetMods");
static_assert(offsetof(FindMordhauServerSessions_GetMods, Result) == 0x000000, "Member 'FindMordhauServerSessions_GetMods::Result' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_GetMods, ReturnValue) == 0x000110, "Member 'FindMordhauServerSessions_GetMods::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessions.GetPing
// 0x0118 (0x0118 - 0x0000)
struct FindMordhauServerSessions_GetPing final
{
public:
	struct FServerSearchResult                    Result;                                            // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0110(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FindMordhauServerSessions_GetPing) == 0x000008, "Wrong alignment on FindMordhauServerSessions_GetPing");
static_assert(sizeof(FindMordhauServerSessions_GetPing) == 0x000118, "Wrong size on FindMordhauServerSessions_GetPing");
static_assert(offsetof(FindMordhauServerSessions_GetPing, Result) == 0x000000, "Member 'FindMordhauServerSessions_GetPing::Result' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_GetPing, ReturnValue) == 0x000110, "Member 'FindMordhauServerSessions_GetPing::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessions.GetPlayers
// 0x0120 (0x0120 - 0x0000)
struct FindMordhauServerSessions_GetPlayers final
{
public:
	struct FServerSearchResult                    Result;                                            // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0110(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FindMordhauServerSessions_GetPlayers) == 0x000008, "Wrong alignment on FindMordhauServerSessions_GetPlayers");
static_assert(sizeof(FindMordhauServerSessions_GetPlayers) == 0x000120, "Wrong size on FindMordhauServerSessions_GetPlayers");
static_assert(offsetof(FindMordhauServerSessions_GetPlayers, Result) == 0x000000, "Member 'FindMordhauServerSessions_GetPlayers::Result' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_GetPlayers, ReturnValue) == 0x000110, "Member 'FindMordhauServerSessions_GetPlayers::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessions.GetRegion
// 0x0118 (0x0118 - 0x0000)
struct FindMordhauServerSessions_GetRegion final
{
public:
	struct FServerSearchResult                    Result;                                            // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EServerRegion                                 ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FindMordhauServerSessions_GetRegion) == 0x000008, "Wrong alignment on FindMordhauServerSessions_GetRegion");
static_assert(sizeof(FindMordhauServerSessions_GetRegion) == 0x000118, "Wrong size on FindMordhauServerSessions_GetRegion");
static_assert(offsetof(FindMordhauServerSessions_GetRegion, Result) == 0x000000, "Member 'FindMordhauServerSessions_GetRegion::Result' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_GetRegion, ReturnValue) == 0x000110, "Member 'FindMordhauServerSessions_GetRegion::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessions.GetServerAddress
// 0x0120 (0x0120 - 0x0000)
struct FindMordhauServerSessions_GetServerAddress final
{
public:
	struct FServerSearchResult                    Result;                                            // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0110(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FindMordhauServerSessions_GetServerAddress) == 0x000008, "Wrong alignment on FindMordhauServerSessions_GetServerAddress");
static_assert(sizeof(FindMordhauServerSessions_GetServerAddress) == 0x000120, "Wrong size on FindMordhauServerSessions_GetServerAddress");
static_assert(offsetof(FindMordhauServerSessions_GetServerAddress, Result) == 0x000000, "Member 'FindMordhauServerSessions_GetServerAddress::Result' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_GetServerAddress, ReturnValue) == 0x000110, "Member 'FindMordhauServerSessions_GetServerAddress::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessions.GetServerID
// 0x0120 (0x0120 - 0x0000)
struct FindMordhauServerSessions_GetServerID final
{
public:
	struct FServerSearchResult                    Result;                                            // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0110(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FindMordhauServerSessions_GetServerID) == 0x000008, "Wrong alignment on FindMordhauServerSessions_GetServerID");
static_assert(sizeof(FindMordhauServerSessions_GetServerID) == 0x000120, "Wrong size on FindMordhauServerSessions_GetServerID");
static_assert(offsetof(FindMordhauServerSessions_GetServerID, Result) == 0x000000, "Member 'FindMordhauServerSessions_GetServerID::Result' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_GetServerID, ReturnValue) == 0x000110, "Member 'FindMordhauServerSessions_GetServerID::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessions.GetServerList
// 0x0118 (0x0118 - 0x0000)
struct FindMordhauServerSessions_GetServerList final
{
public:
	struct FServerSearchResult                    Result;                                            // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EServerList                                   ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FindMordhauServerSessions_GetServerList) == 0x000008, "Wrong alignment on FindMordhauServerSessions_GetServerList");
static_assert(sizeof(FindMordhauServerSessions_GetServerList) == 0x000118, "Wrong size on FindMordhauServerSessions_GetServerList");
static_assert(offsetof(FindMordhauServerSessions_GetServerList, Result) == 0x000000, "Member 'FindMordhauServerSessions_GetServerList::Result' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_GetServerList, ReturnValue) == 0x000110, "Member 'FindMordhauServerSessions_GetServerList::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessions.GetServerName
// 0x0120 (0x0120 - 0x0000)
struct FindMordhauServerSessions_GetServerName final
{
public:
	struct FServerSearchResult                    Result;                                            // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0110(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FindMordhauServerSessions_GetServerName) == 0x000008, "Wrong alignment on FindMordhauServerSessions_GetServerName");
static_assert(sizeof(FindMordhauServerSessions_GetServerName) == 0x000120, "Wrong size on FindMordhauServerSessions_GetServerName");
static_assert(offsetof(FindMordhauServerSessions_GetServerName, Result) == 0x000000, "Member 'FindMordhauServerSessions_GetServerName::Result' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_GetServerName, ReturnValue) == 0x000110, "Member 'FindMordhauServerSessions_GetServerName::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessions.GetVisibility
// 0x0118 (0x0118 - 0x0000)
struct FindMordhauServerSessions_GetVisibility final
{
public:
	struct FServerSearchResult                    Result;                                            // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EServerVisibility                             ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FindMordhauServerSessions_GetVisibility) == 0x000008, "Wrong alignment on FindMordhauServerSessions_GetVisibility");
static_assert(sizeof(FindMordhauServerSessions_GetVisibility) == 0x000118, "Wrong size on FindMordhauServerSessions_GetVisibility");
static_assert(offsetof(FindMordhauServerSessions_GetVisibility, Result) == 0x000000, "Member 'FindMordhauServerSessions_GetVisibility::Result' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_GetVisibility, ReturnValue) == 0x000110, "Member 'FindMordhauServerSessions_GetVisibility::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessions.IsConsoleServer
// 0x0118 (0x0118 - 0x0000)
struct FindMordhauServerSessions_IsConsoleServer final
{
public:
	struct FServerSearchResult                    Result;                                            // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FindMordhauServerSessions_IsConsoleServer) == 0x000008, "Wrong alignment on FindMordhauServerSessions_IsConsoleServer");
static_assert(sizeof(FindMordhauServerSessions_IsConsoleServer) == 0x000118, "Wrong size on FindMordhauServerSessions_IsConsoleServer");
static_assert(offsetof(FindMordhauServerSessions_IsConsoleServer, Result) == 0x000000, "Member 'FindMordhauServerSessions_IsConsoleServer::Result' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_IsConsoleServer, ReturnValue) == 0x000110, "Member 'FindMordhauServerSessions_IsConsoleServer::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessions.IsFavoriteServer
// 0x0118 (0x0118 - 0x0000)
struct FindMordhauServerSessions_IsFavoriteServer final
{
public:
	struct FServerSearchResult                    Result;                                            // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FindMordhauServerSessions_IsFavoriteServer) == 0x000008, "Wrong alignment on FindMordhauServerSessions_IsFavoriteServer");
static_assert(sizeof(FindMordhauServerSessions_IsFavoriteServer) == 0x000118, "Wrong size on FindMordhauServerSessions_IsFavoriteServer");
static_assert(offsetof(FindMordhauServerSessions_IsFavoriteServer, Result) == 0x000000, "Member 'FindMordhauServerSessions_IsFavoriteServer::Result' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_IsFavoriteServer, ReturnValue) == 0x000110, "Member 'FindMordhauServerSessions_IsFavoriteServer::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessions.IsModded
// 0x0118 (0x0118 - 0x0000)
struct FindMordhauServerSessions_IsModded final
{
public:
	struct FServerSearchResult                    Result;                                            // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FindMordhauServerSessions_IsModded) == 0x000008, "Wrong alignment on FindMordhauServerSessions_IsModded");
static_assert(sizeof(FindMordhauServerSessions_IsModded) == 0x000118, "Wrong size on FindMordhauServerSessions_IsModded");
static_assert(offsetof(FindMordhauServerSessions_IsModded, Result) == 0x000000, "Member 'FindMordhauServerSessions_IsModded::Result' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_IsModded, ReturnValue) == 0x000110, "Member 'FindMordhauServerSessions_IsModded::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessions.IsNoviceServer
// 0x0118 (0x0118 - 0x0000)
struct FindMordhauServerSessions_IsNoviceServer final
{
public:
	struct FServerSearchResult                    Result;                                            // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FindMordhauServerSessions_IsNoviceServer) == 0x000008, "Wrong alignment on FindMordhauServerSessions_IsNoviceServer");
static_assert(sizeof(FindMordhauServerSessions_IsNoviceServer) == 0x000118, "Wrong size on FindMordhauServerSessions_IsNoviceServer");
static_assert(offsetof(FindMordhauServerSessions_IsNoviceServer, Result) == 0x000000, "Member 'FindMordhauServerSessions_IsNoviceServer::Result' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_IsNoviceServer, ReturnValue) == 0x000110, "Member 'FindMordhauServerSessions_IsNoviceServer::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessions.IsOfficial
// 0x0118 (0x0118 - 0x0000)
struct FindMordhauServerSessions_IsOfficial final
{
public:
	struct FServerSearchResult                    Result;                                            // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FindMordhauServerSessions_IsOfficial) == 0x000008, "Wrong alignment on FindMordhauServerSessions_IsOfficial");
static_assert(sizeof(FindMordhauServerSessions_IsOfficial) == 0x000118, "Wrong size on FindMordhauServerSessions_IsOfficial");
static_assert(offsetof(FindMordhauServerSessions_IsOfficial, Result) == 0x000000, "Member 'FindMordhauServerSessions_IsOfficial::Result' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_IsOfficial, ReturnValue) == 0x000110, "Member 'FindMordhauServerSessions_IsOfficial::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessions.IsPasswordProtected
// 0x0118 (0x0118 - 0x0000)
struct FindMordhauServerSessions_IsPasswordProtected final
{
public:
	struct FServerSearchResult                    Result;                                            // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FindMordhauServerSessions_IsPasswordProtected) == 0x000008, "Wrong alignment on FindMordhauServerSessions_IsPasswordProtected");
static_assert(sizeof(FindMordhauServerSessions_IsPasswordProtected) == 0x000118, "Wrong size on FindMordhauServerSessions_IsPasswordProtected");
static_assert(offsetof(FindMordhauServerSessions_IsPasswordProtected, Result) == 0x000000, "Member 'FindMordhauServerSessions_IsPasswordProtected::Result' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_IsPasswordProtected, ReturnValue) == 0x000110, "Member 'FindMordhauServerSessions_IsPasswordProtected::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessions.IsRecentServer
// 0x0118 (0x0118 - 0x0000)
struct FindMordhauServerSessions_IsRecentServer final
{
public:
	struct FServerSearchResult                    Result;                                            // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FindMordhauServerSessions_IsRecentServer) == 0x000008, "Wrong alignment on FindMordhauServerSessions_IsRecentServer");
static_assert(sizeof(FindMordhauServerSessions_IsRecentServer) == 0x000118, "Wrong size on FindMordhauServerSessions_IsRecentServer");
static_assert(offsetof(FindMordhauServerSessions_IsRecentServer, Result) == 0x000000, "Member 'FindMordhauServerSessions_IsRecentServer::Result' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessions_IsRecentServer, ReturnValue) == 0x000110, "Member 'FindMordhauServerSessions_IsRecentServer::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessionByAddress.FindMordhauServerSessionByAddress
// 0x0018 (0x0018 - 0x0000)
struct FindMordhauServerSessionByAddress_FindMordhauServerSessionByAddress final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerAddress                         Address_0;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UFindMordhauServerSessionByAddress*     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FindMordhauServerSessionByAddress_FindMordhauServerSessionByAddress) == 0x000008, "Wrong alignment on FindMordhauServerSessionByAddress_FindMordhauServerSessionByAddress");
static_assert(sizeof(FindMordhauServerSessionByAddress_FindMordhauServerSessionByAddress) == 0x000018, "Wrong size on FindMordhauServerSessionByAddress_FindMordhauServerSessionByAddress");
static_assert(offsetof(FindMordhauServerSessionByAddress_FindMordhauServerSessionByAddress, WorldContextObject) == 0x000000, "Member 'FindMordhauServerSessionByAddress_FindMordhauServerSessionByAddress::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessionByAddress_FindMordhauServerSessionByAddress, Address_0) == 0x000008, "Member 'FindMordhauServerSessionByAddress_FindMordhauServerSessionByAddress::Address_0' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessionByAddress_FindMordhauServerSessionByAddress, ReturnValue) == 0x000010, "Member 'FindMordhauServerSessionByAddress_FindMordhauServerSessionByAddress::ReturnValue' has a wrong offset!");

// Function Mordhau.FindMordhauServerSessionByServerDetails.FindMordhauServerSessionByServerDetails
// 0x0048 (0x0048 - 0x0000)
struct FindMordhauServerSessionByServerDetails_FindMordhauServerSessionByServerDetails final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabServerDetails                  InServerDetails;                                   // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UFindMordhauServerSessionByServerDetails* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FindMordhauServerSessionByServerDetails_FindMordhauServerSessionByServerDetails) == 0x000008, "Wrong alignment on FindMordhauServerSessionByServerDetails_FindMordhauServerSessionByServerDetails");
static_assert(sizeof(FindMordhauServerSessionByServerDetails_FindMordhauServerSessionByServerDetails) == 0x000048, "Wrong size on FindMordhauServerSessionByServerDetails_FindMordhauServerSessionByServerDetails");
static_assert(offsetof(FindMordhauServerSessionByServerDetails_FindMordhauServerSessionByServerDetails, WorldContextObject) == 0x000000, "Member 'FindMordhauServerSessionByServerDetails_FindMordhauServerSessionByServerDetails::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessionByServerDetails_FindMordhauServerSessionByServerDetails, InServerDetails) == 0x000008, "Member 'FindMordhauServerSessionByServerDetails_FindMordhauServerSessionByServerDetails::InServerDetails' has a wrong offset!");
static_assert(offsetof(FindMordhauServerSessionByServerDetails_FindMordhauServerSessionByServerDetails, ReturnValue) == 0x000040, "Member 'FindMordhauServerSessionByServerDetails_FindMordhauServerSessionByServerDetails::ReturnValue' has a wrong offset!");

// Function Mordhau.JoinMordhauServerSession.JoinMordhauServerSession
// 0x0118 (0x0118 - 0x0000)
struct JoinMordhauServerSession_JoinMordhauServerSession final
{
public:
	struct FServerSearchResult                    SearchResult;                                      // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UJoinMordhauServerSession*              ReturnValue;                                       // 0x0110(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JoinMordhauServerSession_JoinMordhauServerSession) == 0x000008, "Wrong alignment on JoinMordhauServerSession_JoinMordhauServerSession");
static_assert(sizeof(JoinMordhauServerSession_JoinMordhauServerSession) == 0x000118, "Wrong size on JoinMordhauServerSession_JoinMordhauServerSession");
static_assert(offsetof(JoinMordhauServerSession_JoinMordhauServerSession, SearchResult) == 0x000000, "Member 'JoinMordhauServerSession_JoinMordhauServerSession::SearchResult' has a wrong offset!");
static_assert(offsetof(JoinMordhauServerSession_JoinMordhauServerSession, ReturnValue) == 0x000110, "Member 'JoinMordhauServerSession_JoinMordhauServerSession::ReturnValue' has a wrong offset!");

// Function Mordhau.CancelFindMordhauSessions.CancelFindMordhauSessions
// 0x0001 (0x0001 - 0x0000)
struct CancelFindMordhauSessions_CancelFindMordhauSessions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CancelFindMordhauSessions_CancelFindMordhauSessions) == 0x000001, "Wrong alignment on CancelFindMordhauSessions_CancelFindMordhauSessions");
static_assert(sizeof(CancelFindMordhauSessions_CancelFindMordhauSessions) == 0x000001, "Wrong size on CancelFindMordhauSessions_CancelFindMordhauSessions");
static_assert(offsetof(CancelFindMordhauSessions_CancelFindMordhauSessions, ReturnValue) == 0x000000, "Member 'CancelFindMordhauSessions_CancelFindMordhauSessions::ReturnValue' has a wrong offset!");

// Function Mordhau.DestroyMordhauServerSession.DestroyMordhauServerSession
// 0x0008 (0x0008 - 0x0000)
struct DestroyMordhauServerSession_DestroyMordhauServerSession final
{
public:
	class UDestroyMordhauServerSession*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DestroyMordhauServerSession_DestroyMordhauServerSession) == 0x000008, "Wrong alignment on DestroyMordhauServerSession_DestroyMordhauServerSession");
static_assert(sizeof(DestroyMordhauServerSession_DestroyMordhauServerSession) == 0x000008, "Wrong size on DestroyMordhauServerSession_DestroyMordhauServerSession");
static_assert(offsetof(DestroyMordhauServerSession_DestroyMordhauServerSession, ReturnValue) == 0x000000, "Member 'DestroyMordhauServerSession_DestroyMordhauServerSession::ReturnValue' has a wrong offset!");

// Function Mordhau.PingMordhauServerSession.PingMordhauServerSession
// 0x0120 (0x0120 - 0x0000)
struct PingMordhauServerSession_PingMordhauServerSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerSearchResult                    SearchResult_0;                                    // 0x0008(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UPingMordhauServerSession*              ReturnValue;                                       // 0x0118(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingMordhauServerSession_PingMordhauServerSession) == 0x000008, "Wrong alignment on PingMordhauServerSession_PingMordhauServerSession");
static_assert(sizeof(PingMordhauServerSession_PingMordhauServerSession) == 0x000120, "Wrong size on PingMordhauServerSession_PingMordhauServerSession");
static_assert(offsetof(PingMordhauServerSession_PingMordhauServerSession, WorldContextObject) == 0x000000, "Member 'PingMordhauServerSession_PingMordhauServerSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PingMordhauServerSession_PingMordhauServerSession, SearchResult_0) == 0x000008, "Member 'PingMordhauServerSession_PingMordhauServerSession::SearchResult_0' has a wrong offset!");
static_assert(offsetof(PingMordhauServerSession_PingMordhauServerSession, ReturnValue) == 0x000118, "Member 'PingMordhauServerSession_PingMordhauServerSession::ReturnValue' has a wrong offset!");

// Function Mordhau.ReserveMordhauServerSessionSlots.ReserveMordhauServerSessionSlots
// 0x0130 (0x0130 - 0x0000)
struct ReserveMordhauServerSessionSlots_ReserveMordhauServerSessionSlots final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerSearchResult                    SearchResult_0;                                    // 0x0008(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FPlayFabPlayerEntity>           PartyMembers_0;                                    // 0x0118(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UReserveMordhauServerSessionSlots*      ReturnValue;                                       // 0x0128(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReserveMordhauServerSessionSlots_ReserveMordhauServerSessionSlots) == 0x000008, "Wrong alignment on ReserveMordhauServerSessionSlots_ReserveMordhauServerSessionSlots");
static_assert(sizeof(ReserveMordhauServerSessionSlots_ReserveMordhauServerSessionSlots) == 0x000130, "Wrong size on ReserveMordhauServerSessionSlots_ReserveMordhauServerSessionSlots");
static_assert(offsetof(ReserveMordhauServerSessionSlots_ReserveMordhauServerSessionSlots, WorldContextObject) == 0x000000, "Member 'ReserveMordhauServerSessionSlots_ReserveMordhauServerSessionSlots::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ReserveMordhauServerSessionSlots_ReserveMordhauServerSessionSlots, SearchResult_0) == 0x000008, "Member 'ReserveMordhauServerSessionSlots_ReserveMordhauServerSessionSlots::SearchResult_0' has a wrong offset!");
static_assert(offsetof(ReserveMordhauServerSessionSlots_ReserveMordhauServerSessionSlots, PartyMembers_0) == 0x000118, "Member 'ReserveMordhauServerSessionSlots_ReserveMordhauServerSessionSlots::PartyMembers_0' has a wrong offset!");
static_assert(offsetof(ReserveMordhauServerSessionSlots_ReserveMordhauServerSessionSlots, ReturnValue) == 0x000128, "Member 'ReserveMordhauServerSessionSlots_ReserveMordhauServerSessionSlots::ReturnValue' has a wrong offset!");

// Function Mordhau.GetMordhauServerSessionMods.GetMordhauServerSessionMods
// 0x0118 (0x0118 - 0x0000)
struct GetMordhauServerSessionMods_GetMordhauServerSessionMods final
{
public:
	struct FServerSearchResult                    SearchResult_0;                                    // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UGetMordhauServerSessionMods*           ReturnValue;                                       // 0x0110(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetMordhauServerSessionMods_GetMordhauServerSessionMods) == 0x000008, "Wrong alignment on GetMordhauServerSessionMods_GetMordhauServerSessionMods");
static_assert(sizeof(GetMordhauServerSessionMods_GetMordhauServerSessionMods) == 0x000118, "Wrong size on GetMordhauServerSessionMods_GetMordhauServerSessionMods");
static_assert(offsetof(GetMordhauServerSessionMods_GetMordhauServerSessionMods, SearchResult_0) == 0x000000, "Member 'GetMordhauServerSessionMods_GetMordhauServerSessionMods::SearchResult_0' has a wrong offset!");
static_assert(offsetof(GetMordhauServerSessionMods_GetMordhauServerSessionMods, ReturnValue) == 0x000110, "Member 'GetMordhauServerSessionMods_GetMordhauServerSessionMods::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.ApplyProfileTo
// 0x00C8 (0x00C8 - 0x0000)
struct MordhauSingleton_ApplyProfileTo final
{
public:
	struct FCharacterProfile                      Profile;                                           // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AMordhauCharacter*                      Char;                                              // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Team;                                              // 0x00C0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddEquipment;                                     // 0x00C1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauSingleton_ApplyProfileTo) == 0x000008, "Wrong alignment on MordhauSingleton_ApplyProfileTo");
static_assert(sizeof(MordhauSingleton_ApplyProfileTo) == 0x0000C8, "Wrong size on MordhauSingleton_ApplyProfileTo");
static_assert(offsetof(MordhauSingleton_ApplyProfileTo, Profile) == 0x000000, "Member 'MordhauSingleton_ApplyProfileTo::Profile' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_ApplyProfileTo, Char) == 0x0000B8, "Member 'MordhauSingleton_ApplyProfileTo::Char' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_ApplyProfileTo, Team) == 0x0000C0, "Member 'MordhauSingleton_ApplyProfileTo::Team' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_ApplyProfileTo, bAddEquipment) == 0x0000C1, "Member 'MordhauSingleton_ApplyProfileTo::bAddEquipment' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetEmblemColor
// 0x0014 (0x0014 - 0x0000)
struct MordhauSingleton_GetEmblemColor final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetEmblemColor) == 0x000004, "Wrong alignment on MordhauSingleton_GetEmblemColor");
static_assert(sizeof(MordhauSingleton_GetEmblemColor) == 0x000014, "Wrong size on MordhauSingleton_GetEmblemColor");
static_assert(offsetof(MordhauSingleton_GetEmblemColor, ID) == 0x000000, "Member 'MordhauSingleton_GetEmblemColor::ID' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_GetEmblemColor, ReturnValue) == 0x000004, "Member 'MordhauSingleton_GetEmblemColor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetEmblemColorObject
// 0x0010 (0x0010 - 0x0000)
struct MordhauSingleton_GetEmblemColorObject final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauColor*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetEmblemColorObject) == 0x000008, "Wrong alignment on MordhauSingleton_GetEmblemColorObject");
static_assert(sizeof(MordhauSingleton_GetEmblemColorObject) == 0x000010, "Wrong size on MordhauSingleton_GetEmblemColorObject");
static_assert(offsetof(MordhauSingleton_GetEmblemColorObject, ID) == 0x000000, "Member 'MordhauSingleton_GetEmblemColorObject::ID' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_GetEmblemColorObject, ReturnValue) == 0x000008, "Member 'MordhauSingleton_GetEmblemColorObject::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetEquipment
// 0x0010 (0x0010 - 0x0000)
struct MordhauSingleton_GetEquipment final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AMordhauEquipment>          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetEquipment) == 0x000008, "Wrong alignment on MordhauSingleton_GetEquipment");
static_assert(sizeof(MordhauSingleton_GetEquipment) == 0x000010, "Wrong size on MordhauSingleton_GetEquipment");
static_assert(offsetof(MordhauSingleton_GetEquipment, Index_0) == 0x000000, "Member 'MordhauSingleton_GetEquipment::Index_0' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_GetEquipment, ReturnValue) == 0x000008, "Member 'MordhauSingleton_GetEquipment::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetEquipmentArray
// 0x0010 (0x0010 - 0x0000)
struct MordhauSingleton_GetEquipmentArray final
{
public:
	TArray<TSoftClassPtr<class UClass>>           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetEquipmentArray) == 0x000008, "Wrong alignment on MordhauSingleton_GetEquipmentArray");
static_assert(sizeof(MordhauSingleton_GetEquipmentArray) == 0x000010, "Wrong size on MordhauSingleton_GetEquipmentArray");
static_assert(offsetof(MordhauSingleton_GetEquipmentArray, ReturnValue) == 0x000000, "Member 'MordhauSingleton_GetEquipmentArray::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetEquipmentID
// 0x0010 (0x0010 - 0x0000)
struct MordhauSingleton_GetEquipmentID final
{
public:
	TSubclassOf<class AMordhauEquipment>          EquipmentType;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauSingleton_GetEquipmentID) == 0x000008, "Wrong alignment on MordhauSingleton_GetEquipmentID");
static_assert(sizeof(MordhauSingleton_GetEquipmentID) == 0x000010, "Wrong size on MordhauSingleton_GetEquipmentID");
static_assert(offsetof(MordhauSingleton_GetEquipmentID, EquipmentType) == 0x000000, "Member 'MordhauSingleton_GetEquipmentID::EquipmentType' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_GetEquipmentID, ReturnValue) == 0x000008, "Member 'MordhauSingleton_GetEquipmentID::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetEyeColor
// 0x0014 (0x0014 - 0x0000)
struct MordhauSingleton_GetEyeColor final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetEyeColor) == 0x000004, "Wrong alignment on MordhauSingleton_GetEyeColor");
static_assert(sizeof(MordhauSingleton_GetEyeColor) == 0x000014, "Wrong size on MordhauSingleton_GetEyeColor");
static_assert(offsetof(MordhauSingleton_GetEyeColor, ID) == 0x000000, "Member 'MordhauSingleton_GetEyeColor::ID' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_GetEyeColor, ReturnValue) == 0x000004, "Member 'MordhauSingleton_GetEyeColor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetEyeColorObject
// 0x0010 (0x0010 - 0x0000)
struct MordhauSingleton_GetEyeColorObject final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauColor*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetEyeColorObject) == 0x000008, "Wrong alignment on MordhauSingleton_GetEyeColorObject");
static_assert(sizeof(MordhauSingleton_GetEyeColorObject) == 0x000010, "Wrong size on MordhauSingleton_GetEyeColorObject");
static_assert(offsetof(MordhauSingleton_GetEyeColorObject, ID) == 0x000000, "Member 'MordhauSingleton_GetEyeColorObject::ID' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_GetEyeColorObject, ReturnValue) == 0x000008, "Member 'MordhauSingleton_GetEyeColorObject::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetFemaleVoice
// 0x0010 (0x0010 - 0x0000)
struct MordhauSingleton_GetFemaleVoice final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCharacterVoice>            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetFemaleVoice) == 0x000008, "Wrong alignment on MordhauSingleton_GetFemaleVoice");
static_assert(sizeof(MordhauSingleton_GetFemaleVoice) == 0x000010, "Wrong size on MordhauSingleton_GetFemaleVoice");
static_assert(offsetof(MordhauSingleton_GetFemaleVoice, Index_0) == 0x000000, "Member 'MordhauSingleton_GetFemaleVoice::Index_0' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_GetFemaleVoice, ReturnValue) == 0x000008, "Member 'MordhauSingleton_GetFemaleVoice::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetFemaleVoices
// 0x0010 (0x0010 - 0x0000)
struct MordhauSingleton_GetFemaleVoices final
{
public:
	TArray<TSoftClassPtr<class UClass>>           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetFemaleVoices) == 0x000008, "Wrong alignment on MordhauSingleton_GetFemaleVoices");
static_assert(sizeof(MordhauSingleton_GetFemaleVoices) == 0x000010, "Wrong size on MordhauSingleton_GetFemaleVoices");
static_assert(offsetof(MordhauSingleton_GetFemaleVoices, ReturnValue) == 0x000000, "Member 'MordhauSingleton_GetFemaleVoices::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetHairColor
// 0x0014 (0x0014 - 0x0000)
struct MordhauSingleton_GetHairColor final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetHairColor) == 0x000004, "Wrong alignment on MordhauSingleton_GetHairColor");
static_assert(sizeof(MordhauSingleton_GetHairColor) == 0x000014, "Wrong size on MordhauSingleton_GetHairColor");
static_assert(offsetof(MordhauSingleton_GetHairColor, ID) == 0x000000, "Member 'MordhauSingleton_GetHairColor::ID' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_GetHairColor, ReturnValue) == 0x000004, "Member 'MordhauSingleton_GetHairColor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetHairColorObject
// 0x0010 (0x0010 - 0x0000)
struct MordhauSingleton_GetHairColorObject final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauColor*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetHairColorObject) == 0x000008, "Wrong alignment on MordhauSingleton_GetHairColorObject");
static_assert(sizeof(MordhauSingleton_GetHairColorObject) == 0x000010, "Wrong size on MordhauSingleton_GetHairColorObject");
static_assert(offsetof(MordhauSingleton_GetHairColorObject, ID) == 0x000000, "Member 'MordhauSingleton_GetHairColorObject::ID' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_GetHairColorObject, ReturnValue) == 0x000008, "Member 'MordhauSingleton_GetHairColorObject::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetHeadWearable
// 0x0010 (0x0010 - 0x0000)
struct MordhauSingleton_GetHeadWearable final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHeadWearable>              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetHeadWearable) == 0x000008, "Wrong alignment on MordhauSingleton_GetHeadWearable");
static_assert(sizeof(MordhauSingleton_GetHeadWearable) == 0x000010, "Wrong size on MordhauSingleton_GetHeadWearable");
static_assert(offsetof(MordhauSingleton_GetHeadWearable, Index_0) == 0x000000, "Member 'MordhauSingleton_GetHeadWearable::Index_0' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_GetHeadWearable, ReturnValue) == 0x000008, "Member 'MordhauSingleton_GetHeadWearable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetHeadWearables
// 0x0010 (0x0010 - 0x0000)
struct MordhauSingleton_GetHeadWearables final
{
public:
	TArray<TSoftClassPtr<class UClass>>           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetHeadWearables) == 0x000008, "Wrong alignment on MordhauSingleton_GetHeadWearables");
static_assert(sizeof(MordhauSingleton_GetHeadWearables) == 0x000010, "Wrong size on MordhauSingleton_GetHeadWearables");
static_assert(offsetof(MordhauSingleton_GetHeadWearables, ReturnValue) == 0x000000, "Member 'MordhauSingleton_GetHeadWearables::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetLegsWearable
// 0x0010 (0x0010 - 0x0000)
struct MordhauSingleton_GetLegsWearable final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULegsWearable>              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetLegsWearable) == 0x000008, "Wrong alignment on MordhauSingleton_GetLegsWearable");
static_assert(sizeof(MordhauSingleton_GetLegsWearable) == 0x000010, "Wrong size on MordhauSingleton_GetLegsWearable");
static_assert(offsetof(MordhauSingleton_GetLegsWearable, Index_0) == 0x000000, "Member 'MordhauSingleton_GetLegsWearable::Index_0' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_GetLegsWearable, ReturnValue) == 0x000008, "Member 'MordhauSingleton_GetLegsWearable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetLegsWearables
// 0x0010 (0x0010 - 0x0000)
struct MordhauSingleton_GetLegsWearables final
{
public:
	TArray<TSoftClassPtr<class UClass>>           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetLegsWearables) == 0x000008, "Wrong alignment on MordhauSingleton_GetLegsWearables");
static_assert(sizeof(MordhauSingleton_GetLegsWearables) == 0x000010, "Wrong size on MordhauSingleton_GetLegsWearables");
static_assert(offsetof(MordhauSingleton_GetLegsWearables, ReturnValue) == 0x000000, "Member 'MordhauSingleton_GetLegsWearables::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetMaleVoice
// 0x0010 (0x0010 - 0x0000)
struct MordhauSingleton_GetMaleVoice final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCharacterVoice>            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetMaleVoice) == 0x000008, "Wrong alignment on MordhauSingleton_GetMaleVoice");
static_assert(sizeof(MordhauSingleton_GetMaleVoice) == 0x000010, "Wrong size on MordhauSingleton_GetMaleVoice");
static_assert(offsetof(MordhauSingleton_GetMaleVoice, Index_0) == 0x000000, "Member 'MordhauSingleton_GetMaleVoice::Index_0' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_GetMaleVoice, ReturnValue) == 0x000008, "Member 'MordhauSingleton_GetMaleVoice::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetMaleVoices
// 0x0010 (0x0010 - 0x0000)
struct MordhauSingleton_GetMaleVoices final
{
public:
	TArray<TSoftClassPtr<class UClass>>           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetMaleVoices) == 0x000008, "Wrong alignment on MordhauSingleton_GetMaleVoices");
static_assert(sizeof(MordhauSingleton_GetMaleVoices) == 0x000010, "Wrong size on MordhauSingleton_GetMaleVoices");
static_assert(offsetof(MordhauSingleton_GetMaleVoices, ReturnValue) == 0x000000, "Member 'MordhauSingleton_GetMaleVoices::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetMetalTintsColor
// 0x0014 (0x0014 - 0x0000)
struct MordhauSingleton_GetMetalTintsColor final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetMetalTintsColor) == 0x000004, "Wrong alignment on MordhauSingleton_GetMetalTintsColor");
static_assert(sizeof(MordhauSingleton_GetMetalTintsColor) == 0x000014, "Wrong size on MordhauSingleton_GetMetalTintsColor");
static_assert(offsetof(MordhauSingleton_GetMetalTintsColor, ID) == 0x000000, "Member 'MordhauSingleton_GetMetalTintsColor::ID' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_GetMetalTintsColor, ReturnValue) == 0x000004, "Member 'MordhauSingleton_GetMetalTintsColor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetMetalTintsColorObject
// 0x0010 (0x0010 - 0x0000)
struct MordhauSingleton_GetMetalTintsColorObject final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauColor*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetMetalTintsColorObject) == 0x000008, "Wrong alignment on MordhauSingleton_GetMetalTintsColorObject");
static_assert(sizeof(MordhauSingleton_GetMetalTintsColorObject) == 0x000010, "Wrong size on MordhauSingleton_GetMetalTintsColorObject");
static_assert(offsetof(MordhauSingleton_GetMetalTintsColorObject, ID) == 0x000000, "Member 'MordhauSingleton_GetMetalTintsColorObject::ID' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_GetMetalTintsColorObject, ReturnValue) == 0x000008, "Member 'MordhauSingleton_GetMetalTintsColorObject::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetRandomBotNames
// 0x0010 (0x0010 - 0x0000)
struct MordhauSingleton_GetRandomBotNames final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetRandomBotNames) == 0x000008, "Wrong alignment on MordhauSingleton_GetRandomBotNames");
static_assert(sizeof(MordhauSingleton_GetRandomBotNames) == 0x000010, "Wrong size on MordhauSingleton_GetRandomBotNames");
static_assert(offsetof(MordhauSingleton_GetRandomBotNames, ReturnValue) == 0x000000, "Member 'MordhauSingleton_GetRandomBotNames::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetSkinColor
// 0x0014 (0x0014 - 0x0000)
struct MordhauSingleton_GetSkinColor final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetSkinColor) == 0x000004, "Wrong alignment on MordhauSingleton_GetSkinColor");
static_assert(sizeof(MordhauSingleton_GetSkinColor) == 0x000014, "Wrong size on MordhauSingleton_GetSkinColor");
static_assert(offsetof(MordhauSingleton_GetSkinColor, ID) == 0x000000, "Member 'MordhauSingleton_GetSkinColor::ID' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_GetSkinColor, ReturnValue) == 0x000004, "Member 'MordhauSingleton_GetSkinColor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetSkinColorObject
// 0x0010 (0x0010 - 0x0000)
struct MordhauSingleton_GetSkinColorObject final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauColor*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetSkinColorObject) == 0x000008, "Wrong alignment on MordhauSingleton_GetSkinColorObject");
static_assert(sizeof(MordhauSingleton_GetSkinColorObject) == 0x000010, "Wrong size on MordhauSingleton_GetSkinColorObject");
static_assert(offsetof(MordhauSingleton_GetSkinColorObject, ID) == 0x000000, "Member 'MordhauSingleton_GetSkinColorObject::ID' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_GetSkinColorObject, ReturnValue) == 0x000008, "Member 'MordhauSingleton_GetSkinColorObject::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetTableColor
// 0x0014 (0x0014 - 0x0000)
struct MordhauSingleton_GetTableColor final
{
public:
	uint8                                         Table;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ID;                                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetTableColor) == 0x000004, "Wrong alignment on MordhauSingleton_GetTableColor");
static_assert(sizeof(MordhauSingleton_GetTableColor) == 0x000014, "Wrong size on MordhauSingleton_GetTableColor");
static_assert(offsetof(MordhauSingleton_GetTableColor, Table) == 0x000000, "Member 'MordhauSingleton_GetTableColor::Table' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_GetTableColor, ID) == 0x000001, "Member 'MordhauSingleton_GetTableColor::ID' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_GetTableColor, ReturnValue) == 0x000004, "Member 'MordhauSingleton_GetTableColor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetTableColorObject
// 0x0010 (0x0010 - 0x0000)
struct MordhauSingleton_GetTableColorObject final
{
public:
	uint8                                         Table;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ID;                                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauColor*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetTableColorObject) == 0x000008, "Wrong alignment on MordhauSingleton_GetTableColorObject");
static_assert(sizeof(MordhauSingleton_GetTableColorObject) == 0x000010, "Wrong size on MordhauSingleton_GetTableColorObject");
static_assert(offsetof(MordhauSingleton_GetTableColorObject, Table) == 0x000000, "Member 'MordhauSingleton_GetTableColorObject::Table' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_GetTableColorObject, ID) == 0x000001, "Member 'MordhauSingleton_GetTableColorObject::ID' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_GetTableColorObject, ReturnValue) == 0x000008, "Member 'MordhauSingleton_GetTableColorObject::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetUpperChestWearable
// 0x0010 (0x0010 - 0x0000)
struct MordhauSingleton_GetUpperChestWearable final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUpperChestWearable>        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetUpperChestWearable) == 0x000008, "Wrong alignment on MordhauSingleton_GetUpperChestWearable");
static_assert(sizeof(MordhauSingleton_GetUpperChestWearable) == 0x000010, "Wrong size on MordhauSingleton_GetUpperChestWearable");
static_assert(offsetof(MordhauSingleton_GetUpperChestWearable, Index_0) == 0x000000, "Member 'MordhauSingleton_GetUpperChestWearable::Index_0' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_GetUpperChestWearable, ReturnValue) == 0x000008, "Member 'MordhauSingleton_GetUpperChestWearable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetUpperChestWearables
// 0x0010 (0x0010 - 0x0000)
struct MordhauSingleton_GetUpperChestWearables final
{
public:
	TArray<TSoftClassPtr<class UClass>>           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetUpperChestWearables) == 0x000008, "Wrong alignment on MordhauSingleton_GetUpperChestWearables");
static_assert(sizeof(MordhauSingleton_GetUpperChestWearables) == 0x000010, "Wrong size on MordhauSingleton_GetUpperChestWearables");
static_assert(offsetof(MordhauSingleton_GetUpperChestWearables, ReturnValue) == 0x000000, "Member 'MordhauSingleton_GetUpperChestWearables::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.SetEquipmentArray
// 0x0018 (0x0018 - 0x0000)
struct MordhauSingleton_SetEquipmentArray final
{
public:
	TArray<TSoftClassPtr<class UClass>>           NewEquipment;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauSingleton_SetEquipmentArray) == 0x000008, "Wrong alignment on MordhauSingleton_SetEquipmentArray");
static_assert(sizeof(MordhauSingleton_SetEquipmentArray) == 0x000018, "Wrong size on MordhauSingleton_SetEquipmentArray");
static_assert(offsetof(MordhauSingleton_SetEquipmentArray, NewEquipment) == 0x000000, "Member 'MordhauSingleton_SetEquipmentArray::NewEquipment' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_SetEquipmentArray, ReturnValue) == 0x000010, "Member 'MordhauSingleton_SetEquipmentArray::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.SetFemaleVoices
// 0x0018 (0x0018 - 0x0000)
struct MordhauSingleton_SetFemaleVoices final
{
public:
	TArray<TSoftClassPtr<class UClass>>           NewVoices;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauSingleton_SetFemaleVoices) == 0x000008, "Wrong alignment on MordhauSingleton_SetFemaleVoices");
static_assert(sizeof(MordhauSingleton_SetFemaleVoices) == 0x000018, "Wrong size on MordhauSingleton_SetFemaleVoices");
static_assert(offsetof(MordhauSingleton_SetFemaleVoices, NewVoices) == 0x000000, "Member 'MordhauSingleton_SetFemaleVoices::NewVoices' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_SetFemaleVoices, ReturnValue) == 0x000010, "Member 'MordhauSingleton_SetFemaleVoices::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.SetHeadWearables
// 0x0018 (0x0018 - 0x0000)
struct MordhauSingleton_SetHeadWearables final
{
public:
	TArray<TSoftClassPtr<class UClass>>           NewHeadWearables;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauSingleton_SetHeadWearables) == 0x000008, "Wrong alignment on MordhauSingleton_SetHeadWearables");
static_assert(sizeof(MordhauSingleton_SetHeadWearables) == 0x000018, "Wrong size on MordhauSingleton_SetHeadWearables");
static_assert(offsetof(MordhauSingleton_SetHeadWearables, NewHeadWearables) == 0x000000, "Member 'MordhauSingleton_SetHeadWearables::NewHeadWearables' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_SetHeadWearables, ReturnValue) == 0x000010, "Member 'MordhauSingleton_SetHeadWearables::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.SetLegsWearables
// 0x0018 (0x0018 - 0x0000)
struct MordhauSingleton_SetLegsWearables final
{
public:
	TArray<TSoftClassPtr<class UClass>>           NewLegsWearables;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauSingleton_SetLegsWearables) == 0x000008, "Wrong alignment on MordhauSingleton_SetLegsWearables");
static_assert(sizeof(MordhauSingleton_SetLegsWearables) == 0x000018, "Wrong size on MordhauSingleton_SetLegsWearables");
static_assert(offsetof(MordhauSingleton_SetLegsWearables, NewLegsWearables) == 0x000000, "Member 'MordhauSingleton_SetLegsWearables::NewLegsWearables' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_SetLegsWearables, ReturnValue) == 0x000010, "Member 'MordhauSingleton_SetLegsWearables::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.SetMaleVoices
// 0x0018 (0x0018 - 0x0000)
struct MordhauSingleton_SetMaleVoices final
{
public:
	TArray<TSoftClassPtr<class UClass>>           NewVoices;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauSingleton_SetMaleVoices) == 0x000008, "Wrong alignment on MordhauSingleton_SetMaleVoices");
static_assert(sizeof(MordhauSingleton_SetMaleVoices) == 0x000018, "Wrong size on MordhauSingleton_SetMaleVoices");
static_assert(offsetof(MordhauSingleton_SetMaleVoices, NewVoices) == 0x000000, "Member 'MordhauSingleton_SetMaleVoices::NewVoices' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_SetMaleVoices, ReturnValue) == 0x000010, "Member 'MordhauSingleton_SetMaleVoices::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.SetRandomBotNames
// 0x0018 (0x0018 - 0x0000)
struct MordhauSingleton_SetRandomBotNames final
{
public:
	TArray<class FString>                         InRandomBotNames;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauSingleton_SetRandomBotNames) == 0x000008, "Wrong alignment on MordhauSingleton_SetRandomBotNames");
static_assert(sizeof(MordhauSingleton_SetRandomBotNames) == 0x000018, "Wrong size on MordhauSingleton_SetRandomBotNames");
static_assert(offsetof(MordhauSingleton_SetRandomBotNames, InRandomBotNames) == 0x000000, "Member 'MordhauSingleton_SetRandomBotNames::InRandomBotNames' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_SetRandomBotNames, ReturnValue) == 0x000010, "Member 'MordhauSingleton_SetRandomBotNames::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.SetUpperChestWearables
// 0x0018 (0x0018 - 0x0000)
struct MordhauSingleton_SetUpperChestWearables final
{
public:
	TArray<TSoftClassPtr<class UClass>>           NewUpperChestWearables;                            // 0x0000(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauSingleton_SetUpperChestWearables) == 0x000008, "Wrong alignment on MordhauSingleton_SetUpperChestWearables");
static_assert(sizeof(MordhauSingleton_SetUpperChestWearables) == 0x000018, "Wrong size on MordhauSingleton_SetUpperChestWearables");
static_assert(offsetof(MordhauSingleton_SetUpperChestWearables, NewUpperChestWearables) == 0x000000, "Member 'MordhauSingleton_SetUpperChestWearables::NewUpperChestWearables' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_SetUpperChestWearables, ReturnValue) == 0x000010, "Member 'MordhauSingleton_SetUpperChestWearables::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.SpawnEquipment
// 0x0048 (0x0048 - 0x0000)
struct MordhauSingleton_SpawnEquipment final
{
public:
	class UWorld*                                 WorldRef;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEquipmentCustomization                Customization;                                     // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         Emblem;                                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EmblemColor1;                                      // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EmblemColor2;                                      // 0x003A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceInstantMeshUpdate;                           // 0x003B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceMipStreaming;                                // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauEquipment*                      ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_SpawnEquipment) == 0x000008, "Wrong alignment on MordhauSingleton_SpawnEquipment");
static_assert(sizeof(MordhauSingleton_SpawnEquipment) == 0x000048, "Wrong size on MordhauSingleton_SpawnEquipment");
static_assert(offsetof(MordhauSingleton_SpawnEquipment, WorldRef) == 0x000000, "Member 'MordhauSingleton_SpawnEquipment::WorldRef' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_SpawnEquipment, Customization) == 0x000008, "Member 'MordhauSingleton_SpawnEquipment::Customization' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_SpawnEquipment, Emblem) == 0x000038, "Member 'MordhauSingleton_SpawnEquipment::Emblem' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_SpawnEquipment, EmblemColor1) == 0x000039, "Member 'MordhauSingleton_SpawnEquipment::EmblemColor1' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_SpawnEquipment, EmblemColor2) == 0x00003A, "Member 'MordhauSingleton_SpawnEquipment::EmblemColor2' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_SpawnEquipment, bForceInstantMeshUpdate) == 0x00003B, "Member 'MordhauSingleton_SpawnEquipment::bForceInstantMeshUpdate' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_SpawnEquipment, bForceMipStreaming) == 0x00003C, "Member 'MordhauSingleton_SpawnEquipment::bForceMipStreaming' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_SpawnEquipment, ReturnValue) == 0x000040, "Member 'MordhauSingleton_SpawnEquipment::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.SpawnEquipmentFromClass
// 0x0038 (0x0038 - 0x0000)
struct MordhauSingleton_SpawnEquipmentFromClass final
{
public:
	class UWorld*                                 WorldRef;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   EquipmentClass;                                    // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMordhauEquipment*                      ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_SpawnEquipmentFromClass) == 0x000008, "Wrong alignment on MordhauSingleton_SpawnEquipmentFromClass");
static_assert(sizeof(MordhauSingleton_SpawnEquipmentFromClass) == 0x000038, "Wrong size on MordhauSingleton_SpawnEquipmentFromClass");
static_assert(offsetof(MordhauSingleton_SpawnEquipmentFromClass, WorldRef) == 0x000000, "Member 'MordhauSingleton_SpawnEquipmentFromClass::WorldRef' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_SpawnEquipmentFromClass, EquipmentClass) == 0x000008, "Member 'MordhauSingleton_SpawnEquipmentFromClass::EquipmentClass' has a wrong offset!");
static_assert(offsetof(MordhauSingleton_SpawnEquipmentFromClass, ReturnValue) == 0x000030, "Member 'MordhauSingleton_SpawnEquipmentFromClass::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetEquipmentNum
// 0x0004 (0x0004 - 0x0000)
struct MordhauSingleton_GetEquipmentNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetEquipmentNum) == 0x000004, "Wrong alignment on MordhauSingleton_GetEquipmentNum");
static_assert(sizeof(MordhauSingleton_GetEquipmentNum) == 0x000004, "Wrong size on MordhauSingleton_GetEquipmentNum");
static_assert(offsetof(MordhauSingleton_GetEquipmentNum, ReturnValue) == 0x000000, "Member 'MordhauSingleton_GetEquipmentNum::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetEquipmentRemapper
// 0x0008 (0x0008 - 0x0000)
struct MordhauSingleton_GetEquipmentRemapper final
{
public:
	class AMordhauEquipmentRemapper*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetEquipmentRemapper) == 0x000008, "Wrong alignment on MordhauSingleton_GetEquipmentRemapper");
static_assert(sizeof(MordhauSingleton_GetEquipmentRemapper) == 0x000008, "Wrong size on MordhauSingleton_GetEquipmentRemapper");
static_assert(offsetof(MordhauSingleton_GetEquipmentRemapper, ReturnValue) == 0x000000, "Member 'MordhauSingleton_GetEquipmentRemapper::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetFemaleVoicesNum
// 0x0004 (0x0004 - 0x0000)
struct MordhauSingleton_GetFemaleVoicesNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetFemaleVoicesNum) == 0x000004, "Wrong alignment on MordhauSingleton_GetFemaleVoicesNum");
static_assert(sizeof(MordhauSingleton_GetFemaleVoicesNum) == 0x000004, "Wrong size on MordhauSingleton_GetFemaleVoicesNum");
static_assert(offsetof(MordhauSingleton_GetFemaleVoicesNum, ReturnValue) == 0x000000, "Member 'MordhauSingleton_GetFemaleVoicesNum::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetHeadWearablesNum
// 0x0004 (0x0004 - 0x0000)
struct MordhauSingleton_GetHeadWearablesNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetHeadWearablesNum) == 0x000004, "Wrong alignment on MordhauSingleton_GetHeadWearablesNum");
static_assert(sizeof(MordhauSingleton_GetHeadWearablesNum) == 0x000004, "Wrong size on MordhauSingleton_GetHeadWearablesNum");
static_assert(offsetof(MordhauSingleton_GetHeadWearablesNum, ReturnValue) == 0x000000, "Member 'MordhauSingleton_GetHeadWearablesNum::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetIsLoadingAssets
// 0x0001 (0x0001 - 0x0000)
struct MordhauSingleton_GetIsLoadingAssets final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetIsLoadingAssets) == 0x000001, "Wrong alignment on MordhauSingleton_GetIsLoadingAssets");
static_assert(sizeof(MordhauSingleton_GetIsLoadingAssets) == 0x000001, "Wrong size on MordhauSingleton_GetIsLoadingAssets");
static_assert(offsetof(MordhauSingleton_GetIsLoadingAssets, ReturnValue) == 0x000000, "Member 'MordhauSingleton_GetIsLoadingAssets::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetLegsWearablesNum
// 0x0004 (0x0004 - 0x0000)
struct MordhauSingleton_GetLegsWearablesNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetLegsWearablesNum) == 0x000004, "Wrong alignment on MordhauSingleton_GetLegsWearablesNum");
static_assert(sizeof(MordhauSingleton_GetLegsWearablesNum) == 0x000004, "Wrong size on MordhauSingleton_GetLegsWearablesNum");
static_assert(offsetof(MordhauSingleton_GetLegsWearablesNum, ReturnValue) == 0x000000, "Member 'MordhauSingleton_GetLegsWearablesNum::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetMaleVoicesNum
// 0x0004 (0x0004 - 0x0000)
struct MordhauSingleton_GetMaleVoicesNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetMaleVoicesNum) == 0x000004, "Wrong alignment on MordhauSingleton_GetMaleVoicesNum");
static_assert(sizeof(MordhauSingleton_GetMaleVoicesNum) == 0x000004, "Wrong size on MordhauSingleton_GetMaleVoicesNum");
static_assert(offsetof(MordhauSingleton_GetMaleVoicesNum, ReturnValue) == 0x000000, "Member 'MordhauSingleton_GetMaleVoicesNum::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSingleton.GetUpperChestWearablesNum
// 0x0004 (0x0004 - 0x0000)
struct MordhauSingleton_GetUpperChestWearablesNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSingleton_GetUpperChestWearablesNum) == 0x000004, "Wrong alignment on MordhauSingleton_GetUpperChestWearablesNum");
static_assert(sizeof(MordhauSingleton_GetUpperChestWearablesNum) == 0x000004, "Wrong size on MordhauSingleton_GetUpperChestWearablesNum");
static_assert(offsetof(MordhauSingleton_GetUpperChestWearablesNum, ReturnValue) == 0x000000, "Member 'MordhauSingleton_GetUpperChestWearablesNum::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauSpectator.IsWatchingOwnDeath
// 0x0001 (0x0001 - 0x0000)
struct MordhauSpectator_IsWatchingOwnDeath final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauSpectator_IsWatchingOwnDeath) == 0x000001, "Wrong alignment on MordhauSpectator_IsWatchingOwnDeath");
static_assert(sizeof(MordhauSpectator_IsWatchingOwnDeath) == 0x000001, "Wrong size on MordhauSpectator_IsWatchingOwnDeath");
static_assert(offsetof(MordhauSpectator_IsWatchingOwnDeath, ReturnValue) == 0x000000, "Member 'MordhauSpectator_IsWatchingOwnDeath::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauStats.AreStatsAvailable
// 0x0018 (0x0018 - 0x0000)
struct MordhauStats_AreStatsAvailable final
{
public:
	class FString                                 PlayFabId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauStats_AreStatsAvailable) == 0x000008, "Wrong alignment on MordhauStats_AreStatsAvailable");
static_assert(sizeof(MordhauStats_AreStatsAvailable) == 0x000018, "Wrong size on MordhauStats_AreStatsAvailable");
static_assert(offsetof(MordhauStats_AreStatsAvailable, PlayFabId) == 0x000000, "Member 'MordhauStats_AreStatsAvailable::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauStats_AreStatsAvailable, ReturnValue) == 0x000010, "Member 'MordhauStats_AreStatsAvailable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauStats.GetPlayerValue
// 0x0028 (0x0028 - 0x0000)
struct MordhauStats_GetPlayerValue final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStat                                  Stat;                                              // 0x0018(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauStats_GetPlayerValue) == 0x000008, "Wrong alignment on MordhauStats_GetPlayerValue");
static_assert(sizeof(MordhauStats_GetPlayerValue) == 0x000028, "Wrong size on MordhauStats_GetPlayerValue");
static_assert(offsetof(MordhauStats_GetPlayerValue, CallResult) == 0x000000, "Member 'MordhauStats_GetPlayerValue::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauStats_GetPlayerValue, PlayFabId) == 0x000008, "Member 'MordhauStats_GetPlayerValue::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauStats_GetPlayerValue, Stat) == 0x000018, "Member 'MordhauStats_GetPlayerValue::Stat' has a wrong offset!");
static_assert(offsetof(MordhauStats_GetPlayerValue, Value) == 0x000024, "Member 'MordhauStats_GetPlayerValue::Value' has a wrong offset!");

// Function Mordhau.MordhauStats.GetValue
// 0x0014 (0x0014 - 0x0000)
struct MordhauStats_GetValue final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStat                                  Stat;                                              // 0x0004(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauStats_GetValue) == 0x000004, "Wrong alignment on MordhauStats_GetValue");
static_assert(sizeof(MordhauStats_GetValue) == 0x000014, "Wrong size on MordhauStats_GetValue");
static_assert(offsetof(MordhauStats_GetValue, CallResult) == 0x000000, "Member 'MordhauStats_GetValue::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauStats_GetValue, Stat) == 0x000004, "Member 'MordhauStats_GetValue::Stat' has a wrong offset!");
static_assert(offsetof(MordhauStats_GetValue, Value) == 0x000010, "Member 'MordhauStats_GetValue::Value' has a wrong offset!");

// Function Mordhau.MordhauStats.GetValueByName
// 0x0018 (0x0018 - 0x0000)
struct MordhauStats_GetValueByName final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutValue;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauStats_GetValueByName) == 0x000008, "Wrong alignment on MordhauStats_GetValueByName");
static_assert(sizeof(MordhauStats_GetValueByName) == 0x000018, "Wrong size on MordhauStats_GetValueByName");
static_assert(offsetof(MordhauStats_GetValueByName, StatName) == 0x000000, "Member 'MordhauStats_GetValueByName::StatName' has a wrong offset!");
static_assert(offsetof(MordhauStats_GetValueByName, OutValue) == 0x000010, "Member 'MordhauStats_GetValueByName::OutValue' has a wrong offset!");
static_assert(offsetof(MordhauStats_GetValueByName, ReturnValue) == 0x000014, "Member 'MordhauStats_GetValueByName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauStats.IncrementValueChecked
// 0x0018 (0x0018 - 0x0000)
struct MordhauStats_IncrementValueChecked final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStat                                  Stat;                                              // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauStats_IncrementValueChecked) == 0x000008, "Wrong alignment on MordhauStats_IncrementValueChecked");
static_assert(sizeof(MordhauStats_IncrementValueChecked) == 0x000018, "Wrong size on MordhauStats_IncrementValueChecked");
static_assert(offsetof(MordhauStats_IncrementValueChecked, World) == 0x000000, "Member 'MordhauStats_IncrementValueChecked::World' has a wrong offset!");
static_assert(offsetof(MordhauStats_IncrementValueChecked, Stat) == 0x000008, "Member 'MordhauStats_IncrementValueChecked::Stat' has a wrong offset!");

// Function Mordhau.MordhauStats.IsAchievementUnlocked
// 0x0010 (0x0010 - 0x0000)
struct MordhauStats_IsAchievementUnlocked final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAchievement                           Achievement;                                       // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsUnlocked;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauStats_IsAchievementUnlocked) == 0x000004, "Wrong alignment on MordhauStats_IsAchievementUnlocked");
static_assert(sizeof(MordhauStats_IsAchievementUnlocked) == 0x000010, "Wrong size on MordhauStats_IsAchievementUnlocked");
static_assert(offsetof(MordhauStats_IsAchievementUnlocked, CallResult) == 0x000000, "Member 'MordhauStats_IsAchievementUnlocked::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauStats_IsAchievementUnlocked, Achievement) == 0x000004, "Member 'MordhauStats_IsAchievementUnlocked::Achievement' has a wrong offset!");
static_assert(offsetof(MordhauStats_IsAchievementUnlocked, bIsUnlocked) == 0x00000C, "Member 'MordhauStats_IsAchievementUnlocked::bIsUnlocked' has a wrong offset!");

// Function Mordhau.MordhauStats.LockAchievement
// 0x000C (0x000C - 0x0000)
struct MordhauStats_LockAchievement final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAchievement                           Achievement;                                       // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauStats_LockAchievement) == 0x000004, "Wrong alignment on MordhauStats_LockAchievement");
static_assert(sizeof(MordhauStats_LockAchievement) == 0x00000C, "Wrong size on MordhauStats_LockAchievement");
static_assert(offsetof(MordhauStats_LockAchievement, CallResult) == 0x000000, "Member 'MordhauStats_LockAchievement::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauStats_LockAchievement, Achievement) == 0x000004, "Member 'MordhauStats_LockAchievement::Achievement' has a wrong offset!");

// Function Mordhau.MordhauStats.RequestPlayerStats
// 0x0018 (0x0018 - 0x0000)
struct MordhauStats_RequestPlayerStats final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauStats_RequestPlayerStats) == 0x000008, "Wrong alignment on MordhauStats_RequestPlayerStats");
static_assert(sizeof(MordhauStats_RequestPlayerStats) == 0x000018, "Wrong size on MordhauStats_RequestPlayerStats");
static_assert(offsetof(MordhauStats_RequestPlayerStats, CallResult) == 0x000000, "Member 'MordhauStats_RequestPlayerStats::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauStats_RequestPlayerStats, PlayFabId) == 0x000008, "Member 'MordhauStats_RequestPlayerStats::PlayFabId' has a wrong offset!");

// Function Mordhau.MordhauStats.RequestStats
// 0x0001 (0x0001 - 0x0000)
struct MordhauStats_RequestStats final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauStats_RequestStats) == 0x000001, "Wrong alignment on MordhauStats_RequestStats");
static_assert(sizeof(MordhauStats_RequestStats) == 0x000001, "Wrong size on MordhauStats_RequestStats");
static_assert(offsetof(MordhauStats_RequestStats, CallResult) == 0x000000, "Member 'MordhauStats_RequestStats::CallResult' has a wrong offset!");

// Function Mordhau.MordhauStats.ResetAllStats
// 0x0002 (0x0002 - 0x0000)
struct MordhauStats_ResetAllStats final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchievementsToo;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauStats_ResetAllStats) == 0x000001, "Wrong alignment on MordhauStats_ResetAllStats");
static_assert(sizeof(MordhauStats_ResetAllStats) == 0x000002, "Wrong size on MordhauStats_ResetAllStats");
static_assert(offsetof(MordhauStats_ResetAllStats, CallResult) == 0x000000, "Member 'MordhauStats_ResetAllStats::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauStats_ResetAllStats, bAchievementsToo) == 0x000001, "Member 'MordhauStats_ResetAllStats::bAchievementsToo' has a wrong offset!");

// Function Mordhau.MordhauStats.SetAchievementProgress
// 0x0010 (0x0010 - 0x0000)
struct MordhauStats_SetAchievementProgress final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAchievement                           Achievement;                                       // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauStats_SetAchievementProgress) == 0x000004, "Wrong alignment on MordhauStats_SetAchievementProgress");
static_assert(sizeof(MordhauStats_SetAchievementProgress) == 0x000010, "Wrong size on MordhauStats_SetAchievementProgress");
static_assert(offsetof(MordhauStats_SetAchievementProgress, CallResult) == 0x000000, "Member 'MordhauStats_SetAchievementProgress::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauStats_SetAchievementProgress, Achievement) == 0x000004, "Member 'MordhauStats_SetAchievementProgress::Achievement' has a wrong offset!");
static_assert(offsetof(MordhauStats_SetAchievementProgress, Value) == 0x00000C, "Member 'MordhauStats_SetAchievementProgress::Value' has a wrong offset!");

// Function Mordhau.MordhauStats.SetPlayerValue
// 0x0028 (0x0028 - 0x0000)
struct MordhauStats_SetPlayerValue final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStat                                  Stat;                                              // 0x0018(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauStats_SetPlayerValue) == 0x000008, "Wrong alignment on MordhauStats_SetPlayerValue");
static_assert(sizeof(MordhauStats_SetPlayerValue) == 0x000028, "Wrong size on MordhauStats_SetPlayerValue");
static_assert(offsetof(MordhauStats_SetPlayerValue, CallResult) == 0x000000, "Member 'MordhauStats_SetPlayerValue::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauStats_SetPlayerValue, PlayFabId) == 0x000008, "Member 'MordhauStats_SetPlayerValue::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauStats_SetPlayerValue, Stat) == 0x000018, "Member 'MordhauStats_SetPlayerValue::Stat' has a wrong offset!");
static_assert(offsetof(MordhauStats_SetPlayerValue, Value) == 0x000024, "Member 'MordhauStats_SetPlayerValue::Value' has a wrong offset!");

// Function Mordhau.MordhauStats.SetValue
// 0x0014 (0x0014 - 0x0000)
struct MordhauStats_SetValue final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStat                                  Stat;                                              // 0x0004(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauStats_SetValue) == 0x000004, "Wrong alignment on MordhauStats_SetValue");
static_assert(sizeof(MordhauStats_SetValue) == 0x000014, "Wrong size on MordhauStats_SetValue");
static_assert(offsetof(MordhauStats_SetValue, CallResult) == 0x000000, "Member 'MordhauStats_SetValue::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauStats_SetValue, Stat) == 0x000004, "Member 'MordhauStats_SetValue::Stat' has a wrong offset!");
static_assert(offsetof(MordhauStats_SetValue, Value) == 0x000010, "Member 'MordhauStats_SetValue::Value' has a wrong offset!");

// Function Mordhau.MordhauStats.StorePlayerStats
// 0x0018 (0x0018 - 0x0000)
struct MordhauStats_StorePlayerStats final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauStats_StorePlayerStats) == 0x000008, "Wrong alignment on MordhauStats_StorePlayerStats");
static_assert(sizeof(MordhauStats_StorePlayerStats) == 0x000018, "Wrong size on MordhauStats_StorePlayerStats");
static_assert(offsetof(MordhauStats_StorePlayerStats, CallResult) == 0x000000, "Member 'MordhauStats_StorePlayerStats::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauStats_StorePlayerStats, PlayFabId) == 0x000008, "Member 'MordhauStats_StorePlayerStats::PlayFabId' has a wrong offset!");

// Function Mordhau.MordhauStats.StoreStats
// 0x0001 (0x0001 - 0x0000)
struct MordhauStats_StoreStats final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauStats_StoreStats) == 0x000001, "Wrong alignment on MordhauStats_StoreStats");
static_assert(sizeof(MordhauStats_StoreStats) == 0x000001, "Wrong size on MordhauStats_StoreStats");
static_assert(offsetof(MordhauStats_StoreStats, CallResult) == 0x000000, "Member 'MordhauStats_StoreStats::CallResult' has a wrong offset!");

// Function Mordhau.MordhauStats.UnlockAchievement
// 0x000C (0x000C - 0x0000)
struct MordhauStats_UnlockAchievement final
{
public:
	ECallResult                                   CallResult;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAchievement                           Achievement;                                       // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauStats_UnlockAchievement) == 0x000004, "Wrong alignment on MordhauStats_UnlockAchievement");
static_assert(sizeof(MordhauStats_UnlockAchievement) == 0x00000C, "Wrong size on MordhauStats_UnlockAchievement");
static_assert(offsetof(MordhauStats_UnlockAchievement, CallResult) == 0x000000, "Member 'MordhauStats_UnlockAchievement::CallResult' has a wrong offset!");
static_assert(offsetof(MordhauStats_UnlockAchievement, Achievement) == 0x000004, "Member 'MordhauStats_UnlockAchievement::Achievement' has a wrong offset!");

// Function Mordhau.MordhauTitleScreen.ConsumeKeyPressed
// 0x0078 (0x0078 - 0x0000)
struct MordhauTitleScreen_ConsumeKeyPressed final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauTitleScreen_ConsumeKeyPressed) == 0x000008, "Wrong alignment on MordhauTitleScreen_ConsumeKeyPressed");
static_assert(sizeof(MordhauTitleScreen_ConsumeKeyPressed) == 0x000078, "Wrong size on MordhauTitleScreen_ConsumeKeyPressed");
static_assert(offsetof(MordhauTitleScreen_ConsumeKeyPressed, InGeometry) == 0x000000, "Member 'MordhauTitleScreen_ConsumeKeyPressed::InGeometry' has a wrong offset!");
static_assert(offsetof(MordhauTitleScreen_ConsumeKeyPressed, InKeyEvent) == 0x000038, "Member 'MordhauTitleScreen_ConsumeKeyPressed::InKeyEvent' has a wrong offset!");
static_assert(offsetof(MordhauTitleScreen_ConsumeKeyPressed, ReturnValue) == 0x000070, "Member 'MordhauTitleScreen_ConsumeKeyPressed::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauTitleScreen.ConsumeMouseKeyEvent
// 0x00B0 (0x00B0 - 0x0000)
struct MordhauTitleScreen_ConsumeMouseKeyEvent final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauTitleScreen_ConsumeMouseKeyEvent) == 0x000008, "Wrong alignment on MordhauTitleScreen_ConsumeMouseKeyEvent");
static_assert(sizeof(MordhauTitleScreen_ConsumeMouseKeyEvent) == 0x0000B0, "Wrong size on MordhauTitleScreen_ConsumeMouseKeyEvent");
static_assert(offsetof(MordhauTitleScreen_ConsumeMouseKeyEvent, InGeometry) == 0x000000, "Member 'MordhauTitleScreen_ConsumeMouseKeyEvent::InGeometry' has a wrong offset!");
static_assert(offsetof(MordhauTitleScreen_ConsumeMouseKeyEvent, InMouseEvent) == 0x000038, "Member 'MordhauTitleScreen_ConsumeMouseKeyEvent::InMouseEvent' has a wrong offset!");
static_assert(offsetof(MordhauTitleScreen_ConsumeMouseKeyEvent, ReturnValue) == 0x0000A8, "Member 'MordhauTitleScreen_ConsumeMouseKeyEvent::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauTitleScreen.OnUserConfirmedAgeRestricton
// 0x0010 (0x0010 - 0x0000)
struct MordhauTitleScreen_OnUserConfirmedAgeRestricton final
{
public:
	class FString                                 Info;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauTitleScreen_OnUserConfirmedAgeRestricton) == 0x000008, "Wrong alignment on MordhauTitleScreen_OnUserConfirmedAgeRestricton");
static_assert(sizeof(MordhauTitleScreen_OnUserConfirmedAgeRestricton) == 0x000010, "Wrong size on MordhauTitleScreen_OnUserConfirmedAgeRestricton");
static_assert(offsetof(MordhauTitleScreen_OnUserConfirmedAgeRestricton, Info) == 0x000000, "Member 'MordhauTitleScreen_OnUserConfirmedAgeRestricton::Info' has a wrong offset!");

// Function Mordhau.MordhauTitleScreen.OnUserConfirmedLicenceDialog
// 0x0010 (0x0010 - 0x0000)
struct MordhauTitleScreen_OnUserConfirmedLicenceDialog final
{
public:
	class FString                                 Info;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauTitleScreen_OnUserConfirmedLicenceDialog) == 0x000008, "Wrong alignment on MordhauTitleScreen_OnUserConfirmedLicenceDialog");
static_assert(sizeof(MordhauTitleScreen_OnUserConfirmedLicenceDialog) == 0x000010, "Wrong size on MordhauTitleScreen_OnUserConfirmedLicenceDialog");
static_assert(offsetof(MordhauTitleScreen_OnUserConfirmedLicenceDialog, Info) == 0x000000, "Member 'MordhauTitleScreen_OnUserConfirmedLicenceDialog::Info' has a wrong offset!");

// Function Mordhau.MordhauTitleScreen.OnUserConfirmedNotLoggedIn
// 0x0010 (0x0010 - 0x0000)
struct MordhauTitleScreen_OnUserConfirmedNotLoggedIn final
{
public:
	class FString                                 Info;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauTitleScreen_OnUserConfirmedNotLoggedIn) == 0x000008, "Wrong alignment on MordhauTitleScreen_OnUserConfirmedNotLoggedIn");
static_assert(sizeof(MordhauTitleScreen_OnUserConfirmedNotLoggedIn) == 0x000010, "Wrong size on MordhauTitleScreen_OnUserConfirmedNotLoggedIn");
static_assert(offsetof(MordhauTitleScreen_OnUserConfirmedNotLoggedIn, Info) == 0x000000, "Member 'MordhauTitleScreen_OnUserConfirmedNotLoggedIn::Info' has a wrong offset!");

// Function Mordhau.MordhauTitleScreen.Setup
// 0x0030 (0x0030 - 0x0000)
struct MordhauTitleScreen_Setup final
{
public:
	struct FKey                                   InKeyToContinue;                                   // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   InGamepadKeyToContinue;                            // 0x0018(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauTitleScreen_Setup) == 0x000008, "Wrong alignment on MordhauTitleScreen_Setup");
static_assert(sizeof(MordhauTitleScreen_Setup) == 0x000030, "Wrong size on MordhauTitleScreen_Setup");
static_assert(offsetof(MordhauTitleScreen_Setup, InKeyToContinue) == 0x000000, "Member 'MordhauTitleScreen_Setup::InKeyToContinue' has a wrong offset!");
static_assert(offsetof(MordhauTitleScreen_Setup, InGamepadKeyToContinue) == 0x000018, "Member 'MordhauTitleScreen_Setup::InGamepadKeyToContinue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.ActorGetDistanceToCollision
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_ActorGetDistanceToCollision final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PointOnCollision;                                  // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_ActorGetDistanceToCollision) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_ActorGetDistanceToCollision");
static_assert(sizeof(MordhauUtilityLibrary_ActorGetDistanceToCollision) == 0x000028, "Wrong size on MordhauUtilityLibrary_ActorGetDistanceToCollision");
static_assert(offsetof(MordhauUtilityLibrary_ActorGetDistanceToCollision, Actor) == 0x000000, "Member 'MordhauUtilityLibrary_ActorGetDistanceToCollision::Actor' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ActorGetDistanceToCollision, Point) == 0x000008, "Member 'MordhauUtilityLibrary_ActorGetDistanceToCollision::Point' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ActorGetDistanceToCollision, PointOnCollision) == 0x000014, "Member 'MordhauUtilityLibrary_ActorGetDistanceToCollision::PointOnCollision' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ActorGetDistanceToCollision, TraceChannel) == 0x000020, "Member 'MordhauUtilityLibrary_ActorGetDistanceToCollision::TraceChannel' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ActorGetDistanceToCollision, ReturnValue) == 0x000024, "Member 'MordhauUtilityLibrary_ActorGetDistanceToCollision::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.AngularDistance
// 0x001C (0x001C - 0x0000)
struct MordhauUtilityLibrary_AngularDistance final
{
public:
	struct FRotator                               A;                                                 // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               B;                                                 // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_AngularDistance) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_AngularDistance");
static_assert(sizeof(MordhauUtilityLibrary_AngularDistance) == 0x00001C, "Wrong size on MordhauUtilityLibrary_AngularDistance");
static_assert(offsetof(MordhauUtilityLibrary_AngularDistance, A) == 0x000000, "Member 'MordhauUtilityLibrary_AngularDistance::A' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_AngularDistance, B) == 0x00000C, "Member 'MordhauUtilityLibrary_AngularDistance::B' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_AngularDistance, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_AngularDistance::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.AreActorsFromSameLevel
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_AreActorsFromSameLevel final
{
public:
	class AActor*                                 ActorA;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorB;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_AreActorsFromSameLevel) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_AreActorsFromSameLevel");
static_assert(sizeof(MordhauUtilityLibrary_AreActorsFromSameLevel) == 0x000018, "Wrong size on MordhauUtilityLibrary_AreActorsFromSameLevel");
static_assert(offsetof(MordhauUtilityLibrary_AreActorsFromSameLevel, ActorA) == 0x000000, "Member 'MordhauUtilityLibrary_AreActorsFromSameLevel::ActorA' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_AreActorsFromSameLevel, ActorB) == 0x000008, "Member 'MordhauUtilityLibrary_AreActorsFromSameLevel::ActorB' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_AreActorsFromSameLevel, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_AreActorsFromSameLevel::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.AreConfirmCancelSwapped
// 0x0001 (0x0001 - 0x0000)
struct MordhauUtilityLibrary_AreConfirmCancelSwapped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_AreConfirmCancelSwapped) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_AreConfirmCancelSwapped");
static_assert(sizeof(MordhauUtilityLibrary_AreConfirmCancelSwapped) == 0x000001, "Wrong size on MordhauUtilityLibrary_AreConfirmCancelSwapped");
static_assert(offsetof(MordhauUtilityLibrary_AreConfirmCancelSwapped, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_AreConfirmCancelSwapped::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.AreProfilesEqual
// 0x0178 (0x0178 - 0x0000)
struct MordhauUtilityLibrary_AreProfilesEqual final
{
public:
	struct FCharacterProfile                      First;                                             // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCharacterProfile                      Second;                                            // 0x00B8(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0170(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_AreProfilesEqual) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_AreProfilesEqual");
static_assert(sizeof(MordhauUtilityLibrary_AreProfilesEqual) == 0x000178, "Wrong size on MordhauUtilityLibrary_AreProfilesEqual");
static_assert(offsetof(MordhauUtilityLibrary_AreProfilesEqual, First) == 0x000000, "Member 'MordhauUtilityLibrary_AreProfilesEqual::First' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_AreProfilesEqual, Second) == 0x0000B8, "Member 'MordhauUtilityLibrary_AreProfilesEqual::Second' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_AreProfilesEqual, ReturnValue) == 0x000170, "Member 'MordhauUtilityLibrary_AreProfilesEqual::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.AwardDuelMMR
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_AwardDuelMMR final
{
public:
	class FString                                 WinnerID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoserID;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewWinnerMMR;                                      // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewLoserMMR;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_AwardDuelMMR) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_AwardDuelMMR");
static_assert(sizeof(MordhauUtilityLibrary_AwardDuelMMR) == 0x000028, "Wrong size on MordhauUtilityLibrary_AwardDuelMMR");
static_assert(offsetof(MordhauUtilityLibrary_AwardDuelMMR, WinnerID) == 0x000000, "Member 'MordhauUtilityLibrary_AwardDuelMMR::WinnerID' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_AwardDuelMMR, LoserID) == 0x000010, "Member 'MordhauUtilityLibrary_AwardDuelMMR::LoserID' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_AwardDuelMMR, NewWinnerMMR) == 0x000020, "Member 'MordhauUtilityLibrary_AwardDuelMMR::NewWinnerMMR' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_AwardDuelMMR, NewLoserMMR) == 0x000024, "Member 'MordhauUtilityLibrary_AwardDuelMMR::NewLoserMMR' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.AwardTeamfightMMR
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_AwardTeamfightMMR final
{
public:
	bool                                          bIsWin;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherTeamMMR;                                      // 0x0018(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewMMR;                                            // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_AwardTeamfightMMR) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_AwardTeamfightMMR");
static_assert(sizeof(MordhauUtilityLibrary_AwardTeamfightMMR) == 0x000020, "Wrong size on MordhauUtilityLibrary_AwardTeamfightMMR");
static_assert(offsetof(MordhauUtilityLibrary_AwardTeamfightMMR, bIsWin) == 0x000000, "Member 'MordhauUtilityLibrary_AwardTeamfightMMR::bIsWin' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_AwardTeamfightMMR, PlayFabId) == 0x000008, "Member 'MordhauUtilityLibrary_AwardTeamfightMMR::PlayFabId' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_AwardTeamfightMMR, OtherTeamMMR) == 0x000018, "Member 'MordhauUtilityLibrary_AwardTeamfightMMR::OtherTeamMMR' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_AwardTeamfightMMR, NewMMR) == 0x00001C, "Member 'MordhauUtilityLibrary_AwardTeamfightMMR::NewMMR' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.BreakFaceCustomization
// 0x0060 (0x0060 - 0x0000)
struct MordhauUtilityLibrary_BreakFaceCustomization final
{
public:
	struct FFaceCustomization                     FaceCustomization;                                 // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutTranslate;                                      // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutRotate;                                         // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutScale;                                          // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_BreakFaceCustomization) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_BreakFaceCustomization");
static_assert(sizeof(MordhauUtilityLibrary_BreakFaceCustomization) == 0x000060, "Wrong size on MordhauUtilityLibrary_BreakFaceCustomization");
static_assert(offsetof(MordhauUtilityLibrary_BreakFaceCustomization, FaceCustomization) == 0x000000, "Member 'MordhauUtilityLibrary_BreakFaceCustomization::FaceCustomization' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_BreakFaceCustomization, OutTranslate) == 0x000030, "Member 'MordhauUtilityLibrary_BreakFaceCustomization::OutTranslate' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_BreakFaceCustomization, OutRotate) == 0x000040, "Member 'MordhauUtilityLibrary_BreakFaceCustomization::OutRotate' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_BreakFaceCustomization, OutScale) == 0x000050, "Member 'MordhauUtilityLibrary_BreakFaceCustomization::OutScale' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.BreakSkillsCustomization
// 0x0008 (0x0008 - 0x0000)
struct MordhauUtilityLibrary_BreakSkillsCustomization final
{
public:
	struct FSkillsCustomization                   SkillsCustomization;                               // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OutPerks;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_BreakSkillsCustomization) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_BreakSkillsCustomization");
static_assert(sizeof(MordhauUtilityLibrary_BreakSkillsCustomization) == 0x000008, "Wrong size on MordhauUtilityLibrary_BreakSkillsCustomization");
static_assert(offsetof(MordhauUtilityLibrary_BreakSkillsCustomization, SkillsCustomization) == 0x000000, "Member 'MordhauUtilityLibrary_BreakSkillsCustomization::SkillsCustomization' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_BreakSkillsCustomization, OutPerks) == 0x000004, "Member 'MordhauUtilityLibrary_BreakSkillsCustomization::OutPerks' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.CalculateAngle2D
// 0x0014 (0x0014 - 0x0000)
struct MordhauUtilityLibrary_CalculateAngle2D final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_CalculateAngle2D) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_CalculateAngle2D");
static_assert(sizeof(MordhauUtilityLibrary_CalculateAngle2D) == 0x000014, "Wrong size on MordhauUtilityLibrary_CalculateAngle2D");
static_assert(offsetof(MordhauUtilityLibrary_CalculateAngle2D, Direction) == 0x000000, "Member 'MordhauUtilityLibrary_CalculateAngle2D::Direction' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_CalculateAngle2D, Yaw) == 0x00000C, "Member 'MordhauUtilityLibrary_CalculateAngle2D::Yaw' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_CalculateAngle2D, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_CalculateAngle2D::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.CalculateGCD
// 0x000C (0x000C - 0x0000)
struct MordhauUtilityLibrary_CalculateGCD final
{
public:
	int32                                         ValueA;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_CalculateGCD) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_CalculateGCD");
static_assert(sizeof(MordhauUtilityLibrary_CalculateGCD) == 0x00000C, "Wrong size on MordhauUtilityLibrary_CalculateGCD");
static_assert(offsetof(MordhauUtilityLibrary_CalculateGCD, ValueA) == 0x000000, "Member 'MordhauUtilityLibrary_CalculateGCD::ValueA' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_CalculateGCD, ValueB) == 0x000004, "Member 'MordhauUtilityLibrary_CalculateGCD::ValueB' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_CalculateGCD, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_CalculateGCD::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.CallFunctionByNameWithArgs
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_CallFunctionByNameWithArgs final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Executor;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_CallFunctionByNameWithArgs) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_CallFunctionByNameWithArgs");
static_assert(sizeof(MordhauUtilityLibrary_CallFunctionByNameWithArgs) == 0x000020, "Wrong size on MordhauUtilityLibrary_CallFunctionByNameWithArgs");
static_assert(offsetof(MordhauUtilityLibrary_CallFunctionByNameWithArgs, Str) == 0x000000, "Member 'MordhauUtilityLibrary_CallFunctionByNameWithArgs::Str' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_CallFunctionByNameWithArgs, Executor) == 0x000010, "Member 'MordhauUtilityLibrary_CallFunctionByNameWithArgs::Executor' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_CallFunctionByNameWithArgs, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_CallFunctionByNameWithArgs::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.CanCrossplayWith
// 0x0002 (0x0002 - 0x0000)
struct MordhauUtilityLibrary_CanCrossplayWith final
{
public:
	EPlatform                                     OtherPlatform;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_CanCrossplayWith) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_CanCrossplayWith");
static_assert(sizeof(MordhauUtilityLibrary_CanCrossplayWith) == 0x000002, "Wrong size on MordhauUtilityLibrary_CanCrossplayWith");
static_assert(offsetof(MordhauUtilityLibrary_CanCrossplayWith, OtherPlatform) == 0x000000, "Member 'MordhauUtilityLibrary_CanCrossplayWith::OtherPlatform' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_CanCrossplayWith, ReturnValue) == 0x000001, "Member 'MordhauUtilityLibrary_CanCrossplayWith::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.Capitalize
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_Capitalize final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_Capitalize) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_Capitalize");
static_assert(sizeof(MordhauUtilityLibrary_Capitalize) == 0x000020, "Wrong size on MordhauUtilityLibrary_Capitalize");
static_assert(offsetof(MordhauUtilityLibrary_Capitalize, String) == 0x000000, "Member 'MordhauUtilityLibrary_Capitalize::String' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_Capitalize, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_Capitalize::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.ClosestPointOnLine
// 0x0030 (0x0030 - 0x0000)
struct MordhauUtilityLibrary_ClosestPointOnLine final
{
public:
	struct FVector                                LineStart;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineEnd;                                           // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_ClosestPointOnLine) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_ClosestPointOnLine");
static_assert(sizeof(MordhauUtilityLibrary_ClosestPointOnLine) == 0x000030, "Wrong size on MordhauUtilityLibrary_ClosestPointOnLine");
static_assert(offsetof(MordhauUtilityLibrary_ClosestPointOnLine, LineStart) == 0x000000, "Member 'MordhauUtilityLibrary_ClosestPointOnLine::LineStart' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ClosestPointOnLine, LineEnd) == 0x00000C, "Member 'MordhauUtilityLibrary_ClosestPointOnLine::LineEnd' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ClosestPointOnLine, Point) == 0x000018, "Member 'MordhauUtilityLibrary_ClosestPointOnLine::Point' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ClosestPointOnLine, ReturnValue) == 0x000024, "Member 'MordhauUtilityLibrary_ClosestPointOnLine::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.CompareAppearanceCustomization
// 0x0058 (0x0058 - 0x0000)
struct MordhauUtilityLibrary_CompareAppearanceCustomization final
{
public:
	struct FAppearanceCustomization               First;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAppearanceCustomization               Second;                                            // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_CompareAppearanceCustomization) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_CompareAppearanceCustomization");
static_assert(sizeof(MordhauUtilityLibrary_CompareAppearanceCustomization) == 0x000058, "Wrong size on MordhauUtilityLibrary_CompareAppearanceCustomization");
static_assert(offsetof(MordhauUtilityLibrary_CompareAppearanceCustomization, First) == 0x000000, "Member 'MordhauUtilityLibrary_CompareAppearanceCustomization::First' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_CompareAppearanceCustomization, Second) == 0x000028, "Member 'MordhauUtilityLibrary_CompareAppearanceCustomization::Second' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_CompareAppearanceCustomization, ReturnValue) == 0x000050, "Member 'MordhauUtilityLibrary_CompareAppearanceCustomization::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.CompareEquipmentCustomization
// 0x0068 (0x0068 - 0x0000)
struct MordhauUtilityLibrary_CompareEquipmentCustomization final
{
public:
	struct FEquipmentCustomization                First;                                             // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEquipmentCustomization                Second;                                            // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_CompareEquipmentCustomization) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_CompareEquipmentCustomization");
static_assert(sizeof(MordhauUtilityLibrary_CompareEquipmentCustomization) == 0x000068, "Wrong size on MordhauUtilityLibrary_CompareEquipmentCustomization");
static_assert(offsetof(MordhauUtilityLibrary_CompareEquipmentCustomization, First) == 0x000000, "Member 'MordhauUtilityLibrary_CompareEquipmentCustomization::First' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_CompareEquipmentCustomization, Second) == 0x000030, "Member 'MordhauUtilityLibrary_CompareEquipmentCustomization::Second' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_CompareEquipmentCustomization, ReturnValue) == 0x000060, "Member 'MordhauUtilityLibrary_CompareEquipmentCustomization::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.CompareFaceCustomization
// 0x0068 (0x0068 - 0x0000)
struct MordhauUtilityLibrary_CompareFaceCustomization final
{
public:
	struct FFaceCustomization                     First;                                             // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFaceCustomization                     Second;                                            // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_CompareFaceCustomization) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_CompareFaceCustomization");
static_assert(sizeof(MordhauUtilityLibrary_CompareFaceCustomization) == 0x000068, "Wrong size on MordhauUtilityLibrary_CompareFaceCustomization");
static_assert(offsetof(MordhauUtilityLibrary_CompareFaceCustomization, First) == 0x000000, "Member 'MordhauUtilityLibrary_CompareFaceCustomization::First' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_CompareFaceCustomization, Second) == 0x000030, "Member 'MordhauUtilityLibrary_CompareFaceCustomization::Second' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_CompareFaceCustomization, ReturnValue) == 0x000060, "Member 'MordhauUtilityLibrary_CompareFaceCustomization::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.CompareGearCustomization
// 0x0048 (0x0048 - 0x0000)
struct MordhauUtilityLibrary_CompareGearCustomization final
{
public:
	struct FCharacterGearCustomization            First;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCharacterGearCustomization            Second;                                            // 0x0020(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_CompareGearCustomization) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_CompareGearCustomization");
static_assert(sizeof(MordhauUtilityLibrary_CompareGearCustomization) == 0x000048, "Wrong size on MordhauUtilityLibrary_CompareGearCustomization");
static_assert(offsetof(MordhauUtilityLibrary_CompareGearCustomization, First) == 0x000000, "Member 'MordhauUtilityLibrary_CompareGearCustomization::First' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_CompareGearCustomization, Second) == 0x000020, "Member 'MordhauUtilityLibrary_CompareGearCustomization::Second' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_CompareGearCustomization, ReturnValue) == 0x000040, "Member 'MordhauUtilityLibrary_CompareGearCustomization::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.CompressData
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_CompressData final
{
public:
	TArray<uint8>                                 InData;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 OutData;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_CompressData) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_CompressData");
static_assert(sizeof(MordhauUtilityLibrary_CompressData) == 0x000028, "Wrong size on MordhauUtilityLibrary_CompressData");
static_assert(offsetof(MordhauUtilityLibrary_CompressData, InData) == 0x000000, "Member 'MordhauUtilityLibrary_CompressData::InData' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_CompressData, OutData) == 0x000010, "Member 'MordhauUtilityLibrary_CompressData::OutData' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_CompressData, ReturnValue) == 0x000020, "Member 'MordhauUtilityLibrary_CompressData::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.ComputePointsLeft
// 0x00C0 (0x00C0 - 0x0000)
struct MordhauUtilityLibrary_ComputePointsLeft final
{
public:
	struct FCharacterProfile                      Profile;                                           // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00B8(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_ComputePointsLeft) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_ComputePointsLeft");
static_assert(sizeof(MordhauUtilityLibrary_ComputePointsLeft) == 0x0000C0, "Wrong size on MordhauUtilityLibrary_ComputePointsLeft");
static_assert(offsetof(MordhauUtilityLibrary_ComputePointsLeft, Profile) == 0x000000, "Member 'MordhauUtilityLibrary_ComputePointsLeft::Profile' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ComputePointsLeft, ReturnValue) == 0x0000B8, "Member 'MordhauUtilityLibrary_ComputePointsLeft::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.ConsumeBudget
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_ConsumeBudget final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBudgetType                                   BudgetType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipInvisible;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceCutoff;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_ConsumeBudget) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_ConsumeBudget");
static_assert(sizeof(MordhauUtilityLibrary_ConsumeBudget) == 0x000018, "Wrong size on MordhauUtilityLibrary_ConsumeBudget");
static_assert(offsetof(MordhauUtilityLibrary_ConsumeBudget, Character) == 0x000000, "Member 'MordhauUtilityLibrary_ConsumeBudget::Character' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ConsumeBudget, BudgetType) == 0x000008, "Member 'MordhauUtilityLibrary_ConsumeBudget::BudgetType' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ConsumeBudget, bSkipInvisible) == 0x000009, "Member 'MordhauUtilityLibrary_ConsumeBudget::bSkipInvisible' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ConsumeBudget, Duration) == 0x00000C, "Member 'MordhauUtilityLibrary_ConsumeBudget::Duration' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ConsumeBudget, DistanceCutoff) == 0x000010, "Member 'MordhauUtilityLibrary_ConsumeBudget::DistanceCutoff' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ConsumeBudget, bForce) == 0x000014, "Member 'MordhauUtilityLibrary_ConsumeBudget::bForce' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ConsumeBudget, ReturnValue) == 0x000015, "Member 'MordhauUtilityLibrary_ConsumeBudget::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.Conv_SoftObjectPathToString
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_Conv_SoftObjectPathToString final
{
public:
	struct FSoftObjectPath                        SoftObjectPath;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_Conv_SoftObjectPathToString) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_Conv_SoftObjectPathToString");
static_assert(sizeof(MordhauUtilityLibrary_Conv_SoftObjectPathToString) == 0x000028, "Wrong size on MordhauUtilityLibrary_Conv_SoftObjectPathToString");
static_assert(offsetof(MordhauUtilityLibrary_Conv_SoftObjectPathToString, SoftObjectPath) == 0x000000, "Member 'MordhauUtilityLibrary_Conv_SoftObjectPathToString::SoftObjectPath' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_Conv_SoftObjectPathToString, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_Conv_SoftObjectPathToString::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.ConvertColorArrayToImage
// 0x0048 (0x0048 - 0x0000)
struct MordhauUtilityLibrary_ConvertColorArrayToImage final
{
public:
	int32                                         InSizeX;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSizeY;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         InImageData;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 CompressedData;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ImageQuality;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ImageFormat;                                       // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_ConvertColorArrayToImage) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_ConvertColorArrayToImage");
static_assert(sizeof(MordhauUtilityLibrary_ConvertColorArrayToImage) == 0x000048, "Wrong size on MordhauUtilityLibrary_ConvertColorArrayToImage");
static_assert(offsetof(MordhauUtilityLibrary_ConvertColorArrayToImage, InSizeX) == 0x000000, "Member 'MordhauUtilityLibrary_ConvertColorArrayToImage::InSizeX' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ConvertColorArrayToImage, InSizeY) == 0x000004, "Member 'MordhauUtilityLibrary_ConvertColorArrayToImage::InSizeY' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ConvertColorArrayToImage, InImageData) == 0x000008, "Member 'MordhauUtilityLibrary_ConvertColorArrayToImage::InImageData' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ConvertColorArrayToImage, CompressedData) == 0x000018, "Member 'MordhauUtilityLibrary_ConvertColorArrayToImage::CompressedData' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ConvertColorArrayToImage, ImageQuality) == 0x000028, "Member 'MordhauUtilityLibrary_ConvertColorArrayToImage::ImageQuality' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ConvertColorArrayToImage, ImageFormat) == 0x000030, "Member 'MordhauUtilityLibrary_ConvertColorArrayToImage::ImageFormat' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ConvertColorArrayToImage, ReturnValue) == 0x000040, "Member 'MordhauUtilityLibrary_ConvertColorArrayToImage::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.ConvertRelativePathToFull
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_ConvertRelativePathToFull final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_ConvertRelativePathToFull) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_ConvertRelativePathToFull");
static_assert(sizeof(MordhauUtilityLibrary_ConvertRelativePathToFull) == 0x000020, "Wrong size on MordhauUtilityLibrary_ConvertRelativePathToFull");
static_assert(offsetof(MordhauUtilityLibrary_ConvertRelativePathToFull, Path) == 0x000000, "Member 'MordhauUtilityLibrary_ConvertRelativePathToFull::Path' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ConvertRelativePathToFull, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_ConvertRelativePathToFull::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.ConvertStringSteamIDsToPlayFabIDs
// 0x0030 (0x0030 - 0x0000)
struct MordhauUtilityLibrary_ConvertStringSteamIDsToPlayFabIDs final
{
public:
	TArray<class FString>                         InSteamIDArray;                                    // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess, struct FSteamPlayFabConversionResult& OutMap)> Delegate;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_ConvertStringSteamIDsToPlayFabIDs) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_ConvertStringSteamIDsToPlayFabIDs");
static_assert(sizeof(MordhauUtilityLibrary_ConvertStringSteamIDsToPlayFabIDs) == 0x000030, "Wrong size on MordhauUtilityLibrary_ConvertStringSteamIDsToPlayFabIDs");
static_assert(offsetof(MordhauUtilityLibrary_ConvertStringSteamIDsToPlayFabIDs, InSteamIDArray) == 0x000000, "Member 'MordhauUtilityLibrary_ConvertStringSteamIDsToPlayFabIDs::InSteamIDArray' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ConvertStringSteamIDsToPlayFabIDs, Filename) == 0x000010, "Member 'MordhauUtilityLibrary_ConvertStringSteamIDsToPlayFabIDs::Filename' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ConvertStringSteamIDsToPlayFabIDs, Delegate) == 0x000020, "Member 'MordhauUtilityLibrary_ConvertStringSteamIDsToPlayFabIDs::Delegate' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.ConvertTextureToColorArray
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_ConvertTextureToColorArray final
{
public:
	class UTexture2DDynamic*                      DynTex;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(TArray<struct FColor>& ColorData)> OnTextureConvertedToColorArrayDelegate;            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_ConvertTextureToColorArray) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_ConvertTextureToColorArray");
static_assert(sizeof(MordhauUtilityLibrary_ConvertTextureToColorArray) == 0x000018, "Wrong size on MordhauUtilityLibrary_ConvertTextureToColorArray");
static_assert(offsetof(MordhauUtilityLibrary_ConvertTextureToColorArray, DynTex) == 0x000000, "Member 'MordhauUtilityLibrary_ConvertTextureToColorArray::DynTex' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ConvertTextureToColorArray, OnTextureConvertedToColorArrayDelegate) == 0x000008, "Member 'MordhauUtilityLibrary_ConvertTextureToColorArray::OnTextureConvertedToColorArrayDelegate' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.CopyToClipboard
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_CopyToClipboard final
{
public:
	class FString                                 MessageToCopy;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_CopyToClipboard) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_CopyToClipboard");
static_assert(sizeof(MordhauUtilityLibrary_CopyToClipboard) == 0x000010, "Wrong size on MordhauUtilityLibrary_CopyToClipboard");
static_assert(offsetof(MordhauUtilityLibrary_CopyToClipboard, MessageToCopy) == 0x000000, "Member 'MordhauUtilityLibrary_CopyToClipboard::MessageToCopy' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.DecodeBase64ToByteArray
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_DecodeBase64ToByteArray final
{
public:
	class FString                                 Source;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Dest;                                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_DecodeBase64ToByteArray) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_DecodeBase64ToByteArray");
static_assert(sizeof(MordhauUtilityLibrary_DecodeBase64ToByteArray) == 0x000028, "Wrong size on MordhauUtilityLibrary_DecodeBase64ToByteArray");
static_assert(offsetof(MordhauUtilityLibrary_DecodeBase64ToByteArray, Source) == 0x000000, "Member 'MordhauUtilityLibrary_DecodeBase64ToByteArray::Source' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_DecodeBase64ToByteArray, Dest) == 0x000010, "Member 'MordhauUtilityLibrary_DecodeBase64ToByteArray::Dest' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_DecodeBase64ToByteArray, ReturnValue) == 0x000020, "Member 'MordhauUtilityLibrary_DecodeBase64ToByteArray::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.DecodeBase64ToString
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_DecodeBase64ToString final
{
public:
	class FString                                 Source;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutDest;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_DecodeBase64ToString) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_DecodeBase64ToString");
static_assert(sizeof(MordhauUtilityLibrary_DecodeBase64ToString) == 0x000028, "Wrong size on MordhauUtilityLibrary_DecodeBase64ToString");
static_assert(offsetof(MordhauUtilityLibrary_DecodeBase64ToString, Source) == 0x000000, "Member 'MordhauUtilityLibrary_DecodeBase64ToString::Source' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_DecodeBase64ToString, OutDest) == 0x000010, "Member 'MordhauUtilityLibrary_DecodeBase64ToString::OutDest' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_DecodeBase64ToString, ReturnValue) == 0x000020, "Member 'MordhauUtilityLibrary_DecodeBase64ToString::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.DoesProfileContainBannedEquipment
// 0x00C8 (0x00C8 - 0x0000)
struct MordhauUtilityLibrary_DoesProfileContainBannedEquipment final
{
public:
	struct FCharacterProfile                      Profile;                                           // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AGameStateBase*                         GameState;                                         // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_DoesProfileContainBannedEquipment) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_DoesProfileContainBannedEquipment");
static_assert(sizeof(MordhauUtilityLibrary_DoesProfileContainBannedEquipment) == 0x0000C8, "Wrong size on MordhauUtilityLibrary_DoesProfileContainBannedEquipment");
static_assert(offsetof(MordhauUtilityLibrary_DoesProfileContainBannedEquipment, Profile) == 0x000000, "Member 'MordhauUtilityLibrary_DoesProfileContainBannedEquipment::Profile' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_DoesProfileContainBannedEquipment, GameState) == 0x0000B8, "Member 'MordhauUtilityLibrary_DoesProfileContainBannedEquipment::GameState' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_DoesProfileContainBannedEquipment, ReturnValue) == 0x0000C0, "Member 'MordhauUtilityLibrary_DoesProfileContainBannedEquipment::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.DoesProfileContainBannedPerks
// 0x00C8 (0x00C8 - 0x0000)
struct MordhauUtilityLibrary_DoesProfileContainBannedPerks final
{
public:
	struct FCharacterProfile                      Profile;                                           // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AGameStateBase*                         GameState;                                         // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_DoesProfileContainBannedPerks) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_DoesProfileContainBannedPerks");
static_assert(sizeof(MordhauUtilityLibrary_DoesProfileContainBannedPerks) == 0x0000C8, "Wrong size on MordhauUtilityLibrary_DoesProfileContainBannedPerks");
static_assert(offsetof(MordhauUtilityLibrary_DoesProfileContainBannedPerks, Profile) == 0x000000, "Member 'MordhauUtilityLibrary_DoesProfileContainBannedPerks::Profile' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_DoesProfileContainBannedPerks, GameState) == 0x0000B8, "Member 'MordhauUtilityLibrary_DoesProfileContainBannedPerks::GameState' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_DoesProfileContainBannedPerks, ReturnValue) == 0x0000C0, "Member 'MordhauUtilityLibrary_DoesProfileContainBannedPerks::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.DrawText
// 0x0070 (0x0070 - 0x0000)
struct MordhauUtilityLibrary_DrawText final
{
public:
	class UCanvas*                                Canvas;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFont*                            Font;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Size;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              position;                                          // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextColor;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Kerning;                                           // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColor;                                       // 0x0044(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset;                                      // 0x0054(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCentreX;                                          // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCentreY;                                          // 0x005D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutlined;                                         // 0x005E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F[0x1];                                       // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           OutlineColor;                                      // 0x0060(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_DrawText) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_DrawText");
static_assert(sizeof(MordhauUtilityLibrary_DrawText) == 0x000070, "Wrong size on MordhauUtilityLibrary_DrawText");
static_assert(offsetof(MordhauUtilityLibrary_DrawText, Canvas) == 0x000000, "Member 'MordhauUtilityLibrary_DrawText::Canvas' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_DrawText, Font) == 0x000008, "Member 'MordhauUtilityLibrary_DrawText::Font' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_DrawText, Size) == 0x000010, "Member 'MordhauUtilityLibrary_DrawText::Size' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_DrawText, Text) == 0x000018, "Member 'MordhauUtilityLibrary_DrawText::Text' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_DrawText, position) == 0x000028, "Member 'MordhauUtilityLibrary_DrawText::position' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_DrawText, TextColor) == 0x000030, "Member 'MordhauUtilityLibrary_DrawText::TextColor' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_DrawText, Kerning) == 0x000040, "Member 'MordhauUtilityLibrary_DrawText::Kerning' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_DrawText, ShadowColor) == 0x000044, "Member 'MordhauUtilityLibrary_DrawText::ShadowColor' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_DrawText, ShadowOffset) == 0x000054, "Member 'MordhauUtilityLibrary_DrawText::ShadowOffset' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_DrawText, bCentreX) == 0x00005C, "Member 'MordhauUtilityLibrary_DrawText::bCentreX' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_DrawText, bCentreY) == 0x00005D, "Member 'MordhauUtilityLibrary_DrawText::bCentreY' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_DrawText, bOutlined) == 0x00005E, "Member 'MordhauUtilityLibrary_DrawText::bOutlined' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_DrawText, OutlineColor) == 0x000060, "Member 'MordhauUtilityLibrary_DrawText::OutlineColor' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.EncodeByteArrayToBase64String
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_EncodeByteArrayToBase64String final
{
public:
	TArray<uint8>                                 Array;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_EncodeByteArrayToBase64String) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_EncodeByteArrayToBase64String");
static_assert(sizeof(MordhauUtilityLibrary_EncodeByteArrayToBase64String) == 0x000020, "Wrong size on MordhauUtilityLibrary_EncodeByteArrayToBase64String");
static_assert(offsetof(MordhauUtilityLibrary_EncodeByteArrayToBase64String, Array) == 0x000000, "Member 'MordhauUtilityLibrary_EncodeByteArrayToBase64String::Array' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_EncodeByteArrayToBase64String, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_EncodeByteArrayToBase64String::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.EncodeStringToBase64String
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_EncodeStringToBase64String final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_EncodeStringToBase64String) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_EncodeStringToBase64String");
static_assert(sizeof(MordhauUtilityLibrary_EncodeStringToBase64String) == 0x000020, "Wrong size on MordhauUtilityLibrary_EncodeStringToBase64String");
static_assert(offsetof(MordhauUtilityLibrary_EncodeStringToBase64String, String) == 0x000000, "Member 'MordhauUtilityLibrary_EncodeStringToBase64String::String' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_EncodeStringToBase64String, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_EncodeStringToBase64String::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.Equal_PlayFabPlayer
// 0x00C8 (0x00C8 - 0x0000)
struct MordhauUtilityLibrary_Equal_PlayFabPlayer final
{
public:
	struct FPlayFabPlayer                         A;                                                 // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabPlayer                         B;                                                 // 0x0060(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_Equal_PlayFabPlayer) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_Equal_PlayFabPlayer");
static_assert(sizeof(MordhauUtilityLibrary_Equal_PlayFabPlayer) == 0x0000C8, "Wrong size on MordhauUtilityLibrary_Equal_PlayFabPlayer");
static_assert(offsetof(MordhauUtilityLibrary_Equal_PlayFabPlayer, A) == 0x000000, "Member 'MordhauUtilityLibrary_Equal_PlayFabPlayer::A' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_Equal_PlayFabPlayer, B) == 0x000060, "Member 'MordhauUtilityLibrary_Equal_PlayFabPlayer::B' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_Equal_PlayFabPlayer, ReturnValue) == 0x0000C0, "Member 'MordhauUtilityLibrary_Equal_PlayFabPlayer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.FakeTickComponent
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_FakeTickComponent final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_FakeTickComponent) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_FakeTickComponent");
static_assert(sizeof(MordhauUtilityLibrary_FakeTickComponent) == 0x000010, "Wrong size on MordhauUtilityLibrary_FakeTickComponent");
static_assert(offsetof(MordhauUtilityLibrary_FakeTickComponent, Component) == 0x000000, "Member 'MordhauUtilityLibrary_FakeTickComponent::Component' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FakeTickComponent, DeltaTime) == 0x000008, "Member 'MordhauUtilityLibrary_FakeTickComponent::DeltaTime' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.FilterArrayByFunction
// 0x0038 (0x0038 - 0x0000)
struct MordhauUtilityLibrary_FilterArrayByFunction final
{
public:
	TArray<class UObject*>                        Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* Obj, bool* RetVal)> FuncDel;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    Class_0;                                           // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_FilterArrayByFunction) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_FilterArrayByFunction");
static_assert(sizeof(MordhauUtilityLibrary_FilterArrayByFunction) == 0x000038, "Wrong size on MordhauUtilityLibrary_FilterArrayByFunction");
static_assert(offsetof(MordhauUtilityLibrary_FilterArrayByFunction, Array) == 0x000000, "Member 'MordhauUtilityLibrary_FilterArrayByFunction::Array' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FilterArrayByFunction, FuncDel) == 0x000010, "Member 'MordhauUtilityLibrary_FilterArrayByFunction::FuncDel' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FilterArrayByFunction, Class_0) == 0x000020, "Member 'MordhauUtilityLibrary_FilterArrayByFunction::Class_0' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FilterArrayByFunction, ReturnValue) == 0x000028, "Member 'MordhauUtilityLibrary_FilterArrayByFunction::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.FindBetween
// 0x0024 (0x0024 - 0x0000)
struct MordhauUtilityLibrary_FindBetween final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_FindBetween) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_FindBetween");
static_assert(sizeof(MordhauUtilityLibrary_FindBetween) == 0x000024, "Wrong size on MordhauUtilityLibrary_FindBetween");
static_assert(offsetof(MordhauUtilityLibrary_FindBetween, A) == 0x000000, "Member 'MordhauUtilityLibrary_FindBetween::A' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FindBetween, B) == 0x00000C, "Member 'MordhauUtilityLibrary_FindBetween::B' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FindBetween, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_FindBetween::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.FindByFunction
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_FindByFunction final
{
public:
	TArray<class UObject*>                        Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* Obj, bool* RetVal)> FuncDel;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_FindByFunction) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_FindByFunction");
static_assert(sizeof(MordhauUtilityLibrary_FindByFunction) == 0x000028, "Wrong size on MordhauUtilityLibrary_FindByFunction");
static_assert(offsetof(MordhauUtilityLibrary_FindByFunction, Array) == 0x000000, "Member 'MordhauUtilityLibrary_FindByFunction::Array' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FindByFunction, FuncDel) == 0x000010, "Member 'MordhauUtilityLibrary_FindByFunction::FuncDel' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FindByFunction, ReturnValue) == 0x000020, "Member 'MordhauUtilityLibrary_FindByFunction::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.FindByFunctionTyped
// 0x0030 (0x0030 - 0x0000)
struct MordhauUtilityLibrary_FindByFunctionTyped final
{
public:
	TArray<class UObject*>                        Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* Obj, bool* RetVal)> FuncDel;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    Class_0;                                           // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_FindByFunctionTyped) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_FindByFunctionTyped");
static_assert(sizeof(MordhauUtilityLibrary_FindByFunctionTyped) == 0x000030, "Wrong size on MordhauUtilityLibrary_FindByFunctionTyped");
static_assert(offsetof(MordhauUtilityLibrary_FindByFunctionTyped, Array) == 0x000000, "Member 'MordhauUtilityLibrary_FindByFunctionTyped::Array' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FindByFunctionTyped, FuncDel) == 0x000010, "Member 'MordhauUtilityLibrary_FindByFunctionTyped::FuncDel' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FindByFunctionTyped, Class_0) == 0x000020, "Member 'MordhauUtilityLibrary_FindByFunctionTyped::Class_0' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FindByFunctionTyped, ReturnValue) == 0x000028, "Member 'MordhauUtilityLibrary_FindByFunctionTyped::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.FindCircleIntersectionPoints
// 0x002C (0x002C - 0x0000)
struct MordhauUtilityLibrary_FindCircleIntersectionPoints final
{
public:
	struct FVector2D                              CenterA;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusA;                                           // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CenterB;                                           // 0x000C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusB;                                           // 0x0014(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PointA;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PointB;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_FindCircleIntersectionPoints) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_FindCircleIntersectionPoints");
static_assert(sizeof(MordhauUtilityLibrary_FindCircleIntersectionPoints) == 0x00002C, "Wrong size on MordhauUtilityLibrary_FindCircleIntersectionPoints");
static_assert(offsetof(MordhauUtilityLibrary_FindCircleIntersectionPoints, CenterA) == 0x000000, "Member 'MordhauUtilityLibrary_FindCircleIntersectionPoints::CenterA' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FindCircleIntersectionPoints, RadiusA) == 0x000008, "Member 'MordhauUtilityLibrary_FindCircleIntersectionPoints::RadiusA' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FindCircleIntersectionPoints, CenterB) == 0x00000C, "Member 'MordhauUtilityLibrary_FindCircleIntersectionPoints::CenterB' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FindCircleIntersectionPoints, RadiusB) == 0x000014, "Member 'MordhauUtilityLibrary_FindCircleIntersectionPoints::RadiusB' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FindCircleIntersectionPoints, PointA) == 0x000018, "Member 'MordhauUtilityLibrary_FindCircleIntersectionPoints::PointA' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FindCircleIntersectionPoints, PointB) == 0x000020, "Member 'MordhauUtilityLibrary_FindCircleIntersectionPoints::PointB' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FindCircleIntersectionPoints, ReturnValue) == 0x000028, "Member 'MordhauUtilityLibrary_FindCircleIntersectionPoints::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.FindClass
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_FindClass final
{
public:
	class FString                                 ClassName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_FindClass) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_FindClass");
static_assert(sizeof(MordhauUtilityLibrary_FindClass) == 0x000018, "Wrong size on MordhauUtilityLibrary_FindClass");
static_assert(offsetof(MordhauUtilityLibrary_FindClass, ClassName) == 0x000000, "Member 'MordhauUtilityLibrary_FindClass::ClassName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FindClass, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_FindClass::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.FindPlayerState
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_FindPlayerState final
{
public:
	class FString                                 PlayerNameOrPlayFabID;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMordhauPlayerState*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_FindPlayerState) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_FindPlayerState");
static_assert(sizeof(MordhauUtilityLibrary_FindPlayerState) == 0x000018, "Wrong size on MordhauUtilityLibrary_FindPlayerState");
static_assert(offsetof(MordhauUtilityLibrary_FindPlayerState, PlayerNameOrPlayFabID) == 0x000000, "Member 'MordhauUtilityLibrary_FindPlayerState::PlayerNameOrPlayFabID' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FindPlayerState, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_FindPlayerState::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.FindPlayerStateWithoutLocalID
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_FindPlayerStateWithoutLocalID final
{
public:
	class FString                                 PlayerNameOrPlayFabID;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMordhauPlayerState*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_FindPlayerStateWithoutLocalID) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_FindPlayerStateWithoutLocalID");
static_assert(sizeof(MordhauUtilityLibrary_FindPlayerStateWithoutLocalID) == 0x000018, "Wrong size on MordhauUtilityLibrary_FindPlayerStateWithoutLocalID");
static_assert(offsetof(MordhauUtilityLibrary_FindPlayerStateWithoutLocalID, PlayerNameOrPlayFabID) == 0x000000, "Member 'MordhauUtilityLibrary_FindPlayerStateWithoutLocalID::PlayerNameOrPlayFabID' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FindPlayerStateWithoutLocalID, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_FindPlayerStateWithoutLocalID::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.FindPlayFabPlayer
// 0x0070 (0x0070 - 0x0000)
struct MordhauUtilityLibrary_FindPlayFabPlayer final
{
public:
	class FString                                 PlayerNameOrPlayFabID;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabPlayer                         ReturnValue;                                       // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_FindPlayFabPlayer) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_FindPlayFabPlayer");
static_assert(sizeof(MordhauUtilityLibrary_FindPlayFabPlayer) == 0x000070, "Wrong size on MordhauUtilityLibrary_FindPlayFabPlayer");
static_assert(offsetof(MordhauUtilityLibrary_FindPlayFabPlayer, PlayerNameOrPlayFabID) == 0x000000, "Member 'MordhauUtilityLibrary_FindPlayFabPlayer::PlayerNameOrPlayFabID' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FindPlayFabPlayer, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_FindPlayFabPlayer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.FindTeleportSpot
// 0x0030 (0x0030 - 0x0000)
struct MordhauUtilityLibrary_FindTeleportSpot final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_FindTeleportSpot) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_FindTeleportSpot");
static_assert(sizeof(MordhauUtilityLibrary_FindTeleportSpot) == 0x000030, "Wrong size on MordhauUtilityLibrary_FindTeleportSpot");
static_assert(offsetof(MordhauUtilityLibrary_FindTeleportSpot, Actor) == 0x000000, "Member 'MordhauUtilityLibrary_FindTeleportSpot::Actor' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FindTeleportSpot, InLocation) == 0x000008, "Member 'MordhauUtilityLibrary_FindTeleportSpot::InLocation' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FindTeleportSpot, InRotation) == 0x000014, "Member 'MordhauUtilityLibrary_FindTeleportSpot::InRotation' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FindTeleportSpot, OutLocation) == 0x000020, "Member 'MordhauUtilityLibrary_FindTeleportSpot::OutLocation' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FindTeleportSpot, ReturnValue) == 0x00002C, "Member 'MordhauUtilityLibrary_FindTeleportSpot::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.FInterpConstantToSeparate
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_FInterpConstantToSeparate final
{
public:
	float                                         Current;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Target;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IncreaseSpeed;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecreaseSpeed;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_FInterpConstantToSeparate) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_FInterpConstantToSeparate");
static_assert(sizeof(MordhauUtilityLibrary_FInterpConstantToSeparate) == 0x000018, "Wrong size on MordhauUtilityLibrary_FInterpConstantToSeparate");
static_assert(offsetof(MordhauUtilityLibrary_FInterpConstantToSeparate, Current) == 0x000000, "Member 'MordhauUtilityLibrary_FInterpConstantToSeparate::Current' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FInterpConstantToSeparate, Target) == 0x000004, "Member 'MordhauUtilityLibrary_FInterpConstantToSeparate::Target' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FInterpConstantToSeparate, DeltaTime) == 0x000008, "Member 'MordhauUtilityLibrary_FInterpConstantToSeparate::DeltaTime' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FInterpConstantToSeparate, IncreaseSpeed) == 0x00000C, "Member 'MordhauUtilityLibrary_FInterpConstantToSeparate::IncreaseSpeed' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FInterpConstantToSeparate, DecreaseSpeed) == 0x000010, "Member 'MordhauUtilityLibrary_FInterpConstantToSeparate::DecreaseSpeed' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FInterpConstantToSeparate, ReturnValue) == 0x000014, "Member 'MordhauUtilityLibrary_FInterpConstantToSeparate::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.FInterpToSeparate
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_FInterpToSeparate final
{
public:
	float                                         Current;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Target;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IncreaseSpeed;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecreaseSpeed;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_FInterpToSeparate) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_FInterpToSeparate");
static_assert(sizeof(MordhauUtilityLibrary_FInterpToSeparate) == 0x000018, "Wrong size on MordhauUtilityLibrary_FInterpToSeparate");
static_assert(offsetof(MordhauUtilityLibrary_FInterpToSeparate, Current) == 0x000000, "Member 'MordhauUtilityLibrary_FInterpToSeparate::Current' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FInterpToSeparate, Target) == 0x000004, "Member 'MordhauUtilityLibrary_FInterpToSeparate::Target' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FInterpToSeparate, DeltaTime) == 0x000008, "Member 'MordhauUtilityLibrary_FInterpToSeparate::DeltaTime' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FInterpToSeparate, IncreaseSpeed) == 0x00000C, "Member 'MordhauUtilityLibrary_FInterpToSeparate::IncreaseSpeed' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FInterpToSeparate, DecreaseSpeed) == 0x000010, "Member 'MordhauUtilityLibrary_FInterpToSeparate::DecreaseSpeed' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FInterpToSeparate, ReturnValue) == 0x000014, "Member 'MordhauUtilityLibrary_FInterpToSeparate::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.FlushPlayerControllerPressedKeys
// 0x0008 (0x0008 - 0x0000)
struct MordhauUtilityLibrary_FlushPlayerControllerPressedKeys final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_FlushPlayerControllerPressedKeys) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_FlushPlayerControllerPressedKeys");
static_assert(sizeof(MordhauUtilityLibrary_FlushPlayerControllerPressedKeys) == 0x000008, "Wrong size on MordhauUtilityLibrary_FlushPlayerControllerPressedKeys");
static_assert(offsetof(MordhauUtilityLibrary_FlushPlayerControllerPressedKeys, Controller) == 0x000000, "Member 'MordhauUtilityLibrary_FlushPlayerControllerPressedKeys::Controller' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.ForceReplicationUpdate
// 0x0008 (0x0008 - 0x0000)
struct MordhauUtilityLibrary_ForceReplicationUpdate final
{
public:
	class UCharacterMovementComponent*            CMC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_ForceReplicationUpdate) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_ForceReplicationUpdate");
static_assert(sizeof(MordhauUtilityLibrary_ForceReplicationUpdate) == 0x000008, "Wrong size on MordhauUtilityLibrary_ForceReplicationUpdate");
static_assert(offsetof(MordhauUtilityLibrary_ForceReplicationUpdate, CMC) == 0x000000, "Member 'MordhauUtilityLibrary_ForceReplicationUpdate::CMC' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.ForceSRGB
// 0x0008 (0x0008 - 0x0000)
struct MordhauUtilityLibrary_ForceSRGB final
{
public:
	class UTextureRenderTarget2D*                 rt;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_ForceSRGB) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_ForceSRGB");
static_assert(sizeof(MordhauUtilityLibrary_ForceSRGB) == 0x000008, "Wrong size on MordhauUtilityLibrary_ForceSRGB");
static_assert(offsetof(MordhauUtilityLibrary_ForceSRGB, rt) == 0x000000, "Member 'MordhauUtilityLibrary_ForceSRGB::rt' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.ForceValidCharacterProfile
// 0x0178 (0x0178 - 0x0000)
struct MordhauUtilityLibrary_ForceValidCharacterProfile final
{
public:
	struct FCharacterProfile                      Profile;                                           // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCharacterProfile                      ForceValidatedProfile;                             // 0x00B8(0x00B8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bValidateInventory;                                // 0x0170(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0171(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_172[0x6];                                      // 0x0172(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_ForceValidCharacterProfile) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_ForceValidCharacterProfile");
static_assert(sizeof(MordhauUtilityLibrary_ForceValidCharacterProfile) == 0x000178, "Wrong size on MordhauUtilityLibrary_ForceValidCharacterProfile");
static_assert(offsetof(MordhauUtilityLibrary_ForceValidCharacterProfile, Profile) == 0x000000, "Member 'MordhauUtilityLibrary_ForceValidCharacterProfile::Profile' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ForceValidCharacterProfile, ForceValidatedProfile) == 0x0000B8, "Member 'MordhauUtilityLibrary_ForceValidCharacterProfile::ForceValidatedProfile' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ForceValidCharacterProfile, bValidateInventory) == 0x000170, "Member 'MordhauUtilityLibrary_ForceValidCharacterProfile::bValidateInventory' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ForceValidCharacterProfile, ReturnValue) == 0x000171, "Member 'MordhauUtilityLibrary_ForceValidCharacterProfile::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.FormatText
// 0x0030 (0x0030 - 0x0000)
struct MordhauUtilityLibrary_FormatText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_FormatText) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_FormatText");
static_assert(sizeof(MordhauUtilityLibrary_FormatText) == 0x000030, "Wrong size on MordhauUtilityLibrary_FormatText");
static_assert(offsetof(MordhauUtilityLibrary_FormatText, Text) == 0x000000, "Member 'MordhauUtilityLibrary_FormatText::Text' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FormatText, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_FormatText::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.FSmoothDamp
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_FSmoothDamp final
{
public:
	float                                         Current;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Target;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentVelocity;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothTime;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_FSmoothDamp) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_FSmoothDamp");
static_assert(sizeof(MordhauUtilityLibrary_FSmoothDamp) == 0x000018, "Wrong size on MordhauUtilityLibrary_FSmoothDamp");
static_assert(offsetof(MordhauUtilityLibrary_FSmoothDamp, Current) == 0x000000, "Member 'MordhauUtilityLibrary_FSmoothDamp::Current' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FSmoothDamp, Target) == 0x000004, "Member 'MordhauUtilityLibrary_FSmoothDamp::Target' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FSmoothDamp, CurrentVelocity) == 0x000008, "Member 'MordhauUtilityLibrary_FSmoothDamp::CurrentVelocity' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FSmoothDamp, SmoothTime) == 0x00000C, "Member 'MordhauUtilityLibrary_FSmoothDamp::SmoothTime' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FSmoothDamp, DeltaTime) == 0x000010, "Member 'MordhauUtilityLibrary_FSmoothDamp::DeltaTime' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_FSmoothDamp, MaxSpeed) == 0x000014, "Member 'MordhauUtilityLibrary_FSmoothDamp::MaxSpeed' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetActorLevelName
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetActorLevelName final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetActorLevelName) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetActorLevelName");
static_assert(sizeof(MordhauUtilityLibrary_GetActorLevelName) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetActorLevelName");
static_assert(offsetof(MordhauUtilityLibrary_GetActorLevelName, Actor) == 0x000000, "Member 'MordhauUtilityLibrary_GetActorLevelName::Actor' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetActorLevelName, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetActorLevelName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetAllActorsInLevelOfClass
// 0x0030 (0x0030 - 0x0000)
struct MordhauUtilityLibrary_GetAllActorsInLevelOfClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelName;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetAllActorsInLevelOfClass) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetAllActorsInLevelOfClass");
static_assert(sizeof(MordhauUtilityLibrary_GetAllActorsInLevelOfClass) == 0x000030, "Wrong size on MordhauUtilityLibrary_GetAllActorsInLevelOfClass");
static_assert(offsetof(MordhauUtilityLibrary_GetAllActorsInLevelOfClass, WorldContextObject) == 0x000000, "Member 'MordhauUtilityLibrary_GetAllActorsInLevelOfClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetAllActorsInLevelOfClass, ActorClass) == 0x000008, "Member 'MordhauUtilityLibrary_GetAllActorsInLevelOfClass::ActorClass' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetAllActorsInLevelOfClass, LevelName) == 0x000010, "Member 'MordhauUtilityLibrary_GetAllActorsInLevelOfClass::LevelName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetAllActorsInLevelOfClass, OutActors) == 0x000020, "Member 'MordhauUtilityLibrary_GetAllActorsInLevelOfClass::OutActors' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetAllPaksPathsInCustomPaksFolder
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetAllPaksPathsInCustomPaksFolder final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetAllPaksPathsInCustomPaksFolder) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetAllPaksPathsInCustomPaksFolder");
static_assert(sizeof(MordhauUtilityLibrary_GetAllPaksPathsInCustomPaksFolder) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetAllPaksPathsInCustomPaksFolder");
static_assert(offsetof(MordhauUtilityLibrary_GetAllPaksPathsInCustomPaksFolder, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetAllPaksPathsInCustomPaksFolder::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetAllWearableClassesForSlotExhaustive
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetAllWearableClassesForSlotExhaustive final
{
public:
	EWearableSlot                                 Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UMordhauWearable>>   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetAllWearableClassesForSlotExhaustive) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetAllWearableClassesForSlotExhaustive");
static_assert(sizeof(MordhauUtilityLibrary_GetAllWearableClassesForSlotExhaustive) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetAllWearableClassesForSlotExhaustive");
static_assert(offsetof(MordhauUtilityLibrary_GetAllWearableClassesForSlotExhaustive, Slot) == 0x000000, "Member 'MordhauUtilityLibrary_GetAllWearableClassesForSlotExhaustive::Slot' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetAllWearableClassesForSlotExhaustive, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetAllWearableClassesForSlotExhaustive::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetArchetypeObject
// 0x00C0 (0x00C0 - 0x0000)
struct MordhauUtilityLibrary_GetArchetypeObject final
{
public:
	struct FCharacterProfile                      Profile;                                           // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UArchetype*                             ReturnValue;                                       // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetArchetypeObject) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetArchetypeObject");
static_assert(sizeof(MordhauUtilityLibrary_GetArchetypeObject) == 0x0000C0, "Wrong size on MordhauUtilityLibrary_GetArchetypeObject");
static_assert(offsetof(MordhauUtilityLibrary_GetArchetypeObject, Profile) == 0x000000, "Member 'MordhauUtilityLibrary_GetArchetypeObject::Profile' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetArchetypeObject, ReturnValue) == 0x0000B8, "Member 'MordhauUtilityLibrary_GetArchetypeObject::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetAttachParentActor
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetAttachParentActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetAttachParentActor) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetAttachParentActor");
static_assert(sizeof(MordhauUtilityLibrary_GetAttachParentActor) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetAttachParentActor");
static_assert(offsetof(MordhauUtilityLibrary_GetAttachParentActor, Actor) == 0x000000, "Member 'MordhauUtilityLibrary_GetAttachParentActor::Actor' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetAttachParentActor, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetAttachParentActor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetAxisAngleFromRotator
// 0x001C (0x001C - 0x0000)
struct MordhauUtilityLibrary_GetAxisAngleFromRotator final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OutAngle;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetAxisAngleFromRotator) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_GetAxisAngleFromRotator");
static_assert(sizeof(MordhauUtilityLibrary_GetAxisAngleFromRotator) == 0x00001C, "Wrong size on MordhauUtilityLibrary_GetAxisAngleFromRotator");
static_assert(offsetof(MordhauUtilityLibrary_GetAxisAngleFromRotator, Rot) == 0x000000, "Member 'MordhauUtilityLibrary_GetAxisAngleFromRotator::Rot' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetAxisAngleFromRotator, OutAngle) == 0x00000C, "Member 'MordhauUtilityLibrary_GetAxisAngleFromRotator::OutAngle' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetAxisAngleFromRotator, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetAxisAngleFromRotator::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetBannedEquipmentArray
// 0x00D0 (0x00D0 - 0x0000)
struct MordhauUtilityLibrary_GetBannedEquipmentArray final
{
public:
	struct FCharacterProfile                      Profile;                                           // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AGameStateBase*                         GameState;                                         // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           ReturnValue;                                       // 0x00C0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetBannedEquipmentArray) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetBannedEquipmentArray");
static_assert(sizeof(MordhauUtilityLibrary_GetBannedEquipmentArray) == 0x0000D0, "Wrong size on MordhauUtilityLibrary_GetBannedEquipmentArray");
static_assert(offsetof(MordhauUtilityLibrary_GetBannedEquipmentArray, Profile) == 0x000000, "Member 'MordhauUtilityLibrary_GetBannedEquipmentArray::Profile' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetBannedEquipmentArray, GameState) == 0x0000B8, "Member 'MordhauUtilityLibrary_GetBannedEquipmentArray::GameState' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetBannedEquipmentArray, ReturnValue) == 0x0000C0, "Member 'MordhauUtilityLibrary_GetBannedEquipmentArray::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetBannedEquipmentNames
// 0x00D0 (0x00D0 - 0x0000)
struct MordhauUtilityLibrary_GetBannedEquipmentNames final
{
public:
	struct FCharacterProfile                      Profile;                                           // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AGameStateBase*                         GameState;                                         // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x00C0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetBannedEquipmentNames) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetBannedEquipmentNames");
static_assert(sizeof(MordhauUtilityLibrary_GetBannedEquipmentNames) == 0x0000D0, "Wrong size on MordhauUtilityLibrary_GetBannedEquipmentNames");
static_assert(offsetof(MordhauUtilityLibrary_GetBannedEquipmentNames, Profile) == 0x000000, "Member 'MordhauUtilityLibrary_GetBannedEquipmentNames::Profile' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetBannedEquipmentNames, GameState) == 0x0000B8, "Member 'MordhauUtilityLibrary_GetBannedEquipmentNames::GameState' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetBannedEquipmentNames, ReturnValue) == 0x0000C0, "Member 'MordhauUtilityLibrary_GetBannedEquipmentNames::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetBannedPerkNames
// 0x00D0 (0x00D0 - 0x0000)
struct MordhauUtilityLibrary_GetBannedPerkNames final
{
public:
	struct FCharacterProfile                      Profile;                                           // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AGameStateBase*                         GameState;                                         // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x00C0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetBannedPerkNames) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetBannedPerkNames");
static_assert(sizeof(MordhauUtilityLibrary_GetBannedPerkNames) == 0x0000D0, "Wrong size on MordhauUtilityLibrary_GetBannedPerkNames");
static_assert(offsetof(MordhauUtilityLibrary_GetBannedPerkNames, Profile) == 0x000000, "Member 'MordhauUtilityLibrary_GetBannedPerkNames::Profile' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetBannedPerkNames, GameState) == 0x0000B8, "Member 'MordhauUtilityLibrary_GetBannedPerkNames::GameState' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetBannedPerkNames, ReturnValue) == 0x0000C0, "Member 'MordhauUtilityLibrary_GetBannedPerkNames::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetBannedPerksArray
// 0x00D0 (0x00D0 - 0x0000)
struct MordhauUtilityLibrary_GetBannedPerksArray final
{
public:
	struct FCharacterProfile                      Profile;                                           // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AGameStateBase*                         GameState;                                         // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPerk*>                          ReturnValue;                                       // 0x00C0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetBannedPerksArray) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetBannedPerksArray");
static_assert(sizeof(MordhauUtilityLibrary_GetBannedPerksArray) == 0x0000D0, "Wrong size on MordhauUtilityLibrary_GetBannedPerksArray");
static_assert(offsetof(MordhauUtilityLibrary_GetBannedPerksArray, Profile) == 0x000000, "Member 'MordhauUtilityLibrary_GetBannedPerksArray::Profile' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetBannedPerksArray, GameState) == 0x0000B8, "Member 'MordhauUtilityLibrary_GetBannedPerksArray::GameState' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetBannedPerksArray, ReturnValue) == 0x0000C0, "Member 'MordhauUtilityLibrary_GetBannedPerksArray::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetBaseFilename
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_GetBaseFilename final
{
public:
	class FString                                 InPath;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemovePath;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetBaseFilename) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetBaseFilename");
static_assert(sizeof(MordhauUtilityLibrary_GetBaseFilename) == 0x000028, "Wrong size on MordhauUtilityLibrary_GetBaseFilename");
static_assert(offsetof(MordhauUtilityLibrary_GetBaseFilename, InPath) == 0x000000, "Member 'MordhauUtilityLibrary_GetBaseFilename::InPath' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetBaseFilename, bRemovePath) == 0x000010, "Member 'MordhauUtilityLibrary_GetBaseFilename::bRemovePath' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetBaseFilename, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_GetBaseFilename::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetBeaconPortName
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetBeaconPortName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetBeaconPortName) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetBeaconPortName");
static_assert(sizeof(MordhauUtilityLibrary_GetBeaconPortName) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetBeaconPortName");
static_assert(offsetof(MordhauUtilityLibrary_GetBeaconPortName, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetBeaconPortName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetBoundingBoxOfBoneInfluence
// 0x0038 (0x0038 - 0x0000)
struct MordhauUtilityLibrary_GetBoundingBoxOfBoneInfluence final
{
public:
	class USkeletalMeshComponent*                 MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Bones;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         WeightThreshold;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   ReturnValue;                                       // 0x001C(0x001C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetBoundingBoxOfBoneInfluence) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetBoundingBoxOfBoneInfluence");
static_assert(sizeof(MordhauUtilityLibrary_GetBoundingBoxOfBoneInfluence) == 0x000038, "Wrong size on MordhauUtilityLibrary_GetBoundingBoxOfBoneInfluence");
static_assert(offsetof(MordhauUtilityLibrary_GetBoundingBoxOfBoneInfluence, MeshComponent) == 0x000000, "Member 'MordhauUtilityLibrary_GetBoundingBoxOfBoneInfluence::MeshComponent' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetBoundingBoxOfBoneInfluence, Bones) == 0x000008, "Member 'MordhauUtilityLibrary_GetBoundingBoxOfBoneInfluence::Bones' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetBoundingBoxOfBoneInfluence, WeightThreshold) == 0x000018, "Member 'MordhauUtilityLibrary_GetBoundingBoxOfBoneInfluence::WeightThreshold' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetBoundingBoxOfBoneInfluence, ReturnValue) == 0x00001C, "Member 'MordhauUtilityLibrary_GetBoundingBoxOfBoneInfluence::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetBoxCenter
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_GetBoxCenter final
{
public:
	struct FBox                                   Box;                                               // 0x0000(0x001C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetBoxCenter) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_GetBoxCenter");
static_assert(sizeof(MordhauUtilityLibrary_GetBoxCenter) == 0x000028, "Wrong size on MordhauUtilityLibrary_GetBoxCenter");
static_assert(offsetof(MordhauUtilityLibrary_GetBoxCenter, Box) == 0x000000, "Member 'MordhauUtilityLibrary_GetBoxCenter::Box' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetBoxCenter, ReturnValue) == 0x00001C, "Member 'MordhauUtilityLibrary_GetBoxCenter::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetBuildDateTime
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetBuildDateTime final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetBuildDateTime) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetBuildDateTime");
static_assert(sizeof(MordhauUtilityLibrary_GetBuildDateTime) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetBuildDateTime");
static_assert(offsetof(MordhauUtilityLibrary_GetBuildDateTime, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetBuildDateTime::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetBuildVersion
// 0x0004 (0x0004 - 0x0000)
struct MordhauUtilityLibrary_GetBuildVersion final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetBuildVersion) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_GetBuildVersion");
static_assert(sizeof(MordhauUtilityLibrary_GetBuildVersion) == 0x000004, "Wrong size on MordhauUtilityLibrary_GetBuildVersion");
static_assert(offsetof(MordhauUtilityLibrary_GetBuildVersion, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetBuildVersion::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetCanEverAffectNavigation
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetCanEverAffectNavigation final
{
public:
	class USceneComponent*                        SceneComp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetCanEverAffectNavigation) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetCanEverAffectNavigation");
static_assert(sizeof(MordhauUtilityLibrary_GetCanEverAffectNavigation) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetCanEverAffectNavigation");
static_assert(offsetof(MordhauUtilityLibrary_GetCanEverAffectNavigation, SceneComp) == 0x000000, "Member 'MordhauUtilityLibrary_GetCanEverAffectNavigation::SceneComp' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCanEverAffectNavigation, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetCanEverAffectNavigation::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetCategoryMaxNameLenght
// 0x0004 (0x0004 - 0x0000)
struct MordhauUtilityLibrary_GetCategoryMaxNameLenght final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetCategoryMaxNameLenght) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_GetCategoryMaxNameLenght");
static_assert(sizeof(MordhauUtilityLibrary_GetCategoryMaxNameLenght) == 0x000004, "Wrong size on MordhauUtilityLibrary_GetCategoryMaxNameLenght");
static_assert(offsetof(MordhauUtilityLibrary_GetCategoryMaxNameLenght, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetCategoryMaxNameLenght::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetCentroid
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_GetCentroid final
{
public:
	TArray<struct FVector>                        Points;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetCentroid) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetCentroid");
static_assert(sizeof(MordhauUtilityLibrary_GetCentroid) == 0x000020, "Wrong size on MordhauUtilityLibrary_GetCentroid");
static_assert(offsetof(MordhauUtilityLibrary_GetCentroid, Points) == 0x000000, "Member 'MordhauUtilityLibrary_GetCentroid::Points' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCentroid, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetCentroid::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetClassByPath
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetClassByPath final
{
public:
	class FString                                 ClassPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetClassByPath) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetClassByPath");
static_assert(sizeof(MordhauUtilityLibrary_GetClassByPath) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetClassByPath");
static_assert(offsetof(MordhauUtilityLibrary_GetClassByPath, ClassPath) == 0x000000, "Member 'MordhauUtilityLibrary_GetClassByPath::ClassPath' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetClassByPath, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetClassByPath::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetComponentsBoundingBoxInActorSpace
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetComponentsBoundingBoxInActorSpace final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetComponentsBoundingBoxInActorSpace) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetComponentsBoundingBoxInActorSpace");
static_assert(sizeof(MordhauUtilityLibrary_GetComponentsBoundingBoxInActorSpace) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetComponentsBoundingBoxInActorSpace");
static_assert(offsetof(MordhauUtilityLibrary_GetComponentsBoundingBoxInActorSpace, Actor) == 0x000000, "Member 'MordhauUtilityLibrary_GetComponentsBoundingBoxInActorSpace::Actor' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetComponentsBoundingBoxInActorSpace, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetComponentsBoundingBoxInActorSpace::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetConsoleMaxLoadouts
// 0x0004 (0x0004 - 0x0000)
struct MordhauUtilityLibrary_GetConsoleMaxLoadouts final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetConsoleMaxLoadouts) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_GetConsoleMaxLoadouts");
static_assert(sizeof(MordhauUtilityLibrary_GetConsoleMaxLoadouts) == 0x000004, "Wrong size on MordhauUtilityLibrary_GetConsoleMaxLoadouts");
static_assert(offsetof(MordhauUtilityLibrary_GetConsoleMaxLoadouts, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetConsoleMaxLoadouts::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetConsoleVariableFloat
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetConsoleVariableFloat final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetConsoleVariableFloat) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetConsoleVariableFloat");
static_assert(sizeof(MordhauUtilityLibrary_GetConsoleVariableFloat) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetConsoleVariableFloat");
static_assert(offsetof(MordhauUtilityLibrary_GetConsoleVariableFloat, VariableName) == 0x000000, "Member 'MordhauUtilityLibrary_GetConsoleVariableFloat::VariableName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetConsoleVariableFloat, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetConsoleVariableFloat::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetConsoleVariableInt
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetConsoleVariableInt final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetConsoleVariableInt) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetConsoleVariableInt");
static_assert(sizeof(MordhauUtilityLibrary_GetConsoleVariableInt) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetConsoleVariableInt");
static_assert(offsetof(MordhauUtilityLibrary_GetConsoleVariableInt, VariableName) == 0x000000, "Member 'MordhauUtilityLibrary_GetConsoleVariableInt::VariableName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetConsoleVariableInt, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetConsoleVariableInt::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetConsoleVariableString
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_GetConsoleVariableString final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetConsoleVariableString) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetConsoleVariableString");
static_assert(sizeof(MordhauUtilityLibrary_GetConsoleVariableString) == 0x000020, "Wrong size on MordhauUtilityLibrary_GetConsoleVariableString");
static_assert(offsetof(MordhauUtilityLibrary_GetConsoleVariableString, VariableName) == 0x000000, "Member 'MordhauUtilityLibrary_GetConsoleVariableString::VariableName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetConsoleVariableString, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetConsoleVariableString::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetCurrentDemoTime
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetCurrentDemoTime final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetCurrentDemoTime) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetCurrentDemoTime");
static_assert(sizeof(MordhauUtilityLibrary_GetCurrentDemoTime) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetCurrentDemoTime");
static_assert(offsetof(MordhauUtilityLibrary_GetCurrentDemoTime, World) == 0x000000, "Member 'MordhauUtilityLibrary_GetCurrentDemoTime::World' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCurrentDemoTime, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetCurrentDemoTime::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetCurrentFrame
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetCurrentFrame final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetCurrentFrame) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetCurrentFrame");
static_assert(sizeof(MordhauUtilityLibrary_GetCurrentFrame) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetCurrentFrame");
static_assert(offsetof(MordhauUtilityLibrary_GetCurrentFrame, World) == 0x000000, "Member 'MordhauUtilityLibrary_GetCurrentFrame::World' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCurrentFrame, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetCurrentFrame::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetCurrentFrameBP
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetCurrentFrameBP final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetCurrentFrameBP) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetCurrentFrameBP");
static_assert(sizeof(MordhauUtilityLibrary_GetCurrentFrameBP) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetCurrentFrameBP");
static_assert(offsetof(MordhauUtilityLibrary_GetCurrentFrameBP, WorldContextObject) == 0x000000, "Member 'MordhauUtilityLibrary_GetCurrentFrameBP::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCurrentFrameBP, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetCurrentFrameBP::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetCurrentPlatformName
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetCurrentPlatformName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetCurrentPlatformName) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetCurrentPlatformName");
static_assert(sizeof(MordhauUtilityLibrary_GetCurrentPlatformName) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetCurrentPlatformName");
static_assert(offsetof(MordhauUtilityLibrary_GetCurrentPlatformName, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetCurrentPlatformName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetCustomConfigVar_Array
// 0x0038 (0x0038 - 0x0000)
struct MordhauUtilityLibrary_GetCustomConfigVar_Array final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArraySize;                                         // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetCustomConfigVar_Array) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetCustomConfigVar_Array");
static_assert(sizeof(MordhauUtilityLibrary_GetCustomConfigVar_Array) == 0x000038, "Wrong size on MordhauUtilityLibrary_GetCustomConfigVar_Array");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Array, SectionName) == 0x000000, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Array::SectionName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Array, VariableName) == 0x000010, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Array::VariableName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Array, ArraySize) == 0x000020, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Array::ArraySize' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Array, ReturnValue) == 0x000028, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Array::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetCustomConfigVar_Bool
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_GetCustomConfigVar_Bool final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetCustomConfigVar_Bool) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetCustomConfigVar_Bool");
static_assert(sizeof(MordhauUtilityLibrary_GetCustomConfigVar_Bool) == 0x000028, "Wrong size on MordhauUtilityLibrary_GetCustomConfigVar_Bool");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Bool, SectionName) == 0x000000, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Bool::SectionName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Bool, VariableName) == 0x000010, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Bool::VariableName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Bool, IsValid) == 0x000020, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Bool::IsValid' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Bool, ReturnValue) == 0x000021, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Bool::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetCustomConfigVar_Color
// 0x0038 (0x0038 - 0x0000)
struct MordhauUtilityLibrary_GetCustomConfigVar_Color final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x0024(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetCustomConfigVar_Color) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetCustomConfigVar_Color");
static_assert(sizeof(MordhauUtilityLibrary_GetCustomConfigVar_Color) == 0x000038, "Wrong size on MordhauUtilityLibrary_GetCustomConfigVar_Color");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Color, SectionName) == 0x000000, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Color::SectionName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Color, VariableName) == 0x000010, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Color::VariableName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Color, IsValid) == 0x000020, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Color::IsValid' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Color, ReturnValue) == 0x000024, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Color::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetCustomConfigVar_Float
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_GetCustomConfigVar_Float final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetCustomConfigVar_Float) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetCustomConfigVar_Float");
static_assert(sizeof(MordhauUtilityLibrary_GetCustomConfigVar_Float) == 0x000028, "Wrong size on MordhauUtilityLibrary_GetCustomConfigVar_Float");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Float, SectionName) == 0x000000, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Float::SectionName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Float, VariableName) == 0x000010, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Float::VariableName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Float, IsValid) == 0x000020, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Float::IsValid' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Float, ReturnValue) == 0x000024, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Float::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetCustomConfigVar_Int
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_GetCustomConfigVar_Int final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetCustomConfigVar_Int) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetCustomConfigVar_Int");
static_assert(sizeof(MordhauUtilityLibrary_GetCustomConfigVar_Int) == 0x000028, "Wrong size on MordhauUtilityLibrary_GetCustomConfigVar_Int");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Int, SectionName) == 0x000000, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Int::SectionName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Int, VariableName) == 0x000010, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Int::VariableName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Int, IsValid) == 0x000020, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Int::IsValid' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Int, ReturnValue) == 0x000024, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Int::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetCustomConfigVar_Rotator
// 0x0030 (0x0030 - 0x0000)
struct MordhauUtilityLibrary_GetCustomConfigVar_Rotator final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetCustomConfigVar_Rotator) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetCustomConfigVar_Rotator");
static_assert(sizeof(MordhauUtilityLibrary_GetCustomConfigVar_Rotator) == 0x000030, "Wrong size on MordhauUtilityLibrary_GetCustomConfigVar_Rotator");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Rotator, SectionName) == 0x000000, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Rotator::SectionName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Rotator, VariableName) == 0x000010, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Rotator::VariableName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Rotator, IsValid) == 0x000020, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Rotator::IsValid' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Rotator, ReturnValue) == 0x000024, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Rotator::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetCustomConfigVar_String
// 0x0038 (0x0038 - 0x0000)
struct MordhauUtilityLibrary_GetCustomConfigVar_String final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetCustomConfigVar_String) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetCustomConfigVar_String");
static_assert(sizeof(MordhauUtilityLibrary_GetCustomConfigVar_String) == 0x000038, "Wrong size on MordhauUtilityLibrary_GetCustomConfigVar_String");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_String, SectionName) == 0x000000, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_String::SectionName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_String, VariableName) == 0x000010, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_String::VariableName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_String, IsValid) == 0x000020, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_String::IsValid' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_String, ReturnValue) == 0x000028, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_String::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetCustomConfigVar_Vector
// 0x0030 (0x0030 - 0x0000)
struct MordhauUtilityLibrary_GetCustomConfigVar_Vector final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetCustomConfigVar_Vector) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetCustomConfigVar_Vector");
static_assert(sizeof(MordhauUtilityLibrary_GetCustomConfigVar_Vector) == 0x000030, "Wrong size on MordhauUtilityLibrary_GetCustomConfigVar_Vector");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Vector, SectionName) == 0x000000, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Vector::SectionName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Vector, VariableName) == 0x000010, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Vector::VariableName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Vector, IsValid) == 0x000020, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Vector::IsValid' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Vector, ReturnValue) == 0x000024, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Vector::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetCustomConfigVar_Vector2D
// 0x0030 (0x0030 - 0x0000)
struct MordhauUtilityLibrary_GetCustomConfigVar_Vector2D final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0024(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetCustomConfigVar_Vector2D) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetCustomConfigVar_Vector2D");
static_assert(sizeof(MordhauUtilityLibrary_GetCustomConfigVar_Vector2D) == 0x000030, "Wrong size on MordhauUtilityLibrary_GetCustomConfigVar_Vector2D");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Vector2D, SectionName) == 0x000000, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Vector2D::SectionName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Vector2D, VariableName) == 0x000010, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Vector2D::VariableName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Vector2D, IsValid) == 0x000020, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Vector2D::IsValid' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetCustomConfigVar_Vector2D, ReturnValue) == 0x000024, "Member 'MordhauUtilityLibrary_GetCustomConfigVar_Vector2D::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetDateTimeFromUnixTimestamp
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetDateTimeFromUnixTimestamp final
{
public:
	int32                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetDateTimeFromUnixTimestamp) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetDateTimeFromUnixTimestamp");
static_assert(sizeof(MordhauUtilityLibrary_GetDateTimeFromUnixTimestamp) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetDateTimeFromUnixTimestamp");
static_assert(offsetof(MordhauUtilityLibrary_GetDateTimeFromUnixTimestamp, Timestamp) == 0x000000, "Member 'MordhauUtilityLibrary_GetDateTimeFromUnixTimestamp::Timestamp' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetDateTimeFromUnixTimestamp, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetDateTimeFromUnixTimestamp::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetDefaultActor
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetDefaultActor final
{
public:
	class UClass*                                 FromClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetDefaultActor) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetDefaultActor");
static_assert(sizeof(MordhauUtilityLibrary_GetDefaultActor) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetDefaultActor");
static_assert(offsetof(MordhauUtilityLibrary_GetDefaultActor, FromClass) == 0x000000, "Member 'MordhauUtilityLibrary_GetDefaultActor::FromClass' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetDefaultActor, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetDefaultActor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetDefaultActorCopy
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetDefaultActorCopy final
{
public:
	class UClass*                                 FromClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorCopy;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetDefaultActorCopy) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetDefaultActorCopy");
static_assert(sizeof(MordhauUtilityLibrary_GetDefaultActorCopy) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetDefaultActorCopy");
static_assert(offsetof(MordhauUtilityLibrary_GetDefaultActorCopy, FromClass) == 0x000000, "Member 'MordhauUtilityLibrary_GetDefaultActorCopy::FromClass' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetDefaultActorCopy, ActorCopy) == 0x000008, "Member 'MordhauUtilityLibrary_GetDefaultActorCopy::ActorCopy' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetDefaultBadge
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetDefaultBadge final
{
public:
	TSubclassOf<class UBadge>                     BadgeClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBadge*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetDefaultBadge) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetDefaultBadge");
static_assert(sizeof(MordhauUtilityLibrary_GetDefaultBadge) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetDefaultBadge");
static_assert(offsetof(MordhauUtilityLibrary_GetDefaultBadge, BadgeClass) == 0x000000, "Member 'MordhauUtilityLibrary_GetDefaultBadge::BadgeClass' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetDefaultBadge, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetDefaultBadge::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetDefaultObject
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetDefaultObject final
{
public:
	class UClass*                                 FromClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetDefaultObject) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetDefaultObject");
static_assert(sizeof(MordhauUtilityLibrary_GetDefaultObject) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetDefaultObject");
static_assert(offsetof(MordhauUtilityLibrary_GetDefaultObject, FromClass) == 0x000000, "Member 'MordhauUtilityLibrary_GetDefaultObject::FromClass' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetDefaultObject, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetDefaultObject::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetDefaultObjectCopy
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetDefaultObjectCopy final
{
public:
	class UClass*                                 FromClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ObjectCopy;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Outer_0;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetDefaultObjectCopy) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetDefaultObjectCopy");
static_assert(sizeof(MordhauUtilityLibrary_GetDefaultObjectCopy) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetDefaultObjectCopy");
static_assert(offsetof(MordhauUtilityLibrary_GetDefaultObjectCopy, FromClass) == 0x000000, "Member 'MordhauUtilityLibrary_GetDefaultObjectCopy::FromClass' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetDefaultObjectCopy, ObjectCopy) == 0x000008, "Member 'MordhauUtilityLibrary_GetDefaultObjectCopy::ObjectCopy' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetDefaultObjectCopy, Outer_0) == 0x000010, "Member 'MordhauUtilityLibrary_GetDefaultObjectCopy::Outer_0' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetDefaultWearable
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetDefaultWearable final
{
public:
	class UClass*                                 FromClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMordhauWearable*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetDefaultWearable) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetDefaultWearable");
static_assert(sizeof(MordhauUtilityLibrary_GetDefaultWearable) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetDefaultWearable");
static_assert(offsetof(MordhauUtilityLibrary_GetDefaultWearable, FromClass) == 0x000000, "Member 'MordhauUtilityLibrary_GetDefaultWearable::FromClass' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetDefaultWearable, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetDefaultWearable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetDurationText
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_GetDurationText final
{
public:
	int32                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetDurationText) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetDurationText");
static_assert(sizeof(MordhauUtilityLibrary_GetDurationText) == 0x000020, "Wrong size on MordhauUtilityLibrary_GetDurationText");
static_assert(offsetof(MordhauUtilityLibrary_GetDurationText, Seconds) == 0x000000, "Member 'MordhauUtilityLibrary_GetDurationText::Seconds' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetDurationText, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetDurationText::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetEnumKey
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_GetEnumKey final
{
public:
	class FString                                 EnumName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnumValue;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetEnumKey) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetEnumKey");
static_assert(sizeof(MordhauUtilityLibrary_GetEnumKey) == 0x000028, "Wrong size on MordhauUtilityLibrary_GetEnumKey");
static_assert(offsetof(MordhauUtilityLibrary_GetEnumKey, EnumName) == 0x000000, "Member 'MordhauUtilityLibrary_GetEnumKey::EnumName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetEnumKey, EnumValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetEnumKey::EnumValue' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetEnumKey, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_GetEnumKey::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetEnumValue
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_GetEnumValue final
{
public:
	class FString                                 EnumName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnumKey;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetEnumValue) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetEnumValue");
static_assert(sizeof(MordhauUtilityLibrary_GetEnumValue) == 0x000028, "Wrong size on MordhauUtilityLibrary_GetEnumValue");
static_assert(offsetof(MordhauUtilityLibrary_GetEnumValue, EnumName) == 0x000000, "Member 'MordhauUtilityLibrary_GetEnumValue::EnumName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetEnumValue, EnumKey) == 0x000010, "Member 'MordhauUtilityLibrary_GetEnumValue::EnumKey' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetEnumValue, ReturnValue) == 0x000020, "Member 'MordhauUtilityLibrary_GetEnumValue::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.getErrorText
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_getErrorText final
{
public:
	class FString                                 ErrorString;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_getErrorText) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_getErrorText");
static_assert(sizeof(MordhauUtilityLibrary_getErrorText) == 0x000028, "Wrong size on MordhauUtilityLibrary_getErrorText");
static_assert(offsetof(MordhauUtilityLibrary_getErrorText, ErrorString) == 0x000000, "Member 'MordhauUtilityLibrary_getErrorText::ErrorString' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_getErrorText, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_getErrorText::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetFaceIndex
// 0x0090 (0x0090 - 0x0000)
struct MordhauUtilityLibrary_GetFaceIndex final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x008C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetFaceIndex) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_GetFaceIndex");
static_assert(sizeof(MordhauUtilityLibrary_GetFaceIndex) == 0x000090, "Wrong size on MordhauUtilityLibrary_GetFaceIndex");
static_assert(offsetof(MordhauUtilityLibrary_GetFaceIndex, Hit) == 0x000000, "Member 'MordhauUtilityLibrary_GetFaceIndex::Hit' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetFaceIndex, ReturnValue) == 0x00008C, "Member 'MordhauUtilityLibrary_GetFaceIndex::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetGamePortName
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetGamePortName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetGamePortName) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetGamePortName");
static_assert(sizeof(MordhauUtilityLibrary_GetGamePortName) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetGamePortName");
static_assert(offsetof(MordhauUtilityLibrary_GetGamePortName, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetGamePortName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetGameServerGamePort
// 0x0004 (0x0004 - 0x0000)
struct MordhauUtilityLibrary_GetGameServerGamePort final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetGameServerGamePort) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_GetGameServerGamePort");
static_assert(sizeof(MordhauUtilityLibrary_GetGameServerGamePort) == 0x000004, "Wrong size on MordhauUtilityLibrary_GetGameServerGamePort");
static_assert(offsetof(MordhauUtilityLibrary_GetGameServerGamePort, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetGameServerGamePort::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetImportedBounds
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_GetImportedBounds final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                       ReturnValue;                                       // 0x0008(0x001C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetImportedBounds) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetImportedBounds");
static_assert(sizeof(MordhauUtilityLibrary_GetImportedBounds) == 0x000028, "Wrong size on MordhauUtilityLibrary_GetImportedBounds");
static_assert(offsetof(MordhauUtilityLibrary_GetImportedBounds, SkeletalMeshComponent) == 0x000000, "Member 'MordhauUtilityLibrary_GetImportedBounds::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetImportedBounds, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetImportedBounds::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetIngameEvent
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetIngameEvent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIngameEvent                                  ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetIngameEvent) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetIngameEvent");
static_assert(sizeof(MordhauUtilityLibrary_GetIngameEvent) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetIngameEvent");
static_assert(offsetof(MordhauUtilityLibrary_GetIngameEvent, WorldContextObject) == 0x000000, "Member 'MordhauUtilityLibrary_GetIngameEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetIngameEvent, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetIngameEvent::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetIsPeasant
// 0x00C0 (0x00C0 - 0x0000)
struct MordhauUtilityLibrary_GetIsPeasant final
{
public:
	struct FCharacterProfile                      Profile;                                           // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetIsPeasant) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetIsPeasant");
static_assert(sizeof(MordhauUtilityLibrary_GetIsPeasant) == 0x0000C0, "Wrong size on MordhauUtilityLibrary_GetIsPeasant");
static_assert(offsetof(MordhauUtilityLibrary_GetIsPeasant, Profile) == 0x000000, "Member 'MordhauUtilityLibrary_GetIsPeasant::Profile' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetIsPeasant, ReturnValue) == 0x0000B8, "Member 'MordhauUtilityLibrary_GetIsPeasant::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetIsUsingController
// 0x0001 (0x0001 - 0x0000)
struct MordhauUtilityLibrary_GetIsUsingController final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetIsUsingController) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_GetIsUsingController");
static_assert(sizeof(MordhauUtilityLibrary_GetIsUsingController) == 0x000001, "Wrong size on MordhauUtilityLibrary_GetIsUsingController");
static_assert(offsetof(MordhauUtilityLibrary_GetIsUsingController, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetIsUsingController::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetLastReceiveTime
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetLastReceiveTime final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetLastReceiveTime) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetLastReceiveTime");
static_assert(sizeof(MordhauUtilityLibrary_GetLastReceiveTime) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetLastReceiveTime");
static_assert(offsetof(MordhauUtilityLibrary_GetLastReceiveTime, WorldContextObject) == 0x000000, "Member 'MordhauUtilityLibrary_GetLastReceiveTime::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetLastReceiveTime, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetLastReceiveTime::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetLocalNetworkVersion
// 0x0004 (0x0004 - 0x0000)
struct MordhauUtilityLibrary_GetLocalNetworkVersion final
{
public:
	uint32                                        ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetLocalNetworkVersion) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_GetLocalNetworkVersion");
static_assert(sizeof(MordhauUtilityLibrary_GetLocalNetworkVersion) == 0x000004, "Wrong size on MordhauUtilityLibrary_GetLocalNetworkVersion");
static_assert(offsetof(MordhauUtilityLibrary_GetLocalNetworkVersion, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetLocalNetworkVersion::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetLocalShortID
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetLocalShortID final
{
public:
	const class AMordhauPlayerState*              PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetLocalShortID) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetLocalShortID");
static_assert(sizeof(MordhauUtilityLibrary_GetLocalShortID) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetLocalShortID");
static_assert(offsetof(MordhauUtilityLibrary_GetLocalShortID, PlayerState) == 0x000000, "Member 'MordhauUtilityLibrary_GetLocalShortID::PlayerState' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetLocalShortID, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetLocalShortID::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetLocation
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetLocation final
{
public:
	class FString                                 LocationName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EServerLocation                               ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetLocation) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetLocation");
static_assert(sizeof(MordhauUtilityLibrary_GetLocation) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetLocation");
static_assert(offsetof(MordhauUtilityLibrary_GetLocation, LocationName) == 0x000000, "Member 'MordhauUtilityLibrary_GetLocation::LocationName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetLocation, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetLocation::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetLocationDisplayName
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_GetLocationDisplayName final
{
public:
	EServerLocation                               Location;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetLocationDisplayName) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetLocationDisplayName");
static_assert(sizeof(MordhauUtilityLibrary_GetLocationDisplayName) == 0x000020, "Wrong size on MordhauUtilityLibrary_GetLocationDisplayName");
static_assert(offsetof(MordhauUtilityLibrary_GetLocationDisplayName, Location) == 0x000000, "Member 'MordhauUtilityLibrary_GetLocationDisplayName::Location' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetLocationDisplayName, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetLocationDisplayName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetLocationName
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetLocationName final
{
public:
	EServerLocation                               Location;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetLocationName) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetLocationName");
static_assert(sizeof(MordhauUtilityLibrary_GetLocationName) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetLocationName");
static_assert(offsetof(MordhauUtilityLibrary_GetLocationName, Location) == 0x000000, "Member 'MordhauUtilityLibrary_GetLocationName::Location' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetLocationName, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetLocationName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetLODParentPrimitive
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetLODParentPrimitive final
{
public:
	class UPrimitiveComponent*                    Comp;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetLODParentPrimitive) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetLODParentPrimitive");
static_assert(sizeof(MordhauUtilityLibrary_GetLODParentPrimitive) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetLODParentPrimitive");
static_assert(offsetof(MordhauUtilityLibrary_GetLODParentPrimitive, Comp) == 0x000000, "Member 'MordhauUtilityLibrary_GetLODParentPrimitive::Comp' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetLODParentPrimitive, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetLODParentPrimitive::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetMapInfo
// 0x0038 (0x0038 - 0x0000)
struct MordhauUtilityLibrary_GetMapInfo final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapPath;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMapInfo                               ReturnValue;                                       // 0x0018(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetMapInfo) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetMapInfo");
static_assert(sizeof(MordhauUtilityLibrary_GetMapInfo) == 0x000038, "Wrong size on MordhauUtilityLibrary_GetMapInfo");
static_assert(offsetof(MordhauUtilityLibrary_GetMapInfo, WorldContextObject) == 0x000000, "Member 'MordhauUtilityLibrary_GetMapInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetMapInfo, MapPath) == 0x000008, "Member 'MordhauUtilityLibrary_GetMapInfo::MapPath' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetMapInfo, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_GetMapInfo::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetMapName
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetMapName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetMapName) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetMapName");
static_assert(sizeof(MordhauUtilityLibrary_GetMapName) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetMapName");
static_assert(offsetof(MordhauUtilityLibrary_GetMapName, WorldContextObject) == 0x000000, "Member 'MordhauUtilityLibrary_GetMapName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetMapName, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetMapName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetMaxIndexWithDraw
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetMaxIndexWithDraw final
{
public:
	TArray<int32>                                 inArray;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bFoundDraw;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetMaxIndexWithDraw) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetMaxIndexWithDraw");
static_assert(sizeof(MordhauUtilityLibrary_GetMaxIndexWithDraw) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetMaxIndexWithDraw");
static_assert(offsetof(MordhauUtilityLibrary_GetMaxIndexWithDraw, inArray) == 0x000000, "Member 'MordhauUtilityLibrary_GetMaxIndexWithDraw::inArray' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetMaxIndexWithDraw, bFoundDraw) == 0x000010, "Member 'MordhauUtilityLibrary_GetMaxIndexWithDraw::bFoundDraw' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetMaxIndexWithDraw, ReturnValue) == 0x000014, "Member 'MordhauUtilityLibrary_GetMaxIndexWithDraw::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetMordhauGameSession
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetMordhauGameSession final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMordhauGameSession*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetMordhauGameSession) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetMordhauGameSession");
static_assert(sizeof(MordhauUtilityLibrary_GetMordhauGameSession) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetMordhauGameSession");
static_assert(offsetof(MordhauUtilityLibrary_GetMordhauGameSession, WorldContextObject) == 0x000000, "Member 'MordhauUtilityLibrary_GetMordhauGameSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetMordhauGameSession, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetMordhauGameSession::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetMordhauGameUserSettings
// 0x0008 (0x0008 - 0x0000)
struct MordhauUtilityLibrary_GetMordhauGameUserSettings final
{
public:
	class UMordhauGameUserSettings*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetMordhauGameUserSettings) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetMordhauGameUserSettings");
static_assert(sizeof(MordhauUtilityLibrary_GetMordhauGameUserSettings) == 0x000008, "Wrong size on MordhauUtilityLibrary_GetMordhauGameUserSettings");
static_assert(offsetof(MordhauUtilityLibrary_GetMordhauGameUserSettings, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetMordhauGameUserSettings::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetMordhauHUD
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetMordhauHUD final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMordhauHUD*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetMordhauHUD) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetMordhauHUD");
static_assert(sizeof(MordhauUtilityLibrary_GetMordhauHUD) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetMordhauHUD");
static_assert(offsetof(MordhauUtilityLibrary_GetMordhauHUD, WorldContextObject) == 0x000000, "Member 'MordhauUtilityLibrary_GetMordhauHUD::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetMordhauHUD, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetMordhauHUD::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetMordhauInput
// 0x0008 (0x0008 - 0x0000)
struct MordhauUtilityLibrary_GetMordhauInput final
{
public:
	class UMordhauInput*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetMordhauInput) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetMordhauInput");
static_assert(sizeof(MordhauUtilityLibrary_GetMordhauInput) == 0x000008, "Wrong size on MordhauUtilityLibrary_GetMordhauInput");
static_assert(offsetof(MordhauUtilityLibrary_GetMordhauInput, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetMordhauInput::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetMordhauInventory
// 0x0008 (0x0008 - 0x0000)
struct MordhauUtilityLibrary_GetMordhauInventory final
{
public:
	class UMordhauInventory*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetMordhauInventory) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetMordhauInventory");
static_assert(sizeof(MordhauUtilityLibrary_GetMordhauInventory) == 0x000008, "Wrong size on MordhauUtilityLibrary_GetMordhauInventory");
static_assert(offsetof(MordhauUtilityLibrary_GetMordhauInventory, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetMordhauInventory::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetMordhauSingleton
// 0x0008 (0x0008 - 0x0000)
struct MordhauUtilityLibrary_GetMordhauSingleton final
{
public:
	class UMordhauSingleton*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetMordhauSingleton) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetMordhauSingleton");
static_assert(sizeof(MordhauUtilityLibrary_GetMordhauSingleton) == 0x000008, "Wrong size on MordhauUtilityLibrary_GetMordhauSingleton");
static_assert(offsetof(MordhauUtilityLibrary_GetMordhauSingleton, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetMordhauSingleton::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetMordhauStats
// 0x0008 (0x0008 - 0x0000)
struct MordhauUtilityLibrary_GetMordhauStats final
{
public:
	class UMordhauStats*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetMordhauStats) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetMordhauStats");
static_assert(sizeof(MordhauUtilityLibrary_GetMordhauStats) == 0x000008, "Wrong size on MordhauUtilityLibrary_GetMordhauStats");
static_assert(offsetof(MordhauUtilityLibrary_GetMordhauStats, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetMordhauStats::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetMousePosition
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetMousePosition final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetMousePosition) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetMousePosition");
static_assert(sizeof(MordhauUtilityLibrary_GetMousePosition) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetMousePosition");
static_assert(offsetof(MordhauUtilityLibrary_GetMousePosition, Controller) == 0x000000, "Member 'MordhauUtilityLibrary_GetMousePosition::Controller' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetMousePosition, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetMousePosition::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetNormalizedTime
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetNormalizedTime final
{
public:
	float                                         Start;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         End;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Current;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetNormalizedTime) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_GetNormalizedTime");
static_assert(sizeof(MordhauUtilityLibrary_GetNormalizedTime) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetNormalizedTime");
static_assert(offsetof(MordhauUtilityLibrary_GetNormalizedTime, Start) == 0x000000, "Member 'MordhauUtilityLibrary_GetNormalizedTime::Start' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetNormalizedTime, End) == 0x000004, "Member 'MordhauUtilityLibrary_GetNormalizedTime::End' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetNormalizedTime, Current) == 0x000008, "Member 'MordhauUtilityLibrary_GetNormalizedTime::Current' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetNormalizedTime, ReturnValue) == 0x00000C, "Member 'MordhauUtilityLibrary_GetNormalizedTime::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetNotifyServerReceivedClientData
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetNotifyServerReceivedClientData final
{
public:
	class UCharacterMovementComponent*            CMC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetNotifyServerReceivedClientData) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetNotifyServerReceivedClientData");
static_assert(sizeof(MordhauUtilityLibrary_GetNotifyServerReceivedClientData) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetNotifyServerReceivedClientData");
static_assert(offsetof(MordhauUtilityLibrary_GetNotifyServerReceivedClientData, CMC) == 0x000000, "Member 'MordhauUtilityLibrary_GetNotifyServerReceivedClientData::CMC' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetNotifyServerReceivedClientData, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetNotifyServerReceivedClientData::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetOnlineEnvironmentName
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetOnlineEnvironmentName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetOnlineEnvironmentName) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetOnlineEnvironmentName");
static_assert(sizeof(MordhauUtilityLibrary_GetOnlineEnvironmentName) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetOnlineEnvironmentName");
static_assert(offsetof(MordhauUtilityLibrary_GetOnlineEnvironmentName, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetOnlineEnvironmentName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetOnlineServiceName
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetOnlineServiceName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetOnlineServiceName) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetOnlineServiceName");
static_assert(sizeof(MordhauUtilityLibrary_GetOnlineServiceName) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetOnlineServiceName");
static_assert(offsetof(MordhauUtilityLibrary_GetOnlineServiceName, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetOnlineServiceName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetOSVersion
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetOSVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetOSVersion) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetOSVersion");
static_assert(sizeof(MordhauUtilityLibrary_GetOSVersion) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetOSVersion");
static_assert(offsetof(MordhauUtilityLibrary_GetOSVersion, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetOSVersion::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetPacketsLost
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetPacketsLost final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetPacketsLost) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetPacketsLost");
static_assert(sizeof(MordhauUtilityLibrary_GetPacketsLost) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetPacketsLost");
static_assert(offsetof(MordhauUtilityLibrary_GetPacketsLost, WorldContextObject) == 0x000000, "Member 'MordhauUtilityLibrary_GetPacketsLost::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetPacketsLost, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetPacketsLost::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetPerforceRevision
// 0x0004 (0x0004 - 0x0000)
struct MordhauUtilityLibrary_GetPerforceRevision final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetPerforceRevision) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_GetPerforceRevision");
static_assert(sizeof(MordhauUtilityLibrary_GetPerforceRevision) == 0x000004, "Wrong size on MordhauUtilityLibrary_GetPerforceRevision");
static_assert(offsetof(MordhauUtilityLibrary_GetPerforceRevision, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetPerforceRevision::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetPerforceRevisionEnforced
// 0x0004 (0x0004 - 0x0000)
struct MordhauUtilityLibrary_GetPerforceRevisionEnforced final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetPerforceRevisionEnforced) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_GetPerforceRevisionEnforced");
static_assert(sizeof(MordhauUtilityLibrary_GetPerforceRevisionEnforced) == 0x000004, "Wrong size on MordhauUtilityLibrary_GetPerforceRevisionEnforced");
static_assert(offsetof(MordhauUtilityLibrary_GetPerforceRevisionEnforced, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetPerforceRevisionEnforced::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetPerks
// 0x00C8 (0x00C8 - 0x0000)
struct MordhauUtilityLibrary_GetPerks final
{
public:
	struct FCharacterProfile                      Profile;                                           // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UPerk*>                          ReturnValue;                                       // 0x00B8(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetPerks) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetPerks");
static_assert(sizeof(MordhauUtilityLibrary_GetPerks) == 0x0000C8, "Wrong size on MordhauUtilityLibrary_GetPerks");
static_assert(offsetof(MordhauUtilityLibrary_GetPerks, Profile) == 0x000000, "Member 'MordhauUtilityLibrary_GetPerks::Profile' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetPerks, ReturnValue) == 0x0000B8, "Member 'MordhauUtilityLibrary_GetPerks::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetPerksCost
// 0x00C0 (0x00C0 - 0x0000)
struct MordhauUtilityLibrary_GetPerksCost final
{
public:
	struct FCharacterProfile                      Profile;                                           // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00B8(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetPerksCost) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetPerksCost");
static_assert(sizeof(MordhauUtilityLibrary_GetPerksCost) == 0x0000C0, "Wrong size on MordhauUtilityLibrary_GetPerksCost");
static_assert(offsetof(MordhauUtilityLibrary_GetPerksCost, Profile) == 0x000000, "Member 'MordhauUtilityLibrary_GetPerksCost::Profile' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetPerksCost, ReturnValue) == 0x0000B8, "Member 'MordhauUtilityLibrary_GetPerksCost::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetPhysicsBodyBounds
// 0x0030 (0x0030 - 0x0000)
struct MordhauUtilityLibrary_GetPhysicsBodyBounds final
{
public:
	class USkeletalMeshComponent*                 MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   ReturnValue;                                       // 0x0010(0x001C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetPhysicsBodyBounds) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetPhysicsBodyBounds");
static_assert(sizeof(MordhauUtilityLibrary_GetPhysicsBodyBounds) == 0x000030, "Wrong size on MordhauUtilityLibrary_GetPhysicsBodyBounds");
static_assert(offsetof(MordhauUtilityLibrary_GetPhysicsBodyBounds, MeshComponent) == 0x000000, "Member 'MordhauUtilityLibrary_GetPhysicsBodyBounds::MeshComponent' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetPhysicsBodyBounds, BoneName) == 0x000008, "Member 'MordhauUtilityLibrary_GetPhysicsBodyBounds::BoneName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetPhysicsBodyBounds, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetPhysicsBodyBounds::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetPhysicsBodyWorldTransform
// 0x0040 (0x0040 - 0x0000)
struct MordhauUtilityLibrary_GetPhysicsBodyWorldTransform final
{
public:
	class USkeletalMeshComponent*                 MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetPhysicsBodyWorldTransform) == 0x000010, "Wrong alignment on MordhauUtilityLibrary_GetPhysicsBodyWorldTransform");
static_assert(sizeof(MordhauUtilityLibrary_GetPhysicsBodyWorldTransform) == 0x000040, "Wrong size on MordhauUtilityLibrary_GetPhysicsBodyWorldTransform");
static_assert(offsetof(MordhauUtilityLibrary_GetPhysicsBodyWorldTransform, MeshComponent) == 0x000000, "Member 'MordhauUtilityLibrary_GetPhysicsBodyWorldTransform::MeshComponent' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetPhysicsBodyWorldTransform, BoneName) == 0x000008, "Member 'MordhauUtilityLibrary_GetPhysicsBodyWorldTransform::BoneName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetPhysicsBodyWorldTransform, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetPhysicsBodyWorldTransform::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetPing
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetPing final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMedian;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetPing) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetPing");
static_assert(sizeof(MordhauUtilityLibrary_GetPing) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetPing");
static_assert(offsetof(MordhauUtilityLibrary_GetPing, WorldContextObject) == 0x000000, "Member 'MordhauUtilityLibrary_GetPing::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetPing, bUseMedian) == 0x000008, "Member 'MordhauUtilityLibrary_GetPing::bUseMedian' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetPing, ReturnValue) == 0x00000C, "Member 'MordhauUtilityLibrary_GetPing::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetPlatform
// 0x0001 (0x0001 - 0x0000)
struct MordhauUtilityLibrary_GetPlatform final
{
public:
	EPlatform                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetPlatform) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_GetPlatform");
static_assert(sizeof(MordhauUtilityLibrary_GetPlatform) == 0x000001, "Wrong size on MordhauUtilityLibrary_GetPlatform");
static_assert(offsetof(MordhauUtilityLibrary_GetPlatform, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetPlatform::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetPlatformByName
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetPlatformByName final
{
public:
	class FString                                 PlatformName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlatform                                     ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetPlatformByName) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetPlatformByName");
static_assert(sizeof(MordhauUtilityLibrary_GetPlatformByName) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetPlatformByName");
static_assert(offsetof(MordhauUtilityLibrary_GetPlatformByName, PlatformName) == 0x000000, "Member 'MordhauUtilityLibrary_GetPlatformByName::PlatformName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetPlatformByName, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetPlatformByName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetPlatformName
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetPlatformName final
{
public:
	EPlatform                                     Platform;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetPlatformName) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetPlatformName");
static_assert(sizeof(MordhauUtilityLibrary_GetPlatformName) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetPlatformName");
static_assert(offsetof(MordhauUtilityLibrary_GetPlatformName, Platform) == 0x000000, "Member 'MordhauUtilityLibrary_GetPlatformName::Platform' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetPlatformName, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetPlatformName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetPlatformSpecific
// 0x0001 (0x0001 - 0x0000)
struct MordhauUtilityLibrary_GetPlatformSpecific final
{
public:
	EPlatformSpecific                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetPlatformSpecific) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_GetPlatformSpecific");
static_assert(sizeof(MordhauUtilityLibrary_GetPlatformSpecific) == 0x000001, "Wrong size on MordhauUtilityLibrary_GetPlatformSpecific");
static_assert(offsetof(MordhauUtilityLibrary_GetPlatformSpecific, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetPlatformSpecific::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetPlayerAvatar
// 0x0068 (0x0068 - 0x0000)
struct MordhauUtilityLibrary_GetPlayerAvatar final
{
public:
	struct FPlayFabPlayer                         Player;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2DDynamic*                      ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetPlayerAvatar) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetPlayerAvatar");
static_assert(sizeof(MordhauUtilityLibrary_GetPlayerAvatar) == 0x000068, "Wrong size on MordhauUtilityLibrary_GetPlayerAvatar");
static_assert(offsetof(MordhauUtilityLibrary_GetPlayerAvatar, Player) == 0x000000, "Member 'MordhauUtilityLibrary_GetPlayerAvatar::Player' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetPlayerAvatar, ReturnValue) == 0x000060, "Member 'MordhauUtilityLibrary_GetPlayerAvatar::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetPlayerByShortId
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_GetPlayerByShortId final
{
public:
	TArray<class FString>                         ShortId;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EPlatform                                     PlatformFilter;                                    // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bWasSuccessful, struct FPlayFabApiError& Error, struct FGetPlayerByShortIdResult& ShortIdResults)> Delegate;                                          // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetPlayerByShortId) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetPlayerByShortId");
static_assert(sizeof(MordhauUtilityLibrary_GetPlayerByShortId) == 0x000028, "Wrong size on MordhauUtilityLibrary_GetPlayerByShortId");
static_assert(offsetof(MordhauUtilityLibrary_GetPlayerByShortId, ShortId) == 0x000000, "Member 'MordhauUtilityLibrary_GetPlayerByShortId::ShortId' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetPlayerByShortId, PlatformFilter) == 0x000010, "Member 'MordhauUtilityLibrary_GetPlayerByShortId::PlatformFilter' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetPlayerByShortId, Delegate) == 0x000014, "Member 'MordhauUtilityLibrary_GetPlayerByShortId::Delegate' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetPlayerCountFromGameModeMetadataClass
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetPlayerCountFromGameModeMetadataClass final
{
public:
	TSubclassOf<class UGameModeMetadata>          MetadataClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetPlayerCountFromGameModeMetadataClass) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetPlayerCountFromGameModeMetadataClass");
static_assert(sizeof(MordhauUtilityLibrary_GetPlayerCountFromGameModeMetadataClass) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetPlayerCountFromGameModeMetadataClass");
static_assert(offsetof(MordhauUtilityLibrary_GetPlayerCountFromGameModeMetadataClass, MetadataClass) == 0x000000, "Member 'MordhauUtilityLibrary_GetPlayerCountFromGameModeMetadataClass::MetadataClass' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetPlayerCountFromGameModeMetadataClass, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetPlayerCountFromGameModeMetadataClass::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetPlayerMaxNameLenght
// 0x0004 (0x0004 - 0x0000)
struct MordhauUtilityLibrary_GetPlayerMaxNameLenght final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetPlayerMaxNameLenght) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_GetPlayerMaxNameLenght");
static_assert(sizeof(MordhauUtilityLibrary_GetPlayerMaxNameLenght) == 0x000004, "Wrong size on MordhauUtilityLibrary_GetPlayerMaxNameLenght");
static_assert(offsetof(MordhauUtilityLibrary_GetPlayerMaxNameLenght, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetPlayerMaxNameLenght::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetPlayFabAPI
// 0x0008 (0x0008 - 0x0000)
struct MordhauUtilityLibrary_GetPlayFabAPI final
{
public:
	class UPlayFabAPI*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetPlayFabAPI) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetPlayFabAPI");
static_assert(sizeof(MordhauUtilityLibrary_GetPlayFabAPI) == 0x000008, "Wrong size on MordhauUtilityLibrary_GetPlayFabAPI");
static_assert(offsetof(MordhauUtilityLibrary_GetPlayFabAPI, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetPlayFabAPI::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetPlayFabEntityID
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetPlayFabEntityID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetPlayFabEntityID) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetPlayFabEntityID");
static_assert(sizeof(MordhauUtilityLibrary_GetPlayFabEntityID) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetPlayFabEntityID");
static_assert(offsetof(MordhauUtilityLibrary_GetPlayFabEntityID, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetPlayFabEntityID::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetPlayFabId
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetPlayFabId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetPlayFabId) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetPlayFabId");
static_assert(sizeof(MordhauUtilityLibrary_GetPlayFabId) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetPlayFabId");
static_assert(offsetof(MordhauUtilityLibrary_GetPlayFabId, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetPlayFabId::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetPlayFabPlayer
// 0x0060 (0x0060 - 0x0000)
struct MordhauUtilityLibrary_GetPlayFabPlayer final
{
public:
	struct FPlayFabPlayer                         ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetPlayFabPlayer) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetPlayFabPlayer");
static_assert(sizeof(MordhauUtilityLibrary_GetPlayFabPlayer) == 0x000060, "Wrong size on MordhauUtilityLibrary_GetPlayFabPlayer");
static_assert(offsetof(MordhauUtilityLibrary_GetPlayFabPlayer, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetPlayFabPlayer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetPlayFabTimestamp
// 0x0008 (0x0008 - 0x0000)
struct MordhauUtilityLibrary_GetPlayFabTimestamp final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetPlayFabTimestamp) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetPlayFabTimestamp");
static_assert(sizeof(MordhauUtilityLibrary_GetPlayFabTimestamp) == 0x000008, "Wrong size on MordhauUtilityLibrary_GetPlayFabTimestamp");
static_assert(offsetof(MordhauUtilityLibrary_GetPlayFabTimestamp, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetPlayFabTimestamp::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetRandomArmsWearable
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_GetRandomArmsWearable final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUpperChestWearable*                    UpperChestWearable;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkillsCustomization                   SkillsCustomization;                               // 0x0010(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EItemRarity                                   MaxRarity;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UArmsWearable*                          ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetRandomArmsWearable) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetRandomArmsWearable");
static_assert(sizeof(MordhauUtilityLibrary_GetRandomArmsWearable) == 0x000020, "Wrong size on MordhauUtilityLibrary_GetRandomArmsWearable");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomArmsWearable, ID) == 0x000000, "Member 'MordhauUtilityLibrary_GetRandomArmsWearable::ID' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomArmsWearable, UpperChestWearable) == 0x000008, "Member 'MordhauUtilityLibrary_GetRandomArmsWearable::UpperChestWearable' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomArmsWearable, SkillsCustomization) == 0x000010, "Member 'MordhauUtilityLibrary_GetRandomArmsWearable::SkillsCustomization' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomArmsWearable, MaxRarity) == 0x000014, "Member 'MordhauUtilityLibrary_GetRandomArmsWearable::MaxRarity' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomArmsWearable, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_GetRandomArmsWearable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetRandomCoifWearable
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_GetRandomCoifWearable final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHeadWearable*                          HeadWearable;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkillsCustomization                   SkillsCustomization;                               // 0x0010(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EItemRarity                                   MaxRarity;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauWearable*                       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetRandomCoifWearable) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetRandomCoifWearable");
static_assert(sizeof(MordhauUtilityLibrary_GetRandomCoifWearable) == 0x000020, "Wrong size on MordhauUtilityLibrary_GetRandomCoifWearable");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomCoifWearable, ID) == 0x000000, "Member 'MordhauUtilityLibrary_GetRandomCoifWearable::ID' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomCoifWearable, HeadWearable) == 0x000008, "Member 'MordhauUtilityLibrary_GetRandomCoifWearable::HeadWearable' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomCoifWearable, SkillsCustomization) == 0x000010, "Member 'MordhauUtilityLibrary_GetRandomCoifWearable::SkillsCustomization' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomCoifWearable, MaxRarity) == 0x000014, "Member 'MordhauUtilityLibrary_GetRandomCoifWearable::MaxRarity' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomCoifWearable, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_GetRandomCoifWearable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetRandomEquipment
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetRandomEquipment final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkillsCustomization                   SkillsCustomization;                               // 0x0004(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EItemRarity                                   MaxRarity;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauEquipment*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetRandomEquipment) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetRandomEquipment");
static_assert(sizeof(MordhauUtilityLibrary_GetRandomEquipment) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetRandomEquipment");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomEquipment, ID) == 0x000000, "Member 'MordhauUtilityLibrary_GetRandomEquipment::ID' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomEquipment, SkillsCustomization) == 0x000004, "Member 'MordhauUtilityLibrary_GetRandomEquipment::SkillsCustomization' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomEquipment, MaxRarity) == 0x000008, "Member 'MordhauUtilityLibrary_GetRandomEquipment::MaxRarity' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomEquipment, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetRandomEquipment::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetRandomFaceCustomizationVector
// 0x0014 (0x0014 - 0x0000)
struct MordhauUtilityLibrary_GetRandomFaceCustomizationVector final
{
public:
	float                                         RandomExponent;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Limit;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetRandomFaceCustomizationVector) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_GetRandomFaceCustomizationVector");
static_assert(sizeof(MordhauUtilityLibrary_GetRandomFaceCustomizationVector) == 0x000014, "Wrong size on MordhauUtilityLibrary_GetRandomFaceCustomizationVector");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomFaceCustomizationVector, RandomExponent) == 0x000000, "Member 'MordhauUtilityLibrary_GetRandomFaceCustomizationVector::RandomExponent' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomFaceCustomizationVector, Limit) == 0x000004, "Member 'MordhauUtilityLibrary_GetRandomFaceCustomizationVector::Limit' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomFaceCustomizationVector, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetRandomFaceCustomizationVector::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetRandomFeetWearable
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_GetRandomFeetWearable final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULegsWearable*                          LegsWearable;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkillsCustomization                   SkillsCustomization;                               // 0x0010(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EItemRarity                                   MaxRarity;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauWearable*                       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetRandomFeetWearable) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetRandomFeetWearable");
static_assert(sizeof(MordhauUtilityLibrary_GetRandomFeetWearable) == 0x000020, "Wrong size on MordhauUtilityLibrary_GetRandomFeetWearable");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomFeetWearable, ID) == 0x000000, "Member 'MordhauUtilityLibrary_GetRandomFeetWearable::ID' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomFeetWearable, LegsWearable) == 0x000008, "Member 'MordhauUtilityLibrary_GetRandomFeetWearable::LegsWearable' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomFeetWearable, SkillsCustomization) == 0x000010, "Member 'MordhauUtilityLibrary_GetRandomFeetWearable::SkillsCustomization' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomFeetWearable, MaxRarity) == 0x000014, "Member 'MordhauUtilityLibrary_GetRandomFeetWearable::MaxRarity' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomFeetWearable, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_GetRandomFeetWearable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetRandomHandsWearable
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_GetRandomHandsWearable final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UArmsWearable*                          ArmsWearable;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkillsCustomization                   SkillsCustomization;                               // 0x0010(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EItemRarity                                   MaxRarity;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauWearable*                       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetRandomHandsWearable) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetRandomHandsWearable");
static_assert(sizeof(MordhauUtilityLibrary_GetRandomHandsWearable) == 0x000020, "Wrong size on MordhauUtilityLibrary_GetRandomHandsWearable");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomHandsWearable, ID) == 0x000000, "Member 'MordhauUtilityLibrary_GetRandomHandsWearable::ID' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomHandsWearable, ArmsWearable) == 0x000008, "Member 'MordhauUtilityLibrary_GetRandomHandsWearable::ArmsWearable' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomHandsWearable, SkillsCustomization) == 0x000010, "Member 'MordhauUtilityLibrary_GetRandomHandsWearable::SkillsCustomization' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomHandsWearable, MaxRarity) == 0x000014, "Member 'MordhauUtilityLibrary_GetRandomHandsWearable::MaxRarity' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomHandsWearable, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_GetRandomHandsWearable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetRandomHeadWearable
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetRandomHeadWearable final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkillsCustomization                   SkillsCustomization;                               // 0x0004(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EItemRarity                                   MaxRarity;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHeadWearable*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetRandomHeadWearable) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetRandomHeadWearable");
static_assert(sizeof(MordhauUtilityLibrary_GetRandomHeadWearable) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetRandomHeadWearable");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomHeadWearable, ID) == 0x000000, "Member 'MordhauUtilityLibrary_GetRandomHeadWearable::ID' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomHeadWearable, SkillsCustomization) == 0x000004, "Member 'MordhauUtilityLibrary_GetRandomHeadWearable::SkillsCustomization' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomHeadWearable, MaxRarity) == 0x000008, "Member 'MordhauUtilityLibrary_GetRandomHeadWearable::MaxRarity' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomHeadWearable, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetRandomHeadWearable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetRandomLegsWearable
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetRandomLegsWearable final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkillsCustomization                   SkillsCustomization;                               // 0x0004(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EItemRarity                                   MaxRarity;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULegsWearable*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetRandomLegsWearable) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetRandomLegsWearable");
static_assert(sizeof(MordhauUtilityLibrary_GetRandomLegsWearable) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetRandomLegsWearable");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomLegsWearable, ID) == 0x000000, "Member 'MordhauUtilityLibrary_GetRandomLegsWearable::ID' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomLegsWearable, SkillsCustomization) == 0x000004, "Member 'MordhauUtilityLibrary_GetRandomLegsWearable::SkillsCustomization' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomLegsWearable, MaxRarity) == 0x000008, "Member 'MordhauUtilityLibrary_GetRandomLegsWearable::MaxRarity' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomLegsWearable, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetRandomLegsWearable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetRandomLowerChestWearable
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_GetRandomLowerChestWearable final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUpperChestWearable*                    UpperChestWearable;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkillsCustomization                   SkillsCustomization;                               // 0x0010(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EItemRarity                                   MaxRarity;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauWearable*                       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetRandomLowerChestWearable) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetRandomLowerChestWearable");
static_assert(sizeof(MordhauUtilityLibrary_GetRandomLowerChestWearable) == 0x000020, "Wrong size on MordhauUtilityLibrary_GetRandomLowerChestWearable");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomLowerChestWearable, ID) == 0x000000, "Member 'MordhauUtilityLibrary_GetRandomLowerChestWearable::ID' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomLowerChestWearable, UpperChestWearable) == 0x000008, "Member 'MordhauUtilityLibrary_GetRandomLowerChestWearable::UpperChestWearable' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomLowerChestWearable, SkillsCustomization) == 0x000010, "Member 'MordhauUtilityLibrary_GetRandomLowerChestWearable::SkillsCustomization' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomLowerChestWearable, MaxRarity) == 0x000014, "Member 'MordhauUtilityLibrary_GetRandomLowerChestWearable::MaxRarity' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomLowerChestWearable, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_GetRandomLowerChestWearable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetRandomMeleeWeapon
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetRandomMeleeWeapon final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkillsCustomization                   SkillsCustomization;                               // 0x0004(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EItemRarity                                   MaxRarity;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauEquipment*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetRandomMeleeWeapon) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetRandomMeleeWeapon");
static_assert(sizeof(MordhauUtilityLibrary_GetRandomMeleeWeapon) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetRandomMeleeWeapon");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomMeleeWeapon, ID) == 0x000000, "Member 'MordhauUtilityLibrary_GetRandomMeleeWeapon::ID' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomMeleeWeapon, SkillsCustomization) == 0x000004, "Member 'MordhauUtilityLibrary_GetRandomMeleeWeapon::SkillsCustomization' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomMeleeWeapon, MaxRarity) == 0x000008, "Member 'MordhauUtilityLibrary_GetRandomMeleeWeapon::MaxRarity' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomMeleeWeapon, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetRandomMeleeWeapon::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetRandomRangedWeapon
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetRandomRangedWeapon final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkillsCustomization                   SkillsCustomization;                               // 0x0004(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EItemRarity                                   MaxRarity;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauEquipment*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetRandomRangedWeapon) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetRandomRangedWeapon");
static_assert(sizeof(MordhauUtilityLibrary_GetRandomRangedWeapon) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetRandomRangedWeapon");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomRangedWeapon, ID) == 0x000000, "Member 'MordhauUtilityLibrary_GetRandomRangedWeapon::ID' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomRangedWeapon, SkillsCustomization) == 0x000004, "Member 'MordhauUtilityLibrary_GetRandomRangedWeapon::SkillsCustomization' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomRangedWeapon, MaxRarity) == 0x000008, "Member 'MordhauUtilityLibrary_GetRandomRangedWeapon::MaxRarity' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomRangedWeapon, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetRandomRangedWeapon::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetRandomShouldersWearable
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_GetRandomShouldersWearable final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUpperChestWearable*                    UpperChestWearable;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkillsCustomization                   SkillsCustomization;                               // 0x0010(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EItemRarity                                   MaxRarity;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauWearable*                       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetRandomShouldersWearable) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetRandomShouldersWearable");
static_assert(sizeof(MordhauUtilityLibrary_GetRandomShouldersWearable) == 0x000020, "Wrong size on MordhauUtilityLibrary_GetRandomShouldersWearable");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomShouldersWearable, ID) == 0x000000, "Member 'MordhauUtilityLibrary_GetRandomShouldersWearable::ID' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomShouldersWearable, UpperChestWearable) == 0x000008, "Member 'MordhauUtilityLibrary_GetRandomShouldersWearable::UpperChestWearable' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomShouldersWearable, SkillsCustomization) == 0x000010, "Member 'MordhauUtilityLibrary_GetRandomShouldersWearable::SkillsCustomization' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomShouldersWearable, MaxRarity) == 0x000014, "Member 'MordhauUtilityLibrary_GetRandomShouldersWearable::MaxRarity' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomShouldersWearable, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_GetRandomShouldersWearable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetRandomSkin
// 0x0070 (0x0070 - 0x0000)
struct MordhauUtilityLibrary_GetRandomSkin final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEquipmentSkinEntry                    Skin;                                              // 0x0008(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
	class AMordhauEquipment*                      Equipment;                                         // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemRarity                                   MaxRarity;                                         // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetRandomSkin) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetRandomSkin");
static_assert(sizeof(MordhauUtilityLibrary_GetRandomSkin) == 0x000070, "Wrong size on MordhauUtilityLibrary_GetRandomSkin");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomSkin, ID) == 0x000000, "Member 'MordhauUtilityLibrary_GetRandomSkin::ID' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomSkin, Skin) == 0x000008, "Member 'MordhauUtilityLibrary_GetRandomSkin::Skin' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomSkin, Equipment) == 0x000060, "Member 'MordhauUtilityLibrary_GetRandomSkin::Equipment' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomSkin, MaxRarity) == 0x000068, "Member 'MordhauUtilityLibrary_GetRandomSkin::MaxRarity' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetRandomUpperChestWearable
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetRandomUpperChestWearable final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkillsCustomization                   SkillsCustomization;                               // 0x0004(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EItemRarity                                   MaxRarity;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUpperChestWearable*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetRandomUpperChestWearable) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetRandomUpperChestWearable");
static_assert(sizeof(MordhauUtilityLibrary_GetRandomUpperChestWearable) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetRandomUpperChestWearable");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomUpperChestWearable, ID) == 0x000000, "Member 'MordhauUtilityLibrary_GetRandomUpperChestWearable::ID' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomUpperChestWearable, SkillsCustomization) == 0x000004, "Member 'MordhauUtilityLibrary_GetRandomUpperChestWearable::SkillsCustomization' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomUpperChestWearable, MaxRarity) == 0x000008, "Member 'MordhauUtilityLibrary_GetRandomUpperChestWearable::MaxRarity' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomUpperChestWearable, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetRandomUpperChestWearable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetRandomWeapon
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetRandomWeapon final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkillsCustomization                   SkillsCustomization;                               // 0x0004(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EItemRarity                                   MaxRarity;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauEquipment*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetRandomWeapon) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetRandomWeapon");
static_assert(sizeof(MordhauUtilityLibrary_GetRandomWeapon) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetRandomWeapon");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomWeapon, ID) == 0x000000, "Member 'MordhauUtilityLibrary_GetRandomWeapon::ID' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomWeapon, SkillsCustomization) == 0x000004, "Member 'MordhauUtilityLibrary_GetRandomWeapon::SkillsCustomization' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomWeapon, MaxRarity) == 0x000008, "Member 'MordhauUtilityLibrary_GetRandomWeapon::MaxRarity' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRandomWeapon, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetRandomWeapon::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetRankFromXP
// 0x0008 (0x0008 - 0x0000)
struct MordhauUtilityLibrary_GetRankFromXP final
{
public:
	int32                                         XP;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetRankFromXP) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_GetRankFromXP");
static_assert(sizeof(MordhauUtilityLibrary_GetRankFromXP) == 0x000008, "Wrong size on MordhauUtilityLibrary_GetRankFromXP");
static_assert(offsetof(MordhauUtilityLibrary_GetRankFromXP, XP) == 0x000000, "Member 'MordhauUtilityLibrary_GetRankFromXP::XP' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRankFromXP, ReturnValue) == 0x000004, "Member 'MordhauUtilityLibrary_GetRankFromXP::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetRegion
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetRegion final
{
public:
	class FString                                 RegionName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EServerRegion                                 ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetRegion) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetRegion");
static_assert(sizeof(MordhauUtilityLibrary_GetRegion) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetRegion");
static_assert(offsetof(MordhauUtilityLibrary_GetRegion, RegionName) == 0x000000, "Member 'MordhauUtilityLibrary_GetRegion::RegionName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRegion, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetRegion::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetRegionDisplayName
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_GetRegionDisplayName final
{
public:
	EServerRegion                                 Region;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetRegionDisplayName) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetRegionDisplayName");
static_assert(sizeof(MordhauUtilityLibrary_GetRegionDisplayName) == 0x000020, "Wrong size on MordhauUtilityLibrary_GetRegionDisplayName");
static_assert(offsetof(MordhauUtilityLibrary_GetRegionDisplayName, Region) == 0x000000, "Member 'MordhauUtilityLibrary_GetRegionDisplayName::Region' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRegionDisplayName, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetRegionDisplayName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetRegionName
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetRegionName final
{
public:
	EServerRegion                                 Region;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetRegionName) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetRegionName");
static_assert(sizeof(MordhauUtilityLibrary_GetRegionName) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetRegionName");
static_assert(offsetof(MordhauUtilityLibrary_GetRegionName, Region) == 0x000000, "Member 'MordhauUtilityLibrary_GetRegionName::Region' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRegionName, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetRegionName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetReleaseVersion
// 0x0004 (0x0004 - 0x0000)
struct MordhauUtilityLibrary_GetReleaseVersion final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetReleaseVersion) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_GetReleaseVersion");
static_assert(sizeof(MordhauUtilityLibrary_GetReleaseVersion) == 0x000004, "Wrong size on MordhauUtilityLibrary_GetReleaseVersion");
static_assert(offsetof(MordhauUtilityLibrary_GetReleaseVersion, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetReleaseVersion::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetRole
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetRole final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENetRole                                      ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetRole) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetRole");
static_assert(sizeof(MordhauUtilityLibrary_GetRole) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetRole");
static_assert(offsetof(MordhauUtilityLibrary_GetRole, Actor) == 0x000000, "Member 'MordhauUtilityLibrary_GetRole::Actor' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetRole, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetRole::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetSculptableBoneAtLine
// 0x0040 (0x0040 - 0x0000)
struct MordhauUtilityLibrary_GetSculptableBoneAtLine final
{
public:
	struct FVector                                LineStart;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineEnd;                                           // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchRadius;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 MeshComponent;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMordhauCharacter*                      Character;                                         // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0034(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetSculptableBoneAtLine) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetSculptableBoneAtLine");
static_assert(sizeof(MordhauUtilityLibrary_GetSculptableBoneAtLine) == 0x000040, "Wrong size on MordhauUtilityLibrary_GetSculptableBoneAtLine");
static_assert(offsetof(MordhauUtilityLibrary_GetSculptableBoneAtLine, LineStart) == 0x000000, "Member 'MordhauUtilityLibrary_GetSculptableBoneAtLine::LineStart' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetSculptableBoneAtLine, LineEnd) == 0x00000C, "Member 'MordhauUtilityLibrary_GetSculptableBoneAtLine::LineEnd' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetSculptableBoneAtLine, SearchRadius) == 0x000018, "Member 'MordhauUtilityLibrary_GetSculptableBoneAtLine::SearchRadius' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetSculptableBoneAtLine, MeshComponent) == 0x000020, "Member 'MordhauUtilityLibrary_GetSculptableBoneAtLine::MeshComponent' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetSculptableBoneAtLine, Character) == 0x000028, "Member 'MordhauUtilityLibrary_GetSculptableBoneAtLine::Character' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetSculptableBoneAtLine, Level) == 0x000030, "Member 'MordhauUtilityLibrary_GetSculptableBoneAtLine::Level' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetSculptableBoneAtLine, ReturnValue) == 0x000034, "Member 'MordhauUtilityLibrary_GetSculptableBoneAtLine::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetServerConnectString
// 0x0058 (0x0058 - 0x0000)
struct MordhauUtilityLibrary_GetServerConnectString final
{
public:
	struct FPlayFabServerDetails                  ServerDetails;                                     // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 PortName;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetServerConnectString) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetServerConnectString");
static_assert(sizeof(MordhauUtilityLibrary_GetServerConnectString) == 0x000058, "Wrong size on MordhauUtilityLibrary_GetServerConnectString");
static_assert(offsetof(MordhauUtilityLibrary_GetServerConnectString, ServerDetails) == 0x000000, "Member 'MordhauUtilityLibrary_GetServerConnectString::ServerDetails' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetServerConnectString, PortName) == 0x000038, "Member 'MordhauUtilityLibrary_GetServerConnectString::PortName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetServerConnectString, ReturnValue) == 0x000048, "Member 'MordhauUtilityLibrary_GetServerConnectString::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetSoundMixInfo
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_GetSoundMixInfo final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundMixInfo                          SoundMixInfo;                                      // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetSoundMixInfo) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetSoundMixInfo");
static_assert(sizeof(MordhauUtilityLibrary_GetSoundMixInfo) == 0x000028, "Wrong size on MordhauUtilityLibrary_GetSoundMixInfo");
static_assert(offsetof(MordhauUtilityLibrary_GetSoundMixInfo, Name_0) == 0x000000, "Member 'MordhauUtilityLibrary_GetSoundMixInfo::Name_0' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetSoundMixInfo, SoundMixInfo) == 0x000010, "Member 'MordhauUtilityLibrary_GetSoundMixInfo::SoundMixInfo' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetSupportedScreenResolutions
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetSupportedScreenResolutions final
{
public:
	TArray<class FString>                         Resolutions;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetSupportedScreenResolutions) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetSupportedScreenResolutions");
static_assert(sizeof(MordhauUtilityLibrary_GetSupportedScreenResolutions) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetSupportedScreenResolutions");
static_assert(offsetof(MordhauUtilityLibrary_GetSupportedScreenResolutions, Resolutions) == 0x000000, "Member 'MordhauUtilityLibrary_GetSupportedScreenResolutions::Resolutions' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetSupportedScreenResolutions, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetSupportedScreenResolutions::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetSyncGroupPositionBetweenMarkers
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetSyncGroupPositionBetweenMarkers final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SyncGroup;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetSyncGroupPositionBetweenMarkers) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetSyncGroupPositionBetweenMarkers");
static_assert(sizeof(MordhauUtilityLibrary_GetSyncGroupPositionBetweenMarkers) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetSyncGroupPositionBetweenMarkers");
static_assert(offsetof(MordhauUtilityLibrary_GetSyncGroupPositionBetweenMarkers, AnimInstance) == 0x000000, "Member 'MordhauUtilityLibrary_GetSyncGroupPositionBetweenMarkers::AnimInstance' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetSyncGroupPositionBetweenMarkers, SyncGroup) == 0x000008, "Member 'MordhauUtilityLibrary_GetSyncGroupPositionBetweenMarkers::SyncGroup' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetSyncGroupPositionBetweenMarkers, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetSyncGroupPositionBetweenMarkers::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetTexture2DDynamicDimensions
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetTexture2DDynamicDimensions final
{
public:
	class UTexture2DDynamic*                      DynTex;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetTexture2DDynamicDimensions) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetTexture2DDynamicDimensions");
static_assert(sizeof(MordhauUtilityLibrary_GetTexture2DDynamicDimensions) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetTexture2DDynamicDimensions");
static_assert(offsetof(MordhauUtilityLibrary_GetTexture2DDynamicDimensions, DynTex) == 0x000000, "Member 'MordhauUtilityLibrary_GetTexture2DDynamicDimensions::DynTex' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetTexture2DDynamicDimensions, Height) == 0x000008, "Member 'MordhauUtilityLibrary_GetTexture2DDynamicDimensions::Height' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetTexture2DDynamicDimensions, Width) == 0x00000C, "Member 'MordhauUtilityLibrary_GetTexture2DDynamicDimensions::Width' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetTexture2DDynamicDimensions, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetTexture2DDynamicDimensions::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetTotalDemoTime
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetTotalDemoTime final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetTotalDemoTime) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetTotalDemoTime");
static_assert(sizeof(MordhauUtilityLibrary_GetTotalDemoTime) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetTotalDemoTime");
static_assert(offsetof(MordhauUtilityLibrary_GetTotalDemoTime, World) == 0x000000, "Member 'MordhauUtilityLibrary_GetTotalDemoTime::World' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetTotalDemoTime, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetTotalDemoTime::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetVersionName
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetVersionName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetVersionName) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetVersionName");
static_assert(sizeof(MordhauUtilityLibrary_GetVersionName) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetVersionName");
static_assert(offsetof(MordhauUtilityLibrary_GetVersionName, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetVersionName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetVersionString
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetVersionString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetVersionString) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetVersionString");
static_assert(sizeof(MordhauUtilityLibrary_GetVersionString) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetVersionString");
static_assert(offsetof(MordhauUtilityLibrary_GetVersionString, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_GetVersionString::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetViewTargetCharacter
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_GetViewTargetCharacter final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyLiving;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetViewTargetCharacter) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetViewTargetCharacter");
static_assert(sizeof(MordhauUtilityLibrary_GetViewTargetCharacter) == 0x000018, "Wrong size on MordhauUtilityLibrary_GetViewTargetCharacter");
static_assert(offsetof(MordhauUtilityLibrary_GetViewTargetCharacter, WorldContextObject) == 0x000000, "Member 'MordhauUtilityLibrary_GetViewTargetCharacter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetViewTargetCharacter, bOnlyLiving) == 0x000008, "Member 'MordhauUtilityLibrary_GetViewTargetCharacter::bOnlyLiving' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetViewTargetCharacter, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_GetViewTargetCharacter::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetVisibilityId
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetVisibilityId final
{
public:
	class UPrimitiveComponent*                    Comp;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetVisibilityId) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetVisibilityId");
static_assert(sizeof(MordhauUtilityLibrary_GetVisibilityId) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetVisibilityId");
static_assert(offsetof(MordhauUtilityLibrary_GetVisibilityId, Comp) == 0x000000, "Member 'MordhauUtilityLibrary_GetVisibilityId::Comp' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetVisibilityId, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetVisibilityId::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetWearableClass
// 0x0030 (0x0030 - 0x0000)
struct MordhauUtilityLibrary_GetWearableClass final
{
public:
	struct FCharacterGearCustomization            CharacterGearCustomization;                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EWearableSlot                                 Slot;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMordhauWearable>           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetWearableClass) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetWearableClass");
static_assert(sizeof(MordhauUtilityLibrary_GetWearableClass) == 0x000030, "Wrong size on MordhauUtilityLibrary_GetWearableClass");
static_assert(offsetof(MordhauUtilityLibrary_GetWearableClass, CharacterGearCustomization) == 0x000000, "Member 'MordhauUtilityLibrary_GetWearableClass::CharacterGearCustomization' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetWearableClass, Slot) == 0x000020, "Member 'MordhauUtilityLibrary_GetWearableClass::Slot' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetWearableClass, ReturnValue) == 0x000028, "Member 'MordhauUtilityLibrary_GetWearableClass::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetWearableClasses
// 0x0038 (0x0038 - 0x0000)
struct MordhauUtilityLibrary_GetWearableClasses final
{
public:
	struct FCharacterGearCustomization            CharacterGearCustomization;                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EWearableSlot                                 Slot;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UMordhauWearable>>   ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetWearableClasses) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetWearableClasses");
static_assert(sizeof(MordhauUtilityLibrary_GetWearableClasses) == 0x000038, "Wrong size on MordhauUtilityLibrary_GetWearableClasses");
static_assert(offsetof(MordhauUtilityLibrary_GetWearableClasses, CharacterGearCustomization) == 0x000000, "Member 'MordhauUtilityLibrary_GetWearableClasses::CharacterGearCustomization' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetWearableClasses, Slot) == 0x000020, "Member 'MordhauUtilityLibrary_GetWearableClasses::Slot' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetWearableClasses, ReturnValue) == 0x000028, "Member 'MordhauUtilityLibrary_GetWearableClasses::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetWearableNames
// 0x0038 (0x0038 - 0x0000)
struct MordhauUtilityLibrary_GetWearableNames final
{
public:
	struct FCharacterGearCustomization            CharacterGearCustomization;                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EWearableSlot                                 Slot;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetWearableNames) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetWearableNames");
static_assert(sizeof(MordhauUtilityLibrary_GetWearableNames) == 0x000038, "Wrong size on MordhauUtilityLibrary_GetWearableNames");
static_assert(offsetof(MordhauUtilityLibrary_GetWearableNames, CharacterGearCustomization) == 0x000000, "Member 'MordhauUtilityLibrary_GetWearableNames::CharacterGearCustomization' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetWearableNames, Slot) == 0x000020, "Member 'MordhauUtilityLibrary_GetWearableNames::Slot' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetWearableNames, ReturnValue) == 0x000028, "Member 'MordhauUtilityLibrary_GetWearableNames::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetWearableSlot
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetWearableSlot final
{
public:
	TSubclassOf<class UMordhauWearable>           Wearable;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWearableSlot                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_GetWearableSlot) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetWearableSlot");
static_assert(sizeof(MordhauUtilityLibrary_GetWearableSlot) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetWearableSlot");
static_assert(offsetof(MordhauUtilityLibrary_GetWearableSlot, Wearable) == 0x000000, "Member 'MordhauUtilityLibrary_GetWearableSlot::Wearable' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetWearableSlot, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetWearableSlot::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetWorldOf
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_GetWorldOf final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetWorldOf) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_GetWorldOf");
static_assert(sizeof(MordhauUtilityLibrary_GetWorldOf) == 0x000010, "Wrong size on MordhauUtilityLibrary_GetWorldOf");
static_assert(offsetof(MordhauUtilityLibrary_GetWorldOf, Object) == 0x000000, "Member 'MordhauUtilityLibrary_GetWorldOf::Object' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetWorldOf, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_GetWorldOf::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GetXPFromRank
// 0x0008 (0x0008 - 0x0000)
struct MordhauUtilityLibrary_GetXPFromRank final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GetXPFromRank) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_GetXPFromRank");
static_assert(sizeof(MordhauUtilityLibrary_GetXPFromRank) == 0x000008, "Wrong size on MordhauUtilityLibrary_GetXPFromRank");
static_assert(offsetof(MordhauUtilityLibrary_GetXPFromRank, Rank) == 0x000000, "Member 'MordhauUtilityLibrary_GetXPFromRank::Rank' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GetXPFromRank, ReturnValue) == 0x000004, "Member 'MordhauUtilityLibrary_GetXPFromRank::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.GrowBoxToIncludePoint
// 0x0044 (0x0044 - 0x0000)
struct MordhauUtilityLibrary_GrowBoxToIncludePoint final
{
public:
	struct FBox                                   Box;                                               // 0x0000(0x001C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Vector;                                            // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   ReturnValue;                                       // 0x0028(0x001C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_GrowBoxToIncludePoint) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_GrowBoxToIncludePoint");
static_assert(sizeof(MordhauUtilityLibrary_GrowBoxToIncludePoint) == 0x000044, "Wrong size on MordhauUtilityLibrary_GrowBoxToIncludePoint");
static_assert(offsetof(MordhauUtilityLibrary_GrowBoxToIncludePoint, Box) == 0x000000, "Member 'MordhauUtilityLibrary_GrowBoxToIncludePoint::Box' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GrowBoxToIncludePoint, Vector) == 0x00001C, "Member 'MordhauUtilityLibrary_GrowBoxToIncludePoint::Vector' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_GrowBoxToIncludePoint, ReturnValue) == 0x000028, "Member 'MordhauUtilityLibrary_GrowBoxToIncludePoint::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.HasActorBegunPlay
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_HasActorBegunPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_HasActorBegunPlay) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_HasActorBegunPlay");
static_assert(sizeof(MordhauUtilityLibrary_HasActorBegunPlay) == 0x000010, "Wrong size on MordhauUtilityLibrary_HasActorBegunPlay");
static_assert(offsetof(MordhauUtilityLibrary_HasActorBegunPlay, Actor) == 0x000000, "Member 'MordhauUtilityLibrary_HasActorBegunPlay::Actor' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_HasActorBegunPlay, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_HasActorBegunPlay::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.HasBeenReallyRecentlyRendered
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_HasBeenReallyRecentlyRendered final
{
public:
	class UMeshComponent*                         MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_HasBeenReallyRecentlyRendered) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_HasBeenReallyRecentlyRendered");
static_assert(sizeof(MordhauUtilityLibrary_HasBeenReallyRecentlyRendered) == 0x000010, "Wrong size on MordhauUtilityLibrary_HasBeenReallyRecentlyRendered");
static_assert(offsetof(MordhauUtilityLibrary_HasBeenReallyRecentlyRendered, MeshComponent) == 0x000000, "Member 'MordhauUtilityLibrary_HasBeenReallyRecentlyRendered::MeshComponent' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_HasBeenReallyRecentlyRendered, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_HasBeenReallyRecentlyRendered::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.HasPath
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_HasPath final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_HasPath) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_HasPath");
static_assert(sizeof(MordhauUtilityLibrary_HasPath) == 0x000010, "Wrong size on MordhauUtilityLibrary_HasPath");
static_assert(offsetof(MordhauUtilityLibrary_HasPath, Controller) == 0x000000, "Member 'MordhauUtilityLibrary_HasPath::Controller' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_HasPath, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_HasPath::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsClient
// 0x0001 (0x0001 - 0x0000)
struct MordhauUtilityLibrary_IsClient final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_IsClient) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_IsClient");
static_assert(sizeof(MordhauUtilityLibrary_IsClient) == 0x000001, "Wrong size on MordhauUtilityLibrary_IsClient");
static_assert(offsetof(MordhauUtilityLibrary_IsClient, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_IsClient::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsCommunityServer
// 0x0001 (0x0001 - 0x0000)
struct MordhauUtilityLibrary_IsCommunityServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_IsCommunityServer) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_IsCommunityServer");
static_assert(sizeof(MordhauUtilityLibrary_IsCommunityServer) == 0x000001, "Wrong size on MordhauUtilityLibrary_IsCommunityServer");
static_assert(offsetof(MordhauUtilityLibrary_IsCommunityServer, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_IsCommunityServer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsConsolePlatform
// 0x0001 (0x0001 - 0x0000)
struct MordhauUtilityLibrary_IsConsolePlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_IsConsolePlatform) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_IsConsolePlatform");
static_assert(sizeof(MordhauUtilityLibrary_IsConsolePlatform) == 0x000001, "Wrong size on MordhauUtilityLibrary_IsConsolePlatform");
static_assert(offsetof(MordhauUtilityLibrary_IsConsolePlatform, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_IsConsolePlatform::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsDedicatedServer
// 0x0001 (0x0001 - 0x0000)
struct MordhauUtilityLibrary_IsDedicatedServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_IsDedicatedServer) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_IsDedicatedServer");
static_assert(sizeof(MordhauUtilityLibrary_IsDedicatedServer) == 0x000001, "Wrong size on MordhauUtilityLibrary_IsDedicatedServer");
static_assert(offsetof(MordhauUtilityLibrary_IsDedicatedServer, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_IsDedicatedServer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsDemoPlayback
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_IsDemoPlayback final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_IsDemoPlayback) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_IsDemoPlayback");
static_assert(sizeof(MordhauUtilityLibrary_IsDemoPlayback) == 0x000010, "Wrong size on MordhauUtilityLibrary_IsDemoPlayback");
static_assert(offsetof(MordhauUtilityLibrary_IsDemoPlayback, World) == 0x000000, "Member 'MordhauUtilityLibrary_IsDemoPlayback::World' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_IsDemoPlayback, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_IsDemoPlayback::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsDevelopmentBranch
// 0x0001 (0x0001 - 0x0000)
struct MordhauUtilityLibrary_IsDevelopmentBranch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_IsDevelopmentBranch) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_IsDevelopmentBranch");
static_assert(sizeof(MordhauUtilityLibrary_IsDevelopmentBranch) == 0x000001, "Wrong size on MordhauUtilityLibrary_IsDevelopmentBranch");
static_assert(offsetof(MordhauUtilityLibrary_IsDevelopmentBranch, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_IsDevelopmentBranch::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsDevelopmentBuild
// 0x0001 (0x0001 - 0x0000)
struct MordhauUtilityLibrary_IsDevelopmentBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_IsDevelopmentBuild) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_IsDevelopmentBuild");
static_assert(sizeof(MordhauUtilityLibrary_IsDevelopmentBuild) == 0x000001, "Wrong size on MordhauUtilityLibrary_IsDevelopmentBuild");
static_assert(offsetof(MordhauUtilityLibrary_IsDevelopmentBuild, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_IsDevelopmentBuild::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsDevelopmentEnvironment
// 0x0001 (0x0001 - 0x0000)
struct MordhauUtilityLibrary_IsDevelopmentEnvironment final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_IsDevelopmentEnvironment) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_IsDevelopmentEnvironment");
static_assert(sizeof(MordhauUtilityLibrary_IsDevelopmentEnvironment) == 0x000001, "Wrong size on MordhauUtilityLibrary_IsDevelopmentEnvironment");
static_assert(offsetof(MordhauUtilityLibrary_IsDevelopmentEnvironment, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_IsDevelopmentEnvironment::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsDLCInstalled
// 0x0002 (0x0002 - 0x0000)
struct MordhauUtilityLibrary_IsDLCInstalled final
{
public:
	EDownloadableContent                          DLC;                                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_IsDLCInstalled) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_IsDLCInstalled");
static_assert(sizeof(MordhauUtilityLibrary_IsDLCInstalled) == 0x000002, "Wrong size on MordhauUtilityLibrary_IsDLCInstalled");
static_assert(offsetof(MordhauUtilityLibrary_IsDLCInstalled, DLC) == 0x000000, "Member 'MordhauUtilityLibrary_IsDLCInstalled::DLC' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_IsDLCInstalled, ReturnValue) == 0x000001, "Member 'MordhauUtilityLibrary_IsDLCInstalled::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsEditor
// 0x0001 (0x0001 - 0x0000)
struct MordhauUtilityLibrary_IsEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_IsEditor) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_IsEditor");
static_assert(sizeof(MordhauUtilityLibrary_IsEditor) == 0x000001, "Wrong size on MordhauUtilityLibrary_IsEditor");
static_assert(offsetof(MordhauUtilityLibrary_IsEditor, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_IsEditor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsFriend
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_IsFriend final
{
public:
	class AMordhauPlayerState*                    Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_IsFriend) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_IsFriend");
static_assert(sizeof(MordhauUtilityLibrary_IsFriend) == 0x000010, "Wrong size on MordhauUtilityLibrary_IsFriend");
static_assert(offsetof(MordhauUtilityLibrary_IsFriend, Player) == 0x000000, "Member 'MordhauUtilityLibrary_IsFriend::Player' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_IsFriend, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_IsFriend::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsFriendlyToLocalPlayer
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_IsFriendlyToLocalPlayer final
{
public:
	class UWorld*                                 WorldReference;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_IsFriendlyToLocalPlayer) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_IsFriendlyToLocalPlayer");
static_assert(sizeof(MordhauUtilityLibrary_IsFriendlyToLocalPlayer) == 0x000018, "Wrong size on MordhauUtilityLibrary_IsFriendlyToLocalPlayer");
static_assert(offsetof(MordhauUtilityLibrary_IsFriendlyToLocalPlayer, WorldReference) == 0x000000, "Member 'MordhauUtilityLibrary_IsFriendlyToLocalPlayer::WorldReference' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_IsFriendlyToLocalPlayer, OtherActor) == 0x000008, "Member 'MordhauUtilityLibrary_IsFriendlyToLocalPlayer::OtherActor' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_IsFriendlyToLocalPlayer, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_IsFriendlyToLocalPlayer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsListenServer
// 0x0001 (0x0001 - 0x0000)
struct MordhauUtilityLibrary_IsListenServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_IsListenServer) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_IsListenServer");
static_assert(sizeof(MordhauUtilityLibrary_IsListenServer) == 0x000001, "Wrong size on MordhauUtilityLibrary_IsListenServer");
static_assert(offsetof(MordhauUtilityLibrary_IsListenServer, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_IsListenServer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsNonShippingBuildConfig
// 0x0001 (0x0001 - 0x0000)
struct MordhauUtilityLibrary_IsNonShippingBuildConfig final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_IsNonShippingBuildConfig) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_IsNonShippingBuildConfig");
static_assert(sizeof(MordhauUtilityLibrary_IsNonShippingBuildConfig) == 0x000001, "Wrong size on MordhauUtilityLibrary_IsNonShippingBuildConfig");
static_assert(offsetof(MordhauUtilityLibrary_IsNonShippingBuildConfig, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_IsNonShippingBuildConfig::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsOfficialServer
// 0x0001 (0x0001 - 0x0000)
struct MordhauUtilityLibrary_IsOfficialServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_IsOfficialServer) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_IsOfficialServer");
static_assert(sizeof(MordhauUtilityLibrary_IsOfficialServer) == 0x000001, "Wrong size on MordhauUtilityLibrary_IsOfficialServer");
static_assert(offsetof(MordhauUtilityLibrary_IsOfficialServer, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_IsOfficialServer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsOnlinePurchaseQueryEnabled
// 0x0001 (0x0001 - 0x0000)
struct MordhauUtilityLibrary_IsOnlinePurchaseQueryEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_IsOnlinePurchaseQueryEnabled) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_IsOnlinePurchaseQueryEnabled");
static_assert(sizeof(MordhauUtilityLibrary_IsOnlinePurchaseQueryEnabled) == 0x000001, "Wrong size on MordhauUtilityLibrary_IsOnlinePurchaseQueryEnabled");
static_assert(offsetof(MordhauUtilityLibrary_IsOnlinePurchaseQueryEnabled, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_IsOnlinePurchaseQueryEnabled::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsPartyMember
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_IsPartyMember final
{
public:
	class AMordhauPlayerState*                    Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_IsPartyMember) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_IsPartyMember");
static_assert(sizeof(MordhauUtilityLibrary_IsPartyMember) == 0x000010, "Wrong size on MordhauUtilityLibrary_IsPartyMember");
static_assert(offsetof(MordhauUtilityLibrary_IsPartyMember, Player) == 0x000000, "Member 'MordhauUtilityLibrary_IsPartyMember::Player' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_IsPartyMember, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_IsPartyMember::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsPIE
// 0x0001 (0x0001 - 0x0000)
struct MordhauUtilityLibrary_IsPIE final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_IsPIE) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_IsPIE");
static_assert(sizeof(MordhauUtilityLibrary_IsPIE) == 0x000001, "Wrong size on MordhauUtilityLibrary_IsPIE");
static_assert(offsetof(MordhauUtilityLibrary_IsPIE, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_IsPIE::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsPlayInEditor
// 0x0001 (0x0001 - 0x0000)
struct MordhauUtilityLibrary_IsPlayInEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_IsPlayInEditor) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_IsPlayInEditor");
static_assert(sizeof(MordhauUtilityLibrary_IsPlayInEditor) == 0x000001, "Wrong size on MordhauUtilityLibrary_IsPlayInEditor");
static_assert(offsetof(MordhauUtilityLibrary_IsPlayInEditor, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_IsPlayInEditor::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsPrivateIPAddress
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_IsPrivateIPAddress final
{
public:
	class FString                                 IPAddress;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_IsPrivateIPAddress) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_IsPrivateIPAddress");
static_assert(sizeof(MordhauUtilityLibrary_IsPrivateIPAddress) == 0x000018, "Wrong size on MordhauUtilityLibrary_IsPrivateIPAddress");
static_assert(offsetof(MordhauUtilityLibrary_IsPrivateIPAddress, IPAddress) == 0x000000, "Member 'MordhauUtilityLibrary_IsPrivateIPAddress::IPAddress' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_IsPrivateIPAddress, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_IsPrivateIPAddress::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsPublicIPAddress
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_IsPublicIPAddress final
{
public:
	class FString                                 IPAddress;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_IsPublicIPAddress) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_IsPublicIPAddress");
static_assert(sizeof(MordhauUtilityLibrary_IsPublicIPAddress) == 0x000018, "Wrong size on MordhauUtilityLibrary_IsPublicIPAddress");
static_assert(offsetof(MordhauUtilityLibrary_IsPublicIPAddress, IPAddress) == 0x000000, "Member 'MordhauUtilityLibrary_IsPublicIPAddress::IPAddress' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_IsPublicIPAddress, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_IsPublicIPAddress::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsReflexAvailable
// 0x0001 (0x0001 - 0x0000)
struct MordhauUtilityLibrary_IsReflexAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_IsReflexAvailable) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_IsReflexAvailable");
static_assert(sizeof(MordhauUtilityLibrary_IsReflexAvailable) == 0x000001, "Wrong size on MordhauUtilityLibrary_IsReflexAvailable");
static_assert(offsetof(MordhauUtilityLibrary_IsReflexAvailable, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_IsReflexAvailable::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsServer
// 0x0001 (0x0001 - 0x0000)
struct MordhauUtilityLibrary_IsServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_IsServer) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_IsServer");
static_assert(sizeof(MordhauUtilityLibrary_IsServer) == 0x000001, "Wrong size on MordhauUtilityLibrary_IsServer");
static_assert(offsetof(MordhauUtilityLibrary_IsServer, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_IsServer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsStandalone
// 0x0001 (0x0001 - 0x0000)
struct MordhauUtilityLibrary_IsStandalone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_IsStandalone) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_IsStandalone");
static_assert(sizeof(MordhauUtilityLibrary_IsStandalone) == 0x000001, "Wrong size on MordhauUtilityLibrary_IsStandalone");
static_assert(offsetof(MordhauUtilityLibrary_IsStandalone, ReturnValue) == 0x000000, "Member 'MordhauUtilityLibrary_IsStandalone::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsValid_PlayFabPlayer
// 0x0068 (0x0068 - 0x0000)
struct MordhauUtilityLibrary_IsValid_PlayFabPlayer final
{
public:
	struct FPlayFabPlayer                         Player;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_IsValid_PlayFabPlayer) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_IsValid_PlayFabPlayer");
static_assert(sizeof(MordhauUtilityLibrary_IsValid_PlayFabPlayer) == 0x000068, "Wrong size on MordhauUtilityLibrary_IsValid_PlayFabPlayer");
static_assert(offsetof(MordhauUtilityLibrary_IsValid_PlayFabPlayer, Player) == 0x000000, "Member 'MordhauUtilityLibrary_IsValid_PlayFabPlayer::Player' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_IsValid_PlayFabPlayer, ReturnValue) == 0x000060, "Member 'MordhauUtilityLibrary_IsValid_PlayFabPlayer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.IsValidIPAddress
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_IsValidIPAddress final
{
public:
	class FString                                 IPAddress;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_IsValidIPAddress) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_IsValidIPAddress");
static_assert(sizeof(MordhauUtilityLibrary_IsValidIPAddress) == 0x000018, "Wrong size on MordhauUtilityLibrary_IsValidIPAddress");
static_assert(offsetof(MordhauUtilityLibrary_IsValidIPAddress, IPAddress) == 0x000000, "Member 'MordhauUtilityLibrary_IsValidIPAddress::IPAddress' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_IsValidIPAddress, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_IsValidIPAddress::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.LerpPOV
// 0x0058 (0x0058 - 0x0000)
struct MordhauUtilityLibrary_LerpPOV final
{
public:
	struct FPOV                                   A;                                                 // 0x0000(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPOV                                   B;                                                 // 0x001C(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPOV                                   ReturnValue;                                       // 0x003C(0x001C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_LerpPOV) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_LerpPOV");
static_assert(sizeof(MordhauUtilityLibrary_LerpPOV) == 0x000058, "Wrong size on MordhauUtilityLibrary_LerpPOV");
static_assert(offsetof(MordhauUtilityLibrary_LerpPOV, A) == 0x000000, "Member 'MordhauUtilityLibrary_LerpPOV::A' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LerpPOV, B) == 0x00001C, "Member 'MordhauUtilityLibrary_LerpPOV::B' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LerpPOV, Alpha) == 0x000038, "Member 'MordhauUtilityLibrary_LerpPOV::Alpha' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LerpPOV, ReturnValue) == 0x00003C, "Member 'MordhauUtilityLibrary_LerpPOV::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.LineTraceMultiForObjectsReturnFace
// 0x0068 (0x0068 - 0x0000)
struct MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     OutHits;                                           // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelf;                                       // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0061(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace");
static_assert(sizeof(MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace) == 0x000068, "Wrong size on MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace");
static_assert(offsetof(MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace, WorldContextObject) == 0x000000, "Member 'MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace, Start) == 0x000008, "Member 'MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace::Start' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace, End) == 0x000014, "Member 'MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace::End' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace, ObjectTypes) == 0x000020, "Member 'MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace::ObjectTypes' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace, bTraceComplex) == 0x000030, "Member 'MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace::bTraceComplex' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace, ActorsToIgnore) == 0x000038, "Member 'MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace, DrawDebugType) == 0x000048, "Member 'MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace::DrawDebugType' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace, OutHits) == 0x000050, "Member 'MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace::OutHits' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace, bIgnoreSelf) == 0x000060, "Member 'MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace, ReturnValue) == 0x000061, "Member 'MordhauUtilityLibrary_LineTraceMultiForObjectsReturnFace::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.LoadArrayFromFile
// 0x0038 (0x0038 - 0x0000)
struct MordhauUtilityLibrary_LoadArrayFromFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 LoadedArray;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_LoadArrayFromFile) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_LoadArrayFromFile");
static_assert(sizeof(MordhauUtilityLibrary_LoadArrayFromFile) == 0x000038, "Wrong size on MordhauUtilityLibrary_LoadArrayFromFile");
static_assert(offsetof(MordhauUtilityLibrary_LoadArrayFromFile, Filename) == 0x000000, "Member 'MordhauUtilityLibrary_LoadArrayFromFile::Filename' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LoadArrayFromFile, LoadedArray) == 0x000010, "Member 'MordhauUtilityLibrary_LoadArrayFromFile::LoadedArray' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LoadArrayFromFile, FileExtension) == 0x000020, "Member 'MordhauUtilityLibrary_LoadArrayFromFile::FileExtension' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LoadArrayFromFile, ReturnValue) == 0x000030, "Member 'MordhauUtilityLibrary_LoadArrayFromFile::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.LoadAsset
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_LoadAsset final
{
public:
	struct FSoftObjectPath                        SoftObjectPath;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_LoadAsset) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_LoadAsset");
static_assert(sizeof(MordhauUtilityLibrary_LoadAsset) == 0x000020, "Wrong size on MordhauUtilityLibrary_LoadAsset");
static_assert(offsetof(MordhauUtilityLibrary_LoadAsset, SoftObjectPath) == 0x000000, "Member 'MordhauUtilityLibrary_LoadAsset::SoftObjectPath' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LoadAsset, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_LoadAsset::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.LoadReportImageByteArray
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_LoadReportImageByteArray final
{
public:
	class FString                                 ImageName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 LoadedArray;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_LoadReportImageByteArray) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_LoadReportImageByteArray");
static_assert(sizeof(MordhauUtilityLibrary_LoadReportImageByteArray) == 0x000028, "Wrong size on MordhauUtilityLibrary_LoadReportImageByteArray");
static_assert(offsetof(MordhauUtilityLibrary_LoadReportImageByteArray, ImageName) == 0x000000, "Member 'MordhauUtilityLibrary_LoadReportImageByteArray::ImageName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LoadReportImageByteArray, LoadedArray) == 0x000010, "Member 'MordhauUtilityLibrary_LoadReportImageByteArray::LoadedArray' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LoadReportImageByteArray, ReturnValue) == 0x000020, "Member 'MordhauUtilityLibrary_LoadReportImageByteArray::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.LoadStringArrayFromFile
// 0x0038 (0x0038 - 0x0000)
struct MordhauUtilityLibrary_LoadStringArrayFromFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         LoadedStringArray;                                 // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_LoadStringArrayFromFile) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_LoadStringArrayFromFile");
static_assert(sizeof(MordhauUtilityLibrary_LoadStringArrayFromFile) == 0x000038, "Wrong size on MordhauUtilityLibrary_LoadStringArrayFromFile");
static_assert(offsetof(MordhauUtilityLibrary_LoadStringArrayFromFile, Filename) == 0x000000, "Member 'MordhauUtilityLibrary_LoadStringArrayFromFile::Filename' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LoadStringArrayFromFile, LoadedStringArray) == 0x000010, "Member 'MordhauUtilityLibrary_LoadStringArrayFromFile::LoadedStringArray' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LoadStringArrayFromFile, FileExtension) == 0x000020, "Member 'MordhauUtilityLibrary_LoadStringArrayFromFile::FileExtension' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LoadStringArrayFromFile, ReturnValue) == 0x000030, "Member 'MordhauUtilityLibrary_LoadStringArrayFromFile::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.LoadStringFromFile
// 0x0038 (0x0038 - 0x0000)
struct MordhauUtilityLibrary_LoadStringFromFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoadedString;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_LoadStringFromFile) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_LoadStringFromFile");
static_assert(sizeof(MordhauUtilityLibrary_LoadStringFromFile) == 0x000038, "Wrong size on MordhauUtilityLibrary_LoadStringFromFile");
static_assert(offsetof(MordhauUtilityLibrary_LoadStringFromFile, Filename) == 0x000000, "Member 'MordhauUtilityLibrary_LoadStringFromFile::Filename' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LoadStringFromFile, LoadedString) == 0x000010, "Member 'MordhauUtilityLibrary_LoadStringFromFile::LoadedString' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LoadStringFromFile, FileExtension) == 0x000020, "Member 'MordhauUtilityLibrary_LoadStringFromFile::FileExtension' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_LoadStringFromFile, ReturnValue) == 0x000030, "Member 'MordhauUtilityLibrary_LoadStringFromFile::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.MakeEmptyProfile
// 0x00C8 (0x00C8 - 0x0000)
struct MordhauUtilityLibrary_MakeEmptyProfile final
{
public:
	TSubclassOf<class AMordhauCharacter>          CharacterClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomizeVoice;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharacterProfile                      ReturnValue;                                       // 0x0010(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_MakeEmptyProfile) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_MakeEmptyProfile");
static_assert(sizeof(MordhauUtilityLibrary_MakeEmptyProfile) == 0x0000C8, "Wrong size on MordhauUtilityLibrary_MakeEmptyProfile");
static_assert(offsetof(MordhauUtilityLibrary_MakeEmptyProfile, CharacterClass) == 0x000000, "Member 'MordhauUtilityLibrary_MakeEmptyProfile::CharacterClass' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MakeEmptyProfile, bRandomizeVoice) == 0x000008, "Member 'MordhauUtilityLibrary_MakeEmptyProfile::bRandomizeVoice' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MakeEmptyProfile, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_MakeEmptyProfile::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.MakeFaceCustomization
// 0x0060 (0x0060 - 0x0000)
struct MordhauUtilityLibrary_MakeFaceCustomization final
{
public:
	TArray<int32>                                 Translate;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 Rotate;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 Scale;                                             // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFaceCustomization                     FaceCustomization;                                 // 0x0030(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_MakeFaceCustomization) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_MakeFaceCustomization");
static_assert(sizeof(MordhauUtilityLibrary_MakeFaceCustomization) == 0x000060, "Wrong size on MordhauUtilityLibrary_MakeFaceCustomization");
static_assert(offsetof(MordhauUtilityLibrary_MakeFaceCustomization, Translate) == 0x000000, "Member 'MordhauUtilityLibrary_MakeFaceCustomization::Translate' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MakeFaceCustomization, Rotate) == 0x000010, "Member 'MordhauUtilityLibrary_MakeFaceCustomization::Rotate' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MakeFaceCustomization, Scale) == 0x000020, "Member 'MordhauUtilityLibrary_MakeFaceCustomization::Scale' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MakeFaceCustomization, FaceCustomization) == 0x000030, "Member 'MordhauUtilityLibrary_MakeFaceCustomization::FaceCustomization' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.MakeSkillsCustomization
// 0x0008 (0x0008 - 0x0000)
struct MordhauUtilityLibrary_MakeSkillsCustomization final
{
public:
	int32                                         Perks;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkillsCustomization                   OutSkillsCustomization;                            // 0x0004(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_MakeSkillsCustomization) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_MakeSkillsCustomization");
static_assert(sizeof(MordhauUtilityLibrary_MakeSkillsCustomization) == 0x000008, "Wrong size on MordhauUtilityLibrary_MakeSkillsCustomization");
static_assert(offsetof(MordhauUtilityLibrary_MakeSkillsCustomization, Perks) == 0x000000, "Member 'MordhauUtilityLibrary_MakeSkillsCustomization::Perks' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MakeSkillsCustomization, OutSkillsCustomization) == 0x000004, "Member 'MordhauUtilityLibrary_MakeSkillsCustomization::OutSkillsCustomization' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.MarkRenderStateDirty
// 0x0008 (0x0008 - 0x0000)
struct MordhauUtilityLibrary_MarkRenderStateDirty final
{
public:
	class UMeshComponent*                         MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_MarkRenderStateDirty) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_MarkRenderStateDirty");
static_assert(sizeof(MordhauUtilityLibrary_MarkRenderStateDirty) == 0x000008, "Wrong size on MordhauUtilityLibrary_MarkRenderStateDirty");
static_assert(offsetof(MordhauUtilityLibrary_MarkRenderStateDirty, MeshComp) == 0x000000, "Member 'MordhauUtilityLibrary_MarkRenderStateDirty::MeshComp' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.MordhauApplyRadialDamageWithFalloff
// 0x0068 (0x0068 - 0x0000)
struct MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseDamage;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumDamage;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseStructureDamage;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumStructureDamage;                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageInnerRadius;                                 // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageOuterRadius;                                 // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageFalloff;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         BaseKnockback;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumKnockback;                                  // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RagdollFallRadius;                                 // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageCauser;                                      // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedByController;                            // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             DamagePreventionChannel;                           // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreFriendly;                                   // 0x0061(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMordhauDamageType                            DamageType;                                        // 0x0062(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0063(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff");
static_assert(sizeof(MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff) == 0x000068, "Wrong size on MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff");
static_assert(offsetof(MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff, WorldContextObject) == 0x000000, "Member 'MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff, BaseDamage) == 0x000008, "Member 'MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff::BaseDamage' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff, MinimumDamage) == 0x00000C, "Member 'MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff::MinimumDamage' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff, BaseStructureDamage) == 0x000010, "Member 'MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff::BaseStructureDamage' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff, MinimumStructureDamage) == 0x000014, "Member 'MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff::MinimumStructureDamage' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff, Origin) == 0x000018, "Member 'MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff::Origin' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff, DamageInnerRadius) == 0x000024, "Member 'MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff::DamageInnerRadius' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff, DamageOuterRadius) == 0x000028, "Member 'MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff::DamageOuterRadius' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff, DamageFalloff) == 0x00002C, "Member 'MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff::DamageFalloff' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff, IgnoreActors) == 0x000030, "Member 'MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff::IgnoreActors' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff, BaseKnockback) == 0x000040, "Member 'MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff::BaseKnockback' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff, MinimumKnockback) == 0x000044, "Member 'MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff::MinimumKnockback' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff, RagdollFallRadius) == 0x000048, "Member 'MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff::RagdollFallRadius' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff, DamageCauser) == 0x000050, "Member 'MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff::DamageCauser' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff, InstigatedByController) == 0x000058, "Member 'MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff::InstigatedByController' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff, DamagePreventionChannel) == 0x000060, "Member 'MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff::DamagePreventionChannel' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff, bIgnoreFriendly) == 0x000061, "Member 'MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff::bIgnoreFriendly' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff, DamageType) == 0x000062, "Member 'MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff::DamageType' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff, ReturnValue) == 0x000063, "Member 'MordhauUtilityLibrary_MordhauApplyRadialDamageWithFalloff::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.MountPak
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_MountPak final
{
public:
	class FString                                 PakPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_MountPak) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_MountPak");
static_assert(sizeof(MordhauUtilityLibrary_MountPak) == 0x000020, "Wrong size on MordhauUtilityLibrary_MountPak");
static_assert(offsetof(MordhauUtilityLibrary_MountPak, PakPath) == 0x000000, "Member 'MordhauUtilityLibrary_MountPak::PakPath' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MountPak, WorldContextObject) == 0x000010, "Member 'MordhauUtilityLibrary_MountPak::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_MountPak, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_MountPak::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.NotEqual_PlayFabPlayer
// 0x00C8 (0x00C8 - 0x0000)
struct MordhauUtilityLibrary_NotEqual_PlayFabPlayer final
{
public:
	struct FPlayFabPlayer                         A;                                                 // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayFabPlayer                         B;                                                 // 0x0060(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_NotEqual_PlayFabPlayer) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_NotEqual_PlayFabPlayer");
static_assert(sizeof(MordhauUtilityLibrary_NotEqual_PlayFabPlayer) == 0x0000C8, "Wrong size on MordhauUtilityLibrary_NotEqual_PlayFabPlayer");
static_assert(offsetof(MordhauUtilityLibrary_NotEqual_PlayFabPlayer, A) == 0x000000, "Member 'MordhauUtilityLibrary_NotEqual_PlayFabPlayer::A' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_NotEqual_PlayFabPlayer, B) == 0x000060, "Member 'MordhauUtilityLibrary_NotEqual_PlayFabPlayer::B' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_NotEqual_PlayFabPlayer, ReturnValue) == 0x0000C0, "Member 'MordhauUtilityLibrary_NotEqual_PlayFabPlayer::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.OpenDLCStorePage
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_OpenDLCStorePage final
{
public:
	class FString                                 DlcId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_OpenDLCStorePage) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_OpenDLCStorePage");
static_assert(sizeof(MordhauUtilityLibrary_OpenDLCStorePage) == 0x000010, "Wrong size on MordhauUtilityLibrary_OpenDLCStorePage");
static_assert(offsetof(MordhauUtilityLibrary_OpenDLCStorePage, DlcId) == 0x000000, "Member 'MordhauUtilityLibrary_OpenDLCStorePage::DlcId' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.OpenPlayerProfile
// 0x0060 (0x0060 - 0x0000)
struct MordhauUtilityLibrary_OpenPlayerProfile final
{
public:
	struct FPlayFabPlayer                         Player;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_OpenPlayerProfile) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_OpenPlayerProfile");
static_assert(sizeof(MordhauUtilityLibrary_OpenPlayerProfile) == 0x000060, "Wrong size on MordhauUtilityLibrary_OpenPlayerProfile");
static_assert(offsetof(MordhauUtilityLibrary_OpenPlayerProfile, Player) == 0x000000, "Member 'MordhauUtilityLibrary_OpenPlayerProfile::Player' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.OpenSocial
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_OpenSocial final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_OpenSocial) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_OpenSocial");
static_assert(sizeof(MordhauUtilityLibrary_OpenSocial) == 0x000010, "Wrong size on MordhauUtilityLibrary_OpenSocial");
static_assert(offsetof(MordhauUtilityLibrary_OpenSocial, URL) == 0x000000, "Member 'MordhauUtilityLibrary_OpenSocial::URL' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.OpenURL
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_OpenURL final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_OpenURL) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_OpenURL");
static_assert(sizeof(MordhauUtilityLibrary_OpenURL) == 0x000010, "Wrong size on MordhauUtilityLibrary_OpenURL");
static_assert(offsetof(MordhauUtilityLibrary_OpenURL, URL) == 0x000000, "Member 'MordhauUtilityLibrary_OpenURL::URL' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.PerformCharacterRenderingStressTest
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_PerformCharacterRenderingStressTest final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMordhauCharacter>          Type;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Spread;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFromCamera;                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_PerformCharacterRenderingStressTest) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_PerformCharacterRenderingStressTest");
static_assert(sizeof(MordhauUtilityLibrary_PerformCharacterRenderingStressTest) == 0x000020, "Wrong size on MordhauUtilityLibrary_PerformCharacterRenderingStressTest");
static_assert(offsetof(MordhauUtilityLibrary_PerformCharacterRenderingStressTest, WorldContextObject) == 0x000000, "Member 'MordhauUtilityLibrary_PerformCharacterRenderingStressTest::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PerformCharacterRenderingStressTest, Type) == 0x000008, "Member 'MordhauUtilityLibrary_PerformCharacterRenderingStressTest::Type' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PerformCharacterRenderingStressTest, Amount) == 0x000010, "Member 'MordhauUtilityLibrary_PerformCharacterRenderingStressTest::Amount' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PerformCharacterRenderingStressTest, Spread) == 0x000014, "Member 'MordhauUtilityLibrary_PerformCharacterRenderingStressTest::Spread' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PerformCharacterRenderingStressTest, DistanceFromCamera) == 0x000018, "Member 'MordhauUtilityLibrary_PerformCharacterRenderingStressTest::DistanceFromCamera' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.PlaneTrace
// 0x02D0 (0x02D0 - 0x0000)
struct MordhauUtilityLibrary_PlaneTrace final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Left;                                              // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Right;                                             // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Forward;                                           // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Back;                                              // 0x002C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceAmount;                                       // 0x0038(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bConnectLeftRight;                                 // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConnectForwardBack;                               // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ConnectOffset;                                     // 0x0074(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             LeftHit;                                           // 0x0080(0x008C)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FHitResult                             RightHit;                                          // 0x010C(0x008C)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FHitResult                             ForwardHit;                                        // 0x0198(0x008C)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FHitResult                             BackHit;                                           // 0x0224(0x008C)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                OutRight;                                          // 0x02B0(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutForward;                                        // 0x02BC(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelf;                                       // 0x02C8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x02C9(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CA[0x6];                                      // 0x02CA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_PlaneTrace) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_PlaneTrace");
static_assert(sizeof(MordhauUtilityLibrary_PlaneTrace) == 0x0002D0, "Wrong size on MordhauUtilityLibrary_PlaneTrace");
static_assert(offsetof(MordhauUtilityLibrary_PlaneTrace, WorldContextObject) == 0x000000, "Member 'MordhauUtilityLibrary_PlaneTrace::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PlaneTrace, Left) == 0x000008, "Member 'MordhauUtilityLibrary_PlaneTrace::Left' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PlaneTrace, Right) == 0x000014, "Member 'MordhauUtilityLibrary_PlaneTrace::Right' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PlaneTrace, Forward) == 0x000020, "Member 'MordhauUtilityLibrary_PlaneTrace::Forward' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PlaneTrace, Back) == 0x00002C, "Member 'MordhauUtilityLibrary_PlaneTrace::Back' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PlaneTrace, TraceAmount) == 0x000038, "Member 'MordhauUtilityLibrary_PlaneTrace::TraceAmount' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PlaneTrace, ObjectTypes) == 0x000048, "Member 'MordhauUtilityLibrary_PlaneTrace::ObjectTypes' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PlaneTrace, bTraceComplex) == 0x000058, "Member 'MordhauUtilityLibrary_PlaneTrace::bTraceComplex' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PlaneTrace, ActorsToIgnore) == 0x000060, "Member 'MordhauUtilityLibrary_PlaneTrace::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PlaneTrace, bConnectLeftRight) == 0x000070, "Member 'MordhauUtilityLibrary_PlaneTrace::bConnectLeftRight' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PlaneTrace, bConnectForwardBack) == 0x000071, "Member 'MordhauUtilityLibrary_PlaneTrace::bConnectForwardBack' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PlaneTrace, ConnectOffset) == 0x000074, "Member 'MordhauUtilityLibrary_PlaneTrace::ConnectOffset' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PlaneTrace, LeftHit) == 0x000080, "Member 'MordhauUtilityLibrary_PlaneTrace::LeftHit' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PlaneTrace, RightHit) == 0x00010C, "Member 'MordhauUtilityLibrary_PlaneTrace::RightHit' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PlaneTrace, ForwardHit) == 0x000198, "Member 'MordhauUtilityLibrary_PlaneTrace::ForwardHit' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PlaneTrace, BackHit) == 0x000224, "Member 'MordhauUtilityLibrary_PlaneTrace::BackHit' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PlaneTrace, OutRight) == 0x0002B0, "Member 'MordhauUtilityLibrary_PlaneTrace::OutRight' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PlaneTrace, OutForward) == 0x0002BC, "Member 'MordhauUtilityLibrary_PlaneTrace::OutForward' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PlaneTrace, bIgnoreSelf) == 0x0002C8, "Member 'MordhauUtilityLibrary_PlaneTrace::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PlaneTrace, ReturnValue) == 0x0002C9, "Member 'MordhauUtilityLibrary_PlaneTrace::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.PrintToConsoleAndLog
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_PrintToConsoleAndLog final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipRepeatedStrings;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_PrintToConsoleAndLog) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_PrintToConsoleAndLog");
static_assert(sizeof(MordhauUtilityLibrary_PrintToConsoleAndLog) == 0x000018, "Wrong size on MordhauUtilityLibrary_PrintToConsoleAndLog");
static_assert(offsetof(MordhauUtilityLibrary_PrintToConsoleAndLog, String) == 0x000000, "Member 'MordhauUtilityLibrary_PrintToConsoleAndLog::String' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_PrintToConsoleAndLog, bSkipRepeatedStrings) == 0x000010, "Member 'MordhauUtilityLibrary_PrintToConsoleAndLog::bSkipRepeatedStrings' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.ProjectWorldToScreenBidirectional
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_ProjectWorldToScreenBidirectional final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenPosition;                                    // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetBehindCamera;                               // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerViewportRelative;                           // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001E(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_ProjectWorldToScreenBidirectional) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_ProjectWorldToScreenBidirectional");
static_assert(sizeof(MordhauUtilityLibrary_ProjectWorldToScreenBidirectional) == 0x000020, "Wrong size on MordhauUtilityLibrary_ProjectWorldToScreenBidirectional");
static_assert(offsetof(MordhauUtilityLibrary_ProjectWorldToScreenBidirectional, Player) == 0x000000, "Member 'MordhauUtilityLibrary_ProjectWorldToScreenBidirectional::Player' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ProjectWorldToScreenBidirectional, WorldPosition) == 0x000008, "Member 'MordhauUtilityLibrary_ProjectWorldToScreenBidirectional::WorldPosition' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ProjectWorldToScreenBidirectional, ScreenPosition) == 0x000014, "Member 'MordhauUtilityLibrary_ProjectWorldToScreenBidirectional::ScreenPosition' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ProjectWorldToScreenBidirectional, bTargetBehindCamera) == 0x00001C, "Member 'MordhauUtilityLibrary_ProjectWorldToScreenBidirectional::bTargetBehindCamera' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ProjectWorldToScreenBidirectional, bPlayerViewportRelative) == 0x00001D, "Member 'MordhauUtilityLibrary_ProjectWorldToScreenBidirectional::bPlayerViewportRelative' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ProjectWorldToScreenBidirectional, ReturnValue) == 0x00001E, "Member 'MordhauUtilityLibrary_ProjectWorldToScreenBidirectional::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.RandomRangeExclude
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_RandomRangeExclude final
{
public:
	int32                                         Min;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exclude;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_RandomRangeExclude) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_RandomRangeExclude");
static_assert(sizeof(MordhauUtilityLibrary_RandomRangeExclude) == 0x000010, "Wrong size on MordhauUtilityLibrary_RandomRangeExclude");
static_assert(offsetof(MordhauUtilityLibrary_RandomRangeExclude, Min) == 0x000000, "Member 'MordhauUtilityLibrary_RandomRangeExclude::Min' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_RandomRangeExclude, Max) == 0x000004, "Member 'MordhauUtilityLibrary_RandomRangeExclude::Max' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_RandomRangeExclude, Exclude) == 0x000008, "Member 'MordhauUtilityLibrary_RandomRangeExclude::Exclude' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_RandomRangeExclude, ReturnValue) == 0x00000C, "Member 'MordhauUtilityLibrary_RandomRangeExclude::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.ReserveCharacterRagdoll
// 0x0008 (0x0008 - 0x0000)
struct MordhauUtilityLibrary_ReserveCharacterRagdoll final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_ReserveCharacterRagdoll) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_ReserveCharacterRagdoll");
static_assert(sizeof(MordhauUtilityLibrary_ReserveCharacterRagdoll) == 0x000008, "Wrong size on MordhauUtilityLibrary_ReserveCharacterRagdoll");
static_assert(offsetof(MordhauUtilityLibrary_ReserveCharacterRagdoll, Character) == 0x000000, "Member 'MordhauUtilityLibrary_ReserveCharacterRagdoll::Character' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.ResetClientPredictionData
// 0x0008 (0x0008 - 0x0000)
struct MordhauUtilityLibrary_ResetClientPredictionData final
{
public:
	class UCharacterMovementComponent*            CMC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_ResetClientPredictionData) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_ResetClientPredictionData");
static_assert(sizeof(MordhauUtilityLibrary_ResetClientPredictionData) == 0x000008, "Wrong size on MordhauUtilityLibrary_ResetClientPredictionData");
static_assert(offsetof(MordhauUtilityLibrary_ResetClientPredictionData, CMC) == 0x000000, "Member 'MordhauUtilityLibrary_ResetClientPredictionData::CMC' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.ResetController
// 0x0008 (0x0008 - 0x0000)
struct MordhauUtilityLibrary_ResetController final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_ResetController) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_ResetController");
static_assert(sizeof(MordhauUtilityLibrary_ResetController) == 0x000008, "Wrong size on MordhauUtilityLibrary_ResetController");
static_assert(offsetof(MordhauUtilityLibrary_ResetController, Controller) == 0x000000, "Member 'MordhauUtilityLibrary_ResetController::Controller' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.ResetServerPredictionData
// 0x0008 (0x0008 - 0x0000)
struct MordhauUtilityLibrary_ResetServerPredictionData final
{
public:
	class UCharacterMovementComponent*            CMC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_ResetServerPredictionData) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_ResetServerPredictionData");
static_assert(sizeof(MordhauUtilityLibrary_ResetServerPredictionData) == 0x000008, "Wrong size on MordhauUtilityLibrary_ResetServerPredictionData");
static_assert(offsetof(MordhauUtilityLibrary_ResetServerPredictionData, CMC) == 0x000000, "Member 'MordhauUtilityLibrary_ResetServerPredictionData::CMC' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SanitizePlayerName
// 0x0030 (0x0030 - 0x0000)
struct MordhauUtilityLibrary_SanitizePlayerName final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InFallback;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SanitizePlayerName) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SanitizePlayerName");
static_assert(sizeof(MordhauUtilityLibrary_SanitizePlayerName) == 0x000030, "Wrong size on MordhauUtilityLibrary_SanitizePlayerName");
static_assert(offsetof(MordhauUtilityLibrary_SanitizePlayerName, InName) == 0x000000, "Member 'MordhauUtilityLibrary_SanitizePlayerName::InName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SanitizePlayerName, InFallback) == 0x000010, "Member 'MordhauUtilityLibrary_SanitizePlayerName::InFallback' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SanitizePlayerName, ReturnValue) == 0x000020, "Member 'MordhauUtilityLibrary_SanitizePlayerName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SaveArrayToFile
// 0x0038 (0x0038 - 0x0000)
struct MordhauUtilityLibrary_SaveArrayToFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ByteArray;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_SaveArrayToFile) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SaveArrayToFile");
static_assert(sizeof(MordhauUtilityLibrary_SaveArrayToFile) == 0x000038, "Wrong size on MordhauUtilityLibrary_SaveArrayToFile");
static_assert(offsetof(MordhauUtilityLibrary_SaveArrayToFile, Filename) == 0x000000, "Member 'MordhauUtilityLibrary_SaveArrayToFile::Filename' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SaveArrayToFile, ByteArray) == 0x000010, "Member 'MordhauUtilityLibrary_SaveArrayToFile::ByteArray' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SaveArrayToFile, FileExtension) == 0x000020, "Member 'MordhauUtilityLibrary_SaveArrayToFile::FileExtension' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SaveArrayToFile, ReturnValue) == 0x000030, "Member 'MordhauUtilityLibrary_SaveArrayToFile::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SaveStringArrayToFile
// 0x0038 (0x0038 - 0x0000)
struct MordhauUtilityLibrary_SaveStringArrayToFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         StringArray;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_SaveStringArrayToFile) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SaveStringArrayToFile");
static_assert(sizeof(MordhauUtilityLibrary_SaveStringArrayToFile) == 0x000038, "Wrong size on MordhauUtilityLibrary_SaveStringArrayToFile");
static_assert(offsetof(MordhauUtilityLibrary_SaveStringArrayToFile, Filename) == 0x000000, "Member 'MordhauUtilityLibrary_SaveStringArrayToFile::Filename' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SaveStringArrayToFile, StringArray) == 0x000010, "Member 'MordhauUtilityLibrary_SaveStringArrayToFile::StringArray' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SaveStringArrayToFile, FileExtension) == 0x000020, "Member 'MordhauUtilityLibrary_SaveStringArrayToFile::FileExtension' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SaveStringArrayToFile, ReturnValue) == 0x000030, "Member 'MordhauUtilityLibrary_SaveStringArrayToFile::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SaveStringToFile
// 0x0038 (0x0038 - 0x0000)
struct MordhauUtilityLibrary_SaveStringToFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_SaveStringToFile) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SaveStringToFile");
static_assert(sizeof(MordhauUtilityLibrary_SaveStringToFile) == 0x000038, "Wrong size on MordhauUtilityLibrary_SaveStringToFile");
static_assert(offsetof(MordhauUtilityLibrary_SaveStringToFile, Filename) == 0x000000, "Member 'MordhauUtilityLibrary_SaveStringToFile::Filename' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SaveStringToFile, String) == 0x000010, "Member 'MordhauUtilityLibrary_SaveStringToFile::String' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SaveStringToFile, FileExtension) == 0x000020, "Member 'MordhauUtilityLibrary_SaveStringToFile::FileExtension' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SaveStringToFile, ReturnValue) == 0x000030, "Member 'MordhauUtilityLibrary_SaveStringToFile::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SCompare
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_SCompare final
{
public:
	class FString                                 StringA;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringB;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_SCompare) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SCompare");
static_assert(sizeof(MordhauUtilityLibrary_SCompare) == 0x000028, "Wrong size on MordhauUtilityLibrary_SCompare");
static_assert(offsetof(MordhauUtilityLibrary_SCompare, StringA) == 0x000000, "Member 'MordhauUtilityLibrary_SCompare::StringA' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SCompare, StringB) == 0x000010, "Member 'MordhauUtilityLibrary_SCompare::StringB' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SCompare, ReturnValue) == 0x000020, "Member 'MordhauUtilityLibrary_SCompare::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SearchUsername
// 0x0030 (0x0030 - 0x0000)
struct MordhauUtilityLibrary_SearchUsername final
{
public:
	class FString                                 Usernames;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bWasSuccessful, struct FPlayFabApiError& Error, struct FUsernameSearchResult& SearchResults)> Delegate;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EUsernameSearchFilter                         SearchFilter;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Limit;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlatform                                     PlatformFilter;                                    // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_SearchUsername) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SearchUsername");
static_assert(sizeof(MordhauUtilityLibrary_SearchUsername) == 0x000030, "Wrong size on MordhauUtilityLibrary_SearchUsername");
static_assert(offsetof(MordhauUtilityLibrary_SearchUsername, Usernames) == 0x000000, "Member 'MordhauUtilityLibrary_SearchUsername::Usernames' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SearchUsername, Delegate) == 0x000010, "Member 'MordhauUtilityLibrary_SearchUsername::Delegate' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SearchUsername, SearchFilter) == 0x000020, "Member 'MordhauUtilityLibrary_SearchUsername::SearchFilter' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SearchUsername, Limit) == 0x000024, "Member 'MordhauUtilityLibrary_SearchUsername::Limit' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SearchUsername, Offset) == 0x000028, "Member 'MordhauUtilityLibrary_SearchUsername::Offset' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SearchUsername, PlatformFilter) == 0x00002C, "Member 'MordhauUtilityLibrary_SearchUsername::PlatformFilter' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SendClientAdjustment
// 0x0008 (0x0008 - 0x0000)
struct MordhauUtilityLibrary_SendClientAdjustment final
{
public:
	class UCharacterMovementComponent*            CMC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SendClientAdjustment) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SendClientAdjustment");
static_assert(sizeof(MordhauUtilityLibrary_SendClientAdjustment) == 0x000008, "Wrong size on MordhauUtilityLibrary_SendClientAdjustment");
static_assert(offsetof(MordhauUtilityLibrary_SendClientAdjustment, CMC) == 0x000000, "Member 'MordhauUtilityLibrary_SendClientAdjustment::CMC' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SendMessageToRconClients
// 0x0018 (0x0018 - 0x0000)
struct MordhauUtilityLibrary_SendMessageToRconClients final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClientId;                                          // 0x0010(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToAll;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBroadcastTypes                               TypeOfBroadcast;                                   // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0016(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_SendMessageToRconClients) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SendMessageToRconClients");
static_assert(sizeof(MordhauUtilityLibrary_SendMessageToRconClients) == 0x000018, "Wrong size on MordhauUtilityLibrary_SendMessageToRconClients");
static_assert(offsetof(MordhauUtilityLibrary_SendMessageToRconClients, Message) == 0x000000, "Member 'MordhauUtilityLibrary_SendMessageToRconClients::Message' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SendMessageToRconClients, ClientId) == 0x000010, "Member 'MordhauUtilityLibrary_SendMessageToRconClients::ClientId' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SendMessageToRconClients, bToAll) == 0x000014, "Member 'MordhauUtilityLibrary_SendMessageToRconClients::bToAll' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SendMessageToRconClients, TypeOfBroadcast) == 0x000015, "Member 'MordhauUtilityLibrary_SendMessageToRconClients::TypeOfBroadcast' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SendMessageToRconClients, ReturnValue) == 0x000016, "Member 'MordhauUtilityLibrary_SendMessageToRconClients::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetCachedMaxDistanceAndMarkDirty
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_SetCachedMaxDistanceAndMarkDirty final
{
public:
	class UPrimitiveComponent*                    Comp;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewMaxDistance;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_SetCachedMaxDistanceAndMarkDirty) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SetCachedMaxDistanceAndMarkDirty");
static_assert(sizeof(MordhauUtilityLibrary_SetCachedMaxDistanceAndMarkDirty) == 0x000010, "Wrong size on MordhauUtilityLibrary_SetCachedMaxDistanceAndMarkDirty");
static_assert(offsetof(MordhauUtilityLibrary_SetCachedMaxDistanceAndMarkDirty, Comp) == 0x000000, "Member 'MordhauUtilityLibrary_SetCachedMaxDistanceAndMarkDirty::Comp' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetCachedMaxDistanceAndMarkDirty, NewMaxDistance) == 0x000008, "Member 'MordhauUtilityLibrary_SetCachedMaxDistanceAndMarkDirty::NewMaxDistance' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetCanEverAffectNavigation
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_SetCanEverAffectNavigation final
{
public:
	class UActorComponent*                        ActorComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelevant;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_SetCanEverAffectNavigation) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SetCanEverAffectNavigation");
static_assert(sizeof(MordhauUtilityLibrary_SetCanEverAffectNavigation) == 0x000010, "Wrong size on MordhauUtilityLibrary_SetCanEverAffectNavigation");
static_assert(offsetof(MordhauUtilityLibrary_SetCanEverAffectNavigation, ActorComponent) == 0x000000, "Member 'MordhauUtilityLibrary_SetCanEverAffectNavigation::ActorComponent' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetCanEverAffectNavigation, bRelevant) == 0x000008, "Member 'MordhauUtilityLibrary_SetCanEverAffectNavigation::bRelevant' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetCustomConfigVar_Array
// 0x0030 (0x0030 - 0x0000)
struct MordhauUtilityLibrary_SetCustomConfigVar_Array final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SetCustomConfigVar_Array) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SetCustomConfigVar_Array");
static_assert(sizeof(MordhauUtilityLibrary_SetCustomConfigVar_Array) == 0x000030, "Wrong size on MordhauUtilityLibrary_SetCustomConfigVar_Array");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Array, SectionName) == 0x000000, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Array::SectionName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Array, VariableName) == 0x000010, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Array::VariableName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Array, Value) == 0x000020, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Array::Value' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetCustomConfigVar_Bool
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_SetCustomConfigVar_Bool final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_SetCustomConfigVar_Bool) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SetCustomConfigVar_Bool");
static_assert(sizeof(MordhauUtilityLibrary_SetCustomConfigVar_Bool) == 0x000028, "Wrong size on MordhauUtilityLibrary_SetCustomConfigVar_Bool");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Bool, SectionName) == 0x000000, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Bool::SectionName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Bool, VariableName) == 0x000010, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Bool::VariableName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Bool, Value) == 0x000020, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Bool::Value' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetCustomConfigVar_Color
// 0x0030 (0x0030 - 0x0000)
struct MordhauUtilityLibrary_SetCustomConfigVar_Color final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SetCustomConfigVar_Color) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SetCustomConfigVar_Color");
static_assert(sizeof(MordhauUtilityLibrary_SetCustomConfigVar_Color) == 0x000030, "Wrong size on MordhauUtilityLibrary_SetCustomConfigVar_Color");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Color, SectionName) == 0x000000, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Color::SectionName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Color, VariableName) == 0x000010, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Color::VariableName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Color, Value) == 0x000020, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Color::Value' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetCustomConfigVar_Float
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_SetCustomConfigVar_Float final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_SetCustomConfigVar_Float) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SetCustomConfigVar_Float");
static_assert(sizeof(MordhauUtilityLibrary_SetCustomConfigVar_Float) == 0x000028, "Wrong size on MordhauUtilityLibrary_SetCustomConfigVar_Float");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Float, SectionName) == 0x000000, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Float::SectionName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Float, VariableName) == 0x000010, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Float::VariableName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Float, Value) == 0x000020, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Float::Value' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetCustomConfigVar_Int
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_SetCustomConfigVar_Int final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_SetCustomConfigVar_Int) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SetCustomConfigVar_Int");
static_assert(sizeof(MordhauUtilityLibrary_SetCustomConfigVar_Int) == 0x000028, "Wrong size on MordhauUtilityLibrary_SetCustomConfigVar_Int");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Int, SectionName) == 0x000000, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Int::SectionName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Int, VariableName) == 0x000010, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Int::VariableName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Int, Value) == 0x000020, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Int::Value' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetCustomConfigVar_Rotator
// 0x0030 (0x0030 - 0x0000)
struct MordhauUtilityLibrary_SetCustomConfigVar_Rotator final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Value;                                             // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_SetCustomConfigVar_Rotator) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SetCustomConfigVar_Rotator");
static_assert(sizeof(MordhauUtilityLibrary_SetCustomConfigVar_Rotator) == 0x000030, "Wrong size on MordhauUtilityLibrary_SetCustomConfigVar_Rotator");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Rotator, SectionName) == 0x000000, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Rotator::SectionName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Rotator, VariableName) == 0x000010, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Rotator::VariableName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Rotator, Value) == 0x000020, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Rotator::Value' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetCustomConfigVar_String
// 0x0030 (0x0030 - 0x0000)
struct MordhauUtilityLibrary_SetCustomConfigVar_String final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SetCustomConfigVar_String) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SetCustomConfigVar_String");
static_assert(sizeof(MordhauUtilityLibrary_SetCustomConfigVar_String) == 0x000030, "Wrong size on MordhauUtilityLibrary_SetCustomConfigVar_String");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_String, SectionName) == 0x000000, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_String::SectionName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_String, VariableName) == 0x000010, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_String::VariableName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_String, Value) == 0x000020, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_String::Value' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetCustomConfigVar_Vector
// 0x0030 (0x0030 - 0x0000)
struct MordhauUtilityLibrary_SetCustomConfigVar_Vector final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_SetCustomConfigVar_Vector) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SetCustomConfigVar_Vector");
static_assert(sizeof(MordhauUtilityLibrary_SetCustomConfigVar_Vector) == 0x000030, "Wrong size on MordhauUtilityLibrary_SetCustomConfigVar_Vector");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Vector, SectionName) == 0x000000, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Vector::SectionName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Vector, VariableName) == 0x000010, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Vector::VariableName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Vector, Value) == 0x000020, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Vector::Value' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetCustomConfigVar_Vector2D
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_SetCustomConfigVar_Vector2D final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Value;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SetCustomConfigVar_Vector2D) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SetCustomConfigVar_Vector2D");
static_assert(sizeof(MordhauUtilityLibrary_SetCustomConfigVar_Vector2D) == 0x000028, "Wrong size on MordhauUtilityLibrary_SetCustomConfigVar_Vector2D");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Vector2D, SectionName) == 0x000000, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Vector2D::SectionName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Vector2D, VariableName) == 0x000010, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Vector2D::VariableName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetCustomConfigVar_Vector2D, Value) == 0x000020, "Member 'MordhauUtilityLibrary_SetCustomConfigVar_Vector2D::Value' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetDecalFadeScreenSize
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_SetDecalFadeScreenSize final
{
public:
	class UDecalComponent*                        Decal;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewFadeScreenSize;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_SetDecalFadeScreenSize) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SetDecalFadeScreenSize");
static_assert(sizeof(MordhauUtilityLibrary_SetDecalFadeScreenSize) == 0x000010, "Wrong size on MordhauUtilityLibrary_SetDecalFadeScreenSize");
static_assert(offsetof(MordhauUtilityLibrary_SetDecalFadeScreenSize, Decal) == 0x000000, "Member 'MordhauUtilityLibrary_SetDecalFadeScreenSize::Decal' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetDecalFadeScreenSize, NewFadeScreenSize) == 0x000008, "Member 'MordhauUtilityLibrary_SetDecalFadeScreenSize::NewFadeScreenSize' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetForceMipStreaming
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_SetForceMipStreaming final
{
public:
	class USkeletalMeshComponent*                 SMC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_SetForceMipStreaming) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SetForceMipStreaming");
static_assert(sizeof(MordhauUtilityLibrary_SetForceMipStreaming) == 0x000010, "Wrong size on MordhauUtilityLibrary_SetForceMipStreaming");
static_assert(offsetof(MordhauUtilityLibrary_SetForceMipStreaming, SMC) == 0x000000, "Member 'MordhauUtilityLibrary_SetForceMipStreaming::SMC' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetForceMipStreaming, bValue) == 0x000008, "Member 'MordhauUtilityLibrary_SetForceMipStreaming::bValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetLocalSpaceKinematics
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_SetLocalSpaceKinematics final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewValue;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_SetLocalSpaceKinematics) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SetLocalSpaceKinematics");
static_assert(sizeof(MordhauUtilityLibrary_SetLocalSpaceKinematics) == 0x000010, "Wrong size on MordhauUtilityLibrary_SetLocalSpaceKinematics");
static_assert(offsetof(MordhauUtilityLibrary_SetLocalSpaceKinematics, Mesh) == 0x000000, "Member 'MordhauUtilityLibrary_SetLocalSpaceKinematics::Mesh' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetLocalSpaceKinematics, bNewValue) == 0x000008, "Member 'MordhauUtilityLibrary_SetLocalSpaceKinematics::bNewValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetLODActorDrawDistance
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_SetLODActorDrawDistance final
{
public:
	class ALODActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewDrawDistance;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_SetLODActorDrawDistance) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SetLODActorDrawDistance");
static_assert(sizeof(MordhauUtilityLibrary_SetLODActorDrawDistance) == 0x000010, "Wrong size on MordhauUtilityLibrary_SetLODActorDrawDistance");
static_assert(offsetof(MordhauUtilityLibrary_SetLODActorDrawDistance, Actor) == 0x000000, "Member 'MordhauUtilityLibrary_SetLODActorDrawDistance::Actor' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetLODActorDrawDistance, NewDrawDistance) == 0x000008, "Member 'MordhauUtilityLibrary_SetLODActorDrawDistance::NewDrawDistance' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetMousePosition
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_SetMousePosition final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocationX;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocationY;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SetMousePosition) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SetMousePosition");
static_assert(sizeof(MordhauUtilityLibrary_SetMousePosition) == 0x000010, "Wrong size on MordhauUtilityLibrary_SetMousePosition");
static_assert(offsetof(MordhauUtilityLibrary_SetMousePosition, Controller) == 0x000000, "Member 'MordhauUtilityLibrary_SetMousePosition::Controller' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetMousePosition, LocationX) == 0x000008, "Member 'MordhauUtilityLibrary_SetMousePosition::LocationX' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetMousePosition, LocationY) == 0x00000C, "Member 'MordhauUtilityLibrary_SetMousePosition::LocationY' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetNavAreaClass
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_SetNavAreaClass final
{
public:
	class UShapeComponent*                        ShapeComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   AreaClass;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SetNavAreaClass) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SetNavAreaClass");
static_assert(sizeof(MordhauUtilityLibrary_SetNavAreaClass) == 0x000010, "Wrong size on MordhauUtilityLibrary_SetNavAreaClass");
static_assert(offsetof(MordhauUtilityLibrary_SetNavAreaClass, ShapeComponent) == 0x000000, "Member 'MordhauUtilityLibrary_SetNavAreaClass::ShapeComponent' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetNavAreaClass, AreaClass) == 0x000008, "Member 'MordhauUtilityLibrary_SetNavAreaClass::AreaClass' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetNeverDistanceCull
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_SetNeverDistanceCull final
{
public:
	class UPrimitiveComponent*                    Comp;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewValue;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_SetNeverDistanceCull) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SetNeverDistanceCull");
static_assert(sizeof(MordhauUtilityLibrary_SetNeverDistanceCull) == 0x000010, "Wrong size on MordhauUtilityLibrary_SetNeverDistanceCull");
static_assert(offsetof(MordhauUtilityLibrary_SetNeverDistanceCull, Comp) == 0x000000, "Member 'MordhauUtilityLibrary_SetNeverDistanceCull::Comp' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetNeverDistanceCull, bNewValue) == 0x000008, "Member 'MordhauUtilityLibrary_SetNeverDistanceCull::bNewValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetPawnFromRep
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_SetPawnFromRep final
{
public:
	class AController*                            Contr;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  NewPawn;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SetPawnFromRep) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SetPawnFromRep");
static_assert(sizeof(MordhauUtilityLibrary_SetPawnFromRep) == 0x000010, "Wrong size on MordhauUtilityLibrary_SetPawnFromRep");
static_assert(offsetof(MordhauUtilityLibrary_SetPawnFromRep, Contr) == 0x000000, "Member 'MordhauUtilityLibrary_SetPawnFromRep::Contr' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetPawnFromRep, NewPawn) == 0x000008, "Member 'MordhauUtilityLibrary_SetPawnFromRep::NewPawn' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetPerBoneMotionBlur
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_SetPerBoneMotionBlur final
{
public:
	class USkeletalMeshComponent*                 Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewValue;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_SetPerBoneMotionBlur) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SetPerBoneMotionBlur");
static_assert(sizeof(MordhauUtilityLibrary_SetPerBoneMotionBlur) == 0x000010, "Wrong size on MordhauUtilityLibrary_SetPerBoneMotionBlur");
static_assert(offsetof(MordhauUtilityLibrary_SetPerBoneMotionBlur, Component) == 0x000000, "Member 'MordhauUtilityLibrary_SetPerBoneMotionBlur::Component' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetPerBoneMotionBlur, bNewValue) == 0x000008, "Member 'MordhauUtilityLibrary_SetPerBoneMotionBlur::bNewValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetRealMultiplayerStatus
// 0x0003 (0x0003 - 0x0000)
struct MordhauUtilityLibrary_SetRealMultiplayerStatus final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrossplay;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpectate;                                         // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SetRealMultiplayerStatus) == 0x000001, "Wrong alignment on MordhauUtilityLibrary_SetRealMultiplayerStatus");
static_assert(sizeof(MordhauUtilityLibrary_SetRealMultiplayerStatus) == 0x000003, "Wrong size on MordhauUtilityLibrary_SetRealMultiplayerStatus");
static_assert(offsetof(MordhauUtilityLibrary_SetRealMultiplayerStatus, bEnable) == 0x000000, "Member 'MordhauUtilityLibrary_SetRealMultiplayerStatus::bEnable' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetRealMultiplayerStatus, bCrossplay) == 0x000001, "Member 'MordhauUtilityLibrary_SetRealMultiplayerStatus::bCrossplay' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetRealMultiplayerStatus, bSpectate) == 0x000002, "Member 'MordhauUtilityLibrary_SetRealMultiplayerStatus::bSpectate' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetSoundMixVolume
// 0x0008 (0x0008 - 0x0000)
struct MordhauUtilityLibrary_SetSoundMixVolume final
{
public:
	ESoundMix                                     SoundMix;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Volume;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SetSoundMixVolume) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_SetSoundMixVolume");
static_assert(sizeof(MordhauUtilityLibrary_SetSoundMixVolume) == 0x000008, "Wrong size on MordhauUtilityLibrary_SetSoundMixVolume");
static_assert(offsetof(MordhauUtilityLibrary_SetSoundMixVolume, SoundMix) == 0x000000, "Member 'MordhauUtilityLibrary_SetSoundMixVolume::SoundMix' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetSoundMixVolume, Volume) == 0x000004, "Member 'MordhauUtilityLibrary_SetSoundMixVolume::Volume' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SetVisibilityId
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_SetVisibilityId final
{
public:
	class UPrimitiveComponent*                    Comp;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_SetVisibilityId) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SetVisibilityId");
static_assert(sizeof(MordhauUtilityLibrary_SetVisibilityId) == 0x000010, "Wrong size on MordhauUtilityLibrary_SetVisibilityId");
static_assert(offsetof(MordhauUtilityLibrary_SetVisibilityId, Comp) == 0x000000, "Member 'MordhauUtilityLibrary_SetVisibilityId::Comp' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SetVisibilityId, NewId) == 0x000008, "Member 'MordhauUtilityLibrary_SetVisibilityId::NewId' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SGreaterThan
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_SGreaterThan final
{
public:
	class FString                                 StringA;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringB;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_SGreaterThan) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SGreaterThan");
static_assert(sizeof(MordhauUtilityLibrary_SGreaterThan) == 0x000028, "Wrong size on MordhauUtilityLibrary_SGreaterThan");
static_assert(offsetof(MordhauUtilityLibrary_SGreaterThan, StringA) == 0x000000, "Member 'MordhauUtilityLibrary_SGreaterThan::StringA' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SGreaterThan, StringB) == 0x000010, "Member 'MordhauUtilityLibrary_SGreaterThan::StringB' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SGreaterThan, ReturnValue) == 0x000020, "Member 'MordhauUtilityLibrary_SGreaterThan::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SLessThan
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_SLessThan final
{
public:
	class FString                                 StringA;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringB;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_SLessThan) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SLessThan");
static_assert(sizeof(MordhauUtilityLibrary_SLessThan) == 0x000028, "Wrong size on MordhauUtilityLibrary_SLessThan");
static_assert(offsetof(MordhauUtilityLibrary_SLessThan, StringA) == 0x000000, "Member 'MordhauUtilityLibrary_SLessThan::StringA' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SLessThan, StringB) == 0x000010, "Member 'MordhauUtilityLibrary_SLessThan::StringB' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SLessThan, ReturnValue) == 0x000020, "Member 'MordhauUtilityLibrary_SLessThan::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.Snap180AngleToSteps
// 0x000C (0x000C - 0x0000)
struct MordhauUtilityLibrary_Snap180AngleToSteps final
{
public:
	float                                         Angle180;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Step;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_Snap180AngleToSteps) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_Snap180AngleToSteps");
static_assert(sizeof(MordhauUtilityLibrary_Snap180AngleToSteps) == 0x00000C, "Wrong size on MordhauUtilityLibrary_Snap180AngleToSteps");
static_assert(offsetof(MordhauUtilityLibrary_Snap180AngleToSteps, Angle180) == 0x000000, "Member 'MordhauUtilityLibrary_Snap180AngleToSteps::Angle180' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_Snap180AngleToSteps, Step) == 0x000004, "Member 'MordhauUtilityLibrary_Snap180AngleToSteps::Step' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_Snap180AngleToSteps, ReturnValue) == 0x000008, "Member 'MordhauUtilityLibrary_Snap180AngleToSteps::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SortAndFilterArrayByFunction
// 0x0038 (0x0038 - 0x0000)
struct MordhauUtilityLibrary_SortAndFilterArrayByFunction final
{
public:
	TArray<class UObject*>                        Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* ObjA, class UObject* ObjB, bool* RetVal)> FuncDel;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    Class_0;                                           // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SortAndFilterArrayByFunction) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SortAndFilterArrayByFunction");
static_assert(sizeof(MordhauUtilityLibrary_SortAndFilterArrayByFunction) == 0x000038, "Wrong size on MordhauUtilityLibrary_SortAndFilterArrayByFunction");
static_assert(offsetof(MordhauUtilityLibrary_SortAndFilterArrayByFunction, Array) == 0x000000, "Member 'MordhauUtilityLibrary_SortAndFilterArrayByFunction::Array' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortAndFilterArrayByFunction, FuncDel) == 0x000010, "Member 'MordhauUtilityLibrary_SortAndFilterArrayByFunction::FuncDel' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortAndFilterArrayByFunction, Class_0) == 0x000020, "Member 'MordhauUtilityLibrary_SortAndFilterArrayByFunction::Class_0' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortAndFilterArrayByFunction, ReturnValue) == 0x000028, "Member 'MordhauUtilityLibrary_SortAndFilterArrayByFunction::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SortArrayByFunction
// 0x0030 (0x0030 - 0x0000)
struct MordhauUtilityLibrary_SortArrayByFunction final
{
public:
	TArray<class UObject*>                        Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* ObjA, class UObject* ObjB, bool* RetVal)> FuncDel;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SortArrayByFunction) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SortArrayByFunction");
static_assert(sizeof(MordhauUtilityLibrary_SortArrayByFunction) == 0x000030, "Wrong size on MordhauUtilityLibrary_SortArrayByFunction");
static_assert(offsetof(MordhauUtilityLibrary_SortArrayByFunction, Array) == 0x000000, "Member 'MordhauUtilityLibrary_SortArrayByFunction::Array' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortArrayByFunction, FuncDel) == 0x000010, "Member 'MordhauUtilityLibrary_SortArrayByFunction::FuncDel' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortArrayByFunction, ReturnValue) == 0x000020, "Member 'MordhauUtilityLibrary_SortArrayByFunction::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SortArrayByProperty
// 0x0030 (0x0030 - 0x0000)
struct MordhauUtilityLibrary_SortArrayByProperty final
{
public:
	TArray<class UObject*>                        Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAscending;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasTypeValid;                                     // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SortArrayByProperty) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SortArrayByProperty");
static_assert(sizeof(MordhauUtilityLibrary_SortArrayByProperty) == 0x000030, "Wrong size on MordhauUtilityLibrary_SortArrayByProperty");
static_assert(offsetof(MordhauUtilityLibrary_SortArrayByProperty, Array) == 0x000000, "Member 'MordhauUtilityLibrary_SortArrayByProperty::Array' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortArrayByProperty, PropertyName) == 0x000010, "Member 'MordhauUtilityLibrary_SortArrayByProperty::PropertyName' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortArrayByProperty, bAscending) == 0x000018, "Member 'MordhauUtilityLibrary_SortArrayByProperty::bAscending' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortArrayByProperty, bWasTypeValid) == 0x000019, "Member 'MordhauUtilityLibrary_SortArrayByProperty::bWasTypeValid' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortArrayByProperty, ReturnValue) == 0x000020, "Member 'MordhauUtilityLibrary_SortArrayByProperty::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SortForMatchmaking
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_SortForMatchmaking final
{
public:
	TArray<struct FServerSearchResult>            Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FServerSearchResult>            ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SortForMatchmaking) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SortForMatchmaking");
static_assert(sizeof(MordhauUtilityLibrary_SortForMatchmaking) == 0x000020, "Wrong size on MordhauUtilityLibrary_SortForMatchmaking");
static_assert(offsetof(MordhauUtilityLibrary_SortForMatchmaking, Array) == 0x000000, "Member 'MordhauUtilityLibrary_SortForMatchmaking::Array' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortForMatchmaking, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_SortForMatchmaking::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SortForMatchmakingByLocationPreference
// 0x0030 (0x0030 - 0x0000)
struct MordhauUtilityLibrary_SortForMatchmakingByLocationPreference final
{
public:
	TArray<struct FPlayFabGameServer>             Servers;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EServerLocation>                       LocationPreference;                                // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FPlayFabGameServer>             ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SortForMatchmakingByLocationPreference) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SortForMatchmakingByLocationPreference");
static_assert(sizeof(MordhauUtilityLibrary_SortForMatchmakingByLocationPreference) == 0x000030, "Wrong size on MordhauUtilityLibrary_SortForMatchmakingByLocationPreference");
static_assert(offsetof(MordhauUtilityLibrary_SortForMatchmakingByLocationPreference, Servers) == 0x000000, "Member 'MordhauUtilityLibrary_SortForMatchmakingByLocationPreference::Servers' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortForMatchmakingByLocationPreference, LocationPreference) == 0x000010, "Member 'MordhauUtilityLibrary_SortForMatchmakingByLocationPreference::LocationPreference' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortForMatchmakingByLocationPreference, ReturnValue) == 0x000020, "Member 'MordhauUtilityLibrary_SortForMatchmakingByLocationPreference::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SortForServerBrowserByCount
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_SortForServerBrowserByCount final
{
public:
	TArray<struct FServerSearchResult>            Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSortAscending;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FServerSearchResult>            ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SortForServerBrowserByCount) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SortForServerBrowserByCount");
static_assert(sizeof(MordhauUtilityLibrary_SortForServerBrowserByCount) == 0x000028, "Wrong size on MordhauUtilityLibrary_SortForServerBrowserByCount");
static_assert(offsetof(MordhauUtilityLibrary_SortForServerBrowserByCount, Array) == 0x000000, "Member 'MordhauUtilityLibrary_SortForServerBrowserByCount::Array' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortForServerBrowserByCount, bSortAscending) == 0x000010, "Member 'MordhauUtilityLibrary_SortForServerBrowserByCount::bSortAscending' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortForServerBrowserByCount, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_SortForServerBrowserByCount::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SortForServerBrowserByGameModeName
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_SortForServerBrowserByGameModeName final
{
public:
	TArray<struct FServerSearchResult>            Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSortAscending;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FServerSearchResult>            ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SortForServerBrowserByGameModeName) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SortForServerBrowserByGameModeName");
static_assert(sizeof(MordhauUtilityLibrary_SortForServerBrowserByGameModeName) == 0x000028, "Wrong size on MordhauUtilityLibrary_SortForServerBrowserByGameModeName");
static_assert(offsetof(MordhauUtilityLibrary_SortForServerBrowserByGameModeName, Array) == 0x000000, "Member 'MordhauUtilityLibrary_SortForServerBrowserByGameModeName::Array' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortForServerBrowserByGameModeName, bSortAscending) == 0x000010, "Member 'MordhauUtilityLibrary_SortForServerBrowserByGameModeName::bSortAscending' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortForServerBrowserByGameModeName, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_SortForServerBrowserByGameModeName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SortForServerBrowserByMapName
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_SortForServerBrowserByMapName final
{
public:
	TArray<struct FServerSearchResult>            Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSortAscending;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FServerSearchResult>            ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SortForServerBrowserByMapName) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SortForServerBrowserByMapName");
static_assert(sizeof(MordhauUtilityLibrary_SortForServerBrowserByMapName) == 0x000028, "Wrong size on MordhauUtilityLibrary_SortForServerBrowserByMapName");
static_assert(offsetof(MordhauUtilityLibrary_SortForServerBrowserByMapName, Array) == 0x000000, "Member 'MordhauUtilityLibrary_SortForServerBrowserByMapName::Array' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortForServerBrowserByMapName, bSortAscending) == 0x000010, "Member 'MordhauUtilityLibrary_SortForServerBrowserByMapName::bSortAscending' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortForServerBrowserByMapName, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_SortForServerBrowserByMapName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SortForServerBrowserByPing
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_SortForServerBrowserByPing final
{
public:
	TArray<struct FServerSearchResult>            Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSortAscending;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FServerSearchResult>            ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SortForServerBrowserByPing) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SortForServerBrowserByPing");
static_assert(sizeof(MordhauUtilityLibrary_SortForServerBrowserByPing) == 0x000028, "Wrong size on MordhauUtilityLibrary_SortForServerBrowserByPing");
static_assert(offsetof(MordhauUtilityLibrary_SortForServerBrowserByPing, Array) == 0x000000, "Member 'MordhauUtilityLibrary_SortForServerBrowserByPing::Array' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortForServerBrowserByPing, bSortAscending) == 0x000010, "Member 'MordhauUtilityLibrary_SortForServerBrowserByPing::bSortAscending' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortForServerBrowserByPing, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_SortForServerBrowserByPing::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SortForServerBrowserByServerName
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_SortForServerBrowserByServerName final
{
public:
	TArray<struct FServerSearchResult>            Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSortAscending;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FServerSearchResult>            ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SortForServerBrowserByServerName) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SortForServerBrowserByServerName");
static_assert(sizeof(MordhauUtilityLibrary_SortForServerBrowserByServerName) == 0x000028, "Wrong size on MordhauUtilityLibrary_SortForServerBrowserByServerName");
static_assert(offsetof(MordhauUtilityLibrary_SortForServerBrowserByServerName, Array) == 0x000000, "Member 'MordhauUtilityLibrary_SortForServerBrowserByServerName::Array' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortForServerBrowserByServerName, bSortAscending) == 0x000010, "Member 'MordhauUtilityLibrary_SortForServerBrowserByServerName::bSortAscending' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortForServerBrowserByServerName, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_SortForServerBrowserByServerName::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SortIntArray
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_SortIntArray final
{
public:
	TArray<int32>                                 Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSortAscending;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SortIntArray) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SortIntArray");
static_assert(sizeof(MordhauUtilityLibrary_SortIntArray) == 0x000028, "Wrong size on MordhauUtilityLibrary_SortIntArray");
static_assert(offsetof(MordhauUtilityLibrary_SortIntArray, Array) == 0x000000, "Member 'MordhauUtilityLibrary_SortIntArray::Array' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortIntArray, bSortAscending) == 0x000010, "Member 'MordhauUtilityLibrary_SortIntArray::bSortAscending' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortIntArray, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_SortIntArray::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SortPlayers
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_SortPlayers final
{
public:
	TArray<class AMordhauPlayerState*>            Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AMordhauPlayerState*>            ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SortPlayers) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SortPlayers");
static_assert(sizeof(MordhauUtilityLibrary_SortPlayers) == 0x000020, "Wrong size on MordhauUtilityLibrary_SortPlayers");
static_assert(offsetof(MordhauUtilityLibrary_SortPlayers, Array) == 0x000000, "Member 'MordhauUtilityLibrary_SortPlayers::Array' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortPlayers, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_SortPlayers::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SortQueueNamesByBestMatch
// 0x0060 (0x0060 - 0x0000)
struct MordhauUtilityLibrary_SortQueueNamesByBestMatch final
{
public:
	TMap<class FString, struct FPlayFabMatchmakingMatch> Matches;                                           // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SortQueueNamesByBestMatch) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SortQueueNamesByBestMatch");
static_assert(sizeof(MordhauUtilityLibrary_SortQueueNamesByBestMatch) == 0x000060, "Wrong size on MordhauUtilityLibrary_SortQueueNamesByBestMatch");
static_assert(offsetof(MordhauUtilityLibrary_SortQueueNamesByBestMatch, Matches) == 0x000000, "Member 'MordhauUtilityLibrary_SortQueueNamesByBestMatch::Matches' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortQueueNamesByBestMatch, ReturnValue) == 0x000050, "Member 'MordhauUtilityLibrary_SortQueueNamesByBestMatch::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SortStringArray
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_SortStringArray final
{
public:
	TArray<class FString>                         Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSortAscending;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SortStringArray) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SortStringArray");
static_assert(sizeof(MordhauUtilityLibrary_SortStringArray) == 0x000028, "Wrong size on MordhauUtilityLibrary_SortStringArray");
static_assert(offsetof(MordhauUtilityLibrary_SortStringArray, Array) == 0x000000, "Member 'MordhauUtilityLibrary_SortStringArray::Array' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortStringArray, bSortAscending) == 0x000010, "Member 'MordhauUtilityLibrary_SortStringArray::bSortAscending' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SortStringArray, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_SortStringArray::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.SpawnBloodDecalAtLocation
// 0x0040 (0x0040 - 0x0000)
struct MordhauUtilityLibrary_SpawnBloodDecalAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     DecalMaterial;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DecalSize;                                         // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LifeSpan;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDecalComponent*                        ReturnValue;                                       // 0x0038(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_SpawnBloodDecalAtLocation) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_SpawnBloodDecalAtLocation");
static_assert(sizeof(MordhauUtilityLibrary_SpawnBloodDecalAtLocation) == 0x000040, "Wrong size on MordhauUtilityLibrary_SpawnBloodDecalAtLocation");
static_assert(offsetof(MordhauUtilityLibrary_SpawnBloodDecalAtLocation, WorldContextObject) == 0x000000, "Member 'MordhauUtilityLibrary_SpawnBloodDecalAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SpawnBloodDecalAtLocation, DecalMaterial) == 0x000008, "Member 'MordhauUtilityLibrary_SpawnBloodDecalAtLocation::DecalMaterial' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SpawnBloodDecalAtLocation, DecalSize) == 0x000010, "Member 'MordhauUtilityLibrary_SpawnBloodDecalAtLocation::DecalSize' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SpawnBloodDecalAtLocation, Location) == 0x00001C, "Member 'MordhauUtilityLibrary_SpawnBloodDecalAtLocation::Location' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SpawnBloodDecalAtLocation, Rotation) == 0x000028, "Member 'MordhauUtilityLibrary_SpawnBloodDecalAtLocation::Rotation' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SpawnBloodDecalAtLocation, LifeSpan) == 0x000034, "Member 'MordhauUtilityLibrary_SpawnBloodDecalAtLocation::LifeSpan' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_SpawnBloodDecalAtLocation, ReturnValue) == 0x000038, "Member 'MordhauUtilityLibrary_SpawnBloodDecalAtLocation::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.StripProfile
// 0x0178 (0x0178 - 0x0000)
struct MordhauUtilityLibrary_StripProfile final
{
public:
	struct FCharacterProfile                      InProfile;                                         // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bStripEquipment;                                   // 0x00B8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStripPerks;                                       // 0x00B9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStripNonTier0Armor;                               // 0x00BA(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BB[0x5];                                       // 0x00BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharacterProfile                      ReturnValue;                                       // 0x00C0(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_StripProfile) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_StripProfile");
static_assert(sizeof(MordhauUtilityLibrary_StripProfile) == 0x000178, "Wrong size on MordhauUtilityLibrary_StripProfile");
static_assert(offsetof(MordhauUtilityLibrary_StripProfile, InProfile) == 0x000000, "Member 'MordhauUtilityLibrary_StripProfile::InProfile' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_StripProfile, bStripEquipment) == 0x0000B8, "Member 'MordhauUtilityLibrary_StripProfile::bStripEquipment' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_StripProfile, bStripPerks) == 0x0000B9, "Member 'MordhauUtilityLibrary_StripProfile::bStripPerks' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_StripProfile, bStripNonTier0Armor) == 0x0000BA, "Member 'MordhauUtilityLibrary_StripProfile::bStripNonTier0Armor' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_StripProfile, ReturnValue) == 0x0000C0, "Member 'MordhauUtilityLibrary_StripProfile::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.TermAllChildBodiesOf
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_TermAllChildBodiesOf final
{
public:
	class USkeletalMeshComponent*                 USMC;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_TermAllChildBodiesOf) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_TermAllChildBodiesOf");
static_assert(sizeof(MordhauUtilityLibrary_TermAllChildBodiesOf) == 0x000010, "Wrong size on MordhauUtilityLibrary_TermAllChildBodiesOf");
static_assert(offsetof(MordhauUtilityLibrary_TermAllChildBodiesOf, USMC) == 0x000000, "Member 'MordhauUtilityLibrary_TermAllChildBodiesOf::USMC' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_TermAllChildBodiesOf, BoneName) == 0x000008, "Member 'MordhauUtilityLibrary_TermAllChildBodiesOf::BoneName' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.ToggleNavigation
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_ToggleNavigation final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_ToggleNavigation) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_ToggleNavigation");
static_assert(sizeof(MordhauUtilityLibrary_ToggleNavigation) == 0x000010, "Wrong size on MordhauUtilityLibrary_ToggleNavigation");
static_assert(offsetof(MordhauUtilityLibrary_ToggleNavigation, PlayerController) == 0x000000, "Member 'MordhauUtilityLibrary_ToggleNavigation::PlayerController' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ToggleNavigation, bEnable) == 0x000008, "Member 'MordhauUtilityLibrary_ToggleNavigation::bEnable' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.TryExecuteHeavydutyOperation
// 0x0010 (0x0010 - 0x0000)
struct MordhauUtilityLibrary_TryExecuteHeavydutyOperation final
{
public:
	class UWorld*                                 WorldObject;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsForced;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_TryExecuteHeavydutyOperation) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_TryExecuteHeavydutyOperation");
static_assert(sizeof(MordhauUtilityLibrary_TryExecuteHeavydutyOperation) == 0x000010, "Wrong size on MordhauUtilityLibrary_TryExecuteHeavydutyOperation");
static_assert(offsetof(MordhauUtilityLibrary_TryExecuteHeavydutyOperation, WorldObject) == 0x000000, "Member 'MordhauUtilityLibrary_TryExecuteHeavydutyOperation::WorldObject' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_TryExecuteHeavydutyOperation, bIsForced) == 0x000008, "Member 'MordhauUtilityLibrary_TryExecuteHeavydutyOperation::bIsForced' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_TryExecuteHeavydutyOperation, ReturnValue) == 0x000009, "Member 'MordhauUtilityLibrary_TryExecuteHeavydutyOperation::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.UncompressData
// 0x0028 (0x0028 - 0x0000)
struct MordhauUtilityLibrary_UncompressData final
{
public:
	class FString                                 InData;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_UncompressData) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_UncompressData");
static_assert(sizeof(MordhauUtilityLibrary_UncompressData) == 0x000028, "Wrong size on MordhauUtilityLibrary_UncompressData");
static_assert(offsetof(MordhauUtilityLibrary_UncompressData, InData) == 0x000000, "Member 'MordhauUtilityLibrary_UncompressData::InData' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_UncompressData, OutData) == 0x000010, "Member 'MordhauUtilityLibrary_UncompressData::OutData' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_UncompressData, ReturnValue) == 0x000020, "Member 'MordhauUtilityLibrary_UncompressData::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.UnmountPak
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_UnmountPak final
{
public:
	class FString                                 PakPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_UnmountPak) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_UnmountPak");
static_assert(sizeof(MordhauUtilityLibrary_UnmountPak) == 0x000020, "Wrong size on MordhauUtilityLibrary_UnmountPak");
static_assert(offsetof(MordhauUtilityLibrary_UnmountPak, PakPath) == 0x000000, "Member 'MordhauUtilityLibrary_UnmountPak::PakPath' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_UnmountPak, WorldContextObject) == 0x000010, "Member 'MordhauUtilityLibrary_UnmountPak::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_UnmountPak, ReturnValue) == 0x000018, "Member 'MordhauUtilityLibrary_UnmountPak::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.UnpossessCharacterAndHandleSpectating
// 0x0008 (0x0008 - 0x0000)
struct MordhauUtilityLibrary_UnpossessCharacterAndHandleSpectating final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_UnpossessCharacterAndHandleSpectating) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_UnpossessCharacterAndHandleSpectating");
static_assert(sizeof(MordhauUtilityLibrary_UnpossessCharacterAndHandleSpectating) == 0x000008, "Wrong size on MordhauUtilityLibrary_UnpossessCharacterAndHandleSpectating");
static_assert(offsetof(MordhauUtilityLibrary_UnpossessCharacterAndHandleSpectating, Controller) == 0x000000, "Member 'MordhauUtilityLibrary_UnpossessCharacterAndHandleSpectating::Controller' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.UploadChat
// 0x0020 (0x0020 - 0x0000)
struct MordhauUtilityLibrary_UploadChat final
{
public:
	class FString                                 ChatString;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_UploadChat) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_UploadChat");
static_assert(sizeof(MordhauUtilityLibrary_UploadChat) == 0x000020, "Wrong size on MordhauUtilityLibrary_UploadChat");
static_assert(offsetof(MordhauUtilityLibrary_UploadChat, ChatString) == 0x000000, "Member 'MordhauUtilityLibrary_UploadChat::ChatString' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_UploadChat, ReturnValue) == 0x000010, "Member 'MordhauUtilityLibrary_UploadChat::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.ValidateCharacterProfile
// 0x00C0 (0x00C0 - 0x0000)
struct MordhauUtilityLibrary_ValidateCharacterProfile final
{
public:
	struct FCharacterProfile                      Profile;                                           // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bValidateInventory;                                // 0x00B8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B9(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MordhauUtilityLibrary_ValidateCharacterProfile) == 0x000008, "Wrong alignment on MordhauUtilityLibrary_ValidateCharacterProfile");
static_assert(sizeof(MordhauUtilityLibrary_ValidateCharacterProfile) == 0x0000C0, "Wrong size on MordhauUtilityLibrary_ValidateCharacterProfile");
static_assert(offsetof(MordhauUtilityLibrary_ValidateCharacterProfile, Profile) == 0x000000, "Member 'MordhauUtilityLibrary_ValidateCharacterProfile::Profile' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ValidateCharacterProfile, bValidateInventory) == 0x0000B8, "Member 'MordhauUtilityLibrary_ValidateCharacterProfile::bValidateInventory' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_ValidateCharacterProfile, ReturnValue) == 0x0000B9, "Member 'MordhauUtilityLibrary_ValidateCharacterProfile::ReturnValue' has a wrong offset!");

// Function Mordhau.MordhauUtilityLibrary.VSmoothDamp
// 0x0030 (0x0030 - 0x0000)
struct MordhauUtilityLibrary_VSmoothDamp final
{
public:
	struct FVector                                Current;                                           // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Target;                                            // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CurrentVelocity;                                   // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothTime;                                        // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauUtilityLibrary_VSmoothDamp) == 0x000004, "Wrong alignment on MordhauUtilityLibrary_VSmoothDamp");
static_assert(sizeof(MordhauUtilityLibrary_VSmoothDamp) == 0x000030, "Wrong size on MordhauUtilityLibrary_VSmoothDamp");
static_assert(offsetof(MordhauUtilityLibrary_VSmoothDamp, Current) == 0x000000, "Member 'MordhauUtilityLibrary_VSmoothDamp::Current' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_VSmoothDamp, Target) == 0x00000C, "Member 'MordhauUtilityLibrary_VSmoothDamp::Target' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_VSmoothDamp, CurrentVelocity) == 0x000018, "Member 'MordhauUtilityLibrary_VSmoothDamp::CurrentVelocity' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_VSmoothDamp, SmoothTime) == 0x000024, "Member 'MordhauUtilityLibrary_VSmoothDamp::SmoothTime' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_VSmoothDamp, DeltaTime) == 0x000028, "Member 'MordhauUtilityLibrary_VSmoothDamp::DeltaTime' has a wrong offset!");
static_assert(offsetof(MordhauUtilityLibrary_VSmoothDamp, MaxSpeed) == 0x00002C, "Member 'MordhauUtilityLibrary_VSmoothDamp::MaxSpeed' has a wrong offset!");

// Function Mordhau.MordhauWidgetComponent.SetPlayerStateAlwaysSee
// 0x0008 (0x0008 - 0x0000)
struct MordhauWidgetComponent_SetPlayerStateAlwaysSee final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MordhauWidgetComponent_SetPlayerStateAlwaysSee) == 0x000008, "Wrong alignment on MordhauWidgetComponent_SetPlayerStateAlwaysSee");
static_assert(sizeof(MordhauWidgetComponent_SetPlayerStateAlwaysSee) == 0x000008, "Wrong size on MordhauWidgetComponent_SetPlayerStateAlwaysSee");
static_assert(offsetof(MordhauWidgetComponent_SetPlayerStateAlwaysSee, PlayerState) == 0x000000, "Member 'MordhauWidgetComponent_SetPlayerStateAlwaysSee::PlayerState' has a wrong offset!");

// Function Mordhau.MotionSystemComponent.OnClientSetNetMotion
// 0x000C (0x000C - 0x0000)
struct MotionSystemComponent_OnClientSetNetMotion final
{
public:
	struct FNetMotion                             NewMotion;                                         // 0x0000(0x0006)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ServerStartTime;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionSystemComponent_OnClientSetNetMotion) == 0x000004, "Wrong alignment on MotionSystemComponent_OnClientSetNetMotion");
static_assert(sizeof(MotionSystemComponent_OnClientSetNetMotion) == 0x00000C, "Wrong size on MotionSystemComponent_OnClientSetNetMotion");
static_assert(offsetof(MotionSystemComponent_OnClientSetNetMotion, NewMotion) == 0x000000, "Member 'MotionSystemComponent_OnClientSetNetMotion::NewMotion' has a wrong offset!");
static_assert(offsetof(MotionSystemComponent_OnClientSetNetMotion, ServerStartTime) == 0x000008, "Member 'MotionSystemComponent_OnClientSetNetMotion::ServerStartTime' has a wrong offset!");

// Function Mordhau.MotionSystemComponent.OnLateTick
// 0x0004 (0x0004 - 0x0000)
struct MotionSystemComponent_OnLateTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionSystemComponent_OnLateTick) == 0x000004, "Wrong alignment on MotionSystemComponent_OnLateTick");
static_assert(sizeof(MotionSystemComponent_OnLateTick) == 0x000004, "Wrong size on MotionSystemComponent_OnLateTick");
static_assert(offsetof(MotionSystemComponent_OnLateTick, DeltaTime) == 0x000000, "Member 'MotionSystemComponent_OnLateTick::DeltaTime' has a wrong offset!");

// Function Mordhau.MotionSystemComponent.OnLODTick
// 0x0004 (0x0004 - 0x0000)
struct MotionSystemComponent_OnLODTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionSystemComponent_OnLODTick) == 0x000004, "Wrong alignment on MotionSystemComponent_OnLODTick");
static_assert(sizeof(MotionSystemComponent_OnLODTick) == 0x000004, "Wrong size on MotionSystemComponent_OnLODTick");
static_assert(offsetof(MotionSystemComponent_OnLODTick, DeltaTime) == 0x000000, "Member 'MotionSystemComponent_OnLODTick::DeltaTime' has a wrong offset!");

// Function Mordhau.MotionSystemComponent.OnPreBeginPlay
// 0x0008 (0x0008 - 0x0000)
struct MotionSystemComponent_OnPreBeginPlay final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionSystemComponent_OnPreBeginPlay) == 0x000008, "Wrong alignment on MotionSystemComponent_OnPreBeginPlay");
static_assert(sizeof(MotionSystemComponent_OnPreBeginPlay) == 0x000008, "Wrong size on MotionSystemComponent_OnPreBeginPlay");
static_assert(offsetof(MotionSystemComponent_OnPreBeginPlay, Character) == 0x000000, "Member 'MotionSystemComponent_OnPreBeginPlay::Character' has a wrong offset!");

// Function Mordhau.MotionSystemComponent.OnServerAssignNetMotion
// 0x0007 (0x0007 - 0x0000)
struct MotionSystemComponent_OnServerAssignNetMotion final
{
public:
	struct FNetMotion                             NewNetMotion;                                      // 0x0000(0x0006)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         LastAuthObserved;                                  // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionSystemComponent_OnServerAssignNetMotion) == 0x000001, "Wrong alignment on MotionSystemComponent_OnServerAssignNetMotion");
static_assert(sizeof(MotionSystemComponent_OnServerAssignNetMotion) == 0x000007, "Wrong size on MotionSystemComponent_OnServerAssignNetMotion");
static_assert(offsetof(MotionSystemComponent_OnServerAssignNetMotion, NewNetMotion) == 0x000000, "Member 'MotionSystemComponent_OnServerAssignNetMotion::NewNetMotion' has a wrong offset!");
static_assert(offsetof(MotionSystemComponent_OnServerAssignNetMotion, LastAuthObserved) == 0x000006, "Member 'MotionSystemComponent_OnServerAssignNetMotion::LastAuthObserved' has a wrong offset!");

// Function Mordhau.MoveSoundComponent.OnCharacterDied
// 0x0008 (0x0008 - 0x0000)
struct MoveSoundComponent_OnCharacterDied final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoveSoundComponent_OnCharacterDied) == 0x000008, "Wrong alignment on MoveSoundComponent_OnCharacterDied");
static_assert(sizeof(MoveSoundComponent_OnCharacterDied) == 0x000008, "Wrong size on MoveSoundComponent_OnCharacterDied");
static_assert(offsetof(MoveSoundComponent_OnCharacterDied, Character) == 0x000000, "Member 'MoveSoundComponent_OnCharacterDied::Character' has a wrong offset!");

// Function Mordhau.MoveSoundComponent.OnLODTick
// 0x0004 (0x0004 - 0x0000)
struct MoveSoundComponent_OnLODTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoveSoundComponent_OnLODTick) == 0x000004, "Wrong alignment on MoveSoundComponent_OnLODTick");
static_assert(sizeof(MoveSoundComponent_OnLODTick) == 0x000004, "Wrong size on MoveSoundComponent_OnLODTick");
static_assert(offsetof(MoveSoundComponent_OnLODTick, DeltaTime) == 0x000000, "Member 'MoveSoundComponent_OnLODTick::DeltaTime' has a wrong offset!");

// Function Mordhau.OneDimensionalMovementComponent.SetMovementLine
// 0x0018 (0x0018 - 0x0000)
struct OneDimensionalMovementComponent_SetMovementLine final
{
public:
	struct FVector                                NewLineStart;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewLineEnd;                                        // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OneDimensionalMovementComponent_SetMovementLine) == 0x000004, "Wrong alignment on OneDimensionalMovementComponent_SetMovementLine");
static_assert(sizeof(OneDimensionalMovementComponent_SetMovementLine) == 0x000018, "Wrong size on OneDimensionalMovementComponent_SetMovementLine");
static_assert(offsetof(OneDimensionalMovementComponent_SetMovementLine, NewLineStart) == 0x000000, "Member 'OneDimensionalMovementComponent_SetMovementLine::NewLineStart' has a wrong offset!");
static_assert(offsetof(OneDimensionalMovementComponent_SetMovementLine, NewLineEnd) == 0x00000C, "Member 'OneDimensionalMovementComponent_SetMovementLine::NewLineEnd' has a wrong offset!");

// Function Mordhau.PerkSystemComponent.OnCharacterBuilt
// 0x0008 (0x0008 - 0x0000)
struct PerkSystemComponent_OnCharacterBuilt final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkSystemComponent_OnCharacterBuilt) == 0x000008, "Wrong alignment on PerkSystemComponent_OnCharacterBuilt");
static_assert(sizeof(PerkSystemComponent_OnCharacterBuilt) == 0x000008, "Wrong size on PerkSystemComponent_OnCharacterBuilt");
static_assert(offsetof(PerkSystemComponent_OnCharacterBuilt, Character) == 0x000000, "Member 'PerkSystemComponent_OnCharacterBuilt::Character' has a wrong offset!");

// Function Mordhau.PerkSystemComponent.OnLODTick
// 0x0004 (0x0004 - 0x0000)
struct PerkSystemComponent_OnLODTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkSystemComponent_OnLODTick) == 0x000004, "Wrong alignment on PerkSystemComponent_OnLODTick");
static_assert(sizeof(PerkSystemComponent_OnLODTick) == 0x000004, "Wrong size on PerkSystemComponent_OnLODTick");
static_assert(offsetof(PerkSystemComponent_OnLODTick, DeltaTime) == 0x000000, "Member 'PerkSystemComponent_OnLODTick::DeltaTime' has a wrong offset!");

// Function Mordhau.PerkSystemComponent.OnPreBeginPlay
// 0x0008 (0x0008 - 0x0000)
struct PerkSystemComponent_OnPreBeginPlay final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkSystemComponent_OnPreBeginPlay) == 0x000008, "Wrong alignment on PerkSystemComponent_OnPreBeginPlay");
static_assert(sizeof(PerkSystemComponent_OnPreBeginPlay) == 0x000008, "Wrong size on PerkSystemComponent_OnPreBeginPlay");
static_assert(offsetof(PerkSystemComponent_OnPreBeginPlay, Character) == 0x000000, "Member 'PerkSystemComponent_OnPreBeginPlay::Character' has a wrong offset!");

// Function Mordhau.PerkSystemComponent.OnTakeDamage
// 0x00C0 (0x00C0 - 0x0000)
struct PerkSystemComponent_OnTakeDamage final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMordhauDamageInfo                     DamageInfo;                                        // 0x0008(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x00B0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkSystemComponent_OnTakeDamage) == 0x000008, "Wrong alignment on PerkSystemComponent_OnTakeDamage");
static_assert(sizeof(PerkSystemComponent_OnTakeDamage) == 0x0000C0, "Wrong size on PerkSystemComponent_OnTakeDamage");
static_assert(offsetof(PerkSystemComponent_OnTakeDamage, Character) == 0x000000, "Member 'PerkSystemComponent_OnTakeDamage::Character' has a wrong offset!");
static_assert(offsetof(PerkSystemComponent_OnTakeDamage, DamageInfo) == 0x000008, "Member 'PerkSystemComponent_OnTakeDamage::DamageInfo' has a wrong offset!");
static_assert(offsetof(PerkSystemComponent_OnTakeDamage, EventInstigator) == 0x0000B0, "Member 'PerkSystemComponent_OnTakeDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(PerkSystemComponent_OnTakeDamage, DamageCauser) == 0x0000B8, "Member 'PerkSystemComponent_OnTakeDamage::DamageCauser' has a wrong offset!");

// Function Mordhau.PerspectiveTypes.Get
// 0x0020 (0x0020 - 0x0000)
struct PerspectiveTypes_Get final
{
public:
	struct FPerspectiveAnimMontage                PerspectiveType;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsFirstPerson;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerspectiveTypes_Get) == 0x000008, "Wrong alignment on PerspectiveTypes_Get");
static_assert(sizeof(PerspectiveTypes_Get) == 0x000020, "Wrong size on PerspectiveTypes_Get");
static_assert(offsetof(PerspectiveTypes_Get, PerspectiveType) == 0x000000, "Member 'PerspectiveTypes_Get::PerspectiveType' has a wrong offset!");
static_assert(offsetof(PerspectiveTypes_Get, bIsFirstPerson) == 0x000010, "Member 'PerspectiveTypes_Get::bIsFirstPerson' has a wrong offset!");
static_assert(offsetof(PerspectiveTypes_Get, ReturnValue) == 0x000018, "Member 'PerspectiveTypes_Get::ReturnValue' has a wrong offset!");

// Function Mordhau.ProjectileArmShooterComponent.AdjustArm
// 0x0004 (0x0004 - 0x0000)
struct ProjectileArmShooterComponent_AdjustArm final
{
public:
	int32                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileArmShooterComponent_AdjustArm) == 0x000004, "Wrong alignment on ProjectileArmShooterComponent_AdjustArm");
static_assert(sizeof(ProjectileArmShooterComponent_AdjustArm) == 0x000004, "Wrong size on ProjectileArmShooterComponent_AdjustArm");
static_assert(offsetof(ProjectileArmShooterComponent_AdjustArm, Delta) == 0x000000, "Member 'ProjectileArmShooterComponent_AdjustArm::Delta' has a wrong offset!");

// Function Mordhau.ProjectileArmShooterComponent.UpdateArmPullSound
// 0x0010 (0x0010 - 0x0000)
struct ProjectileArmShooterComponent_UpdateArmPullSound final
{
public:
	class AActor*                                 CharacterOwner;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectileArmShooterComponent_UpdateArmPullSound) == 0x000008, "Wrong alignment on ProjectileArmShooterComponent_UpdateArmPullSound");
static_assert(sizeof(ProjectileArmShooterComponent_UpdateArmPullSound) == 0x000010, "Wrong size on ProjectileArmShooterComponent_UpdateArmPullSound");
static_assert(offsetof(ProjectileArmShooterComponent_UpdateArmPullSound, CharacterOwner) == 0x000000, "Member 'ProjectileArmShooterComponent_UpdateArmPullSound::CharacterOwner' has a wrong offset!");
static_assert(offsetof(ProjectileArmShooterComponent_UpdateArmPullSound, DeltaTime) == 0x000008, "Member 'ProjectileArmShooterComponent_UpdateArmPullSound::DeltaTime' has a wrong offset!");

// Function Mordhau.ProjectileArmShooterComponent.UpdateArmTarget
// 0x0010 (0x0010 - 0x0000)
struct ProjectileArmShooterComponent_UpdateArmTarget final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectileArmShooterComponent_UpdateArmTarget) == 0x000008, "Wrong alignment on ProjectileArmShooterComponent_UpdateArmTarget");
static_assert(sizeof(ProjectileArmShooterComponent_UpdateArmTarget) == 0x000010, "Wrong size on ProjectileArmShooterComponent_UpdateArmTarget");
static_assert(offsetof(ProjectileArmShooterComponent_UpdateArmTarget, Owner) == 0x000000, "Member 'ProjectileArmShooterComponent_UpdateArmTarget::Owner' has a wrong offset!");
static_assert(offsetof(ProjectileArmShooterComponent_UpdateArmTarget, DeltaTime) == 0x000008, "Member 'ProjectileArmShooterComponent_UpdateArmTarget::DeltaTime' has a wrong offset!");

// Function Mordhau.ProjectileTurretShooterComponent.SetLookUpCap
// 0x0004 (0x0004 - 0x0000)
struct ProjectileTurretShooterComponent_SetLookUpCap final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileTurretShooterComponent_SetLookUpCap) == 0x000004, "Wrong alignment on ProjectileTurretShooterComponent_SetLookUpCap");
static_assert(sizeof(ProjectileTurretShooterComponent_SetLookUpCap) == 0x000004, "Wrong size on ProjectileTurretShooterComponent_SetLookUpCap");
static_assert(offsetof(ProjectileTurretShooterComponent_SetLookUpCap, Value) == 0x000000, "Member 'ProjectileTurretShooterComponent_SetLookUpCap::Value' has a wrong offset!");

// Function Mordhau.ProjectileTurretShooterComponent.SetTurnCap
// 0x0004 (0x0004 - 0x0000)
struct ProjectileTurretShooterComponent_SetTurnCap final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileTurretShooterComponent_SetTurnCap) == 0x000004, "Wrong alignment on ProjectileTurretShooterComponent_SetTurnCap");
static_assert(sizeof(ProjectileTurretShooterComponent_SetTurnCap) == 0x000004, "Wrong size on ProjectileTurretShooterComponent_SetTurnCap");
static_assert(offsetof(ProjectileTurretShooterComponent_SetTurnCap, Value) == 0x000000, "Member 'ProjectileTurretShooterComponent_SetTurnCap::Value' has a wrong offset!");

// Function Mordhau.PushableActor.OnProgressUpdated
// 0x0004 (0x0004 - 0x0000)
struct PushableActor_OnProgressUpdated final
{
public:
	float                                         OldProgress;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PushableActor_OnProgressUpdated) == 0x000004, "Wrong alignment on PushableActor_OnProgressUpdated");
static_assert(sizeof(PushableActor_OnProgressUpdated) == 0x000004, "Wrong size on PushableActor_OnProgressUpdated");
static_assert(offsetof(PushableActor_OnProgressUpdated, OldProgress) == 0x000000, "Member 'PushableActor_OnProgressUpdated::OldProgress' has a wrong offset!");

// Function Mordhau.PushableActor.SetProgress
// 0x0004 (0x0004 - 0x0000)
struct PushableActor_SetProgress final
{
public:
	float                                         NewProgress;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PushableActor_SetProgress) == 0x000004, "Wrong alignment on PushableActor_SetProgress");
static_assert(sizeof(PushableActor_SetProgress) == 0x000004, "Wrong size on PushableActor_SetProgress");
static_assert(offsetof(PushableActor_SetProgress, NewProgress) == 0x000000, "Member 'PushableActor_SetProgress::NewProgress' has a wrong offset!");

// Function Mordhau.Quiver.GetQuiverMeshesForClass
// 0x0018 (0x0018 - 0x0000)
struct Quiver_GetQuiverMeshesForClass final
{
public:
	TSubclassOf<class UQuiver>                    QuiverClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStaticMesh*>                    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quiver_GetQuiverMeshesForClass) == 0x000008, "Wrong alignment on Quiver_GetQuiverMeshesForClass");
static_assert(sizeof(Quiver_GetQuiverMeshesForClass) == 0x000018, "Wrong size on Quiver_GetQuiverMeshesForClass");
static_assert(offsetof(Quiver_GetQuiverMeshesForClass, QuiverClass) == 0x000000, "Member 'Quiver_GetQuiverMeshesForClass::QuiverClass' has a wrong offset!");
static_assert(offsetof(Quiver_GetQuiverMeshesForClass, ReturnValue) == 0x000008, "Member 'Quiver_GetQuiverMeshesForClass::ReturnValue' has a wrong offset!");

// Function Mordhau.Quiver.FindAppropriateQuiverMesh
// 0x0010 (0x0010 - 0x0000)
struct Quiver_FindAppropriateQuiverMesh final
{
public:
	uint8                                         Ammo;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MaxAmmo;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Quiver_FindAppropriateQuiverMesh) == 0x000008, "Wrong alignment on Quiver_FindAppropriateQuiverMesh");
static_assert(sizeof(Quiver_FindAppropriateQuiverMesh) == 0x000010, "Wrong size on Quiver_FindAppropriateQuiverMesh");
static_assert(offsetof(Quiver_FindAppropriateQuiverMesh, Ammo) == 0x000000, "Member 'Quiver_FindAppropriateQuiverMesh::Ammo' has a wrong offset!");
static_assert(offsetof(Quiver_FindAppropriateQuiverMesh, MaxAmmo) == 0x000001, "Member 'Quiver_FindAppropriateQuiverMesh::MaxAmmo' has a wrong offset!");
static_assert(offsetof(Quiver_FindAppropriateQuiverMesh, ReturnValue) == 0x000008, "Member 'Quiver_FindAppropriateQuiverMesh::ReturnValue' has a wrong offset!");

// Function Mordhau.RconFunctionLibrary.GenerateRconParameterValue
// 0x0030 (0x0030 - 0x0000)
struct RconFunctionLibrary_GenerateRconParameterValue final
{
public:
	struct FRconParameter                         RconParameter;                                     // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UPlayFabJsonValue*                      ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RconFunctionLibrary_GenerateRconParameterValue) == 0x000008, "Wrong alignment on RconFunctionLibrary_GenerateRconParameterValue");
static_assert(sizeof(RconFunctionLibrary_GenerateRconParameterValue) == 0x000030, "Wrong size on RconFunctionLibrary_GenerateRconParameterValue");
static_assert(offsetof(RconFunctionLibrary_GenerateRconParameterValue, RconParameter) == 0x000000, "Member 'RconFunctionLibrary_GenerateRconParameterValue::RconParameter' has a wrong offset!");
static_assert(offsetof(RconFunctionLibrary_GenerateRconParameterValue, ReturnValue) == 0x000028, "Member 'RconFunctionLibrary_GenerateRconParameterValue::ReturnValue' has a wrong offset!");

// Function Mordhau.RconFunctionLibrary.GenerateRequestInfoResponseObject
// 0x0060 (0x0060 - 0x0000)
struct RconFunctionLibrary_GenerateRequestInfoResponseObject final
{
public:
	struct FRconRequestInfoResponse               RconRequestInfoResponse;                           // 0x0000(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RconFunctionLibrary_GenerateRequestInfoResponseObject) == 0x000008, "Wrong alignment on RconFunctionLibrary_GenerateRequestInfoResponseObject");
static_assert(sizeof(RconFunctionLibrary_GenerateRequestInfoResponseObject) == 0x000060, "Wrong size on RconFunctionLibrary_GenerateRequestInfoResponseObject");
static_assert(offsetof(RconFunctionLibrary_GenerateRequestInfoResponseObject, RconRequestInfoResponse) == 0x000000, "Member 'RconFunctionLibrary_GenerateRequestInfoResponseObject::RconRequestInfoResponse' has a wrong offset!");
static_assert(offsetof(RconFunctionLibrary_GenerateRequestInfoResponseObject, ReturnValue) == 0x000058, "Member 'RconFunctionLibrary_GenerateRequestInfoResponseObject::ReturnValue' has a wrong offset!");

// Function Mordhau.RconFunctionLibrary.GenerateResponseObject
// 0x0050 (0x0050 - 0x0000)
struct RconFunctionLibrary_GenerateResponseObject final
{
public:
	struct FRconResponseStruct                    RconResponse;                                      // 0x0000(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RconFunctionLibrary_GenerateResponseObject) == 0x000008, "Wrong alignment on RconFunctionLibrary_GenerateResponseObject");
static_assert(sizeof(RconFunctionLibrary_GenerateResponseObject) == 0x000050, "Wrong size on RconFunctionLibrary_GenerateResponseObject");
static_assert(offsetof(RconFunctionLibrary_GenerateResponseObject, RconResponse) == 0x000000, "Member 'RconFunctionLibrary_GenerateResponseObject::RconResponse' has a wrong offset!");
static_assert(offsetof(RconFunctionLibrary_GenerateResponseObject, ReturnValue) == 0x000048, "Member 'RconFunctionLibrary_GenerateResponseObject::ReturnValue' has a wrong offset!");

// Function Mordhau.RconFunctionLibrary.GetJsonTypeAsString
// 0x0018 (0x0018 - 0x0000)
struct RconFunctionLibrary_GetJsonTypeAsString final
{
public:
	EPFJson                                       Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RconFunctionLibrary_GetJsonTypeAsString) == 0x000008, "Wrong alignment on RconFunctionLibrary_GetJsonTypeAsString");
static_assert(sizeof(RconFunctionLibrary_GetJsonTypeAsString) == 0x000018, "Wrong size on RconFunctionLibrary_GetJsonTypeAsString");
static_assert(offsetof(RconFunctionLibrary_GetJsonTypeAsString, Type) == 0x000000, "Member 'RconFunctionLibrary_GetJsonTypeAsString::Type' has a wrong offset!");
static_assert(offsetof(RconFunctionLibrary_GetJsonTypeAsString, ReturnValue) == 0x000008, "Member 'RconFunctionLibrary_GetJsonTypeAsString::ReturnValue' has a wrong offset!");

// Function Mordhau.SeparatedBodyPart.InitializeDismemberment
// 0x0050 (0x0050 - 0x0000)
struct SeparatedBodyPart_InitializeDismemberment final
{
public:
	class AMordhauCharacter*                      Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   bone;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             SourceBoneTransform;                               // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsPartial;                                        // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBluntForce;                                     // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0xE];                                       // 0x0042(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SeparatedBodyPart_InitializeDismemberment) == 0x000010, "Wrong alignment on SeparatedBodyPart_InitializeDismemberment");
static_assert(sizeof(SeparatedBodyPart_InitializeDismemberment) == 0x000050, "Wrong size on SeparatedBodyPart_InitializeDismemberment");
static_assert(offsetof(SeparatedBodyPart_InitializeDismemberment, Source) == 0x000000, "Member 'SeparatedBodyPart_InitializeDismemberment::Source' has a wrong offset!");
static_assert(offsetof(SeparatedBodyPart_InitializeDismemberment, bone) == 0x000008, "Member 'SeparatedBodyPart_InitializeDismemberment::bone' has a wrong offset!");
static_assert(offsetof(SeparatedBodyPart_InitializeDismemberment, SourceBoneTransform) == 0x000010, "Member 'SeparatedBodyPart_InitializeDismemberment::SourceBoneTransform' has a wrong offset!");
static_assert(offsetof(SeparatedBodyPart_InitializeDismemberment, bIsPartial) == 0x000040, "Member 'SeparatedBodyPart_InitializeDismemberment::bIsPartial' has a wrong offset!");
static_assert(offsetof(SeparatedBodyPart_InitializeDismemberment, bIsBluntForce) == 0x000041, "Member 'SeparatedBodyPart_InitializeDismemberment::bIsBluntForce' has a wrong offset!");

// Function Mordhau.SeparatedBodyPart.IsDismembered
// 0x000C (0x000C - 0x0000)
struct SeparatedBodyPart_IsDismembered final
{
public:
	class FName                                   bone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SeparatedBodyPart_IsDismembered) == 0x000004, "Wrong alignment on SeparatedBodyPart_IsDismembered");
static_assert(sizeof(SeparatedBodyPart_IsDismembered) == 0x00000C, "Wrong size on SeparatedBodyPart_IsDismembered");
static_assert(offsetof(SeparatedBodyPart_IsDismembered, bone) == 0x000000, "Member 'SeparatedBodyPart_IsDismembered::bone' has a wrong offset!");
static_assert(offsetof(SeparatedBodyPart_IsDismembered, ReturnValue) == 0x000008, "Member 'SeparatedBodyPart_IsDismembered::ReturnValue' has a wrong offset!");

// Function Mordhau.SeparatedBodyPart.OnCosmeticHit
// 0x0098 (0x0098 - 0x0000)
struct SeparatedBodyPart_OnCosmeticHit final
{
public:
	EMordhauDamageType                            DamageType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SubType;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0004(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 Agent;                                             // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeparatedBodyPart_OnCosmeticHit) == 0x000008, "Wrong alignment on SeparatedBodyPart_OnCosmeticHit");
static_assert(sizeof(SeparatedBodyPart_OnCosmeticHit) == 0x000098, "Wrong size on SeparatedBodyPart_OnCosmeticHit");
static_assert(offsetof(SeparatedBodyPart_OnCosmeticHit, DamageType) == 0x000000, "Member 'SeparatedBodyPart_OnCosmeticHit::DamageType' has a wrong offset!");
static_assert(offsetof(SeparatedBodyPart_OnCosmeticHit, SubType) == 0x000001, "Member 'SeparatedBodyPart_OnCosmeticHit::SubType' has a wrong offset!");
static_assert(offsetof(SeparatedBodyPart_OnCosmeticHit, Hit) == 0x000004, "Member 'SeparatedBodyPart_OnCosmeticHit::Hit' has a wrong offset!");
static_assert(offsetof(SeparatedBodyPart_OnCosmeticHit, Agent) == 0x000090, "Member 'SeparatedBodyPart_OnCosmeticHit::Agent' has a wrong offset!");

// Function Mordhau.SeparatedBodyPart.IsPartiallyDismembered
// 0x0001 (0x0001 - 0x0000)
struct SeparatedBodyPart_IsPartiallyDismembered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeparatedBodyPart_IsPartiallyDismembered) == 0x000001, "Wrong alignment on SeparatedBodyPart_IsPartiallyDismembered");
static_assert(sizeof(SeparatedBodyPart_IsPartiallyDismembered) == 0x000001, "Wrong size on SeparatedBodyPart_IsPartiallyDismembered");
static_assert(offsetof(SeparatedBodyPart_IsPartiallyDismembered, ReturnValue) == 0x000000, "Member 'SeparatedBodyPart_IsPartiallyDismembered::ReturnValue' has a wrong offset!");

// Function Mordhau.SpawnGroup.SetAreSpawnsEnabled
// 0x0001 (0x0001 - 0x0000)
struct SpawnGroup_SetAreSpawnsEnabled final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpawnGroup_SetAreSpawnsEnabled) == 0x000001, "Wrong alignment on SpawnGroup_SetAreSpawnsEnabled");
static_assert(sizeof(SpawnGroup_SetAreSpawnsEnabled) == 0x000001, "Wrong size on SpawnGroup_SetAreSpawnsEnabled");
static_assert(offsetof(SpawnGroup_SetAreSpawnsEnabled, bValue) == 0x000000, "Member 'SpawnGroup_SetAreSpawnsEnabled::bValue' has a wrong offset!");

// Function Mordhau.SpawnGroup.SetSpawnsTeam
// 0x0004 (0x0004 - 0x0000)
struct SpawnGroup_SetSpawnsTeam final
{
public:
	int32                                         NewTeam;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpawnGroup_SetSpawnsTeam) == 0x000004, "Wrong alignment on SpawnGroup_SetSpawnsTeam");
static_assert(sizeof(SpawnGroup_SetSpawnsTeam) == 0x000004, "Wrong size on SpawnGroup_SetSpawnsTeam");
static_assert(offsetof(SpawnGroup_SetSpawnsTeam, NewTeam) == 0x000000, "Member 'SpawnGroup_SetSpawnsTeam::NewTeam' has a wrong offset!");

// Function Mordhau.SpawnGroup.GetAreSpawnsEnabled
// 0x0001 (0x0001 - 0x0000)
struct SpawnGroup_GetAreSpawnsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpawnGroup_GetAreSpawnsEnabled) == 0x000001, "Wrong alignment on SpawnGroup_GetAreSpawnsEnabled");
static_assert(sizeof(SpawnGroup_GetAreSpawnsEnabled) == 0x000001, "Wrong size on SpawnGroup_GetAreSpawnsEnabled");
static_assert(offsetof(SpawnGroup_GetAreSpawnsEnabled, ReturnValue) == 0x000000, "Member 'SpawnGroup_GetAreSpawnsEnabled::ReturnValue' has a wrong offset!");

// Function Mordhau.SplineAudio.SetCurve
// 0x0008 (0x0008 - 0x0000)
struct SplineAudio_SetCurve final
{
public:
	class UCurveFloat*                            InCurve;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineAudio_SetCurve) == 0x000008, "Wrong alignment on SplineAudio_SetCurve");
static_assert(sizeof(SplineAudio_SetCurve) == 0x000008, "Wrong size on SplineAudio_SetCurve");
static_assert(offsetof(SplineAudio_SetCurve, InCurve) == 0x000000, "Member 'SplineAudio_SetCurve::InCurve' has a wrong offset!");

// Function Mordhau.StaminaStatComponent.OnCharacterDied
// 0x0008 (0x0008 - 0x0000)
struct StaminaStatComponent_OnCharacterDied final
{
public:
	class AAdvancedCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaStatComponent_OnCharacterDied) == 0x000008, "Wrong alignment on StaminaStatComponent_OnCharacterDied");
static_assert(sizeof(StaminaStatComponent_OnCharacterDied) == 0x000008, "Wrong size on StaminaStatComponent_OnCharacterDied");
static_assert(offsetof(StaminaStatComponent_OnCharacterDied, Character) == 0x000000, "Member 'StaminaStatComponent_OnCharacterDied::Character' has a wrong offset!");

// Function Mordhau.TagSystemComponent.AddAndRemoveTag
// 0x0010 (0x0010 - 0x0000)
struct TagSystemComponent_AddAndRemoveTag final
{
public:
	struct FGameplayTag                           TagToAdd;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TagToRemove;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagSystemComponent_AddAndRemoveTag) == 0x000004, "Wrong alignment on TagSystemComponent_AddAndRemoveTag");
static_assert(sizeof(TagSystemComponent_AddAndRemoveTag) == 0x000010, "Wrong size on TagSystemComponent_AddAndRemoveTag");
static_assert(offsetof(TagSystemComponent_AddAndRemoveTag, TagToAdd) == 0x000000, "Member 'TagSystemComponent_AddAndRemoveTag::TagToAdd' has a wrong offset!");
static_assert(offsetof(TagSystemComponent_AddAndRemoveTag, TagToRemove) == 0x000008, "Member 'TagSystemComponent_AddAndRemoveTag::TagToRemove' has a wrong offset!");

// Function Mordhau.TagSystemComponent.AddAndRemoveTags
// 0x0040 (0x0040 - 0x0000)
struct TagSystemComponent_AddAndRemoveTags final
{
public:
	struct FGameplayTagContainer                  TagsToAdd;                                         // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsToRemove;                                      // 0x0020(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagSystemComponent_AddAndRemoveTags) == 0x000008, "Wrong alignment on TagSystemComponent_AddAndRemoveTags");
static_assert(sizeof(TagSystemComponent_AddAndRemoveTags) == 0x000040, "Wrong size on TagSystemComponent_AddAndRemoveTags");
static_assert(offsetof(TagSystemComponent_AddAndRemoveTags, TagsToAdd) == 0x000000, "Member 'TagSystemComponent_AddAndRemoveTags::TagsToAdd' has a wrong offset!");
static_assert(offsetof(TagSystemComponent_AddAndRemoveTags, TagsToRemove) == 0x000020, "Member 'TagSystemComponent_AddAndRemoveTags::TagsToRemove' has a wrong offset!");

// Function Mordhau.TagSystemComponent.AddTag
// 0x0008 (0x0008 - 0x0000)
struct TagSystemComponent_AddTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagSystemComponent_AddTag) == 0x000004, "Wrong alignment on TagSystemComponent_AddTag");
static_assert(sizeof(TagSystemComponent_AddTag) == 0x000008, "Wrong size on TagSystemComponent_AddTag");
static_assert(offsetof(TagSystemComponent_AddTag, Tag) == 0x000000, "Member 'TagSystemComponent_AddTag::Tag' has a wrong offset!");

// Function Mordhau.TagSystemComponent.AddTags
// 0x0020 (0x0020 - 0x0000)
struct TagSystemComponent_AddTags final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagSystemComponent_AddTags) == 0x000008, "Wrong alignment on TagSystemComponent_AddTags");
static_assert(sizeof(TagSystemComponent_AddTags) == 0x000020, "Wrong size on TagSystemComponent_AddTags");
static_assert(offsetof(TagSystemComponent_AddTags, TagContainer) == 0x000000, "Member 'TagSystemComponent_AddTags::TagContainer' has a wrong offset!");

// Function Mordhau.TagSystemComponent.FlashTag
// 0x0008 (0x0008 - 0x0000)
struct TagSystemComponent_FlashTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagSystemComponent_FlashTag) == 0x000004, "Wrong alignment on TagSystemComponent_FlashTag");
static_assert(sizeof(TagSystemComponent_FlashTag) == 0x000008, "Wrong size on TagSystemComponent_FlashTag");
static_assert(offsetof(TagSystemComponent_FlashTag, Tag) == 0x000000, "Member 'TagSystemComponent_FlashTag::Tag' has a wrong offset!");

// Function Mordhau.TagSystemComponent.FlashTags
// 0x0020 (0x0020 - 0x0000)
struct TagSystemComponent_FlashTags final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagSystemComponent_FlashTags) == 0x000008, "Wrong alignment on TagSystemComponent_FlashTags");
static_assert(sizeof(TagSystemComponent_FlashTags) == 0x000020, "Wrong size on TagSystemComponent_FlashTags");
static_assert(offsetof(TagSystemComponent_FlashTags, TagContainer) == 0x000000, "Member 'TagSystemComponent_FlashTags::TagContainer' has a wrong offset!");

// Function Mordhau.TagSystemComponent.RegisterTagConditionDelegate
// 0x0050 (0x0050 - 0x0000)
struct TagSystemComponent_RegisterTagConditionDelegate final
{
public:
	struct FGameplayTagCondition                  Condition;                                         // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Function;                                          // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagSystemComponent_RegisterTagConditionDelegate) == 0x000008, "Wrong alignment on TagSystemComponent_RegisterTagConditionDelegate");
static_assert(sizeof(TagSystemComponent_RegisterTagConditionDelegate) == 0x000050, "Wrong size on TagSystemComponent_RegisterTagConditionDelegate");
static_assert(offsetof(TagSystemComponent_RegisterTagConditionDelegate, Condition) == 0x000000, "Member 'TagSystemComponent_RegisterTagConditionDelegate::Condition' has a wrong offset!");
static_assert(offsetof(TagSystemComponent_RegisterTagConditionDelegate, Object) == 0x000040, "Member 'TagSystemComponent_RegisterTagConditionDelegate::Object' has a wrong offset!");
static_assert(offsetof(TagSystemComponent_RegisterTagConditionDelegate, Function) == 0x000048, "Member 'TagSystemComponent_RegisterTagConditionDelegate::Function' has a wrong offset!");

// Function Mordhau.TagSystemComponent.RemoveTag
// 0x0008 (0x0008 - 0x0000)
struct TagSystemComponent_RemoveTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagSystemComponent_RemoveTag) == 0x000004, "Wrong alignment on TagSystemComponent_RemoveTag");
static_assert(sizeof(TagSystemComponent_RemoveTag) == 0x000008, "Wrong size on TagSystemComponent_RemoveTag");
static_assert(offsetof(TagSystemComponent_RemoveTag, Tag) == 0x000000, "Member 'TagSystemComponent_RemoveTag::Tag' has a wrong offset!");

// Function Mordhau.TagSystemComponent.RemoveTags
// 0x0020 (0x0020 - 0x0000)
struct TagSystemComponent_RemoveTags final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagSystemComponent_RemoveTags) == 0x000008, "Wrong alignment on TagSystemComponent_RemoveTags");
static_assert(sizeof(TagSystemComponent_RemoveTags) == 0x000020, "Wrong size on TagSystemComponent_RemoveTags");
static_assert(offsetof(TagSystemComponent_RemoveTags, TagContainer) == 0x000000, "Member 'TagSystemComponent_RemoveTags::TagContainer' has a wrong offset!");

// Function Mordhau.TagSystemComponent.SetTags
// 0x0020 (0x0020 - 0x0000)
struct TagSystemComponent_SetTags final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagSystemComponent_SetTags) == 0x000008, "Wrong alignment on TagSystemComponent_SetTags");
static_assert(sizeof(TagSystemComponent_SetTags) == 0x000020, "Wrong size on TagSystemComponent_SetTags");
static_assert(offsetof(TagSystemComponent_SetTags, TagContainer) == 0x000000, "Member 'TagSystemComponent_SetTags::TagContainer' has a wrong offset!");

// Function Mordhau.UpperChestWearable.AddArmsWearable
// 0x0028 (0x0028 - 0x0000)
struct UpperChestWearable_AddArmsWearable final
{
public:
	TSoftClassPtr<class UClass>                   Wearable;                                          // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpperChestWearable_AddArmsWearable) == 0x000008, "Wrong alignment on UpperChestWearable_AddArmsWearable");
static_assert(sizeof(UpperChestWearable_AddArmsWearable) == 0x000028, "Wrong size on UpperChestWearable_AddArmsWearable");
static_assert(offsetof(UpperChestWearable_AddArmsWearable, Wearable) == 0x000000, "Member 'UpperChestWearable_AddArmsWearable::Wearable' has a wrong offset!");

// Function Mordhau.UpperChestWearable.AddLowerChestWearable
// 0x0028 (0x0028 - 0x0000)
struct UpperChestWearable_AddLowerChestWearable final
{
public:
	TSoftClassPtr<class UClass>                   Wearable;                                          // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpperChestWearable_AddLowerChestWearable) == 0x000008, "Wrong alignment on UpperChestWearable_AddLowerChestWearable");
static_assert(sizeof(UpperChestWearable_AddLowerChestWearable) == 0x000028, "Wrong size on UpperChestWearable_AddLowerChestWearable");
static_assert(offsetof(UpperChestWearable_AddLowerChestWearable, Wearable) == 0x000000, "Member 'UpperChestWearable_AddLowerChestWearable::Wearable' has a wrong offset!");

// Function Mordhau.UpperChestWearable.AddShoulderWearable
// 0x0028 (0x0028 - 0x0000)
struct UpperChestWearable_AddShoulderWearable final
{
public:
	TSoftClassPtr<class UClass>                   Wearable;                                          // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpperChestWearable_AddShoulderWearable) == 0x000008, "Wrong alignment on UpperChestWearable_AddShoulderWearable");
static_assert(sizeof(UpperChestWearable_AddShoulderWearable) == 0x000028, "Wrong size on UpperChestWearable_AddShoulderWearable");
static_assert(offsetof(UpperChestWearable_AddShoulderWearable, Wearable) == 0x000000, "Member 'UpperChestWearable_AddShoulderWearable::Wearable' has a wrong offset!");

// Function Mordhau.UpperChestWearable.GetArmsWearable
// 0x0010 (0x0010 - 0x0000)
struct UpperChestWearable_GetArmsWearable final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UArmsWearable>              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpperChestWearable_GetArmsWearable) == 0x000008, "Wrong alignment on UpperChestWearable_GetArmsWearable");
static_assert(sizeof(UpperChestWearable_GetArmsWearable) == 0x000010, "Wrong size on UpperChestWearable_GetArmsWearable");
static_assert(offsetof(UpperChestWearable_GetArmsWearable, Index_0) == 0x000000, "Member 'UpperChestWearable_GetArmsWearable::Index_0' has a wrong offset!");
static_assert(offsetof(UpperChestWearable_GetArmsWearable, ReturnValue) == 0x000008, "Member 'UpperChestWearable_GetArmsWearable::ReturnValue' has a wrong offset!");

// Function Mordhau.UpperChestWearable.GetLowerChestWearable
// 0x0010 (0x0010 - 0x0000)
struct UpperChestWearable_GetLowerChestWearable final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMordhauWearable>           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpperChestWearable_GetLowerChestWearable) == 0x000008, "Wrong alignment on UpperChestWearable_GetLowerChestWearable");
static_assert(sizeof(UpperChestWearable_GetLowerChestWearable) == 0x000010, "Wrong size on UpperChestWearable_GetLowerChestWearable");
static_assert(offsetof(UpperChestWearable_GetLowerChestWearable, Index_0) == 0x000000, "Member 'UpperChestWearable_GetLowerChestWearable::Index_0' has a wrong offset!");
static_assert(offsetof(UpperChestWearable_GetLowerChestWearable, ReturnValue) == 0x000008, "Member 'UpperChestWearable_GetLowerChestWearable::ReturnValue' has a wrong offset!");

// Function Mordhau.UpperChestWearable.GetShouldersWearable
// 0x0010 (0x0010 - 0x0000)
struct UpperChestWearable_GetShouldersWearable final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMordhauWearable>           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpperChestWearable_GetShouldersWearable) == 0x000008, "Wrong alignment on UpperChestWearable_GetShouldersWearable");
static_assert(sizeof(UpperChestWearable_GetShouldersWearable) == 0x000010, "Wrong size on UpperChestWearable_GetShouldersWearable");
static_assert(offsetof(UpperChestWearable_GetShouldersWearable, Index_0) == 0x000000, "Member 'UpperChestWearable_GetShouldersWearable::Index_0' has a wrong offset!");
static_assert(offsetof(UpperChestWearable_GetShouldersWearable, ReturnValue) == 0x000008, "Member 'UpperChestWearable_GetShouldersWearable::ReturnValue' has a wrong offset!");

// Function Mordhau.UpperChestWearable.GetArmsWearablesNum
// 0x0004 (0x0004 - 0x0000)
struct UpperChestWearable_GetArmsWearablesNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpperChestWearable_GetArmsWearablesNum) == 0x000004, "Wrong alignment on UpperChestWearable_GetArmsWearablesNum");
static_assert(sizeof(UpperChestWearable_GetArmsWearablesNum) == 0x000004, "Wrong size on UpperChestWearable_GetArmsWearablesNum");
static_assert(offsetof(UpperChestWearable_GetArmsWearablesNum, ReturnValue) == 0x000000, "Member 'UpperChestWearable_GetArmsWearablesNum::ReturnValue' has a wrong offset!");

// Function Mordhau.UpperChestWearable.GetLowerChestWearablesNum
// 0x0004 (0x0004 - 0x0000)
struct UpperChestWearable_GetLowerChestWearablesNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpperChestWearable_GetLowerChestWearablesNum) == 0x000004, "Wrong alignment on UpperChestWearable_GetLowerChestWearablesNum");
static_assert(sizeof(UpperChestWearable_GetLowerChestWearablesNum) == 0x000004, "Wrong size on UpperChestWearable_GetLowerChestWearablesNum");
static_assert(offsetof(UpperChestWearable_GetLowerChestWearablesNum, ReturnValue) == 0x000000, "Member 'UpperChestWearable_GetLowerChestWearablesNum::ReturnValue' has a wrong offset!");

// Function Mordhau.UpperChestWearable.GetShouldersWearablesNum
// 0x0004 (0x0004 - 0x0000)
struct UpperChestWearable_GetShouldersWearablesNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpperChestWearable_GetShouldersWearablesNum) == 0x000004, "Wrong alignment on UpperChestWearable_GetShouldersWearablesNum");
static_assert(sizeof(UpperChestWearable_GetShouldersWearablesNum) == 0x000004, "Wrong size on UpperChestWearable_GetShouldersWearablesNum");
static_assert(offsetof(UpperChestWearable_GetShouldersWearablesNum, ReturnValue) == 0x000000, "Member 'UpperChestWearable_GetShouldersWearablesNum::ReturnValue' has a wrong offset!");

}

