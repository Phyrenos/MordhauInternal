#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TooltipPointCost

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_TooltipPointCost.BP_TooltipPointCost_C
// 0x0020 (0x0280 - 0x0260)
class UBP_TooltipPointCost_C final : public UUserWidget
{
public:
	class UBP_ItemPointCost_C*                    BP_ItemPointCost;                                  // 0x0260(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_358;                                         // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_2;                                       // 0x0270(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          Can_Afford;                                        // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsSelected;                                       // 0x0279(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void Update(int32 Cost, bool Can_Afford_0);
	struct FLinearColor GetColorAndOpacity_0();
	ESlateVisibility GetVisibility_0();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TooltipPointCost_C">();
	}
	static class UBP_TooltipPointCost_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_TooltipPointCost_C>();
	}
};
static_assert(alignof(UBP_TooltipPointCost_C) == 0x000008, "Wrong alignment on UBP_TooltipPointCost_C");
static_assert(sizeof(UBP_TooltipPointCost_C) == 0x000280, "Wrong size on UBP_TooltipPointCost_C");
static_assert(offsetof(UBP_TooltipPointCost_C, BP_ItemPointCost) == 0x000260, "Member 'UBP_TooltipPointCost_C::BP_ItemPointCost' has a wrong offset!");
static_assert(offsetof(UBP_TooltipPointCost_C, Image_358) == 0x000268, "Member 'UBP_TooltipPointCost_C::Image_358' has a wrong offset!");
static_assert(offsetof(UBP_TooltipPointCost_C, TextBlock_2) == 0x000270, "Member 'UBP_TooltipPointCost_C::TextBlock_2' has a wrong offset!");
static_assert(offsetof(UBP_TooltipPointCost_C, Can_Afford) == 0x000278, "Member 'UBP_TooltipPointCost_C::Can_Afford' has a wrong offset!");
static_assert(offsetof(UBP_TooltipPointCost_C, bIsSelected) == 0x000279, "Member 'UBP_TooltipPointCost_C::bIsSelected' has a wrong offset!");

}

