#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LadderMover

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mordhau_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LadderMover.BP_LadderMover_C
// 0x0030 (0x0BC0 - 0x0B90)
class ABP_LadderMover_C final : public AMordhau1DVehicle
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B90(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UBP_VehicleLadderMover_C*               BP_VehicleLadderMover;                             // 0x0B98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class ABP_Ladder_C*                           Ladder;                                            // 0x0BA0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          RequestedJump;                                     // 0x0BA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ReplicatedLadderJump;                              // 0x0BA9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_BAA[0x6];                                      // 0x0BAA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      LastDriver;                                        // 0x0BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_LadderMover(int32 EntryPoint);
	void RequestJumpOff();
	void ReceiveDestroyed();
	void KnockOffDriver(class AMordhauCharacter* Character);
	void OnStepChanged();
	void InpAxisEvt_Turn_Right_K2Node_InputAxisEvent_9(float AxisValue);
	void InpAxisEvt_Look_Up_K2Node_InputAxisEvent_22(float AxisValue);
	void InpActEvt_Ranged_Cancel_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_2(const struct FKey& Key);
	void _Reload_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_Holster_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_Drop_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_Equip_Slot_1_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_Equip_Slot_2_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_Equip_Slot_3_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_Equip_Slot_4_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_Equip_Slot_5_K2Node_InputActionEvent_10(const struct FKey& Key);
	void InpActEvt_Equip_Slot_6_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_Equip_Slot_7_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_Equip_Slot_8_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_Equip_Slot_9_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_Next_Equipment_K2Node_InputActionEvent_15(const struct FKey& Key);
	void InpActEvt_Next_Equipment_K2Node_InputActionEvent_16(const struct FKey& Key);
	void InpActEvt_Previous_Equipment_K2Node_InputActionEvent_17(const struct FKey& Key);
	void InpActEvt_Previous_Equipment_K2Node_InputActionEvent_18(const struct FKey& Key);
	void InpActEvt_Strike_K2Node_InputActionEvent_19(const struct FKey& Key);
	void InpActEvt_Strike_K2Node_InputActionEvent_20(const struct FKey& Key);
	void InpActEvt_Feint_K2Node_InputActionEvent_21(const struct FKey& Key);
	void InpActEvt_Stab_K2Node_InputActionEvent_22(const struct FKey& Key);
	void InpActEvt_Stab_K2Node_InputActionEvent_23(const struct FKey& Key);
	void InpActEvt_Parry_K2Node_InputActionEvent_24(const struct FKey& Key);
	void InpActEvt_Parry_K2Node_InputActionEvent_25(const struct FKey& Key);
	void InpActEvt_Left_Lower_Strike_K2Node_InputActionEvent_26(const struct FKey& Key);
	void InpActEvt_Left_Strike_K2Node_InputActionEvent_27(const struct FKey& Key);
	void InpActEvt_Left_Upper_Strike_K2Node_InputActionEvent_28(const struct FKey& Key);
	void InpActEvt_Left_Stab_K2Node_InputActionEvent_29(const struct FKey& Key);
	void InpActEvt_Flip_Attack_Side_K2Node_InputActionEvent_30(const struct FKey& Key);
	void InpActEvt_Flip_Attack_Side_K2Node_InputActionEvent_31(const struct FKey& Key);
	void InpActEvt_Right_Upper_Strike_K2Node_InputActionEvent_32(const struct FKey& Key);
	void InpActEvt_Right_Lower_Strike_K2Node_InputActionEvent_33(const struct FKey& Key);
	void InpActEvt_Right_Strike_K2Node_InputActionEvent_34(const struct FKey& Key);
	void InpActEvt_Right_Stab_K2Node_InputActionEvent_35(const struct FKey& Key);
	void InpActEvt_Feint_Or_Parry_K2Node_InputActionEvent_36(const struct FKey& Key);
	void InpActEvt_Feint_Or_Parry_K2Node_InputActionEvent_37(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_38(const struct FKey& Key);
	void InpActEvt_Cycle_Camera_K2Node_InputActionEvent_39(const struct FKey& Key);
	void InpActEvt_Cycle_Camera_K2Node_InputActionEvent_40(const struct FKey& Key);
	void OnRep_Ladder();
	void PerformJumpoff();
	void OnRep_ReplicatedLadderJump();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LadderMover_C">();
	}
	static class ABP_LadderMover_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LadderMover_C>();
	}
};
static_assert(alignof(ABP_LadderMover_C) == 0x000010, "Wrong alignment on ABP_LadderMover_C");
static_assert(sizeof(ABP_LadderMover_C) == 0x000BC0, "Wrong size on ABP_LadderMover_C");
static_assert(offsetof(ABP_LadderMover_C, UberGraphFrame) == 0x000B90, "Member 'ABP_LadderMover_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LadderMover_C, BP_VehicleLadderMover) == 0x000B98, "Member 'ABP_LadderMover_C::BP_VehicleLadderMover' has a wrong offset!");
static_assert(offsetof(ABP_LadderMover_C, Ladder) == 0x000BA0, "Member 'ABP_LadderMover_C::Ladder' has a wrong offset!");
static_assert(offsetof(ABP_LadderMover_C, RequestedJump) == 0x000BA8, "Member 'ABP_LadderMover_C::RequestedJump' has a wrong offset!");
static_assert(offsetof(ABP_LadderMover_C, ReplicatedLadderJump) == 0x000BA9, "Member 'ABP_LadderMover_C::ReplicatedLadderJump' has a wrong offset!");
static_assert(offsetof(ABP_LadderMover_C, LastDriver) == 0x000BB0, "Member 'ABP_LadderMover_C::LastDriver' has a wrong offset!");

}

