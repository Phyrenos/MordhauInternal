#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BearTrap

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mordhau_structs.hpp"
#include "Mordhau_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BearTrap.BP_BearTrap_C
// 0x0080 (0x0DB0 - 0x0D30)
class ABP_BearTrap_C : public AMordhauEquipment
{
public:
	uint8                                         Pad_D28[0x8];                                      // 0x0D28(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0D30(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UBuildingSystemComponent*               BuildingSystem;                                    // 0x0D38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0D40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AController*                            PlanterController;                                 // 0x0D48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SafeTime;                                          // 0x0D50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D54[0x4];                                      // 0x0D54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 DamageByArmorTier;                                 // 0x0D58(0x0010)(Edit, BlueprintVisible)
	float                                         DamageToHorse;                                     // 0x0D68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D6C[0x4];                                      // 0x0D6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              TrapTriggerSound;                                  // 0x0D70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      PlanterCharacter;                                  // 0x0D78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxTrapsPerPlayer;                                 // 0x0D80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PlaceableLimitName;                                // 0x0D84(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReactivateAmount;                                  // 0x0D8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReactivateDelay;                                   // 0x0D90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D94[0x4];                                      // 0x0D94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           PlanterState;                                      // 0x0D98(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class UMordhauWidgetComponent*                TrapWidget;                                        // 0x0DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FriendliesDoNotTrigger;                            // 0x0DA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_BearTrap(int32 EntryPoint);
	void LocalPlayerLateTick(float DeltaTime);
	void UpdateEquipmentState();
	void OnHeldInteractionStart(class AMordhauCharacter* Character);
	void OnInteractionStart(class AMordhauCharacter* Character);
	void PlanterDestroyed(class AAdvancedCharacter* Character);
	void PlanterDied(class AAdvancedCharacter* Character);
	void OnAmmoChanged();
	void OnPostDismemberedOther(class FName bone, class ASeparatedBodyPart* Part);
	void OnUsedToKillOther(class AAdvancedCharacter* Character, EMordhauDamageType Type, uint8 SubType, class FName bone, const struct FVector& Point, class AActor* Source);
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void FireProjectile(const struct FVector& Origin, const struct FRotator& Orientation, class AController* OwningController, float ExpectedDelay);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void OnLoadedChanged();
	bool OnRequestFire(class AMordhauCharacter* Character);
	void ValidatePlantSpot(const struct FVector& CameraLocation1P, const struct FRotator& CameraRotattion1P, bool* Succeeded, struct FVector* Location, struct FRotator* Rotation, class USceneComponent** AttachToComponent);
	void DealDamage(class AAdvancedCharacter* Character);
	bool ShouldShine();
	void OnRep_PlanterState();

	bool CanInteract(class AMordhauCharacter* Character) const;
	bool CanHeldInteract(class AMordhauCharacter* Character) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BearTrap_C">();
	}
	static class ABP_BearTrap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BearTrap_C>();
	}
};
static_assert(alignof(ABP_BearTrap_C) == 0x000010, "Wrong alignment on ABP_BearTrap_C");
static_assert(sizeof(ABP_BearTrap_C) == 0x000DB0, "Wrong size on ABP_BearTrap_C");
static_assert(offsetof(ABP_BearTrap_C, UberGraphFrame) == 0x000D30, "Member 'ABP_BearTrap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BearTrap_C, BuildingSystem) == 0x000D38, "Member 'ABP_BearTrap_C::BuildingSystem' has a wrong offset!");
static_assert(offsetof(ABP_BearTrap_C, Box) == 0x000D40, "Member 'ABP_BearTrap_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_BearTrap_C, PlanterController) == 0x000D48, "Member 'ABP_BearTrap_C::PlanterController' has a wrong offset!");
static_assert(offsetof(ABP_BearTrap_C, SafeTime) == 0x000D50, "Member 'ABP_BearTrap_C::SafeTime' has a wrong offset!");
static_assert(offsetof(ABP_BearTrap_C, DamageByArmorTier) == 0x000D58, "Member 'ABP_BearTrap_C::DamageByArmorTier' has a wrong offset!");
static_assert(offsetof(ABP_BearTrap_C, DamageToHorse) == 0x000D68, "Member 'ABP_BearTrap_C::DamageToHorse' has a wrong offset!");
static_assert(offsetof(ABP_BearTrap_C, TrapTriggerSound) == 0x000D70, "Member 'ABP_BearTrap_C::TrapTriggerSound' has a wrong offset!");
static_assert(offsetof(ABP_BearTrap_C, PlanterCharacter) == 0x000D78, "Member 'ABP_BearTrap_C::PlanterCharacter' has a wrong offset!");
static_assert(offsetof(ABP_BearTrap_C, MaxTrapsPerPlayer) == 0x000D80, "Member 'ABP_BearTrap_C::MaxTrapsPerPlayer' has a wrong offset!");
static_assert(offsetof(ABP_BearTrap_C, PlaceableLimitName) == 0x000D84, "Member 'ABP_BearTrap_C::PlaceableLimitName' has a wrong offset!");
static_assert(offsetof(ABP_BearTrap_C, ReactivateAmount) == 0x000D8C, "Member 'ABP_BearTrap_C::ReactivateAmount' has a wrong offset!");
static_assert(offsetof(ABP_BearTrap_C, ReactivateDelay) == 0x000D90, "Member 'ABP_BearTrap_C::ReactivateDelay' has a wrong offset!");
static_assert(offsetof(ABP_BearTrap_C, PlanterState) == 0x000D98, "Member 'ABP_BearTrap_C::PlanterState' has a wrong offset!");
static_assert(offsetof(ABP_BearTrap_C, TrapWidget) == 0x000DA0, "Member 'ABP_BearTrap_C::TrapWidget' has a wrong offset!");
static_assert(offsetof(ABP_BearTrap_C, FriendliesDoNotTrigger) == 0x000DA8, "Member 'ABP_BearTrap_C::FriendliesDoNotTrigger' has a wrong offset!");

}

