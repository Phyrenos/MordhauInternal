#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MordhauCharacter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mordhau_structs.hpp"
#include "Mordhau_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MordhauCharacter.BP_MordhauCharacter_C
// 0x0030 (0x12E0 - 0x12B0)
class ABP_MordhauCharacter_C : public AMordhauCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x12B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UThudderComponent*                      Thudder;                                           // 0x12B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UBP_CharacterCameraComponent_C*         Camera;                                            // 0x12C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UBoxComponent*                          BlockColliderBP;                                   // 0x12C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                 KickClass;                                         // 0x12D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HideBloodVignettePP;                               // 0x12D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_MordhauCharacter(int32 EntryPoint);
	void OnEquipmentRemapperSpawned_Event_0();
	void SpawnKickWeapon();
	void SprintingMoveBlockedBy(class AActor* BlockedBy);
	void DebugPossess();
	void ServerSetClimbLocation(const struct FVector_NetQuantize& NewParam);
	void ApplyRagdollForce(float Angle, EMordhauDamageType Type, uint8 SubType, class FName bone, const struct FVector& Point, class AActor* Source, class AActor* Agent);
	void OnPostProfileAssigned();
	void ReplicatedTripWithKnockback();
	void BndEvt__Thudder_K2Node_ComponentBoundEvent_0_ComponentThudSignature__DelegateSignature();
	void OnPostDismember(class FName bone, class ASeparatedBodyPart* SeparatedPart, class AActor* Agent);
	void OnCosmeticHit(EMordhauDamageType DamageType, uint8 SubType, const struct FHitResult& Hit, class AActor* Agent);
	void OnDied(float Angle, EMordhauDamageType Type, uint8 SubType, class FName bone, const struct FVector& Point, class AActor* Source, class AActor* Agent);
	void ReceiveBeginPlay();
	void InpActEvt_Cycle_Camera_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Cycle_Camera_K2Node_InputActionEvent_1(const struct FKey& Key);
	void UserConstructionScript();
	void FindClimbSpot(float UpwardsCast, bool* Succeeded, struct FVector* TargetSpot);
	void AttemptClimb(bool* Succeeded);
	void CalculateLedgeOffsetAndNormal(class UClimbingMotion* ClimbingMotion, struct FVector* OutOffset, struct FVector* OutNormal);
	bool TryClimbing();
	void AddRagdollImpulse(const struct FVector& Impulse, const struct FVector& Location, class FName bone);
	void GetOutOfBoundsText(class FText* Header);
	void GetOutOfBoundsSubtext(class FText* Subtext);
	void SpawnBloodPoolUnderneath();
	void IsAnUpgrade(class ABP_WearablePickup_C* Wearable, bool* Return);
	void OnBeforeReceiveWearablePickup(class ABP_WearablePickup_C* WearablePickup);
	void GiveFists();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MordhauCharacter_C">();
	}
	static class ABP_MordhauCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MordhauCharacter_C>();
	}
};
static_assert(alignof(ABP_MordhauCharacter_C) == 0x000010, "Wrong alignment on ABP_MordhauCharacter_C");
static_assert(sizeof(ABP_MordhauCharacter_C) == 0x0012E0, "Wrong size on ABP_MordhauCharacter_C");
static_assert(offsetof(ABP_MordhauCharacter_C, UberGraphFrame) == 0x0012B0, "Member 'ABP_MordhauCharacter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MordhauCharacter_C, Thudder) == 0x0012B8, "Member 'ABP_MordhauCharacter_C::Thudder' has a wrong offset!");
static_assert(offsetof(ABP_MordhauCharacter_C, Camera) == 0x0012C0, "Member 'ABP_MordhauCharacter_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_MordhauCharacter_C, BlockColliderBP) == 0x0012C8, "Member 'ABP_MordhauCharacter_C::BlockColliderBP' has a wrong offset!");
static_assert(offsetof(ABP_MordhauCharacter_C, KickClass) == 0x0012D0, "Member 'ABP_MordhauCharacter_C::KickClass' has a wrong offset!");
static_assert(offsetof(ABP_MordhauCharacter_C, HideBloodVignettePP) == 0x0012D8, "Member 'ABP_MordhauCharacter_C::HideBloodVignettePP' has a wrong offset!");

}

