#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleRoyaleChest

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_BattleRoyaleBaseItemSpawn_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BattleRoyaleChest.BP_BattleRoyaleChest_C
// 0x00F0 (0x0520 - 0x0430)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_BattleRoyaleChest_C : public ABP_BattleRoyaleBaseItemSpawn_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0430(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        SpawnPoint3;                                       // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        SpawnPoint2;                                       // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        SpawnPoint1;                                       // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UParticleSystem*                        DestroyedParticles;                                // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UClass*, float>                    SecondItemList;                                    // 0x0460(0x0050)(Edit, BlueprintVisible)
	TMap<class UClass*, float>                    ThirdItemList;                                     // 0x04B0(0x0050)(Edit, BlueprintVisible)
	bool                                          ChestDestroyed;                                    // 0x0500(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_501[0x7];                                      // 0x0501(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          DestroyedRagdollMesh;                              // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RespawnTime;                                       // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BattleRoyaleChest(int32 EntryPoint);
	void OnInteractionStart(class AMordhauCharacter* Character);
	void RespawnChest();
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void SpawnContents(class AMordhauPlayerController* CustomizeFor);
	void OnRep_Destroyed();
	void OnChestDestroyed();
	void BreakChest(class AMordhauPlayerController* DestroyerPlayerController);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BattleRoyaleChest_C">();
	}
	static class ABP_BattleRoyaleChest_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BattleRoyaleChest_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_BattleRoyaleChest_C) == 0x000010, "Wrong alignment on ABP_BattleRoyaleChest_C");
static_assert(sizeof(ABP_BattleRoyaleChest_C) == 0x000520, "Wrong size on ABP_BattleRoyaleChest_C");
static_assert(offsetof(ABP_BattleRoyaleChest_C, UberGraphFrame) == 0x000430, "Member 'ABP_BattleRoyaleChest_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BattleRoyaleChest_C, SkeletalMesh) == 0x000438, "Member 'ABP_BattleRoyaleChest_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_BattleRoyaleChest_C, SpawnPoint3) == 0x000440, "Member 'ABP_BattleRoyaleChest_C::SpawnPoint3' has a wrong offset!");
static_assert(offsetof(ABP_BattleRoyaleChest_C, SpawnPoint2) == 0x000448, "Member 'ABP_BattleRoyaleChest_C::SpawnPoint2' has a wrong offset!");
static_assert(offsetof(ABP_BattleRoyaleChest_C, SpawnPoint1) == 0x000450, "Member 'ABP_BattleRoyaleChest_C::SpawnPoint1' has a wrong offset!");
static_assert(offsetof(ABP_BattleRoyaleChest_C, DestroyedParticles) == 0x000458, "Member 'ABP_BattleRoyaleChest_C::DestroyedParticles' has a wrong offset!");
static_assert(offsetof(ABP_BattleRoyaleChest_C, SecondItemList) == 0x000460, "Member 'ABP_BattleRoyaleChest_C::SecondItemList' has a wrong offset!");
static_assert(offsetof(ABP_BattleRoyaleChest_C, ThirdItemList) == 0x0004B0, "Member 'ABP_BattleRoyaleChest_C::ThirdItemList' has a wrong offset!");
static_assert(offsetof(ABP_BattleRoyaleChest_C, ChestDestroyed) == 0x000500, "Member 'ABP_BattleRoyaleChest_C::ChestDestroyed' has a wrong offset!");
static_assert(offsetof(ABP_BattleRoyaleChest_C, DestroyedRagdollMesh) == 0x000508, "Member 'ABP_BattleRoyaleChest_C::DestroyedRagdollMesh' has a wrong offset!");
static_assert(offsetof(ABP_BattleRoyaleChest_C, RespawnTime) == 0x000510, "Member 'ABP_BattleRoyaleChest_C::RespawnTime' has a wrong offset!");

}

