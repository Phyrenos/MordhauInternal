#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DeployableSpawn

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_DestroyableActor_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DeployableSpawn.BP_DeployableSpawn_C
// 0x0090 (0x0570 - 0x04E0)
class ABP_DeployableSpawn_C final : public ABP_DestroyableActor_C
{
public:
	uint8                                         Pad_4D1[0x7];                                      // 0x04D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_DeployableSpawn_C;               // 0x04D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UAudioComponent*                        SC_WavingFlagWindDeployableBanner;                 // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        Playerstart4;                                      // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        Playerstart3;                                      // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        Playerstart2;                                      // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        Playerstart1;                                      // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TArray<class USceneComponent*>                PlayerStartTransforms;                             // 0x0508(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class ABP_DeployableSpawnPlayerStart_C*> PlayerStarts;                                      // 0x0518(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         Token;                                             // 0x0528(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Team;                                              // 0x052C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52D[0x3];                                      // 0x052D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Spawns;                                            // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxSpawns;                                         // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OriginalDamageFactor;                              // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x053C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          EnemiesNearby;                                     // 0x053D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FullyBuilt;                                        // 0x053E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53F[0x1];                                      // 0x053F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EnemyCheckExtents;                                 // 0x0540(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EnemyCheckOffset;                                  // 0x054C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayBetweenSpawns;                                // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InCooldown;                                        // 0x055C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55D[0x3];                                      // 0x055D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_SpawnScreenPoint_C*                 Widget;                                            // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ToolboxPreventionBox_C*             ToolboxPreventionArea;                             // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DeployableSpawn(int32 EntryPoint);
	void CheckCorrectTeam();
	void SpawnSoundMulti();
	void EnterCooldown();
	void CheckEnemyProximity();
	void ReceiveDestroyed();
	void OnSpawnUsed(class AController* Controller);
	void UpdateSpawnActive();
	void OnRep_Active();
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void OnStoppedRegenerating();
	void OnMeshChanged();
	void OnPlayedParticle(class UParticleSystemComponent* ParticleSystem);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DeployableSpawn_C">();
	}
	static class ABP_DeployableSpawn_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DeployableSpawn_C>();
	}
};
static_assert(alignof(ABP_DeployableSpawn_C) == 0x000010, "Wrong alignment on ABP_DeployableSpawn_C");
static_assert(sizeof(ABP_DeployableSpawn_C) == 0x000570, "Wrong size on ABP_DeployableSpawn_C");
static_assert(offsetof(ABP_DeployableSpawn_C, UberGraphFrame_BP_DeployableSpawn_C) == 0x0004D8, "Member 'ABP_DeployableSpawn_C::UberGraphFrame_BP_DeployableSpawn_C' has a wrong offset!");
static_assert(offsetof(ABP_DeployableSpawn_C, SC_WavingFlagWindDeployableBanner) == 0x0004E0, "Member 'ABP_DeployableSpawn_C::SC_WavingFlagWindDeployableBanner' has a wrong offset!");
static_assert(offsetof(ABP_DeployableSpawn_C, Playerstart4) == 0x0004E8, "Member 'ABP_DeployableSpawn_C::Playerstart4' has a wrong offset!");
static_assert(offsetof(ABP_DeployableSpawn_C, Playerstart3) == 0x0004F0, "Member 'ABP_DeployableSpawn_C::Playerstart3' has a wrong offset!");
static_assert(offsetof(ABP_DeployableSpawn_C, Playerstart2) == 0x0004F8, "Member 'ABP_DeployableSpawn_C::Playerstart2' has a wrong offset!");
static_assert(offsetof(ABP_DeployableSpawn_C, Playerstart1) == 0x000500, "Member 'ABP_DeployableSpawn_C::Playerstart1' has a wrong offset!");
static_assert(offsetof(ABP_DeployableSpawn_C, PlayerStartTransforms) == 0x000508, "Member 'ABP_DeployableSpawn_C::PlayerStartTransforms' has a wrong offset!");
static_assert(offsetof(ABP_DeployableSpawn_C, PlayerStarts) == 0x000518, "Member 'ABP_DeployableSpawn_C::PlayerStarts' has a wrong offset!");
static_assert(offsetof(ABP_DeployableSpawn_C, Token) == 0x000528, "Member 'ABP_DeployableSpawn_C::Token' has a wrong offset!");
static_assert(offsetof(ABP_DeployableSpawn_C, Team) == 0x00052C, "Member 'ABP_DeployableSpawn_C::Team' has a wrong offset!");
static_assert(offsetof(ABP_DeployableSpawn_C, Spawns) == 0x000530, "Member 'ABP_DeployableSpawn_C::Spawns' has a wrong offset!");
static_assert(offsetof(ABP_DeployableSpawn_C, MaxSpawns) == 0x000534, "Member 'ABP_DeployableSpawn_C::MaxSpawns' has a wrong offset!");
static_assert(offsetof(ABP_DeployableSpawn_C, OriginalDamageFactor) == 0x000538, "Member 'ABP_DeployableSpawn_C::OriginalDamageFactor' has a wrong offset!");
static_assert(offsetof(ABP_DeployableSpawn_C, Active) == 0x00053C, "Member 'ABP_DeployableSpawn_C::Active' has a wrong offset!");
static_assert(offsetof(ABP_DeployableSpawn_C, EnemiesNearby) == 0x00053D, "Member 'ABP_DeployableSpawn_C::EnemiesNearby' has a wrong offset!");
static_assert(offsetof(ABP_DeployableSpawn_C, FullyBuilt) == 0x00053E, "Member 'ABP_DeployableSpawn_C::FullyBuilt' has a wrong offset!");
static_assert(offsetof(ABP_DeployableSpawn_C, EnemyCheckExtents) == 0x000540, "Member 'ABP_DeployableSpawn_C::EnemyCheckExtents' has a wrong offset!");
static_assert(offsetof(ABP_DeployableSpawn_C, EnemyCheckOffset) == 0x00054C, "Member 'ABP_DeployableSpawn_C::EnemyCheckOffset' has a wrong offset!");
static_assert(offsetof(ABP_DeployableSpawn_C, DelayBetweenSpawns) == 0x000558, "Member 'ABP_DeployableSpawn_C::DelayBetweenSpawns' has a wrong offset!");
static_assert(offsetof(ABP_DeployableSpawn_C, InCooldown) == 0x00055C, "Member 'ABP_DeployableSpawn_C::InCooldown' has a wrong offset!");
static_assert(offsetof(ABP_DeployableSpawn_C, Widget) == 0x000560, "Member 'ABP_DeployableSpawn_C::Widget' has a wrong offset!");
static_assert(offsetof(ABP_DeployableSpawn_C, ToolboxPreventionArea) == 0x000568, "Member 'ABP_DeployableSpawn_C::ToolboxPreventionArea' has a wrong offset!");

}

