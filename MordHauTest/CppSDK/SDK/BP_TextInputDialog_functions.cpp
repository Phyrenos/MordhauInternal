#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TextInputDialog

#include "Basic.hpp"

#include "BP_TextInputDialog_classes.hpp"
#include "BP_TextInputDialog_parameters.hpp"


namespace SDK
{

// Function BP_TextInputDialog.BP_TextInputDialog_C.ExecuteUbergraph_BP_TextInputDialog
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_TextInputDialog_C::ExecuteUbergraph_BP_TextInputDialog(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TextInputDialog_C", "ExecuteUbergraph_BP_TextInputDialog");

	Params::BP_TextInputDialog_C_ExecuteUbergraph_BP_TextInputDialog Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TextInputDialog.BP_TextInputDialog_C.BndEvt__PasswordTextBox_K2Node_ComponentBoundEvent_20_OnEditableTextBoxChangedEvent__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_TextInputDialog_C::BndEvt__PasswordTextBox_K2Node_ComponentBoundEvent_20_OnEditableTextBoxChangedEvent__DelegateSignature(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TextInputDialog_C", "BndEvt__PasswordTextBox_K2Node_ComponentBoundEvent_20_OnEditableTextBoxChangedEvent__DelegateSignature");

	Params::BP_TextInputDialog_C_BndEvt__PasswordTextBox_K2Node_ComponentBoundEvent_20_OnEditableTextBoxChangedEvent__DelegateSignature Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TextInputDialog.BP_TextInputDialog_C.BndEvt__NormalTextBox_K2Node_ComponentBoundEvent_19_OnEditableTextBoxChangedEvent__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_TextInputDialog_C::BndEvt__NormalTextBox_K2Node_ComponentBoundEvent_19_OnEditableTextBoxChangedEvent__DelegateSignature(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TextInputDialog_C", "BndEvt__NormalTextBox_K2Node_ComponentBoundEvent_19_OnEditableTextBoxChangedEvent__DelegateSignature");

	Params::BP_TextInputDialog_C_BndEvt__NormalTextBox_K2Node_ComponentBoundEvent_19_OnEditableTextBoxChangedEvent__DelegateSignature Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TextInputDialog.BP_TextInputDialog_C.BndEvt__PasswordTextBox_K2Node_ComponentBoundEvent_7_OnEditableTextBoxCommittedEvent__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// ETextCommit                             CommitMethod                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_TextInputDialog_C::BndEvt__PasswordTextBox_K2Node_ComponentBoundEvent_7_OnEditableTextBoxCommittedEvent__DelegateSignature(const class FText& Text, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TextInputDialog_C", "BndEvt__PasswordTextBox_K2Node_ComponentBoundEvent_7_OnEditableTextBoxCommittedEvent__DelegateSignature");

	Params::BP_TextInputDialog_C_BndEvt__PasswordTextBox_K2Node_ComponentBoundEvent_7_OnEditableTextBoxCommittedEvent__DelegateSignature Parms{};

	Parms.Text = std::move(Text);
	Parms.CommitMethod = CommitMethod;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TextInputDialog.BP_TextInputDialog_C.Hide
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBP_TextInputDialog_C::Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TextInputDialog_C", "Hide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TextInputDialog.BP_TextInputDialog_C.Show
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBP_TextInputDialog_C::Show()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TextInputDialog_C", "Show");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TextInputDialog.BP_TextInputDialog_C.BndEvt__BP_TwoButtonDialog_K2Node_ComponentBoundEvent_187_RightButtonClicked__DelegateSignature
// (BlueprintEvent)

void UBP_TextInputDialog_C::BndEvt__BP_TwoButtonDialog_K2Node_ComponentBoundEvent_187_RightButtonClicked__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TextInputDialog_C", "BndEvt__BP_TwoButtonDialog_K2Node_ComponentBoundEvent_187_RightButtonClicked__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TextInputDialog.BP_TextInputDialog_C.BndEvt__BP_TwoButtonDialog_K2Node_ComponentBoundEvent_183_LeftButtonClicked__DelegateSignature
// (BlueprintEvent)

void UBP_TextInputDialog_C::BndEvt__BP_TwoButtonDialog_K2Node_ComponentBoundEvent_183_LeftButtonClicked__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TextInputDialog_C", "BndEvt__BP_TwoButtonDialog_K2Node_ComponentBoundEvent_183_LeftButtonClicked__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TextInputDialog.BP_TextInputDialog_C.BndEvt__PasswordTextbox_K2Node_ComponentBoundEvent_23_OnEditableTextBoxCommittedEvent__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// ETextCommit                             CommitMethod                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_TextInputDialog_C::BndEvt__PasswordTextbox_K2Node_ComponentBoundEvent_23_OnEditableTextBoxCommittedEvent__DelegateSignature(const class FText& Text, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TextInputDialog_C", "BndEvt__PasswordTextbox_K2Node_ComponentBoundEvent_23_OnEditableTextBoxCommittedEvent__DelegateSignature");

	Params::BP_TextInputDialog_C_BndEvt__PasswordTextbox_K2Node_ComponentBoundEvent_23_OnEditableTextBoxCommittedEvent__DelegateSignature Parms{};

	Parms.Text = std::move(Text);
	Parms.CommitMethod = CommitMethod;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TextInputDialog.BP_TextInputDialog_C.GetHintText
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText UBP_TextInputDialog_C::GetHintText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TextInputDialog_C", "GetHintText");

	Params::BP_TextInputDialog_C_GetHintText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_TextInputDialog.BP_TextInputDialog_C.SetLeftButtonText
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_TextInputDialog_C::SetLeftButtonText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TextInputDialog_C", "SetLeftButtonText");

	Params::BP_TextInputDialog_C_SetLeftButtonText Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TextInputDialog.BP_TextInputDialog_C.SetRightButtonText
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_TextInputDialog_C::SetRightButtonText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TextInputDialog_C", "SetRightButtonText");

	Params::BP_TextInputDialog_C_SetRightButtonText Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TextInputDialog.BP_TextInputDialog_C.SetTitleText
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Title                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_TextInputDialog_C::SetTitleText(const class FText& Title)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TextInputDialog_C", "SetTitleText");

	Params::BP_TextInputDialog_C_SetTitleText Parms{};

	Parms.Title = std::move(Title);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TextInputDialog.BP_TextInputDialog_C.GetEnteredText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (Parm, OutParm)

void UBP_TextInputDialog_C::GetEnteredText(class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TextInputDialog_C", "GetEnteredText");

	Params::BP_TextInputDialog_C_GetEnteredText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BP_TextInputDialog.BP_TextInputDialog_C.SetEnteredText
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             EnteredText                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_TextInputDialog_C::SetEnteredText(const class FText& EnteredText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TextInputDialog_C", "SetEnteredText");

	Params::BP_TextInputDialog_C_SetEnteredText Parms{};

	Parms.EnteredText = std::move(EnteredText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TextInputDialog.BP_TextInputDialog_C.SetWaitingMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsWaitingMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_TextInputDialog_C::SetWaitingMode(bool IsWaitingMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TextInputDialog_C", "SetWaitingMode");

	Params::BP_TextInputDialog_C_SetWaitingMode Parms{};

	Parms.IsWaitingMode = IsWaitingMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TextInputDialog.BP_TextInputDialog_C.SetNormalTextLimit
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Limit                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_TextInputDialog_C::SetNormalTextLimit(int32 Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TextInputDialog_C", "SetNormalTextLimit");

	Params::BP_TextInputDialog_C_SetNormalTextLimit Parms{};

	Parms.Limit = Limit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TextInputDialog.BP_TextInputDialog_C.ValidateNormalText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             InputText                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             OutputText                                             (Parm, OutParm)

void UBP_TextInputDialog_C::ValidateNormalText(const class FText& InputText, class FText* OutputText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TextInputDialog_C", "ValidateNormalText");

	Params::BP_TextInputDialog_C_ValidateNormalText Parms{};

	Parms.InputText = std::move(InputText);

	UObject::ProcessEvent(Func, &Parms);

	if (OutputText != nullptr)
		*OutputText = std::move(Parms.OutputText);
}

}

