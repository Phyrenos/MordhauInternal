#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AB_DeployableBallista

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "Mordhau_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass AB_DeployableBallista.AB_DeployableBallista_C
// 0x0810 (0x0B90 - 0x0380)
class UAB_DeployableBallista_C final : public UAdvancedCharacterAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0380(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0388(0x0030)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x03B8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x03E0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0408(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0430(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0458(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0480(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x04A8(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x04D0(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0550(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0580(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0600(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0630(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x06B0(0x0030)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator;                   // 0x06E0(0x0050)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0730(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0760(0x00B0)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0810(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_2;                        // 0x0830(0x0108)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0938(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x0958(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x0A60(0x0108)()
	float                                         ReloadTime;                                        // 0x0B68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HasDriverFloat;                                    // 0x0B6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookUp;                                            // 0x0B70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         State;                                             // 0x0B74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnTurnValue;                                    // 0x0B78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Turn;                                              // 0x0B7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Roll;                                              // 0x0B80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Pitch;                                             // 0x0B84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_AB_DeployableBallista(int32 EntryPoint);
	void BlueprintBeginPlay();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_DeployableBallista_AnimGraphNode_TransitionResult_FEBC7B2A464D1EAC733E9F9E13D536B4();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_DeployableBallista_AnimGraphNode_TransitionResult_8EA24580488520CBB422EDBE3A398502();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_DeployableBallista_AnimGraphNode_TransitionResult_21CA53CB456341CCC7BD78AE0BE969A6();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_DeployableBallista_AnimGraphNode_TransitionResult_52BE36854EF87D1CD3A735846FBB2A1A();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_DeployableBallista_AnimGraphNode_TransitionResult_C83393044E04E2A35725CEB1DDFA6DE2();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_DeployableBallista_AnimGraphNode_TransitionResult_552B54FC4BC1B95C9D965D87C54EE0A7();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_DeployableBallista_AnimGraphNode_TransitionResult_A3BE9F424378D3E6FBC1AC9CC07ED668();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_DeployableBallista_AnimGraphNode_SequencePlayer_6B0C0AF64AD59F37C07E89A9A170B98F();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_DeployableBallista_AnimGraphNode_ModifyBone_C9E6681A49176647A00FCBB075B7E964();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_DeployableBallista_AnimGraphNode_ModifyBone_79668771469D6679C325ACA4FAF0ACA7();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_DeployableBallista_AnimGraphNode_ModifyBone_6B45609945BD6DCDFE02E59283A9A956();
	void CovertWeaponStateToDeployableBallistaState(uint8 WeaponState, int32* BallistaState);
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AB_DeployableBallista_C">();
	}
	static class UAB_DeployableBallista_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAB_DeployableBallista_C>();
	}
};
static_assert(alignof(UAB_DeployableBallista_C) == 0x000010, "Wrong alignment on UAB_DeployableBallista_C");
static_assert(sizeof(UAB_DeployableBallista_C) == 0x000B90, "Wrong size on UAB_DeployableBallista_C");
static_assert(offsetof(UAB_DeployableBallista_C, UberGraphFrame) == 0x000380, "Member 'UAB_DeployableBallista_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, AnimGraphNode_Root) == 0x000388, "Member 'UAB_DeployableBallista_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, AnimGraphNode_TransitionResult_6) == 0x0003B8, "Member 'UAB_DeployableBallista_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, AnimGraphNode_TransitionResult_5) == 0x0003E0, "Member 'UAB_DeployableBallista_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, AnimGraphNode_TransitionResult_4) == 0x000408, "Member 'UAB_DeployableBallista_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, AnimGraphNode_TransitionResult_3) == 0x000430, "Member 'UAB_DeployableBallista_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, AnimGraphNode_TransitionResult_2) == 0x000458, "Member 'UAB_DeployableBallista_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, AnimGraphNode_TransitionResult_1) == 0x000480, "Member 'UAB_DeployableBallista_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, AnimGraphNode_TransitionResult) == 0x0004A8, "Member 'UAB_DeployableBallista_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, AnimGraphNode_SequencePlayer_2) == 0x0004D0, "Member 'UAB_DeployableBallista_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, AnimGraphNode_StateResult_3) == 0x000550, "Member 'UAB_DeployableBallista_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, AnimGraphNode_SequencePlayer_1) == 0x000580, "Member 'UAB_DeployableBallista_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, AnimGraphNode_StateResult_2) == 0x000600, "Member 'UAB_DeployableBallista_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, AnimGraphNode_SequencePlayer) == 0x000630, "Member 'UAB_DeployableBallista_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, AnimGraphNode_StateResult_1) == 0x0006B0, "Member 'UAB_DeployableBallista_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, AnimGraphNode_SequenceEvaluator) == 0x0006E0, "Member 'UAB_DeployableBallista_C::AnimGraphNode_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, AnimGraphNode_StateResult) == 0x000730, "Member 'UAB_DeployableBallista_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, AnimGraphNode_StateMachine) == 0x000760, "Member 'UAB_DeployableBallista_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, AnimGraphNode_LocalToComponentSpace) == 0x000810, "Member 'UAB_DeployableBallista_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, AnimGraphNode_ModifyBone_2) == 0x000830, "Member 'UAB_DeployableBallista_C::AnimGraphNode_ModifyBone_2' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, AnimGraphNode_ComponentToLocalSpace) == 0x000938, "Member 'UAB_DeployableBallista_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, AnimGraphNode_ModifyBone_1) == 0x000958, "Member 'UAB_DeployableBallista_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, AnimGraphNode_ModifyBone) == 0x000A60, "Member 'UAB_DeployableBallista_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, ReloadTime) == 0x000B68, "Member 'UAB_DeployableBallista_C::ReloadTime' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, HasDriverFloat) == 0x000B6C, "Member 'UAB_DeployableBallista_C::HasDriverFloat' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, LookUp) == 0x000B70, "Member 'UAB_DeployableBallista_C::LookUp' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, State) == 0x000B74, "Member 'UAB_DeployableBallista_C::State' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, SpawnTurnValue) == 0x000B78, "Member 'UAB_DeployableBallista_C::SpawnTurnValue' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, Turn) == 0x000B7C, "Member 'UAB_DeployableBallista_C::Turn' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, Roll) == 0x000B80, "Member 'UAB_DeployableBallista_C::Roll' has a wrong offset!");
static_assert(offsetof(UAB_DeployableBallista_C, Pitch) == 0x000B84, "Member 'UAB_DeployableBallista_C::Pitch' has a wrong offset!");

}

