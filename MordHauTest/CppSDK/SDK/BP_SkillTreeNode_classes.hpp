#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkillTreeNode

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "E_HordeSkill_structs.hpp"
#include "STRUCT_HordeSkillInfo_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_SkillTreeNode.BP_SkillTreeNode_C
// 0x0680 (0x08E0 - 0x0260)
class UBP_SkillTreeNode_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UWidgetAnimation*                       HoverAnim;                                         // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ActivateAnim;                                      // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UButton*                                Button_0;                                          // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Effect1;                                           // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Effect2;                                           // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Effect3;                                           // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_0;                                           // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_1;                                           // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_527;                                         // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Icon;                                        // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               LockOverlay;                                       // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_0;                                       // 0x02C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UpgradeBackground;                                 // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   Name_0;                                            // 0x02D0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Description;                                       // 0x02E8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UTexture2D*                             Icon;                                              // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsLocked;                                          // 0x0309(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30A[0x2];                                      // 0x030A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Cost;                                              // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Level;                                             // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxLevel;                                          // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FButtonStyle                           ButtonPressedStyle;                                // 0x0318(0x0278)(Edit, BlueprintVisible)
	struct FButtonStyle                           ButtonNormalStyle;                                 // 0x0590(0x0278)(Edit, BlueprintVisible)
	struct FLinearColor                           ActiveColor;                                       // 0x0808(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NeutralColor;                                      // 0x0818(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class UBP_SkillTreeNode_C* Ref)> NodeHovered;                                       // 0x0828(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Node_Index;                                        // 0x0838(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83C[0x4];                                      // 0x083C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_SkillTreeEntry_C*                   Skill_Tree_Entry;                                  // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class UBP_SkillTreeNode_C* Ref)> NodeClicked;                                       // 0x0848(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	E_HordeSkill                                  Skill;                                             // 0x0858(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          isUltimate;                                        // 0x0859(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85A[0x6];                                      // 0x085A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NextLevelDescription;                              // 0x0860(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSTRUCT_HordeSkillInfo                 SkillStruct;                                       // 0x0878(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SkillTreeNode(int32 EntryPoint);
	void Construct();
	void BndEvt__Button_0_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__Button_0_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature();
	void Activate();
	void BndEvt__Button_0_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
	struct FLinearColor Get_Image_Icon_ColorAndOpacity_0();
	class FText GetText_0();
	struct FSlateBrush Get_Image_Icon_Brush_0();
	void Update(bool Animate);
	ESlateVisibility Get_LockOverlay_Visibility_0();
	void SetActiveStyle();
	void CanUpgrade(bool* Result);
	void GetSkillPoints(int32* Result);
	struct FLinearColor GetColorAndOpacity_0();
	ESlateVisibility GetVisibility_0();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SkillTreeNode_C">();
	}
	static class UBP_SkillTreeNode_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_SkillTreeNode_C>();
	}
};
static_assert(alignof(UBP_SkillTreeNode_C) == 0x000008, "Wrong alignment on UBP_SkillTreeNode_C");
static_assert(sizeof(UBP_SkillTreeNode_C) == 0x0008E0, "Wrong size on UBP_SkillTreeNode_C");
static_assert(offsetof(UBP_SkillTreeNode_C, UberGraphFrame) == 0x000260, "Member 'UBP_SkillTreeNode_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, HoverAnim) == 0x000268, "Member 'UBP_SkillTreeNode_C::HoverAnim' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, ActivateAnim) == 0x000270, "Member 'UBP_SkillTreeNode_C::ActivateAnim' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, Button_0) == 0x000278, "Member 'UBP_SkillTreeNode_C::Button_0' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, Effect1) == 0x000280, "Member 'UBP_SkillTreeNode_C::Effect1' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, Effect2) == 0x000288, "Member 'UBP_SkillTreeNode_C::Effect2' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, Effect3) == 0x000290, "Member 'UBP_SkillTreeNode_C::Effect3' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, Image_0) == 0x000298, "Member 'UBP_SkillTreeNode_C::Image_0' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, Image_1) == 0x0002A0, "Member 'UBP_SkillTreeNode_C::Image_1' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, Image_527) == 0x0002A8, "Member 'UBP_SkillTreeNode_C::Image_527' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, Image_Icon) == 0x0002B0, "Member 'UBP_SkillTreeNode_C::Image_Icon' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, LockOverlay) == 0x0002B8, "Member 'UBP_SkillTreeNode_C::LockOverlay' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, TextBlock_0) == 0x0002C0, "Member 'UBP_SkillTreeNode_C::TextBlock_0' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, UpgradeBackground) == 0x0002C8, "Member 'UBP_SkillTreeNode_C::UpgradeBackground' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, Name_0) == 0x0002D0, "Member 'UBP_SkillTreeNode_C::Name_0' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, Description) == 0x0002E8, "Member 'UBP_SkillTreeNode_C::Description' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, Icon) == 0x000300, "Member 'UBP_SkillTreeNode_C::Icon' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, IsActive) == 0x000308, "Member 'UBP_SkillTreeNode_C::IsActive' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, IsLocked) == 0x000309, "Member 'UBP_SkillTreeNode_C::IsLocked' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, Cost) == 0x00030C, "Member 'UBP_SkillTreeNode_C::Cost' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, Level) == 0x000310, "Member 'UBP_SkillTreeNode_C::Level' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, MaxLevel) == 0x000314, "Member 'UBP_SkillTreeNode_C::MaxLevel' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, ButtonPressedStyle) == 0x000318, "Member 'UBP_SkillTreeNode_C::ButtonPressedStyle' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, ButtonNormalStyle) == 0x000590, "Member 'UBP_SkillTreeNode_C::ButtonNormalStyle' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, ActiveColor) == 0x000808, "Member 'UBP_SkillTreeNode_C::ActiveColor' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, NeutralColor) == 0x000818, "Member 'UBP_SkillTreeNode_C::NeutralColor' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, NodeHovered) == 0x000828, "Member 'UBP_SkillTreeNode_C::NodeHovered' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, Node_Index) == 0x000838, "Member 'UBP_SkillTreeNode_C::Node_Index' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, Skill_Tree_Entry) == 0x000840, "Member 'UBP_SkillTreeNode_C::Skill_Tree_Entry' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, NodeClicked) == 0x000848, "Member 'UBP_SkillTreeNode_C::NodeClicked' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, Skill) == 0x000858, "Member 'UBP_SkillTreeNode_C::Skill' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, isUltimate) == 0x000859, "Member 'UBP_SkillTreeNode_C::isUltimate' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, NextLevelDescription) == 0x000860, "Member 'UBP_SkillTreeNode_C::NextLevelDescription' has a wrong offset!");
static_assert(offsetof(UBP_SkillTreeNode_C, SkillStruct) == 0x000878, "Member 'UBP_SkillTreeNode_C::SkillStruct' has a wrong offset!");

}

