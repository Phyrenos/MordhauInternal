#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HolyHandGrenadeProjectile

#include "Basic.hpp"

#include "BP_HolyHandGrenadeProjectile_classes.hpp"
#include "BP_HolyHandGrenadeProjectile_parameters.hpp"


namespace SDK
{

// Function BP_HolyHandGrenadeProjectile.BP_HolyHandGrenadeProjectile_C.ExecuteUbergraph_BP_HolyHandGrenadeProjectile
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HolyHandGrenadeProjectile_C::ExecuteUbergraph_BP_HolyHandGrenadeProjectile(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HolyHandGrenadeProjectile_C", "ExecuteUbergraph_BP_HolyHandGrenadeProjectile");

	Params::BP_HolyHandGrenadeProjectile_C_ExecuteUbergraph_BP_HolyHandGrenadeProjectile Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HolyHandGrenadeProjectile.BP_HolyHandGrenadeProjectile_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_HolyHandGrenadeProjectile_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HolyHandGrenadeProjectile_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HolyHandGrenadeProjectile.BP_HolyHandGrenadeProjectile_C.ImpactEffectsMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HolyHandGrenadeProjectile_C::ImpactEffectsMulti(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HolyHandGrenadeProjectile_C", "ImpactEffectsMulti");

	Params::BP_HolyHandGrenadeProjectile_C_ImpactEffectsMulti Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HolyHandGrenadeProjectile.BP_HolyHandGrenadeProjectile_C.OnProjectileHit
// (Event, Public, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BounceForce                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Surface                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHasHitWorld                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bHasStopped                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HolyHandGrenadeProjectile_C::OnProjectileHit(const struct FVector& HitLocation, const struct FVector& HitNormal, float BounceForce, uint8 Surface, bool bHasHitWorld, bool bHasStopped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HolyHandGrenadeProjectile_C", "OnProjectileHit");

	Params::BP_HolyHandGrenadeProjectile_C_OnProjectileHit Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.BounceForce = BounceForce;
	Parms.Surface = Surface;
	Parms.bHasHitWorld = bHasHitWorld;
	Parms.bHasStopped = bHasStopped;

	UObject::ProcessEvent(Func, &Parms);
}

}

