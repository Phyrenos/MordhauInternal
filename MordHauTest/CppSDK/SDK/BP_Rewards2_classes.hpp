#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Rewards2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"
#include "Mordhau_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_Rewards2.BP_Rewards2_C
// 0x00B0 (0x0310 - 0x0260)
class UBP_Rewards2_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UWidgetAnimation*                       XPEntry_Anim;                                      // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBP_CasualRankUp_C*                     BP_CasualRankDiamondBig;                           // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_CasualRankWidget_C*                 BP_CasualRankWidget;                               // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_GoldReward_C*                       BP_GoldReward;                                     // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_PlayerWidget_C*                     BP_PlayerWidget;                                   // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_0;                                     // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             EarnedXPText;                                      // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             HeaderText;                                        // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_0;                                         // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         EarnedGold;                                        // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EarnedXP;                                          // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentGold;                                       // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentXP;                                         // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentXPOriginalValue;                            // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DisplayedEarnedXP;                                 // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CountedEarnedXP;                                   // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NextRankXP;                                        // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CountedRemainingXP;                                // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldCountXP;                                     // 0x02D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisplayedXPProgressStart;                          // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DisplayedXPProgressTarget;                         // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterpCounter;                                     // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReceivedRewards;                                   // 0x02E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E5[0x3];                                      // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           RewardDropTimeout;                                 // 0x02E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_ReusableNavTabButton_C*             NavTabButton;                                      // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isRewardsSequenceDone;                             // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              RewardsComplete;                                   // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_BP_Rewards2(int32 EntryPoint);
	void Update_Player_Widget();
	void BeginGoldAnimation();
	void Enable();
	void OnRewardsDropped(bool bWasSuccessful, const class FString& PlayFabId, int32 Gold, int32 XP);
	void Construct();
	void RewardDropTimedOut();
	void RequestRewards();
	void MergeGold();
	void RankUpAnimDone();
	void ExitXP();
	void RankUp();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void AddToXPBar();
	void BeginXPSequence();
	class FText Get_EarnedXPText_Text_0();
	void InitializeRankValues(class UBP_CasualRankWidget_C* Casual_Rank_Widget_Ref);
	void XP_Interpolation(class UBP_CasualRankWidget_C* Casual_Rank_Widget_Ref, float Delta_Time);
	void HandleRankUp(class UBP_CasualRankWidget_C* Casual_Rank_Widget_Ref);
	void FindProgressBarTarget(int32 Next_Rank_XP, int32 Current_Rank_XP, int32 Current_XP, int32 Earned_XP, float* Target);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Rewards2_C">();
	}
	static class UBP_Rewards2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Rewards2_C>();
	}
};
static_assert(alignof(UBP_Rewards2_C) == 0x000008, "Wrong alignment on UBP_Rewards2_C");
static_assert(sizeof(UBP_Rewards2_C) == 0x000310, "Wrong size on UBP_Rewards2_C");
static_assert(offsetof(UBP_Rewards2_C, UberGraphFrame) == 0x000260, "Member 'UBP_Rewards2_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, XPEntry_Anim) == 0x000268, "Member 'UBP_Rewards2_C::XPEntry_Anim' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, BP_CasualRankDiamondBig) == 0x000270, "Member 'UBP_Rewards2_C::BP_CasualRankDiamondBig' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, BP_CasualRankWidget) == 0x000278, "Member 'UBP_Rewards2_C::BP_CasualRankWidget' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, BP_GoldReward) == 0x000280, "Member 'UBP_Rewards2_C::BP_GoldReward' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, BP_PlayerWidget) == 0x000288, "Member 'UBP_Rewards2_C::BP_PlayerWidget' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, CanvasPanel_0) == 0x000290, "Member 'UBP_Rewards2_C::CanvasPanel_0' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, EarnedXPText) == 0x000298, "Member 'UBP_Rewards2_C::EarnedXPText' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, HeaderText) == 0x0002A0, "Member 'UBP_Rewards2_C::HeaderText' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, SizeBox_0) == 0x0002A8, "Member 'UBP_Rewards2_C::SizeBox_0' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, EarnedGold) == 0x0002B0, "Member 'UBP_Rewards2_C::EarnedGold' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, EarnedXP) == 0x0002B4, "Member 'UBP_Rewards2_C::EarnedXP' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, CurrentGold) == 0x0002B8, "Member 'UBP_Rewards2_C::CurrentGold' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, CurrentXP) == 0x0002BC, "Member 'UBP_Rewards2_C::CurrentXP' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, CurrentXPOriginalValue) == 0x0002C0, "Member 'UBP_Rewards2_C::CurrentXPOriginalValue' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, DisplayedEarnedXP) == 0x0002C4, "Member 'UBP_Rewards2_C::DisplayedEarnedXP' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, CountedEarnedXP) == 0x0002C8, "Member 'UBP_Rewards2_C::CountedEarnedXP' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, NextRankXP) == 0x0002CC, "Member 'UBP_Rewards2_C::NextRankXP' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, CountedRemainingXP) == 0x0002D0, "Member 'UBP_Rewards2_C::CountedRemainingXP' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, ShouldCountXP) == 0x0002D4, "Member 'UBP_Rewards2_C::ShouldCountXP' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, DisplayedXPProgressStart) == 0x0002D8, "Member 'UBP_Rewards2_C::DisplayedXPProgressStart' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, DisplayedXPProgressTarget) == 0x0002DC, "Member 'UBP_Rewards2_C::DisplayedXPProgressTarget' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, InterpCounter) == 0x0002E0, "Member 'UBP_Rewards2_C::InterpCounter' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, ReceivedRewards) == 0x0002E4, "Member 'UBP_Rewards2_C::ReceivedRewards' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, RewardDropTimeout) == 0x0002E8, "Member 'UBP_Rewards2_C::RewardDropTimeout' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, NavTabButton) == 0x0002F0, "Member 'UBP_Rewards2_C::NavTabButton' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, isRewardsSequenceDone) == 0x0002F8, "Member 'UBP_Rewards2_C::isRewardsSequenceDone' has a wrong offset!");
static_assert(offsetof(UBP_Rewards2_C, RewardsComplete) == 0x000300, "Member 'UBP_Rewards2_C::RewardsComplete' has a wrong offset!");

}

