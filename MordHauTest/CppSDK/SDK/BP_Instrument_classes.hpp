#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Instrument

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mordhau_structs.hpp"
#include "BP_MordhauWeapon_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Instrument.BP_Instrument_C
// 0x00A0 (0x1D40 - 0x1CA0)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_Instrument_C : public ABP_MordhauWeapon_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1C98(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UAudioComponent*                        Audio3;                                            // 0x1CA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UAudioComponent*                        Audio2;                                            // 0x1CA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UAudioComponent*                        Audio1;                                            // 0x1CB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UAudioComponent*                        Audio0;                                            // 0x1CB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	uint8                                         ReplicatedTone;                                    // 0x1CC0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CC1[0x3];                                     // 0x1CC1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ToneCooldown;                                      // 0x1CC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChordCooldown;                                     // 0x1CC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CCC[0x4];                                     // 0x1CCC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USoundWave*>                     SimpleModeSounds;                                  // 0x1CD0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAudioComponent*>                AudioComponents;                                   // 0x1CE0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         LastAudioComponent;                                // 0x1CF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NextChordTime;                                     // 0x1CF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NextPlayTime;                                      // 0x1CF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CFC[0x4];                                     // 0x1CFC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USoundWave*>                     ToneSounds;                                        // 0x1D00(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         ScaleOffset;                                       // 0x1D10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinimumAnimationDelay;                             // 0x1D14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastAnimationPlayTime;                             // 0x1D18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ManualPlayToneOffset;                              // 0x1D1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPerspectiveAnimMontage                PlayMontage;                                       // 0x1D20(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          StopsPreviousSound;                                // 0x1D30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Instrument(int32 EntryPoint);
	void EquipmentCommand(int32 Command);
	void ServerSetTone(uint8 Tone);
	void RequestAttack(EAttackMove Move, float Angle);
	void UserConstructionScript();
	void OnRep_ReplicatedTone();
	void PlayTone(uint8 Tone);
	void GetToneFromAttack(EAttackMove Move, float Angle, uint8* Tone);
	bool RequestBlock(EBlockType BlockType, bool bAllowFTP);
	void ServerSetToneAndPlay(uint8 Tone);
	void CanPlay(bool* Return);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Instrument_C">();
	}
	static class ABP_Instrument_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Instrument_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_Instrument_C) == 0x000010, "Wrong alignment on ABP_Instrument_C");
static_assert(sizeof(ABP_Instrument_C) == 0x001D40, "Wrong size on ABP_Instrument_C");
static_assert(offsetof(ABP_Instrument_C, UberGraphFrame) == 0x001C98, "Member 'ABP_Instrument_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Instrument_C, Audio3) == 0x001CA0, "Member 'ABP_Instrument_C::Audio3' has a wrong offset!");
static_assert(offsetof(ABP_Instrument_C, Audio2) == 0x001CA8, "Member 'ABP_Instrument_C::Audio2' has a wrong offset!");
static_assert(offsetof(ABP_Instrument_C, Audio1) == 0x001CB0, "Member 'ABP_Instrument_C::Audio1' has a wrong offset!");
static_assert(offsetof(ABP_Instrument_C, Audio0) == 0x001CB8, "Member 'ABP_Instrument_C::Audio0' has a wrong offset!");
static_assert(offsetof(ABP_Instrument_C, ReplicatedTone) == 0x001CC0, "Member 'ABP_Instrument_C::ReplicatedTone' has a wrong offset!");
static_assert(offsetof(ABP_Instrument_C, ToneCooldown) == 0x001CC4, "Member 'ABP_Instrument_C::ToneCooldown' has a wrong offset!");
static_assert(offsetof(ABP_Instrument_C, ChordCooldown) == 0x001CC8, "Member 'ABP_Instrument_C::ChordCooldown' has a wrong offset!");
static_assert(offsetof(ABP_Instrument_C, SimpleModeSounds) == 0x001CD0, "Member 'ABP_Instrument_C::SimpleModeSounds' has a wrong offset!");
static_assert(offsetof(ABP_Instrument_C, AudioComponents) == 0x001CE0, "Member 'ABP_Instrument_C::AudioComponents' has a wrong offset!");
static_assert(offsetof(ABP_Instrument_C, LastAudioComponent) == 0x001CF0, "Member 'ABP_Instrument_C::LastAudioComponent' has a wrong offset!");
static_assert(offsetof(ABP_Instrument_C, NextChordTime) == 0x001CF4, "Member 'ABP_Instrument_C::NextChordTime' has a wrong offset!");
static_assert(offsetof(ABP_Instrument_C, NextPlayTime) == 0x001CF8, "Member 'ABP_Instrument_C::NextPlayTime' has a wrong offset!");
static_assert(offsetof(ABP_Instrument_C, ToneSounds) == 0x001D00, "Member 'ABP_Instrument_C::ToneSounds' has a wrong offset!");
static_assert(offsetof(ABP_Instrument_C, ScaleOffset) == 0x001D10, "Member 'ABP_Instrument_C::ScaleOffset' has a wrong offset!");
static_assert(offsetof(ABP_Instrument_C, MinimumAnimationDelay) == 0x001D14, "Member 'ABP_Instrument_C::MinimumAnimationDelay' has a wrong offset!");
static_assert(offsetof(ABP_Instrument_C, LastAnimationPlayTime) == 0x001D18, "Member 'ABP_Instrument_C::LastAnimationPlayTime' has a wrong offset!");
static_assert(offsetof(ABP_Instrument_C, ManualPlayToneOffset) == 0x001D1C, "Member 'ABP_Instrument_C::ManualPlayToneOffset' has a wrong offset!");
static_assert(offsetof(ABP_Instrument_C, PlayMontage) == 0x001D20, "Member 'ABP_Instrument_C::PlayMontage' has a wrong offset!");
static_assert(offsetof(ABP_Instrument_C, StopsPreviousSound) == 0x001D30, "Member 'ABP_Instrument_C::StopsPreviousSound' has a wrong offset!");

}

