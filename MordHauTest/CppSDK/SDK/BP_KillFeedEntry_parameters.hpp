#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KillFeedEntry

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_KillFeedEntry.BP_KillFeedEntry_C.ExecuteUbergraph_BP_KillFeedEntry
// 0x0020 (0x0020 - 0x0000)
struct BP_KillFeedEntry_C_ExecuteUbergraph_BP_KillFeedEntry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsExpanded;                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsSelected;                          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Event_ListItemObject;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_KillfeedEntryData_C*                K2Node_DynamicCast_AsBP_Killfeed_Entry_Data;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KillFeedEntry_C_ExecuteUbergraph_BP_KillFeedEntry) == 0x000008, "Wrong alignment on BP_KillFeedEntry_C_ExecuteUbergraph_BP_KillFeedEntry");
static_assert(sizeof(BP_KillFeedEntry_C_ExecuteUbergraph_BP_KillFeedEntry) == 0x000020, "Wrong size on BP_KillFeedEntry_C_ExecuteUbergraph_BP_KillFeedEntry");
static_assert(offsetof(BP_KillFeedEntry_C_ExecuteUbergraph_BP_KillFeedEntry, EntryPoint) == 0x000000, "Member 'BP_KillFeedEntry_C_ExecuteUbergraph_BP_KillFeedEntry::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_KillFeedEntry_C_ExecuteUbergraph_BP_KillFeedEntry, K2Node_Event_bIsExpanded) == 0x000004, "Member 'BP_KillFeedEntry_C_ExecuteUbergraph_BP_KillFeedEntry::K2Node_Event_bIsExpanded' has a wrong offset!");
static_assert(offsetof(BP_KillFeedEntry_C_ExecuteUbergraph_BP_KillFeedEntry, K2Node_Event_bIsSelected) == 0x000005, "Member 'BP_KillFeedEntry_C_ExecuteUbergraph_BP_KillFeedEntry::K2Node_Event_bIsSelected' has a wrong offset!");
static_assert(offsetof(BP_KillFeedEntry_C_ExecuteUbergraph_BP_KillFeedEntry, K2Node_Event_ListItemObject) == 0x000008, "Member 'BP_KillFeedEntry_C_ExecuteUbergraph_BP_KillFeedEntry::K2Node_Event_ListItemObject' has a wrong offset!");
static_assert(offsetof(BP_KillFeedEntry_C_ExecuteUbergraph_BP_KillFeedEntry, K2Node_DynamicCast_AsBP_Killfeed_Entry_Data) == 0x000010, "Member 'BP_KillFeedEntry_C_ExecuteUbergraph_BP_KillFeedEntry::K2Node_DynamicCast_AsBP_Killfeed_Entry_Data' has a wrong offset!");
static_assert(offsetof(BP_KillFeedEntry_C_ExecuteUbergraph_BP_KillFeedEntry, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_KillFeedEntry_C_ExecuteUbergraph_BP_KillFeedEntry::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_KillFeedEntry.BP_KillFeedEntry_C.OnListItemObjectSet
// 0x0008 (0x0008 - 0x0000)
struct BP_KillFeedEntry_C_OnListItemObjectSet final
{
public:
	class UObject*                                ListItemObject;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KillFeedEntry_C_OnListItemObjectSet) == 0x000008, "Wrong alignment on BP_KillFeedEntry_C_OnListItemObjectSet");
static_assert(sizeof(BP_KillFeedEntry_C_OnListItemObjectSet) == 0x000008, "Wrong size on BP_KillFeedEntry_C_OnListItemObjectSet");
static_assert(offsetof(BP_KillFeedEntry_C_OnListItemObjectSet, ListItemObject) == 0x000000, "Member 'BP_KillFeedEntry_C_OnListItemObjectSet::ListItemObject' has a wrong offset!");

// Function BP_KillFeedEntry.BP_KillFeedEntry_C.BP_OnItemSelectionChanged
// 0x0001 (0x0001 - 0x0000)
struct BP_KillFeedEntry_C_BP_OnItemSelectionChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KillFeedEntry_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong alignment on BP_KillFeedEntry_C_BP_OnItemSelectionChanged");
static_assert(sizeof(BP_KillFeedEntry_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong size on BP_KillFeedEntry_C_BP_OnItemSelectionChanged");
static_assert(offsetof(BP_KillFeedEntry_C_BP_OnItemSelectionChanged, bIsSelected) == 0x000000, "Member 'BP_KillFeedEntry_C_BP_OnItemSelectionChanged::bIsSelected' has a wrong offset!");

// Function BP_KillFeedEntry.BP_KillFeedEntry_C.BP_OnItemExpansionChanged
// 0x0001 (0x0001 - 0x0000)
struct BP_KillFeedEntry_C_BP_OnItemExpansionChanged final
{
public:
	bool                                          bIsExpanded;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KillFeedEntry_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong alignment on BP_KillFeedEntry_C_BP_OnItemExpansionChanged");
static_assert(sizeof(BP_KillFeedEntry_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong size on BP_KillFeedEntry_C_BP_OnItemExpansionChanged");
static_assert(offsetof(BP_KillFeedEntry_C_BP_OnItemExpansionChanged, bIsExpanded) == 0x000000, "Member 'BP_KillFeedEntry_C_BP_OnItemExpansionChanged::bIsExpanded' has a wrong offset!");

// Function BP_KillFeedEntry.BP_KillFeedEntry_C.Setup
// 0x00B8 (0x00B8 - 0x0000)
struct BP_KillFeedEntry_C_Setup final
{
public:
	class FText                                   Killer_0;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   KilledBy_0;                                        // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   Victim_0;                                          // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FLinearColor                           KillerColor_0;                                     // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           KilledColor_0;                                     // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0068(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0090(0x0028)(UObjectWrapper)
};
static_assert(alignof(BP_KillFeedEntry_C_Setup) == 0x000008, "Wrong alignment on BP_KillFeedEntry_C_Setup");
static_assert(sizeof(BP_KillFeedEntry_C_Setup) == 0x0000B8, "Wrong size on BP_KillFeedEntry_C_Setup");
static_assert(offsetof(BP_KillFeedEntry_C_Setup, Killer_0) == 0x000000, "Member 'BP_KillFeedEntry_C_Setup::Killer_0' has a wrong offset!");
static_assert(offsetof(BP_KillFeedEntry_C_Setup, KilledBy_0) == 0x000018, "Member 'BP_KillFeedEntry_C_Setup::KilledBy_0' has a wrong offset!");
static_assert(offsetof(BP_KillFeedEntry_C_Setup, Victim_0) == 0x000030, "Member 'BP_KillFeedEntry_C_Setup::Victim_0' has a wrong offset!");
static_assert(offsetof(BP_KillFeedEntry_C_Setup, KillerColor_0) == 0x000048, "Member 'BP_KillFeedEntry_C_Setup::KillerColor_0' has a wrong offset!");
static_assert(offsetof(BP_KillFeedEntry_C_Setup, KilledColor_0) == 0x000058, "Member 'BP_KillFeedEntry_C_Setup::KilledColor_0' has a wrong offset!");
static_assert(offsetof(BP_KillFeedEntry_C_Setup, K2Node_MakeStruct_SlateColor) == 0x000068, "Member 'BP_KillFeedEntry_C_Setup::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_KillFeedEntry_C_Setup, K2Node_MakeStruct_SlateColor_1) == 0x000090, "Member 'BP_KillFeedEntry_C_Setup::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");

// Function BP_KillFeedEntry.BP_KillFeedEntry_C.GetText_0
// 0x0018 (0x0018 - 0x0000)
struct BP_KillFeedEntry_C_GetText_0 final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(BP_KillFeedEntry_C_GetText_0) == 0x000008, "Wrong alignment on BP_KillFeedEntry_C_GetText_0");
static_assert(sizeof(BP_KillFeedEntry_C_GetText_0) == 0x000018, "Wrong size on BP_KillFeedEntry_C_GetText_0");
static_assert(offsetof(BP_KillFeedEntry_C_GetText_0, ReturnValue) == 0x000000, "Member 'BP_KillFeedEntry_C_GetText_0::ReturnValue' has a wrong offset!");

}

