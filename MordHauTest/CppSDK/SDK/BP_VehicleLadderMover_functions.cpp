#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VehicleLadderMover

#include "Basic.hpp"

#include "BP_VehicleLadderMover_classes.hpp"
#include "BP_VehicleLadderMover_parameters.hpp"


namespace SDK
{

// Function BP_VehicleLadderMover.BP_VehicleLadderMover_C.ExecuteUbergraph_BP_VehicleLadderMover
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_VehicleLadderMover_C::ExecuteUbergraph_BP_VehicleLadderMover(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleLadderMover_C", "ExecuteUbergraph_BP_VehicleLadderMover");

	Params::BP_VehicleLadderMover_C_ExecuteUbergraph_BP_VehicleLadderMover Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleLadderMover.BP_VehicleLadderMover_C.OnDriverChanged
// (Event, Protected, BlueprintEvent)

void UBP_VehicleLadderMover_C::OnDriverChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleLadderMover_C", "OnDriverChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleLadderMover.BP_VehicleLadderMover_C.UpdateAnimationFor
// (Event, Public, BlueprintEvent)
// Parameters:
// class AMordhauCharacter*                Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMordhauAnimInstance*             AnimInst                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_VehicleLadderMover_C::UpdateAnimationFor(class AMordhauCharacter* Character, class UMordhauAnimInstance* AnimInst, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleLadderMover_C", "UpdateAnimationFor");

	Params::BP_VehicleLadderMover_C_UpdateAnimationFor Parms{};

	Parms.Character = Character;
	Parms.AnimInst = AnimInst;
	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleLadderMover.BP_VehicleLadderMover_C.UpdateFPCameraFor
// (Event, Public, BlueprintEvent)
// Parameters:
// class AMordhauCharacter*                Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bRotationOnly                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_VehicleLadderMover_C::UpdateFPCameraFor(class AMordhauCharacter* Character, float DeltaSeconds, bool bRotationOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleLadderMover_C", "UpdateFPCameraFor");

	Params::BP_VehicleLadderMover_C_UpdateFPCameraFor Parms{};

	Parms.Character = Character;
	Parms.DeltaSeconds = DeltaSeconds;
	Parms.bRotationOnly = bRotationOnly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleLadderMover.BP_VehicleLadderMover_C.OnStoppedDriving
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AMordhauCharacter*                Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_VehicleLadderMover_C::OnStoppedDriving(class AMordhauCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleLadderMover_C", "OnStoppedDriving");

	Params::BP_VehicleLadderMover_C_OnStoppedDriving Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleLadderMover.BP_VehicleLadderMover_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_VehicleLadderMover_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleLadderMover_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleLadderMover.BP_VehicleLadderMover_C.GetExitTransform
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)

struct FTransform UBP_VehicleLadderMover_C::GetExitTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleLadderMover_C", "GetExitTransform");

	Params::BP_VehicleLadderMover_C_GetExitTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_VehicleLadderMover.BP_VehicleLadderMover_C.OverrideAttackAngle
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAttackMotion*                    Motion                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBP_VehicleLadderMover_C::OverrideAttackAngle(class UAttackMotion* Motion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleLadderMover_C", "OverrideAttackAngle");

	Params::BP_VehicleLadderMover_C_OverrideAttackAngle Parms{};

	Parms.Motion = Motion;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

