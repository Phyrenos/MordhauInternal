#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NewUnlockIndicator

#include "Basic.hpp"

#include "BP_NewUnlockIndicator_classes.hpp"
#include "BP_NewUnlockIndicator_parameters.hpp"


namespace SDK
{

// Function BP_NewUnlockIndicator.BP_NewUnlockIndicator_C.ExecuteUbergraph_BP_NewUnlockIndicator
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NewUnlockIndicator_C::ExecuteUbergraph_BP_NewUnlockIndicator(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NewUnlockIndicator_C", "ExecuteUbergraph_BP_NewUnlockIndicator");

	Params::BP_NewUnlockIndicator_C_ExecuteUbergraph_BP_NewUnlockIndicator Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NewUnlockIndicator.BP_NewUnlockIndicator_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UBP_NewUnlockIndicator_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NewUnlockIndicator_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NewUnlockIndicator.BP_NewUnlockIndicator_C.Hide Indicator
// (BlueprintCallable, BlueprintEvent)

void UBP_NewUnlockIndicator_C::Hide_Indicator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NewUnlockIndicator_C", "Hide Indicator");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NewUnlockIndicator.BP_NewUnlockIndicator_C.Show Indicator
// (BlueprintCallable, BlueprintEvent)

void UBP_NewUnlockIndicator_C::Show_Indicator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NewUnlockIndicator_C", "Show Indicator");

	UObject::ProcessEvent(Func, nullptr);
}

}

