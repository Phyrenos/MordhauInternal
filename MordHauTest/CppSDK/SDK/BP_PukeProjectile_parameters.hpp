#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PukeProjectile

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_PukeProjectile.BP_PukeProjectile_C.ExecuteUbergraph_BP_PukeProjectile
// 0x00B0 (0x00B0 - 0x0000)
struct BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitLocation;                          // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitNormal;                            // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_BounceForce;                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Event_Surface;                              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bHasHitWorld;                         // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bHasStopped;                          // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Initial_Speed;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0070(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BloatedPuke_C*                      CallFunc_FinishSpawningActor_ReturnValue;          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile) == 0x000010, "Wrong alignment on BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile");
static_assert(sizeof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile) == 0x0000B0, "Wrong size on BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile");
static_assert(offsetof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile, EntryPoint) == 0x000000, "Member 'BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000004, "Member 'BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile, CallFunc_HasAuthority_ReturnValue) == 0x000010, "Member 'BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile, CallFunc_BreakRotator_Roll) == 0x000014, "Member 'BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile, CallFunc_BreakRotator_Pitch) == 0x000018, "Member 'BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile, CallFunc_BreakRotator_Yaw) == 0x00001C, "Member 'BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile, K2Node_Event_HitLocation) == 0x000020, "Member 'BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile::K2Node_Event_HitLocation' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile, K2Node_Event_HitNormal) == 0x00002C, "Member 'BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile::K2Node_Event_HitNormal' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile, K2Node_Event_BounceForce) == 0x000038, "Member 'BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile::K2Node_Event_BounceForce' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile, K2Node_Event_Surface) == 0x00003C, "Member 'BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile::K2Node_Event_Surface' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile, K2Node_Event_bHasHitWorld) == 0x00003D, "Member 'BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile::K2Node_Event_bHasHitWorld' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile, K2Node_Event_bHasStopped) == 0x00003E, "Member 'BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile::K2Node_Event_bHasStopped' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile, K2Node_CustomEvent_Initial_Speed) == 0x000040, "Member 'BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile::K2Node_CustomEvent_Initial_Speed' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000044, "Member 'BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile, CallFunc_BreakRotator_Roll_1) == 0x000050, "Member 'BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile, CallFunc_BreakRotator_Pitch_1) == 0x000054, "Member 'BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile, CallFunc_BreakRotator_Yaw_1) == 0x000058, "Member 'BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile, CallFunc_MakeRotator_ReturnValue) == 0x00005C, "Member 'BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile, CallFunc_MakeTransform_ReturnValue) == 0x000070, "Member 'BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0000A0, "Member 'BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile, CallFunc_FinishSpawningActor_ReturnValue) == 0x0000A8, "Member 'BP_PukeProjectile_C_ExecuteUbergraph_BP_PukeProjectile::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function BP_PukeProjectile.BP_PukeProjectile_C.SetRandomisedSpeed
// 0x0004 (0x0004 - 0x0000)
struct BP_PukeProjectile_C_SetRandomisedSpeed final
{
public:
	float                                         Initial_Speed;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PukeProjectile_C_SetRandomisedSpeed) == 0x000004, "Wrong alignment on BP_PukeProjectile_C_SetRandomisedSpeed");
static_assert(sizeof(BP_PukeProjectile_C_SetRandomisedSpeed) == 0x000004, "Wrong size on BP_PukeProjectile_C_SetRandomisedSpeed");
static_assert(offsetof(BP_PukeProjectile_C_SetRandomisedSpeed, Initial_Speed) == 0x000000, "Member 'BP_PukeProjectile_C_SetRandomisedSpeed::Initial_Speed' has a wrong offset!");

// Function BP_PukeProjectile.BP_PukeProjectile_C.OnProjectileHit
// 0x0020 (0x0020 - 0x0000)
struct BP_PukeProjectile_C_OnProjectileHit final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BounceForce;                                       // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Surface;                                           // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasHitWorld;                                      // 0x001D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bHasStopped;                                       // 0x001E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PukeProjectile_C_OnProjectileHit) == 0x000004, "Wrong alignment on BP_PukeProjectile_C_OnProjectileHit");
static_assert(sizeof(BP_PukeProjectile_C_OnProjectileHit) == 0x000020, "Wrong size on BP_PukeProjectile_C_OnProjectileHit");
static_assert(offsetof(BP_PukeProjectile_C_OnProjectileHit, HitLocation) == 0x000000, "Member 'BP_PukeProjectile_C_OnProjectileHit::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_OnProjectileHit, HitNormal) == 0x00000C, "Member 'BP_PukeProjectile_C_OnProjectileHit::HitNormal' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_OnProjectileHit, BounceForce) == 0x000018, "Member 'BP_PukeProjectile_C_OnProjectileHit::BounceForce' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_OnProjectileHit, Surface) == 0x00001C, "Member 'BP_PukeProjectile_C_OnProjectileHit::Surface' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_OnProjectileHit, bHasHitWorld) == 0x00001D, "Member 'BP_PukeProjectile_C_OnProjectileHit::bHasHitWorld' has a wrong offset!");
static_assert(offsetof(BP_PukeProjectile_C_OnProjectileHit, bHasStopped) == 0x00001E, "Member 'BP_PukeProjectile_C_OnProjectileHit::bHasStopped' has a wrong offset!");

}

