#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WearableSlotCustomization

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mordhau_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_WearableSlotCustomization.BP_WearableSlotCustomization_C
// 0x00B8 (0x0318 - 0x0260)
class UBP_WearableSlotCustomization_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UImage*                                 Border;                                            // 0x0268(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_WearableItemEntry_C*                BP_WearableItemEntry;                              // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                Button_0;                                          // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_0;                                           // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_Wearable;                                  // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WidgetSwitcher_0;                                  // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	EWearableSlot                                 WearableSlot;                                      // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasColor1;                                         // 0x0299(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasColor2;                                         // 0x029A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasPatterns;                                       // 0x029B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x02A0(0x0018)(Edit, BlueprintVisible)
	class FText                                   WearableName;                                      // 0x02B8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Cost;                                              // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ArmorCustomization_C*               ArmorCustomization;                                // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInvalidDefaultCustomizationMode;                 // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DisableSlot;                                       // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E2[0x6];                                      // 0x02E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UBP_WearableSlotCustomization_C* Entry)> Slot_Clicked;                                      // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UBP_WearableSlotCustomization_C* Entry)> Slot_Hovered;                                      // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	uint8                                         Armor_Class;                                       // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ArmorTooltip_C*                     Armor_Tooltip;                                     // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_WearableSlotCustomization(int32 EntryPoint);
	void BndEvt__BP_WearableSlotCustomization_BP_WearableItemEntry_K2Node_ComponentBoundEvent_4_OnHover__DelegateSignature(class UBP_CustomizationItemEntry_C* Entry);
	void BndEvt__BP_WearableSlotCustomization_BP_WearableItemEntry_K2Node_ComponentBoundEvent_2_OnClick__DelegateSignature(class UBP_CustomizationItemEntry_C* Entry);
	void PreConstruct(bool IsDesignTime);
	void BndEvt__Button_0_K2Node_ComponentBoundEvent_3_OnButtonHoverEvent__DelegateSignature();
	void Construct();
	void BndEvt__Button_0_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();
	void GetValues(class FText* WearableName_0, uint8* WearableColor1Index, uint8* WearableColor2Index, uint8* Pattern, int32* PatternLength, TArray<class UClass*>* WearableColors1, TArray<class UClass*>* WearableColors2, bool* HasColor1_0, bool* HasColor2_0, uint8* ArmorClass, int32* Cost_0, int32* ItemDefID, EItemRarity* ItemRarity, class UClass** WearableClass, class UTexture2D** Item_Icon);
	void RebuildWidget();
	ESlateVisibility Get_MainSlotText_Visibility_0();
	ESlateVisibility Get_SubSlotText_Visibility_0();
	class FText Get_armorTier_ToolTipText();
	class FText Get_TextBlock_26_Text_0();
	ESlateVisibility GetVisibility_0();
	ESlateVisibility GetVisibility_1();
	class FText Get_MainSlotText_Text_0();
	ESlateVisibility GetVisibility_2();
	void Get_Colors(int32 Color_Slot, TArray<class UClass*>* Color_Table, class UClass** Color, uint8* Color_Index);
	ESlateVisibility Get_Overlay_Text_Visibility_0();
	ESlateVisibility GetVisibility_4();
	ESlateVisibility Get_GradientOverlay_Visibility_0();
	class UWidget* GetToolTipWidget_0();
	bool GetbIsEnabled_0();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WearableSlotCustomization_C">();
	}
	static class UBP_WearableSlotCustomization_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_WearableSlotCustomization_C>();
	}
};
static_assert(alignof(UBP_WearableSlotCustomization_C) == 0x000008, "Wrong alignment on UBP_WearableSlotCustomization_C");
static_assert(sizeof(UBP_WearableSlotCustomization_C) == 0x000318, "Wrong size on UBP_WearableSlotCustomization_C");
static_assert(offsetof(UBP_WearableSlotCustomization_C, UberGraphFrame) == 0x000260, "Member 'UBP_WearableSlotCustomization_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_WearableSlotCustomization_C, Border) == 0x000268, "Member 'UBP_WearableSlotCustomization_C::Border' has a wrong offset!");
static_assert(offsetof(UBP_WearableSlotCustomization_C, BP_WearableItemEntry) == 0x000270, "Member 'UBP_WearableSlotCustomization_C::BP_WearableItemEntry' has a wrong offset!");
static_assert(offsetof(UBP_WearableSlotCustomization_C, Button_0) == 0x000278, "Member 'UBP_WearableSlotCustomization_C::Button_0' has a wrong offset!");
static_assert(offsetof(UBP_WearableSlotCustomization_C, Image_0) == 0x000280, "Member 'UBP_WearableSlotCustomization_C::Image_0' has a wrong offset!");
static_assert(offsetof(UBP_WearableSlotCustomization_C, Overlay_Wearable) == 0x000288, "Member 'UBP_WearableSlotCustomization_C::Overlay_Wearable' has a wrong offset!");
static_assert(offsetof(UBP_WearableSlotCustomization_C, WidgetSwitcher_0) == 0x000290, "Member 'UBP_WearableSlotCustomization_C::WidgetSwitcher_0' has a wrong offset!");
static_assert(offsetof(UBP_WearableSlotCustomization_C, WearableSlot) == 0x000298, "Member 'UBP_WearableSlotCustomization_C::WearableSlot' has a wrong offset!");
static_assert(offsetof(UBP_WearableSlotCustomization_C, HasColor1) == 0x000299, "Member 'UBP_WearableSlotCustomization_C::HasColor1' has a wrong offset!");
static_assert(offsetof(UBP_WearableSlotCustomization_C, HasColor2) == 0x00029A, "Member 'UBP_WearableSlotCustomization_C::HasColor2' has a wrong offset!");
static_assert(offsetof(UBP_WearableSlotCustomization_C, HasPatterns) == 0x00029B, "Member 'UBP_WearableSlotCustomization_C::HasPatterns' has a wrong offset!");
static_assert(offsetof(UBP_WearableSlotCustomization_C, Text) == 0x0002A0, "Member 'UBP_WearableSlotCustomization_C::Text' has a wrong offset!");
static_assert(offsetof(UBP_WearableSlotCustomization_C, WearableName) == 0x0002B8, "Member 'UBP_WearableSlotCustomization_C::WearableName' has a wrong offset!");
static_assert(offsetof(UBP_WearableSlotCustomization_C, Cost) == 0x0002D0, "Member 'UBP_WearableSlotCustomization_C::Cost' has a wrong offset!");
static_assert(offsetof(UBP_WearableSlotCustomization_C, ArmorCustomization) == 0x0002D8, "Member 'UBP_WearableSlotCustomization_C::ArmorCustomization' has a wrong offset!");
static_assert(offsetof(UBP_WearableSlotCustomization_C, IsInvalidDefaultCustomizationMode) == 0x0002E0, "Member 'UBP_WearableSlotCustomization_C::IsInvalidDefaultCustomizationMode' has a wrong offset!");
static_assert(offsetof(UBP_WearableSlotCustomization_C, DisableSlot) == 0x0002E1, "Member 'UBP_WearableSlotCustomization_C::DisableSlot' has a wrong offset!");
static_assert(offsetof(UBP_WearableSlotCustomization_C, Slot_Clicked) == 0x0002E8, "Member 'UBP_WearableSlotCustomization_C::Slot_Clicked' has a wrong offset!");
static_assert(offsetof(UBP_WearableSlotCustomization_C, Slot_Hovered) == 0x0002F8, "Member 'UBP_WearableSlotCustomization_C::Slot_Hovered' has a wrong offset!");
static_assert(offsetof(UBP_WearableSlotCustomization_C, Armor_Class) == 0x000308, "Member 'UBP_WearableSlotCustomization_C::Armor_Class' has a wrong offset!");
static_assert(offsetof(UBP_WearableSlotCustomization_C, Armor_Tooltip) == 0x000310, "Member 'UBP_WearableSlotCustomization_C::Armor_Tooltip' has a wrong offset!");

}

