#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BlessingComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BlessingVisuals_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BlessingComponent.BP_BlessingComponent_C
// 0x0038 (0x00E8 - 0x00B0)
class UBP_BlessingComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class ABP_DemonHordeCharacter_C*              ParentCharacter;                                   // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AMordhauEquipment*                      Equipment;                                         // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FBlessingVisuals                       Visuals;                                           // 0x00C8(0x001C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BlessingComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void CleanBloodLoop();
	void ReceiveBeginPlay();
	void ApplyVisuals();
	void AddPointLight();
	void AddShineMesh();
	void CloneMesh(const struct FVector& LocationOffset, const struct FVector& ScaleMultiplier);
	void AddParticleEmitter();
	void SetWeaponStats();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BlessingComponent_C">();
	}
	static class UBP_BlessingComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_BlessingComponent_C>();
	}
};
static_assert(alignof(UBP_BlessingComponent_C) == 0x000008, "Wrong alignment on UBP_BlessingComponent_C");
static_assert(sizeof(UBP_BlessingComponent_C) == 0x0000E8, "Wrong size on UBP_BlessingComponent_C");
static_assert(offsetof(UBP_BlessingComponent_C, UberGraphFrame) == 0x0000B0, "Member 'UBP_BlessingComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_BlessingComponent_C, ParentCharacter) == 0x0000B8, "Member 'UBP_BlessingComponent_C::ParentCharacter' has a wrong offset!");
static_assert(offsetof(UBP_BlessingComponent_C, Equipment) == 0x0000C0, "Member 'UBP_BlessingComponent_C::Equipment' has a wrong offset!");
static_assert(offsetof(UBP_BlessingComponent_C, Visuals) == 0x0000C8, "Member 'UBP_BlessingComponent_C::Visuals' has a wrong offset!");

}

