#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VehicleDeployableBallista

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mordhau_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VehicleDeployableBallista.BP_VehicleDeployableBallista_C
// 0x0010 (0x01C0 - 0x01B0)
class UBP_VehicleDeployableBallista_C final : public UMordhauVehicleComponent
{
public:
	uint8                                         Pad_1A8[0x8];                                      // 0x01A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class ABP_DeployableBallista_C*               DeployableBallista;                                // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_VehicleDeployableBallista(int32 EntryPoint);
	void UpdateAnimationFor(class AMordhauCharacter* Character, class UMordhauAnimInstance* AnimInst, float DeltaTime);
	void UpdateFPCameraFor(class AMordhauCharacter* Character, float DeltaSeconds, bool bRotationOnly);
	void ReceiveBeginPlay();
	struct FPOV PostProcessCameraPOV(const struct FPOV& InPOV, class AMordhauCharacter* Character);

	bool CanDrive(class AMordhauCharacter* Character) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VehicleDeployableBallista_C">();
	}
	static class UBP_VehicleDeployableBallista_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_VehicleDeployableBallista_C>();
	}
};
static_assert(alignof(UBP_VehicleDeployableBallista_C) == 0x000010, "Wrong alignment on UBP_VehicleDeployableBallista_C");
static_assert(sizeof(UBP_VehicleDeployableBallista_C) == 0x0001C0, "Wrong size on UBP_VehicleDeployableBallista_C");
static_assert(offsetof(UBP_VehicleDeployableBallista_C, UberGraphFrame) == 0x0001B0, "Member 'UBP_VehicleDeployableBallista_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_VehicleDeployableBallista_C, DeployableBallista) == 0x0001B8, "Member 'UBP_VehicleDeployableBallista_C::DeployableBallista' has a wrong offset!");

}

