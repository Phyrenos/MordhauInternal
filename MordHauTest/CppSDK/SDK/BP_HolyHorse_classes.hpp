#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HolyHorse

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_ArmoredHorse_classes.hpp"
#include "Mordhau_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HolyHorse.BP_HolyHorse_C
// 0x0030 (0x0D10 - 0x0CE0)
class ABP_HolyHorse_C final : public ABP_ArmoredHorse_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_HolyHorse_C;                     // 0x0CD8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class USphereComponent*                       HealSphere;                                        // 0x0CE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0CE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_SlashTrail;                                      // 0x0CF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cone;                                              // 0x0CF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          HasBlessing;                                       // 0x0D00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_HolyHorse(int32 EntryPoint);
	void RegenLoop();
	void HealEffectsSelfMulti();
	void HealEffectsMulti(const struct FVector& Location);
	void HealLoop();
	void ApplyBlessing();
	void ReceiveBeginPlay();
	void OnDied(float Angle, EMordhauDamageType Type, uint8 SubType, class FName bone, const struct FVector& Point, class AActor* Source, class AActor* Agent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HolyHorse_C">();
	}
	static class ABP_HolyHorse_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HolyHorse_C>();
	}
};
static_assert(alignof(ABP_HolyHorse_C) == 0x000010, "Wrong alignment on ABP_HolyHorse_C");
static_assert(sizeof(ABP_HolyHorse_C) == 0x000D10, "Wrong size on ABP_HolyHorse_C");
static_assert(offsetof(ABP_HolyHorse_C, UberGraphFrame_BP_HolyHorse_C) == 0x000CD8, "Member 'ABP_HolyHorse_C::UberGraphFrame_BP_HolyHorse_C' has a wrong offset!");
static_assert(offsetof(ABP_HolyHorse_C, HealSphere) == 0x000CE0, "Member 'ABP_HolyHorse_C::HealSphere' has a wrong offset!");
static_assert(offsetof(ABP_HolyHorse_C, PointLight) == 0x000CE8, "Member 'ABP_HolyHorse_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_HolyHorse_C, P_SlashTrail) == 0x000CF0, "Member 'ABP_HolyHorse_C::P_SlashTrail' has a wrong offset!");
static_assert(offsetof(ABP_HolyHorse_C, Cone) == 0x000CF8, "Member 'ABP_HolyHorse_C::Cone' has a wrong offset!");
static_assert(offsetof(ABP_HolyHorse_C, HasBlessing) == 0x000D00, "Member 'ABP_HolyHorse_C::HasBlessing' has a wrong offset!");

}

