#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WearableItemEntry

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mordhau_structs.hpp"
#include "BP_CustomizationItemEntry_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_WearableItemEntry.BP_WearableItemEntry_C
// 0x00E0 (0x05A0 - 0x04C0)
class UBP_WearableItemEntry_C final : public UBP_CustomizationItemEntry_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_WearableItemEntry_C;             // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UWidgetAnimation*                       SelectedAnim;                                      // 0x04C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Background;                                        // 0x04D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BackgroundBorder;                                  // 0x04D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_ArmorLevelIndicator_C*              BP_ArmorLevelIndicator;                            // 0x04E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_CasualRankDiamond_C*                BP_CasualRankDiamond;                              // 0x04E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_DLCIndicator_C*                     BP_DLCIndicator;                                   // 0x04F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_ItemGoldCost_C*                     BP_ItemGoldCost;                                   // 0x04F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_NewUnlockIndicator_C*               BP_NewUnlockIndicator_1;                           // 0x0500(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                Button_0;                                          // 0x0508(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ic_locked;                                         // 0x0510(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_2;                                           // 0x0518(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_418;                                         // 0x0520(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_731;                                         // 0x0528(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Thumbnail;                                   // 0x0530(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_1;                                         // 0x0538(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_2;                                         // 0x0540(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_15;                                        // 0x0548(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URichTextBlock*                         RichTextBlock_0;                                   // 0x0550(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_0;                                         // 0x0558(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               UnlockInfoOverlay;                                 // 0x0560(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          Peasant_Weapon;                                    // 0x0568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_Allowed_For_Peasants;                           // 0x0569(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Armor_Class;                                       // 0x056A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWearableSlot                                 Wearable_Slot;                                     // 0x056B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EItemRarity                                   Item_Rarity;                                       // 0x056C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56D[0x3];                                      // 0x056D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_WearableData_C*                     WearableData;                                      // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Display_Entry;                                  // 0x0578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_579[0x7];                                      // 0x0579(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ArmorTooltip_C*                     ArmorTooltip;                                      // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(int32 ID)>      Wearable_Unlocked;                                 // 0x0588(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIsHordeDefaultCustomization;                      // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_WearableItemEntry(int32 EntryPoint);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void OnUnlocked();
	void BndEvt__BP_WearableItemEntry_Button_0_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();
	void Construct();
	void RefreshWidget();
	void Hide_Unlock_Indicator();
	void Initialize_Wearable_Entry();
	ESlateVisibility Get_CostAndIconBox_Visibility_0();
	ESlateVisibility Get_Selected_Visibility_0();
	ESlateVisibility Get_ic_locked_Visibility_0();
	ESlateVisibility GetVisibility_0();
	ESlateVisibility GetVisibility_1();
	void Update_Entry_Name(const class FText& Param_Name_0);
	struct FLinearColor Get_Image_10_ColorAndOpacity_0();
	void On_Data_Set();
	void GetData(struct FS_WearableData* WearableData_0);
	ESlateVisibility GetVisibility_2();
	ESlateVisibility Get_BP_New_Unlock_Indicator_1_Visibility_0();
	ESlateVisibility VisibleIfDLC();
	class UWidget* GetToolTipWidget_0();
	bool GetbIsEnabled_0();
	void SetSelected(bool isSelected_0);
	ESlateVisibility Get_Image_2_Visibility_0();
	ESlateVisibility GetVisibility_3();
	void BP_OnItemSelectionChanged(bool bIsSelected);
	void OnListItemObjectSet(class UObject* ListItemObject);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WearableItemEntry_C">();
	}
	static class UBP_WearableItemEntry_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_WearableItemEntry_C>();
	}
};
static_assert(alignof(UBP_WearableItemEntry_C) == 0x000008, "Wrong alignment on UBP_WearableItemEntry_C");
static_assert(sizeof(UBP_WearableItemEntry_C) == 0x0005A0, "Wrong size on UBP_WearableItemEntry_C");
static_assert(offsetof(UBP_WearableItemEntry_C, UberGraphFrame_BP_WearableItemEntry_C) == 0x0004C0, "Member 'UBP_WearableItemEntry_C::UberGraphFrame_BP_WearableItemEntry_C' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, SelectedAnim) == 0x0004C8, "Member 'UBP_WearableItemEntry_C::SelectedAnim' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, Background) == 0x0004D0, "Member 'UBP_WearableItemEntry_C::Background' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, BackgroundBorder) == 0x0004D8, "Member 'UBP_WearableItemEntry_C::BackgroundBorder' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, BP_ArmorLevelIndicator) == 0x0004E0, "Member 'UBP_WearableItemEntry_C::BP_ArmorLevelIndicator' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, BP_CasualRankDiamond) == 0x0004E8, "Member 'UBP_WearableItemEntry_C::BP_CasualRankDiamond' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, BP_DLCIndicator) == 0x0004F0, "Member 'UBP_WearableItemEntry_C::BP_DLCIndicator' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, BP_ItemGoldCost) == 0x0004F8, "Member 'UBP_WearableItemEntry_C::BP_ItemGoldCost' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, BP_NewUnlockIndicator_1) == 0x000500, "Member 'UBP_WearableItemEntry_C::BP_NewUnlockIndicator_1' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, Button_0) == 0x000508, "Member 'UBP_WearableItemEntry_C::Button_0' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, ic_locked) == 0x000510, "Member 'UBP_WearableItemEntry_C::ic_locked' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, Image_2) == 0x000518, "Member 'UBP_WearableItemEntry_C::Image_2' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, Image_418) == 0x000520, "Member 'UBP_WearableItemEntry_C::Image_418' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, Image_731) == 0x000528, "Member 'UBP_WearableItemEntry_C::Image_731' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, Image_Thumbnail) == 0x000530, "Member 'UBP_WearableItemEntry_C::Image_Thumbnail' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, Overlay_1) == 0x000538, "Member 'UBP_WearableItemEntry_C::Overlay_1' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, Overlay_2) == 0x000540, "Member 'UBP_WearableItemEntry_C::Overlay_2' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, Overlay_15) == 0x000548, "Member 'UBP_WearableItemEntry_C::Overlay_15' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, RichTextBlock_0) == 0x000550, "Member 'UBP_WearableItemEntry_C::RichTextBlock_0' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, SizeBox_0) == 0x000558, "Member 'UBP_WearableItemEntry_C::SizeBox_0' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, UnlockInfoOverlay) == 0x000560, "Member 'UBP_WearableItemEntry_C::UnlockInfoOverlay' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, Peasant_Weapon) == 0x000568, "Member 'UBP_WearableItemEntry_C::Peasant_Weapon' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, Is_Allowed_For_Peasants) == 0x000569, "Member 'UBP_WearableItemEntry_C::Is_Allowed_For_Peasants' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, Armor_Class) == 0x00056A, "Member 'UBP_WearableItemEntry_C::Armor_Class' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, Wearable_Slot) == 0x00056B, "Member 'UBP_WearableItemEntry_C::Wearable_Slot' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, Item_Rarity) == 0x00056C, "Member 'UBP_WearableItemEntry_C::Item_Rarity' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, WearableData) == 0x000570, "Member 'UBP_WearableItemEntry_C::WearableData' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, Is_Display_Entry) == 0x000578, "Member 'UBP_WearableItemEntry_C::Is_Display_Entry' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, ArmorTooltip) == 0x000580, "Member 'UBP_WearableItemEntry_C::ArmorTooltip' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, Wearable_Unlocked) == 0x000588, "Member 'UBP_WearableItemEntry_C::Wearable_Unlocked' has a wrong offset!");
static_assert(offsetof(UBP_WearableItemEntry_C, bIsHordeDefaultCustomization) == 0x000598, "Member 'UBP_WearableItemEntry_C::bIsHordeDefaultCustomization' has a wrong offset!");

}

