#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MordhauUtilityLibrary

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "Mordhau_structs.hpp"
#include "MordhauOnlineSubsystem_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MordhauUtilityLibrary.BP_MordhauUtilityLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UBP_MordhauUtilityLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void GetLastComboBoxOption(class UComboBoxText* ComboBox, class UObject* __WorldContext, class FText* Option);
	static void SelectLastComboBoxOption(class UComboBoxText* ComboBox, class UObject* __WorldContext);
	static bool IsFirstOptionSelected(class UComboBoxText* ComboBox, class UObject* __WorldContext);
	static void IsProfileNameValid(const class FText& ProfiletName, class UObject* __WorldContext, bool* IsValid);
	static void SelectFirstComboBoxOption(class UComboBoxText* ComboBox, class UObject* __WorldContext);
	static void GetSelectedIndex(class UComboBoxText* ComboBox, class UObject* __WorldContext, int32* SelectedIndex);
	static void ComputeRagdollForce(class AActor* Agent, uint8 DamageType, uint8 DamageSubType, uint8 RandomByte, class AActor* Receiver, class UObject* __WorldContext, struct FVector* Force);
	static void Create_Text_Input_Dialog(class APlayerController* OwningPlayer, const class FText& TitleText, const class FText& HintText, const class FText& LeftButtonText, const class FText& RightButtonText, bool bIsPassword, int32 NormalTextLimit, class UObject* __WorldContext, class UBP_TextInputDialog_C** TextInputDialog);
	static void CreateChoiceDialog(class APlayerController* OwningPlayer, const class FText& TitleText, const class FText& ChoiceText, const class FText& LeftButtonText, const class FText& RightButtonText, class UObject* __WorldContext, class UBP_ChoiceDialog_C** ChoiceDialog);
	static void CreateInformationDialog(class APlayerController* OwningPlayer, const class FText& TitleText, const class FText& InformationText, const class FText& ButtonText, class UObject* __WorldContext, class UBP_InformationDialog_C** InformationDialog);
	static void GetUnlockTooltipText(TArray<int32>& ItemDefIDs, class UObject* __WorldContext, class FText* ToolTipText);
	static void GetGoldAndRankUnlockRequirement(TArray<int32>& ItemDefIDs, class UObject* __WorldContext, int32* Gold, int32* Rank);
	static void CreateContextPopup(const TMap<class FString, class FText>& Option_Map, class UObject* __WorldContext, class UBP_ContextPopupWrapper_C** Context_Popup_Wrapper);
	static void Get1v1MMRFromStats(class UObject* __WorldContext, int32* MMR);
	static void GetRank(class UObject* __WorldContext, int32* Rank);
	static void GetKeyInfoFromActionName_Primary(class FName Action_Name, class UObject* __WorldContext, class UTexture2D** Icon, struct FKey* Key, class FText* Key_Display_Name);
	static void GetKeyInfoFromKey(const struct FKey& Key_, class UObject* __WorldContext, class UTexture2D** Icon, struct FKey* Key, class FText* Key_Display_Name);
	static void GetPlayerStateFromActor(class AActor* Actor, class UObject* __WorldContext, class AMordhauPlayerState** PlayerState);
	static void Get3v3MMRFromStats(class UObject* __WorldContext, int32* MMR);
	static void GetTeamColor(int32 Team, class UObject* __WorldContext, struct FLinearColor* Output__Linear_, struct FSlateColor* Output__Slate_);
	static void GetLoadoutFromSingleton(int32 ID, class UObject* __WorldContext, struct FCharacterProfile* Profile, bool* is_Default_Profile);
	static void Set_Spawn_Loadout(class APlayerController* Player_Controller, int32 ID, class UObject* __WorldContext);
	static void GetKeyInfoFromActionName_Secondary(class FName Action_Name, class UObject* __WorldContext, class UTexture2D** Icon, struct FKey* Secondary_Key, class FText* Secondary_Key_Display_Name);
	static void CreateContextPopup_Interface(TScriptInterface<class IBP_ContextPopupInterface_C> Interface, const TMap<class FString, class FText>& Option_Map, class UObject* __WorldContext);
	static void PascalCaseSeparator(const class FString& In_String, class UObject* __WorldContext, class FString* Out_String);
	static void CreateContextPopupComplex_Interface(TScriptInterface<class IBP_ContextPopupInterface_C> Interface, const TMap<class FString, class FText>& Option_Map, TArray<class UTexture2D*>& Icons, TArray<struct FLinearColor>& Colors, const class FText& Title, class UObject* __WorldContext);
	static void GetWidgetCornerPoints(class UUserWidget* Widget, class UObject* __WorldContext, TArray<struct FVector2D>* Points);
	static void GetWearableCost(uint8 Tier, EWearableSlot Slot, class UObject* __WorldContext, int32* Cost);
	static void GetIsEndScreenShowing(class UObject* WorldContextObject, class UObject* __WorldContext, bool* bIsEndScreenShowing);
	static void GetTeamName(const class UObject* WorldContextObject, int32 Team, class UObject* __WorldContext, class FText* Team_Name);
	static void Get_Pointer_Ray_In_World_Space(float StartOffset, float EndOffset, class UObject* __WorldContext, struct FVector* RayStart, struct FVector* RayEnd);
	static void SwapConfirmCancel(class UBP_ButtonPrompt_C* ButtonPrompt, class UObject* __WorldContext);
	static void GetActionText(class FName InName, class UObject* __WorldContext, class FText* ActionText);
	static void CreateChoiceDialogWithContent(class APlayerController* OwningPlayer, const class FText& TitleText, class UUserWidget* WidgetContent, const class FText& LeftButton, const class FText& RightButton, class UObject* __WorldContext, class UBP_ChoiceDialog_C** ChoiceContentDialog);
	static void GetGamepadButtonText(const class FString& TextToBeLocalised, class UObject* __WorldContext, class FText* GamepadButtonText);
	static void GetGamepadConfirmButton(class UObject* __WorldContext, struct FKey* ConfirmKey);
	static void GetGamepadCancelButton(class UObject* __WorldContext, struct FKey* CancelKey);
	static void SwapConfirmCancelKey(const struct FKey& InputKey, class UObject* __WorldContext, struct FKey* OutputKey);
	static void CreateUserReportDialog(class APlayerController* OwningPlayer, const class FText& TitleText, const class FText& ChoiceText, const class FText& LeftButtonText, const class FText& RightButtonText, const struct FPlayFabPlayer& ReportedPlayer, class UObject* __WorldContext, class UBP_ReportDialog_C** Report_dialog);
	static void CreateNoButtonsDialog(class APlayerController* OwningPlayer, const class FText& TitleText, const class FText& ContentText, class UObject* __WorldContext, class UBP_NoButtonsDialog_C** InformationDialog);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MordhauUtilityLibrary_C">();
	}
	static class UBP_MordhauUtilityLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MordhauUtilityLibrary_C>();
	}
};
static_assert(alignof(UBP_MordhauUtilityLibrary_C) == 0x000008, "Wrong alignment on UBP_MordhauUtilityLibrary_C");
static_assert(sizeof(UBP_MordhauUtilityLibrary_C) == 0x000028, "Wrong size on UBP_MordhauUtilityLibrary_C");

}

