#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Horse

#include "Basic.hpp"

#include "Mordhau_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MordhauOnlineSubsystem_structs.hpp"
#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Horse.BP_Horse_C.ExecuteUbergraph_BP_Horse
// 0x09B0 (0x09B0 - 0x0000)
struct BP_Horse_C_ExecuteUbergraph_BP_Horse final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_42;                    // 0x0008(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key;                       // 0x0028(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable;                              // 0x0048(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_1;                     // 0x0060(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_2;                     // 0x0078(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_3;                     // 0x0090(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_4;                     // 0x00A8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_5;                     // 0x00C0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_6;                     // 0x00D8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_7;                     // 0x00F0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_8;                     // 0x0108(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_9;                     // 0x0120(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_10;                    // 0x0138(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_11;                    // 0x0150(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_12;                    // 0x0168(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_GetIsUsingController_ReturnValue;         // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_13;                    // 0x0188(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_14;                    // 0x01A0(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_GetIsUsingController_ReturnValue_1;       // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable_1;                            // 0x01C0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_15;                    // 0x01D8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_16;                    // 0x01F0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_2;                            // 0x0208(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_17;                    // 0x0220(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_18;                    // 0x0238(0x0018)(HasGetValueTypeHash)
	float                                         K2Node_Event_Angle;                                // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMordhauDamageType                            K2Node_Event_Type;                                 // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Event_SubType_1;                            // 0x0255(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_256[0x2];                                      // 0x0256(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_Bone;                                 // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Point;                                // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Source;                               // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Agent_1;                              // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_3;                            // 0x0288(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorseMovementComponent*                K2Node_DynamicCast_AsHorse_Movement_Component;     // 0x02A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_ByteByte_ReturnValue;                // 0x02B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B2[0x2];                                      // 0x02B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMordhauDamageType                            K2Node_Event_DamageType;                           // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Event_SubType;                              // 0x02C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C2[0x2];                                      // 0x02C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_Event_Hit;                                  // 0x02C4(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 K2Node_Event_Agent;                                // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0359(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x035A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35B[0x1];                                      // 0x035B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0364(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0370(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x037C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0388(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x03A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x03B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x03BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x03C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x03CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ComputeRagdollForce_Force;                // 0x03D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ComputeRagdollForce_Force_1;              // 0x03E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_19;                    // 0x03F0(0x0018)(HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0408(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue_1;                // 0x0410(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_1; // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue_2;                // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_20;                    // 0x0430(0x0018)(HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_2; // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_21;                    // 0x0450(0x0018)(HasGetValueTypeHash)
	class AMordhauCharacter*                      K2Node_Event_Character;                            // 0x0468(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0470(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Trip_ReturnValue;                         // 0x047C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47D[0x3];                                      // 0x047D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x0480(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Normal2D_ReturnValue;                     // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_4;                            // 0x0490(0x0018)(HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x04A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x04B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x04C0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Knockback_ReturnValue;                    // 0x04F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F1[0x7];                                      // 0x04F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauSingleton*                      CallFunc_GetMordhauSingleton_ReturnValue;          // 0x04F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0500(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0504(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0508(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x050C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50D[0x3];                                      // 0x050D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0510(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0514(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue_1;       // 0x0518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x051C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51D[0x3];                                      // 0x051D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue;                    // 0x0520(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_1;                  // 0x0528(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0530(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0531(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_532[0x6];                                      // 0x0532(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_2;                  // 0x0538(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EIngameEvent                                  CallFunc_GetIngameEvent_ReturnValue;               // 0x0540(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0541(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0542(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_543[0x5];                                      // 0x0543(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0548(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x0550(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	EIngameEvent                                  CallFunc_GetIngameEvent_ReturnValue_1;             // 0x0558(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0559(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55A[0x6];                                      // 0x055A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0560(0x0030)(IsPlainOldData, NoDestructor)
	EIngameEvent                                  CallFunc_GetIngameEvent_ReturnValue_2;             // 0x0590(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_591[0x7];                                      // 0x0591(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_AddComponent_ReturnValue;                 // 0x0598(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x05A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x05A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A2[0x6];                                      // 0x05A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_3;                  // 0x05A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_4;                  // 0x05B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x05B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x05B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5BA[0x6];                                      // 0x05BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_5;                  // 0x05C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_6;                  // 0x05C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x05D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x05D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D2[0x6];                                      // 0x05D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_7;                  // 0x05D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_8;                  // 0x05E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x05E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x05E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5EA[0x6];                                      // 0x05EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_9;                  // 0x05F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_10;                 // 0x05F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x0600(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x0601(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_602[0x6];                                      // 0x0602(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_11;                 // 0x0608(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_12;                 // 0x0610(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x0618(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x0619(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61A[0x6];                                      // 0x061A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_13;                 // 0x0620(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_14;                 // 0x0628(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x0630(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_14;                   // 0x0631(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_15;                   // 0x0632(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_16;                   // 0x0633(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_634[0x4];                                      // 0x0634(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_15;                 // 0x0638(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_16;                 // 0x0640(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_17;                   // 0x0648(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_18;                   // 0x0649(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64A[0x6];                                      // 0x064A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_17;                 // 0x0650(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_18;                 // 0x0658(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_19;                   // 0x0660(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_20;                   // 0x0661(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_662[0x6];                                      // 0x0662(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_19;                 // 0x0668(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_22;                    // 0x0670(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_21;                   // 0x0688(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable; // 0x0689(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68A[0x6];                                      // 0x068A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_23;                    // 0x0690(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_5;                            // 0x06A8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_24;                    // 0x06C0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_25;                    // 0x06D8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_26;                    // 0x06F0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_27;                    // 0x0708(0x0018)(HasGetValueTypeHash)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_1; // 0x0720(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_721[0x7];                                      // 0x0721(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_28;                    // 0x0728(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_29;                    // 0x0740(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_6;                            // 0x0758(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_30;                    // 0x0770(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_31;                    // 0x0788(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_32;                    // 0x07A0(0x0018)(HasGetValueTypeHash)
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_20;                 // 0x07B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_21;                 // 0x07C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_22;                   // 0x07C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_23;                   // 0x07C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CA[0x6];                                      // 0x07CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_22;                 // 0x07D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_23;                 // 0x07D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_24;                   // 0x07E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_25;                   // 0x07E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_26;                   // 0x07E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_27;                   // 0x07E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E4[0x4];                                      // 0x07E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_24;                 // 0x07E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_25;                 // 0x07F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_28;                   // 0x07F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_29;                   // 0x07F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7FA[0x6];                                      // 0x07FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_26;                 // 0x0800(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_27;                 // 0x0808(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_30;                   // 0x0810(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_31;                   // 0x0811(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_812[0x6];                                      // 0x0812(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_28;                 // 0x0818(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_29;                 // 0x0820(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_32;                   // 0x0828(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_33;                   // 0x0829(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82A[0x6];                                      // 0x082A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_30;                 // 0x0830(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_31;                 // 0x0838(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_34;                   // 0x0840(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_35;                   // 0x0841(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_842[0x6];                                      // 0x0842(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_32;                 // 0x0848(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_33;                 // 0x0850(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_36;                   // 0x0858(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_37;                   // 0x0859(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85A[0x6];                                      // 0x085A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_33;                    // 0x0860(0x0018)(HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0878(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_879[0x7];                                      // 0x0879(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_34;                    // 0x0880(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_35;                    // 0x0898(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_7;                            // 0x08B0(0x0018)(HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x08C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8C9[0x7];                                      // 0x08C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_36;                    // 0x08D0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_37;                    // 0x08E8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_38;                    // 0x0900(0x0018)(HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0918(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_919[0x7];                                      // 0x0919(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_39;                    // 0x0920(0x0018)(HasGetValueTypeHash)
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_34;                 // 0x0938(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_35;                 // 0x0940(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_38;                   // 0x0948(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_39;                   // 0x0949(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_94A[0x6];                                      // 0x094A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue_36;                 // 0x0950(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_40;                    // 0x0958(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_40;                   // 0x0970(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0971(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_972[0x6];                                      // 0x0972(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable_8;                            // 0x0978(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_41;                    // 0x0990(0x0018)(HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_ExecuteUbergraph_BP_Horse) == 0x000010, "Wrong alignment on BP_Horse_C_ExecuteUbergraph_BP_Horse");
static_assert(sizeof(BP_Horse_C_ExecuteUbergraph_BP_Horse) == 0x0009B0, "Wrong size on BP_Horse_C_ExecuteUbergraph_BP_Horse");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, EntryPoint) == 0x000000, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_42) == 0x000008, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_42' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsDedicatedServer_ReturnValue) == 0x000020, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key) == 0x000028, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_HasAuthority_ReturnValue) == 0x000040, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, Temp_struct_Variable) == 0x000048, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_1) == 0x000060, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_2) == 0x000078, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_2' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_3) == 0x000090, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_3' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_4) == 0x0000A8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_4' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_5) == 0x0000C0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_5' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_6) == 0x0000D8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_6' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_7) == 0x0000F0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_7' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_8) == 0x000108, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_8' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_9) == 0x000120, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_9' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_10) == 0x000138, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_10' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_11) == 0x000150, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_11' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_12) == 0x000168, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_12' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetIsUsingController_ReturnValue) == 0x000180, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetIsUsingController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_13) == 0x000188, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_13' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_14) == 0x0001A0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_14' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetIsUsingController_ReturnValue_1) == 0x0001B8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetIsUsingController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, Temp_struct_Variable_1) == 0x0001C0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_15) == 0x0001D8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_15' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_16) == 0x0001F0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_16' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, Temp_struct_Variable_2) == 0x000208, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_17) == 0x000220, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_17' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_18) == 0x000238, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_18' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_Event_Angle) == 0x000250, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_Event_Angle' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_Event_Type) == 0x000254, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_Event_Type' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_Event_SubType_1) == 0x000255, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_Event_SubType_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_Event_Bone) == 0x000258, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_Event_Bone' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_Event_Point) == 0x000260, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_Event_Point' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_Event_Source) == 0x000270, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_Event_Source' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_Event_Agent_1) == 0x000278, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_Event_Agent_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_VSize_ReturnValue) == 0x000280, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_MapRangeClamped_ReturnValue) == 0x000284, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, Temp_struct_Variable_3) == 0x000288, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0002A0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_DynamicCast_AsHorse_Movement_Component) == 0x0002A8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_DynamicCast_AsHorse_Movement_Component' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_DynamicCast_bSuccess) == 0x0002B0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_Less_ByteByte_ReturnValue) == 0x0002B1, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_Less_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_Add_FloatFloat_ReturnValue) == 0x0002B4, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x0002B8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0002BC, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_Event_DamageType) == 0x0002C0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_Event_DamageType' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_Event_SubType) == 0x0002C1, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_Event_SubType' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_Event_Hit) == 0x0002C4, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_Event_Hit' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_Event_Agent) == 0x000350, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_Event_Agent' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_Less_FloatFloat_ReturnValue) == 0x000358, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_BreakHitResult_bBlockingHit) == 0x000359, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_BreakHitResult_bInitialOverlap) == 0x00035A, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_BreakHitResult_Time) == 0x00035C, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_BreakHitResult_Distance) == 0x000360, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_BreakHitResult_Location) == 0x000364, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_BreakHitResult_ImpactPoint) == 0x000370, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_BreakHitResult_Normal) == 0x00037C, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_BreakHitResult_ImpactNormal) == 0x000388, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_BreakHitResult_PhysMat) == 0x000398, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_BreakHitResult_HitActor) == 0x0003A0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_BreakHitResult_HitComponent) == 0x0003A8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_BreakHitResult_HitBoneName) == 0x0003B0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_BreakHitResult_HitItem) == 0x0003B8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_BreakHitResult_FaceIndex) == 0x0003BC, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_BreakHitResult_TraceStart) == 0x0003C0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_BreakHitResult_TraceEnd) == 0x0003CC, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_ComputeRagdollForce_Force) == 0x0003D8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_ComputeRagdollForce_Force' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_ComputeRagdollForce_Force_1) == 0x0003E4, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_ComputeRagdollForce_Force_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_19) == 0x0003F0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_19' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetMaterial_ReturnValue) == 0x000408, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetMaterial_ReturnValue_1) == 0x000410, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000418, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_CreateDynamicMaterialInstance_ReturnValue_1) == 0x000420, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_CreateDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetMaterial_ReturnValue_2) == 0x000428, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetMaterial_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_20) == 0x000430, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_20' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_CreateDynamicMaterialInstance_ReturnValue_2) == 0x000448, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_CreateDynamicMaterialInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_21) == 0x000450, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_21' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_Event_Character) == 0x000468, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_Event_Character' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetActorForwardVector_ReturnValue) == 0x000470, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_Trip_ReturnValue) == 0x00047C, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_Trip_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x000480, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_Normal2D_ReturnValue) == 0x000488, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, Temp_struct_Variable_4) == 0x000490, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x0004A8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0004B4, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetSocketTransform_ReturnValue) == 0x0004C0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_Knockback_ReturnValue) == 0x0004F0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_Knockback_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetMordhauSingleton_ReturnValue) == 0x0004F8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetMordhauSingleton_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_Array_Length_ReturnValue) == 0x000500, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_Subtract_IntInt_ReturnValue) == 0x000504, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000508, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_Conv_IntToByte_ReturnValue) == 0x00050C, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_Array_Length_ReturnValue_1) == 0x000510, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000514, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_RandomIntegerInRange_ReturnValue_1) == 0x000518, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_RandomIntegerInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x00051C, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue) == 0x000520, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_1) == 0x000528, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue) == 0x000530, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_1) == 0x000531, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_2) == 0x000538, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetIngameEvent_ReturnValue) == 0x000540, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetIngameEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_2) == 0x000541, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000542, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000548, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_FinishSpawningActor_ReturnValue) == 0x000550, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetIngameEvent_ReturnValue_1) == 0x000558, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetIngameEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000559, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_MakeTransform_ReturnValue) == 0x000560, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetIngameEvent_ReturnValue_2) == 0x000590, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetIngameEvent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_AddComponent_ReturnValue) == 0x000598, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0005A0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_K2_AttachToComponent_ReturnValue) == 0x0005A1, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_3) == 0x0005A8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_4) == 0x0005B0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_3) == 0x0005B8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_4) == 0x0005B9, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_5) == 0x0005C0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_6) == 0x0005C8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_5) == 0x0005D0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_6) == 0x0005D1, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_7) == 0x0005D8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_8) == 0x0005E0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_7) == 0x0005E8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_8) == 0x0005E9, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_9) == 0x0005F0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_10) == 0x0005F8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_9) == 0x000600, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_10) == 0x000601, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_11) == 0x000608, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_12) == 0x000610, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_11) == 0x000618, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_12) == 0x000619, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_13) == 0x000620, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_14) == 0x000628, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_13) == 0x000630, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_14) == 0x000631, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_15) == 0x000632, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_16) == 0x000633, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_15) == 0x000638, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_16) == 0x000640, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_17) == 0x000648, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_18) == 0x000649, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_17) == 0x000650, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_18) == 0x000658, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_19) == 0x000660, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_20) == 0x000661, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_19) == 0x000668, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_22) == 0x000670, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_22' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_21) == 0x000688, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable) == 0x000689, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_23) == 0x000690, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_23' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, Temp_struct_Variable_5) == 0x0006A8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_24) == 0x0006C0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_24' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_25) == 0x0006D8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_25' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_26) == 0x0006F0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_26' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_27) == 0x000708, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_27' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_1) == 0x000720, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_28) == 0x000728, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_28' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_29) == 0x000740, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_29' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, Temp_struct_Variable_6) == 0x000758, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_30) == 0x000770, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_30' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_31) == 0x000788, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_31' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_32) == 0x0007A0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_32' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_20) == 0x0007B8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_21) == 0x0007C0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_22) == 0x0007C8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_23) == 0x0007C9, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_22) == 0x0007D0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_23) == 0x0007D8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_24) == 0x0007E0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_25) == 0x0007E1, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_26) == 0x0007E2, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_27) == 0x0007E3, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_27' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_24) == 0x0007E8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_25) == 0x0007F0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_28) == 0x0007F8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_28' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_29) == 0x0007F9, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_29' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_26) == 0x000800, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_27) == 0x000808, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_27' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_30) == 0x000810, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_30' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_31) == 0x000811, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_31' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_28) == 0x000818, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_28' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_29) == 0x000820, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_29' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_32) == 0x000828, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_32' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_33) == 0x000829, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_33' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_30) == 0x000830, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_30' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_31) == 0x000838, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_31' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_34) == 0x000840, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_34' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_35) == 0x000841, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_35' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_32) == 0x000848, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_32' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_33) == 0x000850, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_33' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_36) == 0x000858, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_36' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_37) == 0x000859, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_37' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_33) == 0x000860, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_33' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, Temp_bool_Has_Been_Initd_Variable) == 0x000878, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_34) == 0x000880, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_34' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_35) == 0x000898, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_35' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, Temp_struct_Variable_7) == 0x0008B0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, Temp_bool_IsClosed_Variable) == 0x0008C8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_36) == 0x0008D0, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_36' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_37) == 0x0008E8, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_37' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_38) == 0x000900, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_38' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, Temp_bool_Has_Been_Initd_Variable_1) == 0x000918, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_39) == 0x000920, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_39' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_34) == 0x000938, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_34' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_35) == 0x000940, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_35' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_38) == 0x000948, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_38' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_39) == 0x000949, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_39' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_GetDriver_ReturnValue_36) == 0x000950, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_GetDriver_ReturnValue_36' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_40) == 0x000958, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_40' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, CallFunc_IsValid_ReturnValue_40) == 0x000970, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::CallFunc_IsValid_ReturnValue_40' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, Temp_bool_IsClosed_Variable_1) == 0x000971, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, Temp_struct_Variable_8) == 0x000978, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_ExecuteUbergraph_BP_Horse, K2Node_InputActionEvent_Key_41) == 0x000990, "Member 'BP_Horse_C_ExecuteUbergraph_BP_Horse::K2Node_InputActionEvent_Key_41' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.KnockOffDriver
// 0x0008 (0x0008 - 0x0000)
struct BP_Horse_C_KnockOffDriver final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_KnockOffDriver) == 0x000008, "Wrong alignment on BP_Horse_C_KnockOffDriver");
static_assert(sizeof(BP_Horse_C_KnockOffDriver) == 0x000008, "Wrong size on BP_Horse_C_KnockOffDriver");
static_assert(offsetof(BP_Horse_C_KnockOffDriver, Character) == 0x000000, "Member 'BP_Horse_C_KnockOffDriver::Character' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.OnCosmeticHit
// 0x0098 (0x0098 - 0x0000)
struct BP_Horse_C_OnCosmeticHit final
{
public:
	EMordhauDamageType                            DamageType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         SubType;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0004(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 Agent;                                             // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_OnCosmeticHit) == 0x000008, "Wrong alignment on BP_Horse_C_OnCosmeticHit");
static_assert(sizeof(BP_Horse_C_OnCosmeticHit) == 0x000098, "Wrong size on BP_Horse_C_OnCosmeticHit");
static_assert(offsetof(BP_Horse_C_OnCosmeticHit, DamageType) == 0x000000, "Member 'BP_Horse_C_OnCosmeticHit::DamageType' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_OnCosmeticHit, SubType) == 0x000001, "Member 'BP_Horse_C_OnCosmeticHit::SubType' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_OnCosmeticHit, Hit) == 0x000004, "Member 'BP_Horse_C_OnCosmeticHit::Hit' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_OnCosmeticHit, Agent) == 0x000090, "Member 'BP_Horse_C_OnCosmeticHit::Agent' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.OnDied
// 0x0030 (0x0030 - 0x0000)
struct BP_Horse_C_OnDied final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMordhauDamageType                            Type;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         SubType;                                           // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bone;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Point;                                             // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Source;                                            // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Agent;                                             // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_OnDied) == 0x000008, "Wrong alignment on BP_Horse_C_OnDied");
static_assert(sizeof(BP_Horse_C_OnDied) == 0x000030, "Wrong size on BP_Horse_C_OnDied");
static_assert(offsetof(BP_Horse_C_OnDied, Angle) == 0x000000, "Member 'BP_Horse_C_OnDied::Angle' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_OnDied, Type) == 0x000004, "Member 'BP_Horse_C_OnDied::Type' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_OnDied, SubType) == 0x000005, "Member 'BP_Horse_C_OnDied::SubType' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_OnDied, bone) == 0x000008, "Member 'BP_Horse_C_OnDied::bone' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_OnDied, Point) == 0x000010, "Member 'BP_Horse_C_OnDied::Point' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_OnDied, Source) == 0x000020, "Member 'BP_Horse_C_OnDied::Source' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_OnDied, Agent) == 0x000028, "Member 'BP_Horse_C_OnDied::Agent' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Ranged Cancel_K2Node_InputActionEvent_0
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Ranged_Cancel_K2Node_InputActionEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Ranged_Cancel_K2Node_InputActionEvent_0) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Ranged_Cancel_K2Node_InputActionEvent_0");
static_assert(sizeof(BP_Horse_C_InpActEvt_Ranged_Cancel_K2Node_InputActionEvent_0) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Ranged_Cancel_K2Node_InputActionEvent_0");
static_assert(offsetof(BP_Horse_C_InpActEvt_Ranged_Cancel_K2Node_InputActionEvent_0, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Ranged_Cancel_K2Node_InputActionEvent_0::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Fire_K2Node_InputActionEvent_1
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Fire_K2Node_InputActionEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Fire_K2Node_InputActionEvent_1) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Fire_K2Node_InputActionEvent_1");
static_assert(sizeof(BP_Horse_C_InpActEvt_Fire_K2Node_InputActionEvent_1) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Fire_K2Node_InputActionEvent_1");
static_assert(offsetof(BP_Horse_C_InpActEvt_Fire_K2Node_InputActionEvent_1, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Fire_K2Node_InputActionEvent_1::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Fire_K2Node_InputActionEvent_2
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Fire_K2Node_InputActionEvent_2 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Fire_K2Node_InputActionEvent_2) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Fire_K2Node_InputActionEvent_2");
static_assert(sizeof(BP_Horse_C_InpActEvt_Fire_K2Node_InputActionEvent_2) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Fire_K2Node_InputActionEvent_2");
static_assert(offsetof(BP_Horse_C_InpActEvt_Fire_K2Node_InputActionEvent_2, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Fire_K2Node_InputActionEvent_2::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C. Reload_K2Node_InputActionEvent_3
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C__Reload_K2Node_InputActionEvent_3 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C__Reload_K2Node_InputActionEvent_3) == 0x000008, "Wrong alignment on BP_Horse_C__Reload_K2Node_InputActionEvent_3");
static_assert(sizeof(BP_Horse_C__Reload_K2Node_InputActionEvent_3) == 0x000018, "Wrong size on BP_Horse_C__Reload_K2Node_InputActionEvent_3");
static_assert(offsetof(BP_Horse_C__Reload_K2Node_InputActionEvent_3, Key) == 0x000000, "Member 'BP_Horse_C__Reload_K2Node_InputActionEvent_3::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Holster_K2Node_InputActionEvent_4
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Holster_K2Node_InputActionEvent_4 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Holster_K2Node_InputActionEvent_4) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Holster_K2Node_InputActionEvent_4");
static_assert(sizeof(BP_Horse_C_InpActEvt_Holster_K2Node_InputActionEvent_4) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Holster_K2Node_InputActionEvent_4");
static_assert(offsetof(BP_Horse_C_InpActEvt_Holster_K2Node_InputActionEvent_4, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Holster_K2Node_InputActionEvent_4::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Drop_K2Node_InputActionEvent_5
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Drop_K2Node_InputActionEvent_5 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Drop_K2Node_InputActionEvent_5) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Drop_K2Node_InputActionEvent_5");
static_assert(sizeof(BP_Horse_C_InpActEvt_Drop_K2Node_InputActionEvent_5) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Drop_K2Node_InputActionEvent_5");
static_assert(offsetof(BP_Horse_C_InpActEvt_Drop_K2Node_InputActionEvent_5, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Drop_K2Node_InputActionEvent_5::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Equip Slot 1_K2Node_InputActionEvent_6
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Equip_Slot_1_K2Node_InputActionEvent_6 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Equip_Slot_1_K2Node_InputActionEvent_6) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Equip_Slot_1_K2Node_InputActionEvent_6");
static_assert(sizeof(BP_Horse_C_InpActEvt_Equip_Slot_1_K2Node_InputActionEvent_6) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Equip_Slot_1_K2Node_InputActionEvent_6");
static_assert(offsetof(BP_Horse_C_InpActEvt_Equip_Slot_1_K2Node_InputActionEvent_6, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Equip_Slot_1_K2Node_InputActionEvent_6::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Equip Slot 2_K2Node_InputActionEvent_7
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Equip_Slot_2_K2Node_InputActionEvent_7 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Equip_Slot_2_K2Node_InputActionEvent_7) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Equip_Slot_2_K2Node_InputActionEvent_7");
static_assert(sizeof(BP_Horse_C_InpActEvt_Equip_Slot_2_K2Node_InputActionEvent_7) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Equip_Slot_2_K2Node_InputActionEvent_7");
static_assert(offsetof(BP_Horse_C_InpActEvt_Equip_Slot_2_K2Node_InputActionEvent_7, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Equip_Slot_2_K2Node_InputActionEvent_7::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Equip Slot 3_K2Node_InputActionEvent_8
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Equip_Slot_3_K2Node_InputActionEvent_8 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Equip_Slot_3_K2Node_InputActionEvent_8) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Equip_Slot_3_K2Node_InputActionEvent_8");
static_assert(sizeof(BP_Horse_C_InpActEvt_Equip_Slot_3_K2Node_InputActionEvent_8) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Equip_Slot_3_K2Node_InputActionEvent_8");
static_assert(offsetof(BP_Horse_C_InpActEvt_Equip_Slot_3_K2Node_InputActionEvent_8, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Equip_Slot_3_K2Node_InputActionEvent_8::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Equip Slot 4_K2Node_InputActionEvent_9
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Equip_Slot_4_K2Node_InputActionEvent_9 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Equip_Slot_4_K2Node_InputActionEvent_9) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Equip_Slot_4_K2Node_InputActionEvent_9");
static_assert(sizeof(BP_Horse_C_InpActEvt_Equip_Slot_4_K2Node_InputActionEvent_9) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Equip_Slot_4_K2Node_InputActionEvent_9");
static_assert(offsetof(BP_Horse_C_InpActEvt_Equip_Slot_4_K2Node_InputActionEvent_9, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Equip_Slot_4_K2Node_InputActionEvent_9::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Equip Slot 5_K2Node_InputActionEvent_10
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Equip_Slot_5_K2Node_InputActionEvent_10 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Equip_Slot_5_K2Node_InputActionEvent_10) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Equip_Slot_5_K2Node_InputActionEvent_10");
static_assert(sizeof(BP_Horse_C_InpActEvt_Equip_Slot_5_K2Node_InputActionEvent_10) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Equip_Slot_5_K2Node_InputActionEvent_10");
static_assert(offsetof(BP_Horse_C_InpActEvt_Equip_Slot_5_K2Node_InputActionEvent_10, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Equip_Slot_5_K2Node_InputActionEvent_10::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Equip Slot 6_K2Node_InputActionEvent_11
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Equip_Slot_6_K2Node_InputActionEvent_11 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Equip_Slot_6_K2Node_InputActionEvent_11) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Equip_Slot_6_K2Node_InputActionEvent_11");
static_assert(sizeof(BP_Horse_C_InpActEvt_Equip_Slot_6_K2Node_InputActionEvent_11) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Equip_Slot_6_K2Node_InputActionEvent_11");
static_assert(offsetof(BP_Horse_C_InpActEvt_Equip_Slot_6_K2Node_InputActionEvent_11, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Equip_Slot_6_K2Node_InputActionEvent_11::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Equip Slot 7_K2Node_InputActionEvent_12
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Equip_Slot_7_K2Node_InputActionEvent_12 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Equip_Slot_7_K2Node_InputActionEvent_12) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Equip_Slot_7_K2Node_InputActionEvent_12");
static_assert(sizeof(BP_Horse_C_InpActEvt_Equip_Slot_7_K2Node_InputActionEvent_12) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Equip_Slot_7_K2Node_InputActionEvent_12");
static_assert(offsetof(BP_Horse_C_InpActEvt_Equip_Slot_7_K2Node_InputActionEvent_12, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Equip_Slot_7_K2Node_InputActionEvent_12::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Equip Slot 8_K2Node_InputActionEvent_13
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Equip_Slot_8_K2Node_InputActionEvent_13 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Equip_Slot_8_K2Node_InputActionEvent_13) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Equip_Slot_8_K2Node_InputActionEvent_13");
static_assert(sizeof(BP_Horse_C_InpActEvt_Equip_Slot_8_K2Node_InputActionEvent_13) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Equip_Slot_8_K2Node_InputActionEvent_13");
static_assert(offsetof(BP_Horse_C_InpActEvt_Equip_Slot_8_K2Node_InputActionEvent_13, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Equip_Slot_8_K2Node_InputActionEvent_13::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Equip Slot 9_K2Node_InputActionEvent_14
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Equip_Slot_9_K2Node_InputActionEvent_14 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Equip_Slot_9_K2Node_InputActionEvent_14) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Equip_Slot_9_K2Node_InputActionEvent_14");
static_assert(sizeof(BP_Horse_C_InpActEvt_Equip_Slot_9_K2Node_InputActionEvent_14) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Equip_Slot_9_K2Node_InputActionEvent_14");
static_assert(offsetof(BP_Horse_C_InpActEvt_Equip_Slot_9_K2Node_InputActionEvent_14, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Equip_Slot_9_K2Node_InputActionEvent_14::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Next Equipment_K2Node_InputActionEvent_15
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Next_Equipment_K2Node_InputActionEvent_15 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Next_Equipment_K2Node_InputActionEvent_15) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Next_Equipment_K2Node_InputActionEvent_15");
static_assert(sizeof(BP_Horse_C_InpActEvt_Next_Equipment_K2Node_InputActionEvent_15) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Next_Equipment_K2Node_InputActionEvent_15");
static_assert(offsetof(BP_Horse_C_InpActEvt_Next_Equipment_K2Node_InputActionEvent_15, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Next_Equipment_K2Node_InputActionEvent_15::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Next Equipment_K2Node_InputActionEvent_16
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Next_Equipment_K2Node_InputActionEvent_16 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Next_Equipment_K2Node_InputActionEvent_16) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Next_Equipment_K2Node_InputActionEvent_16");
static_assert(sizeof(BP_Horse_C_InpActEvt_Next_Equipment_K2Node_InputActionEvent_16) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Next_Equipment_K2Node_InputActionEvent_16");
static_assert(offsetof(BP_Horse_C_InpActEvt_Next_Equipment_K2Node_InputActionEvent_16, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Next_Equipment_K2Node_InputActionEvent_16::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Previous Equipment_K2Node_InputActionEvent_17
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Previous_Equipment_K2Node_InputActionEvent_17 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Previous_Equipment_K2Node_InputActionEvent_17) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Previous_Equipment_K2Node_InputActionEvent_17");
static_assert(sizeof(BP_Horse_C_InpActEvt_Previous_Equipment_K2Node_InputActionEvent_17) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Previous_Equipment_K2Node_InputActionEvent_17");
static_assert(offsetof(BP_Horse_C_InpActEvt_Previous_Equipment_K2Node_InputActionEvent_17, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Previous_Equipment_K2Node_InputActionEvent_17::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Previous Equipment_K2Node_InputActionEvent_18
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Previous_Equipment_K2Node_InputActionEvent_18 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Previous_Equipment_K2Node_InputActionEvent_18) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Previous_Equipment_K2Node_InputActionEvent_18");
static_assert(sizeof(BP_Horse_C_InpActEvt_Previous_Equipment_K2Node_InputActionEvent_18) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Previous_Equipment_K2Node_InputActionEvent_18");
static_assert(offsetof(BP_Horse_C_InpActEvt_Previous_Equipment_K2Node_InputActionEvent_18, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Previous_Equipment_K2Node_InputActionEvent_18::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Strike_K2Node_InputActionEvent_19
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Strike_K2Node_InputActionEvent_19 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Strike_K2Node_InputActionEvent_19) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Strike_K2Node_InputActionEvent_19");
static_assert(sizeof(BP_Horse_C_InpActEvt_Strike_K2Node_InputActionEvent_19) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Strike_K2Node_InputActionEvent_19");
static_assert(offsetof(BP_Horse_C_InpActEvt_Strike_K2Node_InputActionEvent_19, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Strike_K2Node_InputActionEvent_19::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Strike_K2Node_InputActionEvent_20
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Strike_K2Node_InputActionEvent_20 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Strike_K2Node_InputActionEvent_20) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Strike_K2Node_InputActionEvent_20");
static_assert(sizeof(BP_Horse_C_InpActEvt_Strike_K2Node_InputActionEvent_20) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Strike_K2Node_InputActionEvent_20");
static_assert(offsetof(BP_Horse_C_InpActEvt_Strike_K2Node_InputActionEvent_20, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Strike_K2Node_InputActionEvent_20::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Feint_K2Node_InputActionEvent_21
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Feint_K2Node_InputActionEvent_21 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Feint_K2Node_InputActionEvent_21) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Feint_K2Node_InputActionEvent_21");
static_assert(sizeof(BP_Horse_C_InpActEvt_Feint_K2Node_InputActionEvent_21) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Feint_K2Node_InputActionEvent_21");
static_assert(offsetof(BP_Horse_C_InpActEvt_Feint_K2Node_InputActionEvent_21, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Feint_K2Node_InputActionEvent_21::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Stab_K2Node_InputActionEvent_22
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Stab_K2Node_InputActionEvent_22 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Stab_K2Node_InputActionEvent_22) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Stab_K2Node_InputActionEvent_22");
static_assert(sizeof(BP_Horse_C_InpActEvt_Stab_K2Node_InputActionEvent_22) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Stab_K2Node_InputActionEvent_22");
static_assert(offsetof(BP_Horse_C_InpActEvt_Stab_K2Node_InputActionEvent_22, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Stab_K2Node_InputActionEvent_22::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Stab_K2Node_InputActionEvent_23
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Stab_K2Node_InputActionEvent_23 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Stab_K2Node_InputActionEvent_23) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Stab_K2Node_InputActionEvent_23");
static_assert(sizeof(BP_Horse_C_InpActEvt_Stab_K2Node_InputActionEvent_23) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Stab_K2Node_InputActionEvent_23");
static_assert(offsetof(BP_Horse_C_InpActEvt_Stab_K2Node_InputActionEvent_23, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Stab_K2Node_InputActionEvent_23::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Parry_K2Node_InputActionEvent_24
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Parry_K2Node_InputActionEvent_24 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Parry_K2Node_InputActionEvent_24) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Parry_K2Node_InputActionEvent_24");
static_assert(sizeof(BP_Horse_C_InpActEvt_Parry_K2Node_InputActionEvent_24) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Parry_K2Node_InputActionEvent_24");
static_assert(offsetof(BP_Horse_C_InpActEvt_Parry_K2Node_InputActionEvent_24, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Parry_K2Node_InputActionEvent_24::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Parry_K2Node_InputActionEvent_25
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Parry_K2Node_InputActionEvent_25 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Parry_K2Node_InputActionEvent_25) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Parry_K2Node_InputActionEvent_25");
static_assert(sizeof(BP_Horse_C_InpActEvt_Parry_K2Node_InputActionEvent_25) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Parry_K2Node_InputActionEvent_25");
static_assert(offsetof(BP_Horse_C_InpActEvt_Parry_K2Node_InputActionEvent_25, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Parry_K2Node_InputActionEvent_25::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Left Lower Strike_K2Node_InputActionEvent_26
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Left_Lower_Strike_K2Node_InputActionEvent_26 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Left_Lower_Strike_K2Node_InputActionEvent_26) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Left_Lower_Strike_K2Node_InputActionEvent_26");
static_assert(sizeof(BP_Horse_C_InpActEvt_Left_Lower_Strike_K2Node_InputActionEvent_26) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Left_Lower_Strike_K2Node_InputActionEvent_26");
static_assert(offsetof(BP_Horse_C_InpActEvt_Left_Lower_Strike_K2Node_InputActionEvent_26, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Left_Lower_Strike_K2Node_InputActionEvent_26::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Left Strike_K2Node_InputActionEvent_27
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Left_Strike_K2Node_InputActionEvent_27 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Left_Strike_K2Node_InputActionEvent_27) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Left_Strike_K2Node_InputActionEvent_27");
static_assert(sizeof(BP_Horse_C_InpActEvt_Left_Strike_K2Node_InputActionEvent_27) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Left_Strike_K2Node_InputActionEvent_27");
static_assert(offsetof(BP_Horse_C_InpActEvt_Left_Strike_K2Node_InputActionEvent_27, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Left_Strike_K2Node_InputActionEvent_27::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Left Upper Strike_K2Node_InputActionEvent_28
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Left_Upper_Strike_K2Node_InputActionEvent_28 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Left_Upper_Strike_K2Node_InputActionEvent_28) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Left_Upper_Strike_K2Node_InputActionEvent_28");
static_assert(sizeof(BP_Horse_C_InpActEvt_Left_Upper_Strike_K2Node_InputActionEvent_28) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Left_Upper_Strike_K2Node_InputActionEvent_28");
static_assert(offsetof(BP_Horse_C_InpActEvt_Left_Upper_Strike_K2Node_InputActionEvent_28, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Left_Upper_Strike_K2Node_InputActionEvent_28::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Left Stab_K2Node_InputActionEvent_29
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Left_Stab_K2Node_InputActionEvent_29 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Left_Stab_K2Node_InputActionEvent_29) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Left_Stab_K2Node_InputActionEvent_29");
static_assert(sizeof(BP_Horse_C_InpActEvt_Left_Stab_K2Node_InputActionEvent_29) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Left_Stab_K2Node_InputActionEvent_29");
static_assert(offsetof(BP_Horse_C_InpActEvt_Left_Stab_K2Node_InputActionEvent_29, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Left_Stab_K2Node_InputActionEvent_29::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Flip Attack Side_K2Node_InputActionEvent_30
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Flip_Attack_Side_K2Node_InputActionEvent_30 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Flip_Attack_Side_K2Node_InputActionEvent_30) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Flip_Attack_Side_K2Node_InputActionEvent_30");
static_assert(sizeof(BP_Horse_C_InpActEvt_Flip_Attack_Side_K2Node_InputActionEvent_30) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Flip_Attack_Side_K2Node_InputActionEvent_30");
static_assert(offsetof(BP_Horse_C_InpActEvt_Flip_Attack_Side_K2Node_InputActionEvent_30, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Flip_Attack_Side_K2Node_InputActionEvent_30::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Flip Attack Side_K2Node_InputActionEvent_31
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Flip_Attack_Side_K2Node_InputActionEvent_31 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Flip_Attack_Side_K2Node_InputActionEvent_31) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Flip_Attack_Side_K2Node_InputActionEvent_31");
static_assert(sizeof(BP_Horse_C_InpActEvt_Flip_Attack_Side_K2Node_InputActionEvent_31) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Flip_Attack_Side_K2Node_InputActionEvent_31");
static_assert(offsetof(BP_Horse_C_InpActEvt_Flip_Attack_Side_K2Node_InputActionEvent_31, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Flip_Attack_Side_K2Node_InputActionEvent_31::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Right Upper Strike_K2Node_InputActionEvent_32
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Right_Upper_Strike_K2Node_InputActionEvent_32 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Right_Upper_Strike_K2Node_InputActionEvent_32) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Right_Upper_Strike_K2Node_InputActionEvent_32");
static_assert(sizeof(BP_Horse_C_InpActEvt_Right_Upper_Strike_K2Node_InputActionEvent_32) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Right_Upper_Strike_K2Node_InputActionEvent_32");
static_assert(offsetof(BP_Horse_C_InpActEvt_Right_Upper_Strike_K2Node_InputActionEvent_32, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Right_Upper_Strike_K2Node_InputActionEvent_32::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Right Lower Strike_K2Node_InputActionEvent_33
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Right_Lower_Strike_K2Node_InputActionEvent_33 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Right_Lower_Strike_K2Node_InputActionEvent_33) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Right_Lower_Strike_K2Node_InputActionEvent_33");
static_assert(sizeof(BP_Horse_C_InpActEvt_Right_Lower_Strike_K2Node_InputActionEvent_33) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Right_Lower_Strike_K2Node_InputActionEvent_33");
static_assert(offsetof(BP_Horse_C_InpActEvt_Right_Lower_Strike_K2Node_InputActionEvent_33, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Right_Lower_Strike_K2Node_InputActionEvent_33::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Right Strike_K2Node_InputActionEvent_34
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Right_Strike_K2Node_InputActionEvent_34 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Right_Strike_K2Node_InputActionEvent_34) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Right_Strike_K2Node_InputActionEvent_34");
static_assert(sizeof(BP_Horse_C_InpActEvt_Right_Strike_K2Node_InputActionEvent_34) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Right_Strike_K2Node_InputActionEvent_34");
static_assert(offsetof(BP_Horse_C_InpActEvt_Right_Strike_K2Node_InputActionEvent_34, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Right_Strike_K2Node_InputActionEvent_34::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Right Stab_K2Node_InputActionEvent_35
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Right_Stab_K2Node_InputActionEvent_35 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Right_Stab_K2Node_InputActionEvent_35) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Right_Stab_K2Node_InputActionEvent_35");
static_assert(sizeof(BP_Horse_C_InpActEvt_Right_Stab_K2Node_InputActionEvent_35) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Right_Stab_K2Node_InputActionEvent_35");
static_assert(offsetof(BP_Horse_C_InpActEvt_Right_Stab_K2Node_InputActionEvent_35, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Right_Stab_K2Node_InputActionEvent_35::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Feint Or Parry_K2Node_InputActionEvent_36
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Feint_Or_Parry_K2Node_InputActionEvent_36 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Feint_Or_Parry_K2Node_InputActionEvent_36) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Feint_Or_Parry_K2Node_InputActionEvent_36");
static_assert(sizeof(BP_Horse_C_InpActEvt_Feint_Or_Parry_K2Node_InputActionEvent_36) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Feint_Or_Parry_K2Node_InputActionEvent_36");
static_assert(offsetof(BP_Horse_C_InpActEvt_Feint_Or_Parry_K2Node_InputActionEvent_36, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Feint_Or_Parry_K2Node_InputActionEvent_36::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Feint Or Parry_K2Node_InputActionEvent_37
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Feint_Or_Parry_K2Node_InputActionEvent_37 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Feint_Or_Parry_K2Node_InputActionEvent_37) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Feint_Or_Parry_K2Node_InputActionEvent_37");
static_assert(sizeof(BP_Horse_C_InpActEvt_Feint_Or_Parry_K2Node_InputActionEvent_37) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Feint_Or_Parry_K2Node_InputActionEvent_37");
static_assert(offsetof(BP_Horse_C_InpActEvt_Feint_Or_Parry_K2Node_InputActionEvent_37, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Feint_Or_Parry_K2Node_InputActionEvent_37::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Kick_K2Node_InputActionEvent_38
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Kick_K2Node_InputActionEvent_38 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Kick_K2Node_InputActionEvent_38) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Kick_K2Node_InputActionEvent_38");
static_assert(sizeof(BP_Horse_C_InpActEvt_Kick_K2Node_InputActionEvent_38) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Kick_K2Node_InputActionEvent_38");
static_assert(offsetof(BP_Horse_C_InpActEvt_Kick_K2Node_InputActionEvent_38, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Kick_K2Node_InputActionEvent_38::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Jump_K2Node_InputActionEvent_39
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Jump_K2Node_InputActionEvent_39 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Jump_K2Node_InputActionEvent_39) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Jump_K2Node_InputActionEvent_39");
static_assert(sizeof(BP_Horse_C_InpActEvt_Jump_K2Node_InputActionEvent_39) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Jump_K2Node_InputActionEvent_39");
static_assert(offsetof(BP_Horse_C_InpActEvt_Jump_K2Node_InputActionEvent_39, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Jump_K2Node_InputActionEvent_39::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Jump_K2Node_InputActionEvent_40
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Jump_K2Node_InputActionEvent_40 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Jump_K2Node_InputActionEvent_40) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Jump_K2Node_InputActionEvent_40");
static_assert(sizeof(BP_Horse_C_InpActEvt_Jump_K2Node_InputActionEvent_40) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Jump_K2Node_InputActionEvent_40");
static_assert(offsetof(BP_Horse_C_InpActEvt_Jump_K2Node_InputActionEvent_40, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Jump_K2Node_InputActionEvent_40::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Cycle Camera_K2Node_InputActionEvent_41
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_41 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_41) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_41");
static_assert(sizeof(BP_Horse_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_41) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_41");
static_assert(offsetof(BP_Horse_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_41, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_41::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.InpActEvt_Cycle Camera_K2Node_InputActionEvent_42
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_42 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_42) == 0x000008, "Wrong alignment on BP_Horse_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_42");
static_assert(sizeof(BP_Horse_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_42) == 0x000018, "Wrong size on BP_Horse_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_42");
static_assert(offsetof(BP_Horse_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_42, Key) == 0x000000, "Member 'BP_Horse_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_42::Key' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.UserConstructionScript
// 0x0018 (0x0018 - 0x0000)
struct BP_Horse_C_UserConstructionScript final
{
public:
	class UCharacterMeshComponent*                K2Node_DynamicCast_AsCharacter_Mesh_Component;     // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_Horse_C_UserConstructionScript");
static_assert(sizeof(BP_Horse_C_UserConstructionScript) == 0x000018, "Wrong size on BP_Horse_C_UserConstructionScript");
static_assert(offsetof(BP_Horse_C_UserConstructionScript, K2Node_DynamicCast_AsCharacter_Mesh_Component) == 0x000000, "Member 'BP_Horse_C_UserConstructionScript::K2Node_DynamicCast_AsCharacter_Mesh_Component' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UserConstructionScript, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'BP_Horse_C_UserConstructionScript::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UserConstructionScript, CallFunc_Array_Add_ReturnValue) == 0x00000C, "Member 'BP_Horse_C_UserConstructionScript::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UserConstructionScript, CallFunc_Array_Add_ReturnValue_1) == 0x000010, "Member 'BP_Horse_C_UserConstructionScript::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.GetVehicleEnterInfo
// 0x0100 (0x0100 - 0x0000)
struct BP_Horse_C_GetVehicleEnterInfo final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FromTransform;                                     // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FVehicleTransitionInfo                 ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ReturnParm, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleTransitionInfo                 K2Node_MakeStruct_VehicleTransitionInfo;           // 0x0078(0x0010)(NoDestructor, UObjectWrapper)
	struct FVehicleTransitionInfo                 K2Node_MakeStruct_VehicleTransitionInfo_1;         // 0x0088(0x0010)(NoDestructor, UObjectWrapper)
	struct FVehicleTransitionInfo                 K2Node_MakeStruct_VehicleTransitionInfo_2;         // 0x0098(0x0010)(NoDestructor, UObjectWrapper)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x00B0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue;     // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Horse_C_GetVehicleEnterInfo) == 0x000010, "Wrong alignment on BP_Horse_C_GetVehicleEnterInfo");
static_assert(sizeof(BP_Horse_C_GetVehicleEnterInfo) == 0x000100, "Wrong size on BP_Horse_C_GetVehicleEnterInfo");
static_assert(offsetof(BP_Horse_C_GetVehicleEnterInfo, Character) == 0x000000, "Member 'BP_Horse_C_GetVehicleEnterInfo::Character' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_GetVehicleEnterInfo, FromTransform) == 0x000010, "Member 'BP_Horse_C_GetVehicleEnterInfo::FromTransform' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_GetVehicleEnterInfo, ReturnValue) == 0x000040, "Member 'BP_Horse_C_GetVehicleEnterInfo::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_GetVehicleEnterInfo, CallFunc_BreakTransform_Location) == 0x000050, "Member 'BP_Horse_C_GetVehicleEnterInfo::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_GetVehicleEnterInfo, CallFunc_BreakTransform_Rotation) == 0x00005C, "Member 'BP_Horse_C_GetVehicleEnterInfo::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_GetVehicleEnterInfo, CallFunc_BreakTransform_Scale) == 0x000068, "Member 'BP_Horse_C_GetVehicleEnterInfo::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_GetVehicleEnterInfo, K2Node_MakeStruct_VehicleTransitionInfo) == 0x000078, "Member 'BP_Horse_C_GetVehicleEnterInfo::K2Node_MakeStruct_VehicleTransitionInfo' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_GetVehicleEnterInfo, K2Node_MakeStruct_VehicleTransitionInfo_1) == 0x000088, "Member 'BP_Horse_C_GetVehicleEnterInfo::K2Node_MakeStruct_VehicleTransitionInfo_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_GetVehicleEnterInfo, K2Node_MakeStruct_VehicleTransitionInfo_2) == 0x000098, "Member 'BP_Horse_C_GetVehicleEnterInfo::K2Node_MakeStruct_VehicleTransitionInfo_2' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_GetVehicleEnterInfo, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x0000B0, "Member 'BP_Horse_C_GetVehicleEnterInfo::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_GetVehicleEnterInfo, CallFunc_InverseTransformLocation_ReturnValue) == 0x0000E0, "Member 'BP_Horse_C_GetVehicleEnterInfo::CallFunc_InverseTransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_GetVehicleEnterInfo, CallFunc_BreakVector_X) == 0x0000EC, "Member 'BP_Horse_C_GetVehicleEnterInfo::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_GetVehicleEnterInfo, CallFunc_BreakVector_Y) == 0x0000F0, "Member 'BP_Horse_C_GetVehicleEnterInfo::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_GetVehicleEnterInfo, CallFunc_BreakVector_Z) == 0x0000F4, "Member 'BP_Horse_C_GetVehicleEnterInfo::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_GetVehicleEnterInfo, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000F8, "Member 'BP_Horse_C_GetVehicleEnterInfo::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_GetVehicleEnterInfo, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000F9, "Member 'BP_Horse_C_GetVehicleEnterInfo::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.GetVehicleLeaveInfo
// 0x0060 (0x0060 - 0x0000)
struct BP_Horse_C_GetVehicleLeaveInfo final
{
public:
	class AMordhauCharacter*                      Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FromTransform;                                     // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FVehicleTransitionInfo                 ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ReturnParm, NoDestructor)
	struct FVehicleTransitionInfo                 K2Node_MakeStruct_VehicleTransitionInfo;           // 0x0050(0x0010)(NoDestructor, UObjectWrapper)
};
static_assert(alignof(BP_Horse_C_GetVehicleLeaveInfo) == 0x000010, "Wrong alignment on BP_Horse_C_GetVehicleLeaveInfo");
static_assert(sizeof(BP_Horse_C_GetVehicleLeaveInfo) == 0x000060, "Wrong size on BP_Horse_C_GetVehicleLeaveInfo");
static_assert(offsetof(BP_Horse_C_GetVehicleLeaveInfo, Character) == 0x000000, "Member 'BP_Horse_C_GetVehicleLeaveInfo::Character' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_GetVehicleLeaveInfo, FromTransform) == 0x000010, "Member 'BP_Horse_C_GetVehicleLeaveInfo::FromTransform' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_GetVehicleLeaveInfo, ReturnValue) == 0x000040, "Member 'BP_Horse_C_GetVehicleLeaveInfo::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_GetVehicleLeaveInfo, K2Node_MakeStruct_VehicleTransitionInfo) == 0x000050, "Member 'BP_Horse_C_GetVehicleLeaveInfo::K2Node_MakeStruct_VehicleTransitionInfo' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.OverrideAttackAngle
// 0x0038 (0x0038 - 0x0000)
struct BP_Horse_C_OverrideAttackAngle final
{
public:
	class UAttackMotion*                          Motion;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnglingValue;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Factor;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SignOfFloat_ReturnValue;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Horse_C_OverrideAttackAngle) == 0x000008, "Wrong alignment on BP_Horse_C_OverrideAttackAngle");
static_assert(sizeof(BP_Horse_C_OverrideAttackAngle) == 0x000038, "Wrong size on BP_Horse_C_OverrideAttackAngle");
static_assert(offsetof(BP_Horse_C_OverrideAttackAngle, Motion) == 0x000000, "Member 'BP_Horse_C_OverrideAttackAngle::Motion' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_OverrideAttackAngle, ReturnValue) == 0x000008, "Member 'BP_Horse_C_OverrideAttackAngle::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_OverrideAttackAngle, AnglingValue) == 0x00000C, "Member 'BP_Horse_C_OverrideAttackAngle::AnglingValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_OverrideAttackAngle, Factor) == 0x000010, "Member 'BP_Horse_C_OverrideAttackAngle::Factor' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_OverrideAttackAngle, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000014, "Member 'BP_Horse_C_OverrideAttackAngle::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_OverrideAttackAngle, CallFunc_Abs_ReturnValue) == 0x000018, "Member 'BP_Horse_C_OverrideAttackAngle::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_OverrideAttackAngle, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00001C, "Member 'BP_Horse_C_OverrideAttackAngle::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_OverrideAttackAngle, CallFunc_BooleanOR_ReturnValue) == 0x00001D, "Member 'BP_Horse_C_OverrideAttackAngle::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_OverrideAttackAngle, CallFunc_SignOfFloat_ReturnValue) == 0x000020, "Member 'BP_Horse_C_OverrideAttackAngle::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_OverrideAttackAngle, CallFunc_GetFloatValue_ReturnValue) == 0x000024, "Member 'BP_Horse_C_OverrideAttackAngle::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_OverrideAttackAngle, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_Horse_C_OverrideAttackAngle::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_OverrideAttackAngle, CallFunc_MapRangeClamped_ReturnValue) == 0x00002C, "Member 'BP_Horse_C_OverrideAttackAngle::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_OverrideAttackAngle, CallFunc_Lerp_ReturnValue) == 0x000030, "Member 'BP_Horse_C_OverrideAttackAngle::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_OverrideAttackAngle, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000034, "Member 'BP_Horse_C_OverrideAttackAngle::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.UpdateHorseColors
// 0x00B0 (0x00B0 - 0x0000)
struct BP_Horse_C_UpdateHorseColors final
{
public:
	struct FLinearColor                           ColorB;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ColorA;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue;                    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Percent_ByteByte_ReturnValue;             // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMordhauSingleton*                      CallFunc_GetMordhauSingleton_ReturnValue;          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetTableColor_ReturnValue;                // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauGameState*                      K2Node_DynamicCast_AsMordhau_Game_State;           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetSecondaryTeamColor_ReturnValue;        // 0x007C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetTeamColor_ReturnValue;                 // 0x008C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetTableColor_ReturnValue_1;              // 0x009C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Horse_C_UpdateHorseColors) == 0x000008, "Wrong alignment on BP_Horse_C_UpdateHorseColors");
static_assert(sizeof(BP_Horse_C_UpdateHorseColors) == 0x0000B0, "Wrong size on BP_Horse_C_UpdateHorseColors");
static_assert(offsetof(BP_Horse_C_UpdateHorseColors, ColorB) == 0x000000, "Member 'BP_Horse_C_UpdateHorseColors::ColorB' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UpdateHorseColors, ColorA) == 0x000010, "Member 'BP_Horse_C_UpdateHorseColors::ColorA' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UpdateHorseColors, CallFunc_IsDedicatedServer_ReturnValue) == 0x000020, "Member 'BP_Horse_C_UpdateHorseColors::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UpdateHorseColors, CallFunc_GetDriver_ReturnValue) == 0x000028, "Member 'BP_Horse_C_UpdateHorseColors::CallFunc_GetDriver_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UpdateHorseColors, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_Horse_C_UpdateHorseColors::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UpdateHorseColors, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000034, "Member 'BP_Horse_C_UpdateHorseColors::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UpdateHorseColors, CallFunc_Not_PreBool_ReturnValue) == 0x000038, "Member 'BP_Horse_C_UpdateHorseColors::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UpdateHorseColors, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'BP_Horse_C_UpdateHorseColors::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UpdateHorseColors, CallFunc_Conv_IntToByte_ReturnValue) == 0x000040, "Member 'BP_Horse_C_UpdateHorseColors::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UpdateHorseColors, CallFunc_Percent_ByteByte_ReturnValue) == 0x000041, "Member 'BP_Horse_C_UpdateHorseColors::CallFunc_Percent_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UpdateHorseColors, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000044, "Member 'BP_Horse_C_UpdateHorseColors::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UpdateHorseColors, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_Horse_C_UpdateHorseColors::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UpdateHorseColors, CallFunc_GetMordhauSingleton_ReturnValue) == 0x000050, "Member 'BP_Horse_C_UpdateHorseColors::CallFunc_GetMordhauSingleton_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UpdateHorseColors, CallFunc_GetGameState_ReturnValue) == 0x000058, "Member 'BP_Horse_C_UpdateHorseColors::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UpdateHorseColors, CallFunc_GetTableColor_ReturnValue) == 0x000060, "Member 'BP_Horse_C_UpdateHorseColors::CallFunc_GetTableColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UpdateHorseColors, K2Node_DynamicCast_AsMordhau_Game_State) == 0x000070, "Member 'BP_Horse_C_UpdateHorseColors::K2Node_DynamicCast_AsMordhau_Game_State' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UpdateHorseColors, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'BP_Horse_C_UpdateHorseColors::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UpdateHorseColors, CallFunc_GetSecondaryTeamColor_ReturnValue) == 0x00007C, "Member 'BP_Horse_C_UpdateHorseColors::CallFunc_GetSecondaryTeamColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UpdateHorseColors, CallFunc_GetTeamColor_ReturnValue) == 0x00008C, "Member 'BP_Horse_C_UpdateHorseColors::CallFunc_GetTeamColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UpdateHorseColors, CallFunc_GetTableColor_ReturnValue_1) == 0x00009C, "Member 'BP_Horse_C_UpdateHorseColors::CallFunc_GetTableColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UpdateHorseColors, CallFunc_BooleanAND_ReturnValue) == 0x0000AC, "Member 'BP_Horse_C_UpdateHorseColors::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_UpdateHorseColors, CallFunc_BooleanAND_ReturnValue_1) == 0x0000AD, "Member 'BP_Horse_C_UpdateHorseColors::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_Horse.BP_Horse_C.SetHorseColors
// 0x0068 (0x0068 - 0x0000)
struct BP_Horse_C_SetHorseColors final
{
public:
	struct FLinearColor                           Color1Color;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color2Color;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Pattern_0;                                         // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Component;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CurMat;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumMaterials_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               K2Node_DynamicCast_AsMaterial_Instance_Dynamic;    // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Horse_C_SetHorseColors) == 0x000008, "Wrong alignment on BP_Horse_C_SetHorseColors");
static_assert(sizeof(BP_Horse_C_SetHorseColors) == 0x000068, "Wrong size on BP_Horse_C_SetHorseColors");
static_assert(offsetof(BP_Horse_C_SetHorseColors, Color1Color) == 0x000000, "Member 'BP_Horse_C_SetHorseColors::Color1Color' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_SetHorseColors, Color2Color) == 0x000010, "Member 'BP_Horse_C_SetHorseColors::Color2Color' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_SetHorseColors, Pattern_0) == 0x000020, "Member 'BP_Horse_C_SetHorseColors::Pattern_0' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_SetHorseColors, Component) == 0x000028, "Member 'BP_Horse_C_SetHorseColors::Component' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_SetHorseColors, CurMat) == 0x000030, "Member 'BP_Horse_C_SetHorseColors::CurMat' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_SetHorseColors, CallFunc_GetNumMaterials_ReturnValue) == 0x000038, "Member 'BP_Horse_C_SetHorseColors::CallFunc_GetNumMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_SetHorseColors, CallFunc_Subtract_IntInt_ReturnValue) == 0x00003C, "Member 'BP_Horse_C_SetHorseColors::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_SetHorseColors, Temp_int_Variable) == 0x000040, "Member 'BP_Horse_C_SetHorseColors::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_SetHorseColors, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'BP_Horse_C_SetHorseColors::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_SetHorseColors, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000048, "Member 'BP_Horse_C_SetHorseColors::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_SetHorseColors, CallFunc_GetMaterial_ReturnValue) == 0x000050, "Member 'BP_Horse_C_SetHorseColors::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_SetHorseColors, K2Node_DynamicCast_AsMaterial_Instance_Dynamic) == 0x000058, "Member 'BP_Horse_C_SetHorseColors::K2Node_DynamicCast_AsMaterial_Instance_Dynamic' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_SetHorseColors, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BP_Horse_C_SetHorseColors::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Horse_C_SetHorseColors, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000061, "Member 'BP_Horse_C_SetHorseColors::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

}

