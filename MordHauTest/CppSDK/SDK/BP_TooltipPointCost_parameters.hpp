#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TooltipPointCost

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_TooltipPointCost.BP_TooltipPointCost_C.Update
// 0x000C (0x000C - 0x0000)
struct BP_TooltipPointCost_C_Update final
{
public:
	int32                                         Cost;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Afford_0;                                      // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TooltipPointCost_C_Update) == 0x000004, "Wrong alignment on BP_TooltipPointCost_C_Update");
static_assert(sizeof(BP_TooltipPointCost_C_Update) == 0x00000C, "Wrong size on BP_TooltipPointCost_C_Update");
static_assert(offsetof(BP_TooltipPointCost_C_Update, Cost) == 0x000000, "Member 'BP_TooltipPointCost_C_Update::Cost' has a wrong offset!");
static_assert(offsetof(BP_TooltipPointCost_C_Update, Can_Afford_0) == 0x000004, "Member 'BP_TooltipPointCost_C_Update::Can_Afford_0' has a wrong offset!");
static_assert(offsetof(BP_TooltipPointCost_C_Update, Temp_bool_Variable) == 0x000005, "Member 'BP_TooltipPointCost_C_Update::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_TooltipPointCost_C_Update, CallFunc_Greater_IntInt_ReturnValue) == 0x000006, "Member 'BP_TooltipPointCost_C_Update::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TooltipPointCost_C_Update, Temp_byte_Variable) == 0x000007, "Member 'BP_TooltipPointCost_C_Update::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_TooltipPointCost_C_Update, Temp_byte_Variable_1) == 0x000008, "Member 'BP_TooltipPointCost_C_Update::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_TooltipPointCost_C_Update, K2Node_Select_Default) == 0x000009, "Member 'BP_TooltipPointCost_C_Update::K2Node_Select_Default' has a wrong offset!");

// Function BP_TooltipPointCost.BP_TooltipPointCost_C.GetColorAndOpacity_0
// 0x0020 (0x0020 - 0x0000)
struct BP_TooltipPointCost_C_GetColorAndOpacity_0 final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TooltipPointCost_C_GetColorAndOpacity_0) == 0x000004, "Wrong alignment on BP_TooltipPointCost_C_GetColorAndOpacity_0");
static_assert(sizeof(BP_TooltipPointCost_C_GetColorAndOpacity_0) == 0x000020, "Wrong size on BP_TooltipPointCost_C_GetColorAndOpacity_0");
static_assert(offsetof(BP_TooltipPointCost_C_GetColorAndOpacity_0, ReturnValue) == 0x000000, "Member 'BP_TooltipPointCost_C_GetColorAndOpacity_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TooltipPointCost_C_GetColorAndOpacity_0, CallFunc_SelectColor_ReturnValue) == 0x000010, "Member 'BP_TooltipPointCost_C_GetColorAndOpacity_0::CallFunc_SelectColor_ReturnValue' has a wrong offset!");

// Function BP_TooltipPointCost.BP_TooltipPointCost_C.GetVisibility_0
// 0x0005 (0x0005 - 0x0000)
struct BP_TooltipPointCost_C_GetVisibility_0 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TooltipPointCost_C_GetVisibility_0) == 0x000001, "Wrong alignment on BP_TooltipPointCost_C_GetVisibility_0");
static_assert(sizeof(BP_TooltipPointCost_C_GetVisibility_0) == 0x000005, "Wrong size on BP_TooltipPointCost_C_GetVisibility_0");
static_assert(offsetof(BP_TooltipPointCost_C_GetVisibility_0, ReturnValue) == 0x000000, "Member 'BP_TooltipPointCost_C_GetVisibility_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TooltipPointCost_C_GetVisibility_0, Temp_bool_Variable) == 0x000001, "Member 'BP_TooltipPointCost_C_GetVisibility_0::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_TooltipPointCost_C_GetVisibility_0, Temp_byte_Variable) == 0x000002, "Member 'BP_TooltipPointCost_C_GetVisibility_0::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_TooltipPointCost_C_GetVisibility_0, Temp_byte_Variable_1) == 0x000003, "Member 'BP_TooltipPointCost_C_GetVisibility_0::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_TooltipPointCost_C_GetVisibility_0, K2Node_Select_Default) == 0x000004, "Member 'BP_TooltipPointCost_C_GetVisibility_0::K2Node_Select_Default' has a wrong offset!");

}

