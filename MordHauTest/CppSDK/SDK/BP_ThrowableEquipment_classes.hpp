#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ThrowableEquipment

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mordhau_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ThrowableEquipment.BP_ThrowableEquipment_C
// 0x0010 (0x0D40 - 0x0D30)
class ABP_ThrowableEquipment_C : public AMordhauEquipment
{
public:
	uint8                                         Pad_D28[0x8];                                      // 0x0D28(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0D30(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	float                                         AutoRestockInterval;                               // 0x0D38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRestocking;                                      // 0x0D3C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_ThrowableEquipment(int32 EntryPoint);
	void OnAmmoChanged();
	void BeginRestocking();
	void AutoRestock();
	void AssignCustomizationToProjectile(class AMordhauProjectile* Projectile);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ThrowableEquipment_C">();
	}
	static class ABP_ThrowableEquipment_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ThrowableEquipment_C>();
	}
};
static_assert(alignof(ABP_ThrowableEquipment_C) == 0x000010, "Wrong alignment on ABP_ThrowableEquipment_C");
static_assert(sizeof(ABP_ThrowableEquipment_C) == 0x000D40, "Wrong size on ABP_ThrowableEquipment_C");
static_assert(offsetof(ABP_ThrowableEquipment_C, UberGraphFrame) == 0x000D30, "Member 'ABP_ThrowableEquipment_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ThrowableEquipment_C, AutoRestockInterval) == 0x000D38, "Member 'ABP_ThrowableEquipment_C::AutoRestockInterval' has a wrong offset!");
static_assert(offsetof(ABP_ThrowableEquipment_C, IsRestocking) == 0x000D3C, "Member 'ABP_ThrowableEquipment_C::IsRestocking' has a wrong offset!");

}

