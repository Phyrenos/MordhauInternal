#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: modio

#include "Basic.hpp"

#include "modio_structs.hpp"


namespace SDK::Params
{

// Function modio.CallbackProxy_AddMetadataKVP.AddMetadataKVP
// 0x0068 (0x0068 - 0x0000)
struct CallbackProxy_AddMetadataKVP_AddMetadataKVP final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            MetadataKVP;                                       // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UCallbackProxy_AddMetadataKVP*          ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_AddMetadataKVP_AddMetadataKVP) == 0x000008, "Wrong alignment on CallbackProxy_AddMetadataKVP_AddMetadataKVP");
static_assert(sizeof(CallbackProxy_AddMetadataKVP_AddMetadataKVP) == 0x000068, "Wrong size on CallbackProxy_AddMetadataKVP_AddMetadataKVP");
static_assert(offsetof(CallbackProxy_AddMetadataKVP_AddMetadataKVP, WorldContext) == 0x000000, "Member 'CallbackProxy_AddMetadataKVP_AddMetadataKVP::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddMetadataKVP_AddMetadataKVP, ModId) == 0x000008, "Member 'CallbackProxy_AddMetadataKVP_AddMetadataKVP::ModId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddMetadataKVP_AddMetadataKVP, MetadataKVP) == 0x000010, "Member 'CallbackProxy_AddMetadataKVP_AddMetadataKVP::MetadataKVP' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddMetadataKVP_AddMetadataKVP, ReturnValue) == 0x000060, "Member 'CallbackProxy_AddMetadataKVP_AddMetadataKVP::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_AddMod.AddMod
// 0x0098 (0x0098 - 0x0000)
struct CallbackProxy_AddMod_AddMod final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioModCreator                       ModCreator;                                        // 0x0008(0x0088)(Parm, NativeAccessSpecifierPublic)
	class UCallbackProxy_AddMod*                  ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_AddMod_AddMod) == 0x000008, "Wrong alignment on CallbackProxy_AddMod_AddMod");
static_assert(sizeof(CallbackProxy_AddMod_AddMod) == 0x000098, "Wrong size on CallbackProxy_AddMod_AddMod");
static_assert(offsetof(CallbackProxy_AddMod_AddMod, WorldContext) == 0x000000, "Member 'CallbackProxy_AddMod_AddMod::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddMod_AddMod, ModCreator) == 0x000008, "Member 'CallbackProxy_AddMod_AddMod::ModCreator' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddMod_AddMod, ReturnValue) == 0x000090, "Member 'CallbackProxy_AddMod_AddMod::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_AddModDependencies.AddModDependencies
// 0x0028 (0x0028 - 0x0000)
struct CallbackProxy_AddModDependencies_AddModDependencies final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Dependencies;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UCallbackProxy_AddModDependencies*      ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_AddModDependencies_AddModDependencies) == 0x000008, "Wrong alignment on CallbackProxy_AddModDependencies_AddModDependencies");
static_assert(sizeof(CallbackProxy_AddModDependencies_AddModDependencies) == 0x000028, "Wrong size on CallbackProxy_AddModDependencies_AddModDependencies");
static_assert(offsetof(CallbackProxy_AddModDependencies_AddModDependencies, WorldContext) == 0x000000, "Member 'CallbackProxy_AddModDependencies_AddModDependencies::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddModDependencies_AddModDependencies, ModId) == 0x000008, "Member 'CallbackProxy_AddModDependencies_AddModDependencies::ModId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddModDependencies_AddModDependencies, Dependencies) == 0x000010, "Member 'CallbackProxy_AddModDependencies_AddModDependencies::Dependencies' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddModDependencies_AddModDependencies, ReturnValue) == 0x000020, "Member 'CallbackProxy_AddModDependencies_AddModDependencies::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_AddModImages.AddModImages
// 0x0028 (0x0028 - 0x0000)
struct CallbackProxy_AddModImages_AddModImages final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ImagePaths;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UCallbackProxy_AddModImages*            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_AddModImages_AddModImages) == 0x000008, "Wrong alignment on CallbackProxy_AddModImages_AddModImages");
static_assert(sizeof(CallbackProxy_AddModImages_AddModImages) == 0x000028, "Wrong size on CallbackProxy_AddModImages_AddModImages");
static_assert(offsetof(CallbackProxy_AddModImages_AddModImages, WorldContext) == 0x000000, "Member 'CallbackProxy_AddModImages_AddModImages::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddModImages_AddModImages, ModId) == 0x000008, "Member 'CallbackProxy_AddModImages_AddModImages::ModId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddModImages_AddModImages, ImagePaths) == 0x000010, "Member 'CallbackProxy_AddModImages_AddModImages::ImagePaths' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddModImages_AddModImages, ReturnValue) == 0x000020, "Member 'CallbackProxy_AddModImages_AddModImages::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_AddModLogo.AddModLogo
// 0x0028 (0x0028 - 0x0000)
struct CallbackProxy_AddModLogo_AddModLogo final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LogoPath;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCallbackProxy_AddModLogo*              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_AddModLogo_AddModLogo) == 0x000008, "Wrong alignment on CallbackProxy_AddModLogo_AddModLogo");
static_assert(sizeof(CallbackProxy_AddModLogo_AddModLogo) == 0x000028, "Wrong size on CallbackProxy_AddModLogo_AddModLogo");
static_assert(offsetof(CallbackProxy_AddModLogo_AddModLogo, WorldContext) == 0x000000, "Member 'CallbackProxy_AddModLogo_AddModLogo::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddModLogo_AddModLogo, ModId) == 0x000008, "Member 'CallbackProxy_AddModLogo_AddModLogo::ModId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddModLogo_AddModLogo, LogoPath) == 0x000010, "Member 'CallbackProxy_AddModLogo_AddModLogo::LogoPath' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddModLogo_AddModLogo, ReturnValue) == 0x000020, "Member 'CallbackProxy_AddModLogo_AddModLogo::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_AddModRating.AddModRating
// 0x0018 (0x0018 - 0x0000)
struct CallbackProxy_AddModRating_AddModRating final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRatingPositive;                                  // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCallbackProxy_AddModRating*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_AddModRating_AddModRating) == 0x000008, "Wrong alignment on CallbackProxy_AddModRating_AddModRating");
static_assert(sizeof(CallbackProxy_AddModRating_AddModRating) == 0x000018, "Wrong size on CallbackProxy_AddModRating_AddModRating");
static_assert(offsetof(CallbackProxy_AddModRating_AddModRating, WorldContext) == 0x000000, "Member 'CallbackProxy_AddModRating_AddModRating::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddModRating_AddModRating, ModId) == 0x000008, "Member 'CallbackProxy_AddModRating_AddModRating::ModId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddModRating_AddModRating, IsRatingPositive) == 0x00000C, "Member 'CallbackProxy_AddModRating_AddModRating::IsRatingPositive' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddModRating_AddModRating, ReturnValue) == 0x000010, "Member 'CallbackProxy_AddModRating_AddModRating::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_AddModSketchfabLinks.AddModSketchfabLinks
// 0x0028 (0x0028 - 0x0000)
struct CallbackProxy_AddModSketchfabLinks_AddModSketchfabLinks final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         SketchfabLinks;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UCallbackProxy_AddModSketchfabLinks*    ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_AddModSketchfabLinks_AddModSketchfabLinks) == 0x000008, "Wrong alignment on CallbackProxy_AddModSketchfabLinks_AddModSketchfabLinks");
static_assert(sizeof(CallbackProxy_AddModSketchfabLinks_AddModSketchfabLinks) == 0x000028, "Wrong size on CallbackProxy_AddModSketchfabLinks_AddModSketchfabLinks");
static_assert(offsetof(CallbackProxy_AddModSketchfabLinks_AddModSketchfabLinks, WorldContext) == 0x000000, "Member 'CallbackProxy_AddModSketchfabLinks_AddModSketchfabLinks::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddModSketchfabLinks_AddModSketchfabLinks, ModId) == 0x000008, "Member 'CallbackProxy_AddModSketchfabLinks_AddModSketchfabLinks::ModId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddModSketchfabLinks_AddModSketchfabLinks, SketchfabLinks) == 0x000010, "Member 'CallbackProxy_AddModSketchfabLinks_AddModSketchfabLinks::SketchfabLinks' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddModSketchfabLinks_AddModSketchfabLinks, ReturnValue) == 0x000020, "Member 'CallbackProxy_AddModSketchfabLinks_AddModSketchfabLinks::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_AddModTags.AddModTags
// 0x0028 (0x0028 - 0x0000)
struct CallbackProxy_AddModTags_AddModTags final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Tags;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UCallbackProxy_AddModTags*              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_AddModTags_AddModTags) == 0x000008, "Wrong alignment on CallbackProxy_AddModTags_AddModTags");
static_assert(sizeof(CallbackProxy_AddModTags_AddModTags) == 0x000028, "Wrong size on CallbackProxy_AddModTags_AddModTags");
static_assert(offsetof(CallbackProxy_AddModTags_AddModTags, WorldContext) == 0x000000, "Member 'CallbackProxy_AddModTags_AddModTags::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddModTags_AddModTags, ModId) == 0x000008, "Member 'CallbackProxy_AddModTags_AddModTags::ModId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddModTags_AddModTags, Tags) == 0x000010, "Member 'CallbackProxy_AddModTags_AddModTags::Tags' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddModTags_AddModTags, ReturnValue) == 0x000020, "Member 'CallbackProxy_AddModTags_AddModTags::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_AddModYoutubeLinks.AddModYoutubeLinks
// 0x0028 (0x0028 - 0x0000)
struct CallbackProxy_AddModYoutubeLinks_AddModYoutubeLinks final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         YoutubeLinks;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UCallbackProxy_AddModYoutubeLinks*      ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_AddModYoutubeLinks_AddModYoutubeLinks) == 0x000008, "Wrong alignment on CallbackProxy_AddModYoutubeLinks_AddModYoutubeLinks");
static_assert(sizeof(CallbackProxy_AddModYoutubeLinks_AddModYoutubeLinks) == 0x000028, "Wrong size on CallbackProxy_AddModYoutubeLinks_AddModYoutubeLinks");
static_assert(offsetof(CallbackProxy_AddModYoutubeLinks_AddModYoutubeLinks, WorldContext) == 0x000000, "Member 'CallbackProxy_AddModYoutubeLinks_AddModYoutubeLinks::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddModYoutubeLinks_AddModYoutubeLinks, ModId) == 0x000008, "Member 'CallbackProxy_AddModYoutubeLinks_AddModYoutubeLinks::ModId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddModYoutubeLinks_AddModYoutubeLinks, YoutubeLinks) == 0x000010, "Member 'CallbackProxy_AddModYoutubeLinks_AddModYoutubeLinks::YoutubeLinks' has a wrong offset!");
static_assert(offsetof(CallbackProxy_AddModYoutubeLinks_AddModYoutubeLinks, ReturnValue) == 0x000020, "Member 'CallbackProxy_AddModYoutubeLinks_AddModYoutubeLinks::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_DeleteMetadataKVP.DeleteMetadataKVP
// 0x0068 (0x0068 - 0x0000)
struct CallbackProxy_DeleteMetadataKVP_DeleteMetadataKVP final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            MetadataKVP;                                       // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UCallbackProxy_DeleteMetadataKVP*       ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_DeleteMetadataKVP_DeleteMetadataKVP) == 0x000008, "Wrong alignment on CallbackProxy_DeleteMetadataKVP_DeleteMetadataKVP");
static_assert(sizeof(CallbackProxy_DeleteMetadataKVP_DeleteMetadataKVP) == 0x000068, "Wrong size on CallbackProxy_DeleteMetadataKVP_DeleteMetadataKVP");
static_assert(offsetof(CallbackProxy_DeleteMetadataKVP_DeleteMetadataKVP, WorldContext) == 0x000000, "Member 'CallbackProxy_DeleteMetadataKVP_DeleteMetadataKVP::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_DeleteMetadataKVP_DeleteMetadataKVP, ModId) == 0x000008, "Member 'CallbackProxy_DeleteMetadataKVP_DeleteMetadataKVP::ModId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_DeleteMetadataKVP_DeleteMetadataKVP, MetadataKVP) == 0x000010, "Member 'CallbackProxy_DeleteMetadataKVP_DeleteMetadataKVP::MetadataKVP' has a wrong offset!");
static_assert(offsetof(CallbackProxy_DeleteMetadataKVP_DeleteMetadataKVP, ReturnValue) == 0x000060, "Member 'CallbackProxy_DeleteMetadataKVP_DeleteMetadataKVP::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_DeleteModDependencies.DeleteModDependencies
// 0x0028 (0x0028 - 0x0000)
struct CallbackProxy_DeleteModDependencies_DeleteModDependencies final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Dependencies;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UCallbackProxy_DeleteModDependencies*   ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_DeleteModDependencies_DeleteModDependencies) == 0x000008, "Wrong alignment on CallbackProxy_DeleteModDependencies_DeleteModDependencies");
static_assert(sizeof(CallbackProxy_DeleteModDependencies_DeleteModDependencies) == 0x000028, "Wrong size on CallbackProxy_DeleteModDependencies_DeleteModDependencies");
static_assert(offsetof(CallbackProxy_DeleteModDependencies_DeleteModDependencies, WorldContext) == 0x000000, "Member 'CallbackProxy_DeleteModDependencies_DeleteModDependencies::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_DeleteModDependencies_DeleteModDependencies, ModId) == 0x000008, "Member 'CallbackProxy_DeleteModDependencies_DeleteModDependencies::ModId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_DeleteModDependencies_DeleteModDependencies, Dependencies) == 0x000010, "Member 'CallbackProxy_DeleteModDependencies_DeleteModDependencies::Dependencies' has a wrong offset!");
static_assert(offsetof(CallbackProxy_DeleteModDependencies_DeleteModDependencies, ReturnValue) == 0x000020, "Member 'CallbackProxy_DeleteModDependencies_DeleteModDependencies::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_DeleteModImages.DeleteModImages
// 0x0028 (0x0028 - 0x0000)
struct CallbackProxy_DeleteModImages_DeleteModImages final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ImagePaths;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UCallbackProxy_DeleteModImages*         ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_DeleteModImages_DeleteModImages) == 0x000008, "Wrong alignment on CallbackProxy_DeleteModImages_DeleteModImages");
static_assert(sizeof(CallbackProxy_DeleteModImages_DeleteModImages) == 0x000028, "Wrong size on CallbackProxy_DeleteModImages_DeleteModImages");
static_assert(offsetof(CallbackProxy_DeleteModImages_DeleteModImages, WorldContext) == 0x000000, "Member 'CallbackProxy_DeleteModImages_DeleteModImages::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_DeleteModImages_DeleteModImages, ModId) == 0x000008, "Member 'CallbackProxy_DeleteModImages_DeleteModImages::ModId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_DeleteModImages_DeleteModImages, ImagePaths) == 0x000010, "Member 'CallbackProxy_DeleteModImages_DeleteModImages::ImagePaths' has a wrong offset!");
static_assert(offsetof(CallbackProxy_DeleteModImages_DeleteModImages, ReturnValue) == 0x000020, "Member 'CallbackProxy_DeleteModImages_DeleteModImages::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_DeleteModSketchfabLinks.DeleteModSketchfabLinks
// 0x0028 (0x0028 - 0x0000)
struct CallbackProxy_DeleteModSketchfabLinks_DeleteModSketchfabLinks final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         SketchfabLinks;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UCallbackProxy_DeleteModSketchfabLinks* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_DeleteModSketchfabLinks_DeleteModSketchfabLinks) == 0x000008, "Wrong alignment on CallbackProxy_DeleteModSketchfabLinks_DeleteModSketchfabLinks");
static_assert(sizeof(CallbackProxy_DeleteModSketchfabLinks_DeleteModSketchfabLinks) == 0x000028, "Wrong size on CallbackProxy_DeleteModSketchfabLinks_DeleteModSketchfabLinks");
static_assert(offsetof(CallbackProxy_DeleteModSketchfabLinks_DeleteModSketchfabLinks, WorldContext) == 0x000000, "Member 'CallbackProxy_DeleteModSketchfabLinks_DeleteModSketchfabLinks::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_DeleteModSketchfabLinks_DeleteModSketchfabLinks, ModId) == 0x000008, "Member 'CallbackProxy_DeleteModSketchfabLinks_DeleteModSketchfabLinks::ModId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_DeleteModSketchfabLinks_DeleteModSketchfabLinks, SketchfabLinks) == 0x000010, "Member 'CallbackProxy_DeleteModSketchfabLinks_DeleteModSketchfabLinks::SketchfabLinks' has a wrong offset!");
static_assert(offsetof(CallbackProxy_DeleteModSketchfabLinks_DeleteModSketchfabLinks, ReturnValue) == 0x000020, "Member 'CallbackProxy_DeleteModSketchfabLinks_DeleteModSketchfabLinks::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_DeleteModTags.DeleteModTags
// 0x0028 (0x0028 - 0x0000)
struct CallbackProxy_DeleteModTags_DeleteModTags final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Tags;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UCallbackProxy_DeleteModTags*           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_DeleteModTags_DeleteModTags) == 0x000008, "Wrong alignment on CallbackProxy_DeleteModTags_DeleteModTags");
static_assert(sizeof(CallbackProxy_DeleteModTags_DeleteModTags) == 0x000028, "Wrong size on CallbackProxy_DeleteModTags_DeleteModTags");
static_assert(offsetof(CallbackProxy_DeleteModTags_DeleteModTags, WorldContext) == 0x000000, "Member 'CallbackProxy_DeleteModTags_DeleteModTags::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_DeleteModTags_DeleteModTags, ModId) == 0x000008, "Member 'CallbackProxy_DeleteModTags_DeleteModTags::ModId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_DeleteModTags_DeleteModTags, Tags) == 0x000010, "Member 'CallbackProxy_DeleteModTags_DeleteModTags::Tags' has a wrong offset!");
static_assert(offsetof(CallbackProxy_DeleteModTags_DeleteModTags, ReturnValue) == 0x000020, "Member 'CallbackProxy_DeleteModTags_DeleteModTags::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_DeleteModYoutubeLinks.DeleteModYoutubeLinks
// 0x0028 (0x0028 - 0x0000)
struct CallbackProxy_DeleteModYoutubeLinks_DeleteModYoutubeLinks final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         YoutubeLinks;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UCallbackProxy_DeleteModYoutubeLinks*   ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_DeleteModYoutubeLinks_DeleteModYoutubeLinks) == 0x000008, "Wrong alignment on CallbackProxy_DeleteModYoutubeLinks_DeleteModYoutubeLinks");
static_assert(sizeof(CallbackProxy_DeleteModYoutubeLinks_DeleteModYoutubeLinks) == 0x000028, "Wrong size on CallbackProxy_DeleteModYoutubeLinks_DeleteModYoutubeLinks");
static_assert(offsetof(CallbackProxy_DeleteModYoutubeLinks_DeleteModYoutubeLinks, WorldContext) == 0x000000, "Member 'CallbackProxy_DeleteModYoutubeLinks_DeleteModYoutubeLinks::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_DeleteModYoutubeLinks_DeleteModYoutubeLinks, ModId) == 0x000008, "Member 'CallbackProxy_DeleteModYoutubeLinks_DeleteModYoutubeLinks::ModId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_DeleteModYoutubeLinks_DeleteModYoutubeLinks, YoutubeLinks) == 0x000010, "Member 'CallbackProxy_DeleteModYoutubeLinks_DeleteModYoutubeLinks::YoutubeLinks' has a wrong offset!");
static_assert(offsetof(CallbackProxy_DeleteModYoutubeLinks_DeleteModYoutubeLinks, ReturnValue) == 0x000020, "Member 'CallbackProxy_DeleteModYoutubeLinks_DeleteModYoutubeLinks::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_DownloadModfilesById.DownloadModfilesById
// 0x0020 (0x0020 - 0x0000)
struct CallbackProxy_DownloadModfilesById_DownloadModfilesById final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ModIds;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UCallbackProxy_DownloadModfilesById*    ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_DownloadModfilesById_DownloadModfilesById) == 0x000008, "Wrong alignment on CallbackProxy_DownloadModfilesById_DownloadModfilesById");
static_assert(sizeof(CallbackProxy_DownloadModfilesById_DownloadModfilesById) == 0x000020, "Wrong size on CallbackProxy_DownloadModfilesById_DownloadModfilesById");
static_assert(offsetof(CallbackProxy_DownloadModfilesById_DownloadModfilesById, WorldContext) == 0x000000, "Member 'CallbackProxy_DownloadModfilesById_DownloadModfilesById::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_DownloadModfilesById_DownloadModfilesById, ModIds) == 0x000008, "Member 'CallbackProxy_DownloadModfilesById_DownloadModfilesById::ModIds' has a wrong offset!");
static_assert(offsetof(CallbackProxy_DownloadModfilesById_DownloadModfilesById, ReturnValue) == 0x000018, "Member 'CallbackProxy_DownloadModfilesById_DownloadModfilesById::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_DownloadSubscribedModfiles.DownloadSubscribedModfiles
// 0x0018 (0x0018 - 0x0000)
struct CallbackProxy_DownloadSubscribedModfiles_DownloadSubscribedModfiles final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UninstallUnsubscribed;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCallbackProxy_DownloadSubscribedModfiles* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_DownloadSubscribedModfiles_DownloadSubscribedModfiles) == 0x000008, "Wrong alignment on CallbackProxy_DownloadSubscribedModfiles_DownloadSubscribedModfiles");
static_assert(sizeof(CallbackProxy_DownloadSubscribedModfiles_DownloadSubscribedModfiles) == 0x000018, "Wrong size on CallbackProxy_DownloadSubscribedModfiles_DownloadSubscribedModfiles");
static_assert(offsetof(CallbackProxy_DownloadSubscribedModfiles_DownloadSubscribedModfiles, WorldContext) == 0x000000, "Member 'CallbackProxy_DownloadSubscribedModfiles_DownloadSubscribedModfiles::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_DownloadSubscribedModfiles_DownloadSubscribedModfiles, UninstallUnsubscribed) == 0x000008, "Member 'CallbackProxy_DownloadSubscribedModfiles_DownloadSubscribedModfiles::UninstallUnsubscribed' has a wrong offset!");
static_assert(offsetof(CallbackProxy_DownloadSubscribedModfiles_DownloadSubscribedModfiles, ReturnValue) == 0x000010, "Member 'CallbackProxy_DownloadSubscribedModfiles_DownloadSubscribedModfiles::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_EditMod.EditMod
// 0x0080 (0x0080 - 0x0000)
struct CallbackProxy_EditMod_EditMod final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioModEditor                        ModEditor;                                         // 0x0010(0x0068)(Parm, NativeAccessSpecifierPublic)
	class UCallbackProxy_EditMod*                 ReturnValue;                                       // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_EditMod_EditMod) == 0x000008, "Wrong alignment on CallbackProxy_EditMod_EditMod");
static_assert(sizeof(CallbackProxy_EditMod_EditMod) == 0x000080, "Wrong size on CallbackProxy_EditMod_EditMod");
static_assert(offsetof(CallbackProxy_EditMod_EditMod, WorldContext) == 0x000000, "Member 'CallbackProxy_EditMod_EditMod::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_EditMod_EditMod, ModId) == 0x000008, "Member 'CallbackProxy_EditMod_EditMod::ModId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_EditMod_EditMod, ModEditor) == 0x000010, "Member 'CallbackProxy_EditMod_EditMod::ModEditor' has a wrong offset!");
static_assert(offsetof(CallbackProxy_EditMod_EditMod, ReturnValue) == 0x000078, "Member 'CallbackProxy_EditMod_EditMod::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_EmailExchange.EmailExchange
// 0x0020 (0x0020 - 0x0000)
struct CallbackProxy_EmailExchange_EmailExchange final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SecurityCode;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCallbackProxy_EmailExchange*           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_EmailExchange_EmailExchange) == 0x000008, "Wrong alignment on CallbackProxy_EmailExchange_EmailExchange");
static_assert(sizeof(CallbackProxy_EmailExchange_EmailExchange) == 0x000020, "Wrong size on CallbackProxy_EmailExchange_EmailExchange");
static_assert(offsetof(CallbackProxy_EmailExchange_EmailExchange, WorldContext) == 0x000000, "Member 'CallbackProxy_EmailExchange_EmailExchange::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_EmailExchange_EmailExchange, SecurityCode) == 0x000008, "Member 'CallbackProxy_EmailExchange_EmailExchange::SecurityCode' has a wrong offset!");
static_assert(offsetof(CallbackProxy_EmailExchange_EmailExchange, ReturnValue) == 0x000018, "Member 'CallbackProxy_EmailExchange_EmailExchange::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_EmailRequest.EmailRequest
// 0x0020 (0x0020 - 0x0000)
struct CallbackProxy_EmailRequest_EmailRequest final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCallbackProxy_EmailRequest*            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_EmailRequest_EmailRequest) == 0x000008, "Wrong alignment on CallbackProxy_EmailRequest_EmailRequest");
static_assert(sizeof(CallbackProxy_EmailRequest_EmailRequest) == 0x000020, "Wrong size on CallbackProxy_EmailRequest_EmailRequest");
static_assert(offsetof(CallbackProxy_EmailRequest_EmailRequest, WorldContext) == 0x000000, "Member 'CallbackProxy_EmailRequest_EmailRequest::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_EmailRequest_EmailRequest, Email) == 0x000008, "Member 'CallbackProxy_EmailRequest_EmailRequest::Email' has a wrong offset!");
static_assert(offsetof(CallbackProxy_EmailRequest_EmailRequest, ReturnValue) == 0x000018, "Member 'CallbackProxy_EmailRequest_EmailRequest::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_GalaxyAuth.GalaxyAuth
// 0x0020 (0x0020 - 0x0000)
struct CallbackProxy_GalaxyAuth_GalaxyAuth final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Appdata;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCallbackProxy_GalaxyAuth*              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_GalaxyAuth_GalaxyAuth) == 0x000008, "Wrong alignment on CallbackProxy_GalaxyAuth_GalaxyAuth");
static_assert(sizeof(CallbackProxy_GalaxyAuth_GalaxyAuth) == 0x000020, "Wrong size on CallbackProxy_GalaxyAuth_GalaxyAuth");
static_assert(offsetof(CallbackProxy_GalaxyAuth_GalaxyAuth, WorldContext) == 0x000000, "Member 'CallbackProxy_GalaxyAuth_GalaxyAuth::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GalaxyAuth_GalaxyAuth, Appdata) == 0x000008, "Member 'CallbackProxy_GalaxyAuth_GalaxyAuth::Appdata' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GalaxyAuth_GalaxyAuth, ReturnValue) == 0x000018, "Member 'CallbackProxy_GalaxyAuth_GalaxyAuth::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_GetAllMetadataKVP.GetAllMetadataKVP
// 0x0018 (0x0018 - 0x0000)
struct CallbackProxy_GetAllMetadataKVP_GetAllMetadataKVP final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCallbackProxy_GetAllMetadataKVP*       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_GetAllMetadataKVP_GetAllMetadataKVP) == 0x000008, "Wrong alignment on CallbackProxy_GetAllMetadataKVP_GetAllMetadataKVP");
static_assert(sizeof(CallbackProxy_GetAllMetadataKVP_GetAllMetadataKVP) == 0x000018, "Wrong size on CallbackProxy_GetAllMetadataKVP_GetAllMetadataKVP");
static_assert(offsetof(CallbackProxy_GetAllMetadataKVP_GetAllMetadataKVP, WorldContext) == 0x000000, "Member 'CallbackProxy_GetAllMetadataKVP_GetAllMetadataKVP::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetAllMetadataKVP_GetAllMetadataKVP, ModId) == 0x000008, "Member 'CallbackProxy_GetAllMetadataKVP_GetAllMetadataKVP::ModId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetAllMetadataKVP_GetAllMetadataKVP, ReturnValue) == 0x000010, "Member 'CallbackProxy_GetAllMetadataKVP_GetAllMetadataKVP::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_GetAllModDependencies.GetAllModDependencies
// 0x0018 (0x0018 - 0x0000)
struct CallbackProxy_GetAllModDependencies_GetAllModDependencies final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCallbackProxy_GetAllModDependencies*   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_GetAllModDependencies_GetAllModDependencies) == 0x000008, "Wrong alignment on CallbackProxy_GetAllModDependencies_GetAllModDependencies");
static_assert(sizeof(CallbackProxy_GetAllModDependencies_GetAllModDependencies) == 0x000018, "Wrong size on CallbackProxy_GetAllModDependencies_GetAllModDependencies");
static_assert(offsetof(CallbackProxy_GetAllModDependencies_GetAllModDependencies, WorldContext) == 0x000000, "Member 'CallbackProxy_GetAllModDependencies_GetAllModDependencies::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetAllModDependencies_GetAllModDependencies, ModId) == 0x000008, "Member 'CallbackProxy_GetAllModDependencies_GetAllModDependencies::ModId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetAllModDependencies_GetAllModDependencies, ReturnValue) == 0x000010, "Member 'CallbackProxy_GetAllModDependencies_GetAllModDependencies::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_GetAllModfiles.GetAllModfiles
// 0x0018 (0x0018 - 0x0000)
struct CallbackProxy_GetAllModfiles_GetAllModfiles final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCallbackProxy_GetAllModfiles*          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_GetAllModfiles_GetAllModfiles) == 0x000008, "Wrong alignment on CallbackProxy_GetAllModfiles_GetAllModfiles");
static_assert(sizeof(CallbackProxy_GetAllModfiles_GetAllModfiles) == 0x000018, "Wrong size on CallbackProxy_GetAllModfiles_GetAllModfiles");
static_assert(offsetof(CallbackProxy_GetAllModfiles_GetAllModfiles, WorldContext) == 0x000000, "Member 'CallbackProxy_GetAllModfiles_GetAllModfiles::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetAllModfiles_GetAllModfiles, ModId) == 0x000008, "Member 'CallbackProxy_GetAllModfiles_GetAllModfiles::ModId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetAllModfiles_GetAllModfiles, ReturnValue) == 0x000010, "Member 'CallbackProxy_GetAllModfiles_GetAllModfiles::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_GetAllMods.GetAllMods
// 0x0050 (0x0050 - 0x0000)
struct CallbackProxy_GetAllMods_GetAllMods final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioFilterCreator                    Filter;                                            // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ModTags;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCallbackProxy_GetAllMods*              ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_GetAllMods_GetAllMods) == 0x000008, "Wrong alignment on CallbackProxy_GetAllMods_GetAllMods");
static_assert(sizeof(CallbackProxy_GetAllMods_GetAllMods) == 0x000050, "Wrong size on CallbackProxy_GetAllMods_GetAllMods");
static_assert(offsetof(CallbackProxy_GetAllMods_GetAllMods, WorldContext) == 0x000000, "Member 'CallbackProxy_GetAllMods_GetAllMods::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetAllMods_GetAllMods, Filter) == 0x000008, "Member 'CallbackProxy_GetAllMods_GetAllMods::Filter' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetAllMods_GetAllMods, ModTags) == 0x000030, "Member 'CallbackProxy_GetAllMods_GetAllMods::ModTags' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetAllMods_GetAllMods, Limit) == 0x000040, "Member 'CallbackProxy_GetAllMods_GetAllMods::Limit' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetAllMods_GetAllMods, Offset) == 0x000044, "Member 'CallbackProxy_GetAllMods_GetAllMods::Offset' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetAllMods_GetAllMods, ReturnValue) == 0x000048, "Member 'CallbackProxy_GetAllMods_GetAllMods::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_GetAllModTags.GetAllModTags
// 0x0018 (0x0018 - 0x0000)
struct CallbackProxy_GetAllModTags_GetAllModTags final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCallbackProxy_GetAllModTags*           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_GetAllModTags_GetAllModTags) == 0x000008, "Wrong alignment on CallbackProxy_GetAllModTags_GetAllModTags");
static_assert(sizeof(CallbackProxy_GetAllModTags_GetAllModTags) == 0x000018, "Wrong size on CallbackProxy_GetAllModTags_GetAllModTags");
static_assert(offsetof(CallbackProxy_GetAllModTags_GetAllModTags, WorldContext) == 0x000000, "Member 'CallbackProxy_GetAllModTags_GetAllModTags::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetAllModTags_GetAllModTags, ModId) == 0x000008, "Member 'CallbackProxy_GetAllModTags_GetAllModTags::ModId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetAllModTags_GetAllModTags, ReturnValue) == 0x000010, "Member 'CallbackProxy_GetAllModTags_GetAllModTags::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_GetAuthenticatedUser.GetAuthenticatedUser
// 0x0010 (0x0010 - 0x0000)
struct CallbackProxy_GetAuthenticatedUser_GetAuthenticatedUser final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCallbackProxy_GetAuthenticatedUser*    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_GetAuthenticatedUser_GetAuthenticatedUser) == 0x000008, "Wrong alignment on CallbackProxy_GetAuthenticatedUser_GetAuthenticatedUser");
static_assert(sizeof(CallbackProxy_GetAuthenticatedUser_GetAuthenticatedUser) == 0x000010, "Wrong size on CallbackProxy_GetAuthenticatedUser_GetAuthenticatedUser");
static_assert(offsetof(CallbackProxy_GetAuthenticatedUser_GetAuthenticatedUser, WorldContext) == 0x000000, "Member 'CallbackProxy_GetAuthenticatedUser_GetAuthenticatedUser::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetAuthenticatedUser_GetAuthenticatedUser, ReturnValue) == 0x000008, "Member 'CallbackProxy_GetAuthenticatedUser_GetAuthenticatedUser::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_GetGame.GetGame
// 0x0018 (0x0018 - 0x0000)
struct CallbackProxy_GetGame_GetGame final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCallbackProxy_GetGame*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_GetGame_GetGame) == 0x000008, "Wrong alignment on CallbackProxy_GetGame_GetGame");
static_assert(sizeof(CallbackProxy_GetGame_GetGame) == 0x000018, "Wrong size on CallbackProxy_GetGame_GetGame");
static_assert(offsetof(CallbackProxy_GetGame_GetGame, WorldContext) == 0x000000, "Member 'CallbackProxy_GetGame_GetGame::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetGame_GetGame, GameId) == 0x000008, "Member 'CallbackProxy_GetGame_GetGame::GameId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetGame_GetGame, ReturnValue) == 0x000010, "Member 'CallbackProxy_GetGame_GetGame::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_GetMod.GetMod
// 0x0018 (0x0018 - 0x0000)
struct CallbackProxy_GetMod_GetMod final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCallbackProxy_GetMod*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_GetMod_GetMod) == 0x000008, "Wrong alignment on CallbackProxy_GetMod_GetMod");
static_assert(sizeof(CallbackProxy_GetMod_GetMod) == 0x000018, "Wrong size on CallbackProxy_GetMod_GetMod");
static_assert(offsetof(CallbackProxy_GetMod_GetMod, WorldContext) == 0x000000, "Member 'CallbackProxy_GetMod_GetMod::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetMod_GetMod, ModId) == 0x000008, "Member 'CallbackProxy_GetMod_GetMod::ModId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetMod_GetMod, ReturnValue) == 0x000010, "Member 'CallbackProxy_GetMod_GetMod::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_GetUserEvents.GetUserEvents
// 0x0018 (0x0018 - 0x0000)
struct CallbackProxy_GetUserEvents_GetUserEvents final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCallbackProxy_GetUserEvents*           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_GetUserEvents_GetUserEvents) == 0x000008, "Wrong alignment on CallbackProxy_GetUserEvents_GetUserEvents");
static_assert(sizeof(CallbackProxy_GetUserEvents_GetUserEvents) == 0x000018, "Wrong size on CallbackProxy_GetUserEvents_GetUserEvents");
static_assert(offsetof(CallbackProxy_GetUserEvents_GetUserEvents, WorldContext) == 0x000000, "Member 'CallbackProxy_GetUserEvents_GetUserEvents::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetUserEvents_GetUserEvents, Limit) == 0x000008, "Member 'CallbackProxy_GetUserEvents_GetUserEvents::Limit' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetUserEvents_GetUserEvents, Offset) == 0x00000C, "Member 'CallbackProxy_GetUserEvents_GetUserEvents::Offset' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetUserEvents_GetUserEvents, ReturnValue) == 0x000010, "Member 'CallbackProxy_GetUserEvents_GetUserEvents::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_GetUserModfiles.GetUserModfiles
// 0x0018 (0x0018 - 0x0000)
struct CallbackProxy_GetUserModfiles_GetUserModfiles final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCallbackProxy_GetUserModfiles*         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_GetUserModfiles_GetUserModfiles) == 0x000008, "Wrong alignment on CallbackProxy_GetUserModfiles_GetUserModfiles");
static_assert(sizeof(CallbackProxy_GetUserModfiles_GetUserModfiles) == 0x000018, "Wrong size on CallbackProxy_GetUserModfiles_GetUserModfiles");
static_assert(offsetof(CallbackProxy_GetUserModfiles_GetUserModfiles, WorldContext) == 0x000000, "Member 'CallbackProxy_GetUserModfiles_GetUserModfiles::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetUserModfiles_GetUserModfiles, Limit) == 0x000008, "Member 'CallbackProxy_GetUserModfiles_GetUserModfiles::Limit' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetUserModfiles_GetUserModfiles, Offset) == 0x00000C, "Member 'CallbackProxy_GetUserModfiles_GetUserModfiles::Offset' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetUserModfiles_GetUserModfiles, ReturnValue) == 0x000010, "Member 'CallbackProxy_GetUserModfiles_GetUserModfiles::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_GetUserMods.GetUserMods
// 0x0050 (0x0050 - 0x0000)
struct CallbackProxy_GetUserMods_GetUserMods final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioFilterCreator                    FilterCreator;                                     // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ModTags;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCallbackProxy_GetUserMods*             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_GetUserMods_GetUserMods) == 0x000008, "Wrong alignment on CallbackProxy_GetUserMods_GetUserMods");
static_assert(sizeof(CallbackProxy_GetUserMods_GetUserMods) == 0x000050, "Wrong size on CallbackProxy_GetUserMods_GetUserMods");
static_assert(offsetof(CallbackProxy_GetUserMods_GetUserMods, WorldContext) == 0x000000, "Member 'CallbackProxy_GetUserMods_GetUserMods::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetUserMods_GetUserMods, FilterCreator) == 0x000008, "Member 'CallbackProxy_GetUserMods_GetUserMods::FilterCreator' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetUserMods_GetUserMods, ModTags) == 0x000030, "Member 'CallbackProxy_GetUserMods_GetUserMods::ModTags' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetUserMods_GetUserMods, Limit) == 0x000040, "Member 'CallbackProxy_GetUserMods_GetUserMods::Limit' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetUserMods_GetUserMods, Offset) == 0x000044, "Member 'CallbackProxy_GetUserMods_GetUserMods::Offset' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetUserMods_GetUserMods, ReturnValue) == 0x000048, "Member 'CallbackProxy_GetUserMods_GetUserMods::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_GetUserRatings.GetUserRatings
// 0x0018 (0x0018 - 0x0000)
struct CallbackProxy_GetUserRatings_GetUserRatings final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCallbackProxy_GetUserRatings*          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_GetUserRatings_GetUserRatings) == 0x000008, "Wrong alignment on CallbackProxy_GetUserRatings_GetUserRatings");
static_assert(sizeof(CallbackProxy_GetUserRatings_GetUserRatings) == 0x000018, "Wrong size on CallbackProxy_GetUserRatings_GetUserRatings");
static_assert(offsetof(CallbackProxy_GetUserRatings_GetUserRatings, WorldContext) == 0x000000, "Member 'CallbackProxy_GetUserRatings_GetUserRatings::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetUserRatings_GetUserRatings, Limit) == 0x000008, "Member 'CallbackProxy_GetUserRatings_GetUserRatings::Limit' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetUserRatings_GetUserRatings, Offset) == 0x00000C, "Member 'CallbackProxy_GetUserRatings_GetUserRatings::Offset' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetUserRatings_GetUserRatings, ReturnValue) == 0x000010, "Member 'CallbackProxy_GetUserRatings_GetUserRatings::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_GetUserSubscriptions.GetUserSubscriptions
// 0x0050 (0x0050 - 0x0000)
struct CallbackProxy_GetUserSubscriptions_GetUserSubscriptions final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioFilterCreator                    FilterCreator;                                     // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ModTags;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCallbackProxy_GetUserSubscriptions*    ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_GetUserSubscriptions_GetUserSubscriptions) == 0x000008, "Wrong alignment on CallbackProxy_GetUserSubscriptions_GetUserSubscriptions");
static_assert(sizeof(CallbackProxy_GetUserSubscriptions_GetUserSubscriptions) == 0x000050, "Wrong size on CallbackProxy_GetUserSubscriptions_GetUserSubscriptions");
static_assert(offsetof(CallbackProxy_GetUserSubscriptions_GetUserSubscriptions, WorldContext) == 0x000000, "Member 'CallbackProxy_GetUserSubscriptions_GetUserSubscriptions::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetUserSubscriptions_GetUserSubscriptions, FilterCreator) == 0x000008, "Member 'CallbackProxy_GetUserSubscriptions_GetUserSubscriptions::FilterCreator' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetUserSubscriptions_GetUserSubscriptions, ModTags) == 0x000030, "Member 'CallbackProxy_GetUserSubscriptions_GetUserSubscriptions::ModTags' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetUserSubscriptions_GetUserSubscriptions, Limit) == 0x000040, "Member 'CallbackProxy_GetUserSubscriptions_GetUserSubscriptions::Limit' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetUserSubscriptions_GetUserSubscriptions, Offset) == 0x000044, "Member 'CallbackProxy_GetUserSubscriptions_GetUserSubscriptions::Offset' has a wrong offset!");
static_assert(offsetof(CallbackProxy_GetUserSubscriptions_GetUserSubscriptions, ReturnValue) == 0x000048, "Member 'CallbackProxy_GetUserSubscriptions_GetUserSubscriptions::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_OculusAuth.OculusAuth
// 0x0068 (0x0068 - 0x0000)
struct CallbackProxy_OculusAuth_OculusAuth final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Nonce;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OculusUserId;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccessToken;                                       // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Device;                                            // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DateExpires;                                       // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCallbackProxy_OculusAuth*              ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_OculusAuth_OculusAuth) == 0x000008, "Wrong alignment on CallbackProxy_OculusAuth_OculusAuth");
static_assert(sizeof(CallbackProxy_OculusAuth_OculusAuth) == 0x000068, "Wrong size on CallbackProxy_OculusAuth_OculusAuth");
static_assert(offsetof(CallbackProxy_OculusAuth_OculusAuth, WorldContext) == 0x000000, "Member 'CallbackProxy_OculusAuth_OculusAuth::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_OculusAuth_OculusAuth, Nonce) == 0x000008, "Member 'CallbackProxy_OculusAuth_OculusAuth::Nonce' has a wrong offset!");
static_assert(offsetof(CallbackProxy_OculusAuth_OculusAuth, OculusUserId) == 0x000018, "Member 'CallbackProxy_OculusAuth_OculusAuth::OculusUserId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_OculusAuth_OculusAuth, AccessToken) == 0x000028, "Member 'CallbackProxy_OculusAuth_OculusAuth::AccessToken' has a wrong offset!");
static_assert(offsetof(CallbackProxy_OculusAuth_OculusAuth, Email) == 0x000038, "Member 'CallbackProxy_OculusAuth_OculusAuth::Email' has a wrong offset!");
static_assert(offsetof(CallbackProxy_OculusAuth_OculusAuth, Device) == 0x000048, "Member 'CallbackProxy_OculusAuth_OculusAuth::Device' has a wrong offset!");
static_assert(offsetof(CallbackProxy_OculusAuth_OculusAuth, DateExpires) == 0x000058, "Member 'CallbackProxy_OculusAuth_OculusAuth::DateExpires' has a wrong offset!");
static_assert(offsetof(CallbackProxy_OculusAuth_OculusAuth, ReturnValue) == 0x000060, "Member 'CallbackProxy_OculusAuth_OculusAuth::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_SetModDownloadListener.SetModDownloadListener
// 0x0010 (0x0010 - 0x0000)
struct CallbackProxy_SetModDownloadListener_SetModDownloadListener final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCallbackProxy_SetModDownloadListener*  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_SetModDownloadListener_SetModDownloadListener) == 0x000008, "Wrong alignment on CallbackProxy_SetModDownloadListener_SetModDownloadListener");
static_assert(sizeof(CallbackProxy_SetModDownloadListener_SetModDownloadListener) == 0x000010, "Wrong size on CallbackProxy_SetModDownloadListener_SetModDownloadListener");
static_assert(offsetof(CallbackProxy_SetModDownloadListener_SetModDownloadListener, WorldContext) == 0x000000, "Member 'CallbackProxy_SetModDownloadListener_SetModDownloadListener::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_SetModDownloadListener_SetModDownloadListener, ReturnValue) == 0x000008, "Member 'CallbackProxy_SetModDownloadListener_SetModDownloadListener::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_SetModEventListener.SetModEventListener
// 0x0010 (0x0010 - 0x0000)
struct CallbackProxy_SetModEventListener_SetModEventListener final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCallbackProxy_SetModEventListener*     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_SetModEventListener_SetModEventListener) == 0x000008, "Wrong alignment on CallbackProxy_SetModEventListener_SetModEventListener");
static_assert(sizeof(CallbackProxy_SetModEventListener_SetModEventListener) == 0x000010, "Wrong size on CallbackProxy_SetModEventListener_SetModEventListener");
static_assert(offsetof(CallbackProxy_SetModEventListener_SetModEventListener, WorldContext) == 0x000000, "Member 'CallbackProxy_SetModEventListener_SetModEventListener::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_SetModEventListener_SetModEventListener, ReturnValue) == 0x000008, "Member 'CallbackProxy_SetModEventListener_SetModEventListener::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_SetModfileUploadListener.SetModfileUploadListener
// 0x0010 (0x0010 - 0x0000)
struct CallbackProxy_SetModfileUploadListener_SetModfileUploadListener final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCallbackProxy_SetModfileUploadListener* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_SetModfileUploadListener_SetModfileUploadListener) == 0x000008, "Wrong alignment on CallbackProxy_SetModfileUploadListener_SetModfileUploadListener");
static_assert(sizeof(CallbackProxy_SetModfileUploadListener_SetModfileUploadListener) == 0x000010, "Wrong size on CallbackProxy_SetModfileUploadListener_SetModfileUploadListener");
static_assert(offsetof(CallbackProxy_SetModfileUploadListener_SetModfileUploadListener, WorldContext) == 0x000000, "Member 'CallbackProxy_SetModfileUploadListener_SetModfileUploadListener::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_SetModfileUploadListener_SetModfileUploadListener, ReturnValue) == 0x000008, "Member 'CallbackProxy_SetModfileUploadListener_SetModfileUploadListener::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_SteamAuth.SteamAuth
// 0x0020 (0x0020 - 0x0000)
struct CallbackProxy_SteamAuth_SteamAuth final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Base64Ticket;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCallbackProxy_SteamAuth*               ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_SteamAuth_SteamAuth) == 0x000008, "Wrong alignment on CallbackProxy_SteamAuth_SteamAuth");
static_assert(sizeof(CallbackProxy_SteamAuth_SteamAuth) == 0x000020, "Wrong size on CallbackProxy_SteamAuth_SteamAuth");
static_assert(offsetof(CallbackProxy_SteamAuth_SteamAuth, WorldContext) == 0x000000, "Member 'CallbackProxy_SteamAuth_SteamAuth::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_SteamAuth_SteamAuth, Base64Ticket) == 0x000008, "Member 'CallbackProxy_SteamAuth_SteamAuth::Base64Ticket' has a wrong offset!");
static_assert(offsetof(CallbackProxy_SteamAuth_SteamAuth, ReturnValue) == 0x000018, "Member 'CallbackProxy_SteamAuth_SteamAuth::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_SubmitReport.SubmitReport
// 0x0040 (0x0040 - 0x0000)
struct CallbackProxy_SubmitReport_SubmitReport final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModioResourceType                            Resource;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModioReportType                              Report;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Summary;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCallbackProxy_SubmitReport*            ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_SubmitReport_SubmitReport) == 0x000008, "Wrong alignment on CallbackProxy_SubmitReport_SubmitReport");
static_assert(sizeof(CallbackProxy_SubmitReport_SubmitReport) == 0x000040, "Wrong size on CallbackProxy_SubmitReport_SubmitReport");
static_assert(offsetof(CallbackProxy_SubmitReport_SubmitReport, WorldContext) == 0x000000, "Member 'CallbackProxy_SubmitReport_SubmitReport::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_SubmitReport_SubmitReport, Resource) == 0x000008, "Member 'CallbackProxy_SubmitReport_SubmitReport::Resource' has a wrong offset!");
static_assert(offsetof(CallbackProxy_SubmitReport_SubmitReport, ID) == 0x00000C, "Member 'CallbackProxy_SubmitReport_SubmitReport::ID' has a wrong offset!");
static_assert(offsetof(CallbackProxy_SubmitReport_SubmitReport, Report) == 0x000010, "Member 'CallbackProxy_SubmitReport_SubmitReport::Report' has a wrong offset!");
static_assert(offsetof(CallbackProxy_SubmitReport_SubmitReport, Name_0) == 0x000018, "Member 'CallbackProxy_SubmitReport_SubmitReport::Name_0' has a wrong offset!");
static_assert(offsetof(CallbackProxy_SubmitReport_SubmitReport, Summary) == 0x000028, "Member 'CallbackProxy_SubmitReport_SubmitReport::Summary' has a wrong offset!");
static_assert(offsetof(CallbackProxy_SubmitReport_SubmitReport, ReturnValue) == 0x000038, "Member 'CallbackProxy_SubmitReport_SubmitReport::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_SubscribeToMod.SubscribeToMod
// 0x0018 (0x0018 - 0x0000)
struct CallbackProxy_SubscribeToMod_SubscribeToMod final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCallbackProxy_SubscribeToMod*          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_SubscribeToMod_SubscribeToMod) == 0x000008, "Wrong alignment on CallbackProxy_SubscribeToMod_SubscribeToMod");
static_assert(sizeof(CallbackProxy_SubscribeToMod_SubscribeToMod) == 0x000018, "Wrong size on CallbackProxy_SubscribeToMod_SubscribeToMod");
static_assert(offsetof(CallbackProxy_SubscribeToMod_SubscribeToMod, WorldContext) == 0x000000, "Member 'CallbackProxy_SubscribeToMod_SubscribeToMod::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_SubscribeToMod_SubscribeToMod, ModId) == 0x000008, "Member 'CallbackProxy_SubscribeToMod_SubscribeToMod::ModId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_SubscribeToMod_SubscribeToMod, ReturnValue) == 0x000010, "Member 'CallbackProxy_SubscribeToMod_SubscribeToMod::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_UninstallUnavailableMods.UninstallUnavailableMods
// 0x0010 (0x0010 - 0x0000)
struct CallbackProxy_UninstallUnavailableMods_UninstallUnavailableMods final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCallbackProxy_UninstallUnavailableMods* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_UninstallUnavailableMods_UninstallUnavailableMods) == 0x000008, "Wrong alignment on CallbackProxy_UninstallUnavailableMods_UninstallUnavailableMods");
static_assert(sizeof(CallbackProxy_UninstallUnavailableMods_UninstallUnavailableMods) == 0x000010, "Wrong size on CallbackProxy_UninstallUnavailableMods_UninstallUnavailableMods");
static_assert(offsetof(CallbackProxy_UninstallUnavailableMods_UninstallUnavailableMods, WorldContext) == 0x000000, "Member 'CallbackProxy_UninstallUnavailableMods_UninstallUnavailableMods::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_UninstallUnavailableMods_UninstallUnavailableMods, ReturnValue) == 0x000008, "Member 'CallbackProxy_UninstallUnavailableMods_UninstallUnavailableMods::ReturnValue' has a wrong offset!");

// Function modio.CallbackProxy_UnsubscribeFromMod.UnsubscribeFromMod
// 0x0018 (0x0018 - 0x0000)
struct CallbackProxy_UnsubscribeFromMod_UnsubscribeFromMod final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCallbackProxy_UnsubscribeFromMod*      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CallbackProxy_UnsubscribeFromMod_UnsubscribeFromMod) == 0x000008, "Wrong alignment on CallbackProxy_UnsubscribeFromMod_UnsubscribeFromMod");
static_assert(sizeof(CallbackProxy_UnsubscribeFromMod_UnsubscribeFromMod) == 0x000018, "Wrong size on CallbackProxy_UnsubscribeFromMod_UnsubscribeFromMod");
static_assert(offsetof(CallbackProxy_UnsubscribeFromMod_UnsubscribeFromMod, WorldContext) == 0x000000, "Member 'CallbackProxy_UnsubscribeFromMod_UnsubscribeFromMod::WorldContext' has a wrong offset!");
static_assert(offsetof(CallbackProxy_UnsubscribeFromMod_UnsubscribeFromMod, ModId) == 0x000008, "Member 'CallbackProxy_UnsubscribeFromMod_UnsubscribeFromMod::ModId' has a wrong offset!");
static_assert(offsetof(CallbackProxy_UnsubscribeFromMod_UnsubscribeFromMod, ReturnValue) == 0x000010, "Member 'CallbackProxy_UnsubscribeFromMod_UnsubscribeFromMod::ReturnValue' has a wrong offset!");

// Function modio.ModioFunctionLibrary.AuthenticateViaToken
// 0x0018 (0x0018 - 0x0000)
struct ModioFunctionLibrary_AuthenticateViaToken final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccessToken;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModioFunctionLibrary_AuthenticateViaToken) == 0x000008, "Wrong alignment on ModioFunctionLibrary_AuthenticateViaToken");
static_assert(sizeof(ModioFunctionLibrary_AuthenticateViaToken) == 0x000018, "Wrong size on ModioFunctionLibrary_AuthenticateViaToken");
static_assert(offsetof(ModioFunctionLibrary_AuthenticateViaToken, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_AuthenticateViaToken::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_AuthenticateViaToken, AccessToken) == 0x000008, "Member 'ModioFunctionLibrary_AuthenticateViaToken::AccessToken' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioAddModfile
// 0x0058 (0x0058 - 0x0000)
struct ModioFunctionLibrary_ModioAddModfile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioModfileCreator                   ModfileCreator;                                    // 0x0010(0x0048)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModioFunctionLibrary_ModioAddModfile) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioAddModfile");
static_assert(sizeof(ModioFunctionLibrary_ModioAddModfile) == 0x000058, "Wrong size on ModioFunctionLibrary_ModioAddModfile");
static_assert(offsetof(ModioFunctionLibrary_ModioAddModfile, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioAddModfile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioAddModfile, ModId) == 0x000008, "Member 'ModioFunctionLibrary_ModioAddModfile::ModId' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioAddModfile, ModfileCreator) == 0x000010, "Member 'ModioFunctionLibrary_ModioAddModfile::ModfileCreator' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioCancelModDownload
// 0x0010 (0x0010 - 0x0000)
struct ModioFunctionLibrary_ModioCancelModDownload final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModioFunctionLibrary_ModioCancelModDownload) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioCancelModDownload");
static_assert(sizeof(ModioFunctionLibrary_ModioCancelModDownload) == 0x000010, "Wrong size on ModioFunctionLibrary_ModioCancelModDownload");
static_assert(offsetof(ModioFunctionLibrary_ModioCancelModDownload, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioCancelModDownload::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioCancelModDownload, ModId) == 0x000008, "Member 'ModioFunctionLibrary_ModioCancelModDownload::ModId' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioCurrentUser
// 0x00A0 (0x00A0 - 0x0000)
struct ModioFunctionLibrary_ModioCurrentUser final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioUser                             User;                                              // 0x0008(0x0098)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModioFunctionLibrary_ModioCurrentUser) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioCurrentUser");
static_assert(sizeof(ModioFunctionLibrary_ModioCurrentUser) == 0x0000A0, "Wrong size on ModioFunctionLibrary_ModioCurrentUser");
static_assert(offsetof(ModioFunctionLibrary_ModioCurrentUser, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioCurrentUser::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioCurrentUser, User) == 0x000008, "Member 'ModioFunctionLibrary_ModioCurrentUser::User' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioDownloadMod
// 0x0010 (0x0010 - 0x0000)
struct ModioFunctionLibrary_ModioDownloadMod final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModioFunctionLibrary_ModioDownloadMod) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioDownloadMod");
static_assert(sizeof(ModioFunctionLibrary_ModioDownloadMod) == 0x000010, "Wrong size on ModioFunctionLibrary_ModioDownloadMod");
static_assert(offsetof(ModioFunctionLibrary_ModioDownloadMod, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioDownloadMod::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioDownloadMod, ModId) == 0x000008, "Member 'ModioFunctionLibrary_ModioDownloadMod::ModId' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioGetAllDownloadedMods
// 0x0018 (0x0018 - 0x0000)
struct ModioFunctionLibrary_ModioGetAllDownloadedMods final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 DownloadedMods;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModioFunctionLibrary_ModioGetAllDownloadedMods) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioGetAllDownloadedMods");
static_assert(sizeof(ModioFunctionLibrary_ModioGetAllDownloadedMods) == 0x000018, "Wrong size on ModioFunctionLibrary_ModioGetAllDownloadedMods");
static_assert(offsetof(ModioFunctionLibrary_ModioGetAllDownloadedMods, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioGetAllDownloadedMods::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioGetAllDownloadedMods, DownloadedMods) == 0x000008, "Member 'ModioFunctionLibrary_ModioGetAllDownloadedMods::DownloadedMods' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioGetAllInstalledMods
// 0x0018 (0x0018 - 0x0000)
struct ModioFunctionLibrary_ModioGetAllInstalledMods final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FModioInstalledMod>             InstalledMods;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModioFunctionLibrary_ModioGetAllInstalledMods) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioGetAllInstalledMods");
static_assert(sizeof(ModioFunctionLibrary_ModioGetAllInstalledMods) == 0x000018, "Wrong size on ModioFunctionLibrary_ModioGetAllInstalledMods");
static_assert(offsetof(ModioFunctionLibrary_ModioGetAllInstalledMods, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioGetAllInstalledMods::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioGetAllInstalledMods, InstalledMods) == 0x000008, "Member 'ModioFunctionLibrary_ModioGetAllInstalledMods::InstalledMods' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioGetCurrentUserModRating
// 0x0010 (0x0010 - 0x0000)
struct ModioFunctionLibrary_ModioGetCurrentUserModRating final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ModRating;                                         // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModioFunctionLibrary_ModioGetCurrentUserModRating) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioGetCurrentUserModRating");
static_assert(sizeof(ModioFunctionLibrary_ModioGetCurrentUserModRating) == 0x000010, "Wrong size on ModioFunctionLibrary_ModioGetCurrentUserModRating");
static_assert(offsetof(ModioFunctionLibrary_ModioGetCurrentUserModRating, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioGetCurrentUserModRating::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioGetCurrentUserModRating, ModId) == 0x000008, "Member 'ModioFunctionLibrary_ModioGetCurrentUserModRating::ModId' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioGetCurrentUserModRating, ModRating) == 0x00000C, "Member 'ModioFunctionLibrary_ModioGetCurrentUserModRating::ModRating' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioGetCurrentUserSubscriptions
// 0x0018 (0x0018 - 0x0000)
struct ModioFunctionLibrary_ModioGetCurrentUserSubscriptions final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ModIds;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModioFunctionLibrary_ModioGetCurrentUserSubscriptions) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioGetCurrentUserSubscriptions");
static_assert(sizeof(ModioFunctionLibrary_ModioGetCurrentUserSubscriptions) == 0x000018, "Wrong size on ModioFunctionLibrary_ModioGetCurrentUserSubscriptions");
static_assert(offsetof(ModioFunctionLibrary_ModioGetCurrentUserSubscriptions, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioGetCurrentUserSubscriptions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioGetCurrentUserSubscriptions, ModIds) == 0x000008, "Member 'ModioFunctionLibrary_ModioGetCurrentUserSubscriptions::ModIds' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioGetInstalledMod
// 0x02D0 (0x02D0 - 0x0000)
struct ModioFunctionLibrary_ModioGetInstalledMod final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Path;                                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModioMod                              Mod;                                               // 0x0020(0x02B0)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModioFunctionLibrary_ModioGetInstalledMod) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioGetInstalledMod");
static_assert(sizeof(ModioFunctionLibrary_ModioGetInstalledMod) == 0x0002D0, "Wrong size on ModioFunctionLibrary_ModioGetInstalledMod");
static_assert(offsetof(ModioFunctionLibrary_ModioGetInstalledMod, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioGetInstalledMod::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioGetInstalledMod, ModId) == 0x000008, "Member 'ModioFunctionLibrary_ModioGetInstalledMod::ModId' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioGetInstalledMod, Path) == 0x000010, "Member 'ModioFunctionLibrary_ModioGetInstalledMod::Path' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioGetInstalledMod, Mod) == 0x000020, "Member 'ModioFunctionLibrary_ModioGetInstalledMod::Mod' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioGetModDownloadQueue
// 0x0018 (0x0018 - 0x0000)
struct ModioFunctionLibrary_ModioGetModDownloadQueue final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FModioQueuedModDownload>        QueuedMods;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModioFunctionLibrary_ModioGetModDownloadQueue) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioGetModDownloadQueue");
static_assert(sizeof(ModioFunctionLibrary_ModioGetModDownloadQueue) == 0x000018, "Wrong size on ModioFunctionLibrary_ModioGetModDownloadQueue");
static_assert(offsetof(ModioFunctionLibrary_ModioGetModDownloadQueue, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioGetModDownloadQueue::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioGetModDownloadQueue, QueuedMods) == 0x000008, "Member 'ModioFunctionLibrary_ModioGetModDownloadQueue::QueuedMods' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioGetModfileUploadQueue
// 0x0018 (0x0018 - 0x0000)
struct ModioFunctionLibrary_ModioGetModfileUploadQueue final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FModioQueuedModfileUpload>      UploadQueue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModioFunctionLibrary_ModioGetModfileUploadQueue) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioGetModfileUploadQueue");
static_assert(sizeof(ModioFunctionLibrary_ModioGetModfileUploadQueue) == 0x000018, "Wrong size on ModioFunctionLibrary_ModioGetModfileUploadQueue");
static_assert(offsetof(ModioFunctionLibrary_ModioGetModfileUploadQueue, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioGetModfileUploadQueue::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioGetModfileUploadQueue, UploadQueue) == 0x000008, "Member 'ModioFunctionLibrary_ModioGetModfileUploadQueue::UploadQueue' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioGetModState
// 0x0010 (0x0010 - 0x0000)
struct ModioFunctionLibrary_ModioGetModState final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ModState;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModioFunctionLibrary_ModioGetModState) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioGetModState");
static_assert(sizeof(ModioFunctionLibrary_ModioGetModState) == 0x000010, "Wrong size on ModioFunctionLibrary_ModioGetModState");
static_assert(offsetof(ModioFunctionLibrary_ModioGetModState, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioGetModState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioGetModState, ModId) == 0x000008, "Member 'ModioFunctionLibrary_ModioGetModState::ModId' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioGetModState, ModState) == 0x00000C, "Member 'ModioFunctionLibrary_ModioGetModState::ModState' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioInstallDownloadedMods
// 0x0008 (0x0008 - 0x0000)
struct ModioFunctionLibrary_ModioInstallDownloadedMods final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModioFunctionLibrary_ModioInstallDownloadedMods) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioInstallDownloadedMods");
static_assert(sizeof(ModioFunctionLibrary_ModioInstallDownloadedMods) == 0x000008, "Wrong size on ModioFunctionLibrary_ModioInstallDownloadedMods");
static_assert(offsetof(ModioFunctionLibrary_ModioInstallDownloadedMods, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioInstallDownloadedMods::WorldContextObject' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioIsCurrentUserSubscribed
// 0x0010 (0x0010 - 0x0000)
struct ModioFunctionLibrary_ModioIsCurrentUserSubscribed final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSubscribed;                                      // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModioFunctionLibrary_ModioIsCurrentUserSubscribed) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioIsCurrentUserSubscribed");
static_assert(sizeof(ModioFunctionLibrary_ModioIsCurrentUserSubscribed) == 0x000010, "Wrong size on ModioFunctionLibrary_ModioIsCurrentUserSubscribed");
static_assert(offsetof(ModioFunctionLibrary_ModioIsCurrentUserSubscribed, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioIsCurrentUserSubscribed::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioIsCurrentUserSubscribed, ModId) == 0x000008, "Member 'ModioFunctionLibrary_ModioIsCurrentUserSubscribed::ModId' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioIsCurrentUserSubscribed, IsSubscribed) == 0x00000C, "Member 'ModioFunctionLibrary_ModioIsCurrentUserSubscribed::IsSubscribed' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioIsLoggedIn
// 0x0010 (0x0010 - 0x0000)
struct ModioFunctionLibrary_ModioIsLoggedIn final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoggedIn;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModioFunctionLibrary_ModioIsLoggedIn) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioIsLoggedIn");
static_assert(sizeof(ModioFunctionLibrary_ModioIsLoggedIn) == 0x000010, "Wrong size on ModioFunctionLibrary_ModioIsLoggedIn");
static_assert(offsetof(ModioFunctionLibrary_ModioIsLoggedIn, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioIsLoggedIn::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioIsLoggedIn, IsLoggedIn) == 0x000008, "Member 'ModioFunctionLibrary_ModioIsLoggedIn::IsLoggedIn' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioLogout
// 0x0008 (0x0008 - 0x0000)
struct ModioFunctionLibrary_ModioLogout final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModioFunctionLibrary_ModioLogout) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioLogout");
static_assert(sizeof(ModioFunctionLibrary_ModioLogout) == 0x000008, "Wrong size on ModioFunctionLibrary_ModioLogout");
static_assert(offsetof(ModioFunctionLibrary_ModioLogout, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioLogout::WorldContextObject' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioPauseDownloads
// 0x0008 (0x0008 - 0x0000)
struct ModioFunctionLibrary_ModioPauseDownloads final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModioFunctionLibrary_ModioPauseDownloads) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioPauseDownloads");
static_assert(sizeof(ModioFunctionLibrary_ModioPauseDownloads) == 0x000008, "Wrong size on ModioFunctionLibrary_ModioPauseDownloads");
static_assert(offsetof(ModioFunctionLibrary_ModioPauseDownloads, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioPauseDownloads::WorldContextObject' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioPollEvents
// 0x0008 (0x0008 - 0x0000)
struct ModioFunctionLibrary_ModioPollEvents final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModioFunctionLibrary_ModioPollEvents) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioPollEvents");
static_assert(sizeof(ModioFunctionLibrary_ModioPollEvents) == 0x000008, "Wrong size on ModioFunctionLibrary_ModioPollEvents");
static_assert(offsetof(ModioFunctionLibrary_ModioPollEvents, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioPollEvents::WorldContextObject' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioPrioritizeModDownload
// 0x0010 (0x0010 - 0x0000)
struct ModioFunctionLibrary_ModioPrioritizeModDownload final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModioFunctionLibrary_ModioPrioritizeModDownload) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioPrioritizeModDownload");
static_assert(sizeof(ModioFunctionLibrary_ModioPrioritizeModDownload) == 0x000010, "Wrong size on ModioFunctionLibrary_ModioPrioritizeModDownload");
static_assert(offsetof(ModioFunctionLibrary_ModioPrioritizeModDownload, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioPrioritizeModDownload::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioPrioritizeModDownload, ModId) == 0x000008, "Member 'ModioFunctionLibrary_ModioPrioritizeModDownload::ModId' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioProcess
// 0x0008 (0x0008 - 0x0000)
struct ModioFunctionLibrary_ModioProcess final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModioFunctionLibrary_ModioProcess) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioProcess");
static_assert(sizeof(ModioFunctionLibrary_ModioProcess) == 0x000008, "Wrong size on ModioFunctionLibrary_ModioProcess");
static_assert(offsetof(ModioFunctionLibrary_ModioProcess, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioProcess::WorldContextObject' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioResumeDownloads
// 0x0008 (0x0008 - 0x0000)
struct ModioFunctionLibrary_ModioResumeDownloads final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModioFunctionLibrary_ModioResumeDownloads) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioResumeDownloads");
static_assert(sizeof(ModioFunctionLibrary_ModioResumeDownloads) == 0x000008, "Wrong size on ModioFunctionLibrary_ModioResumeDownloads");
static_assert(offsetof(ModioFunctionLibrary_ModioResumeDownloads, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioResumeDownloads::WorldContextObject' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioSetModEventsPollInterval
// 0x0010 (0x0010 - 0x0000)
struct ModioFunctionLibrary_ModioSetModEventsPollInterval final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntervalInSeconds;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModioFunctionLibrary_ModioSetModEventsPollInterval) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioSetModEventsPollInterval");
static_assert(sizeof(ModioFunctionLibrary_ModioSetModEventsPollInterval) == 0x000010, "Wrong size on ModioFunctionLibrary_ModioSetModEventsPollInterval");
static_assert(offsetof(ModioFunctionLibrary_ModioSetModEventsPollInterval, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioSetModEventsPollInterval::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioSetModEventsPollInterval, IntervalInSeconds) == 0x000008, "Member 'ModioFunctionLibrary_ModioSetModEventsPollInterval::IntervalInSeconds' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioSetUserEventsPollInterval
// 0x0010 (0x0010 - 0x0000)
struct ModioFunctionLibrary_ModioSetUserEventsPollInterval final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntervalInSeconds;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModioFunctionLibrary_ModioSetUserEventsPollInterval) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioSetUserEventsPollInterval");
static_assert(sizeof(ModioFunctionLibrary_ModioSetUserEventsPollInterval) == 0x000010, "Wrong size on ModioFunctionLibrary_ModioSetUserEventsPollInterval");
static_assert(offsetof(ModioFunctionLibrary_ModioSetUserEventsPollInterval, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioSetUserEventsPollInterval::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioSetUserEventsPollInterval, IntervalInSeconds) == 0x000008, "Member 'ModioFunctionLibrary_ModioSetUserEventsPollInterval::IntervalInSeconds' has a wrong offset!");

// Function modio.ModioFunctionLibrary.ModioUninstallMod
// 0x0010 (0x0010 - 0x0000)
struct ModioFunctionLibrary_ModioUninstallMod final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SuccessfullyUninstalled;                           // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModioFunctionLibrary_ModioUninstallMod) == 0x000008, "Wrong alignment on ModioFunctionLibrary_ModioUninstallMod");
static_assert(sizeof(ModioFunctionLibrary_ModioUninstallMod) == 0x000010, "Wrong size on ModioFunctionLibrary_ModioUninstallMod");
static_assert(offsetof(ModioFunctionLibrary_ModioUninstallMod, WorldContextObject) == 0x000000, "Member 'ModioFunctionLibrary_ModioUninstallMod::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioUninstallMod, ModId) == 0x000008, "Member 'ModioFunctionLibrary_ModioUninstallMod::ModId' has a wrong offset!");
static_assert(offsetof(ModioFunctionLibrary_ModioUninstallMod, SuccessfullyUninstalled) == 0x00000C, "Member 'ModioFunctionLibrary_ModioUninstallMod::SuccessfullyUninstalled' has a wrong offset!");

}

