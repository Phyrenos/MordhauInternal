#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PerkTooltip

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function BP_PerkTooltip.BP_PerkTooltip_C.Update
// 0x0068 (0x0068 - 0x0000)
struct BP_PerkTooltip_C_Update final
{
public:
	const class UObject*                          New_Icon;                                          // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   New_Name;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   New_Description;                                   // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          bIsBanned;                                         // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Cost;                                              // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanAfford;                                        // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsEquipped;                                       // 0x0041(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsDefaultLoadout;                                 // 0x0042(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_DynamicCast_AsTexture_2D;                   // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PerkTooltip_C_Update) == 0x000008, "Wrong alignment on BP_PerkTooltip_C_Update");
static_assert(sizeof(BP_PerkTooltip_C_Update) == 0x000068, "Wrong size on BP_PerkTooltip_C_Update");
static_assert(offsetof(BP_PerkTooltip_C_Update, New_Icon) == 0x000000, "Member 'BP_PerkTooltip_C_Update::New_Icon' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, New_Name) == 0x000008, "Member 'BP_PerkTooltip_C_Update::New_Name' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, New_Description) == 0x000020, "Member 'BP_PerkTooltip_C_Update::New_Description' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, bIsBanned) == 0x000038, "Member 'BP_PerkTooltip_C_Update::bIsBanned' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, Cost) == 0x00003C, "Member 'BP_PerkTooltip_C_Update::Cost' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, bCanAfford) == 0x000040, "Member 'BP_PerkTooltip_C_Update::bCanAfford' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, bIsEquipped) == 0x000041, "Member 'BP_PerkTooltip_C_Update::bIsEquipped' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, bIsDefaultLoadout) == 0x000042, "Member 'BP_PerkTooltip_C_Update::bIsDefaultLoadout' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, Temp_bool_Variable) == 0x000043, "Member 'BP_PerkTooltip_C_Update::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, K2Node_DynamicCast_AsTexture_2D) == 0x000048, "Member 'BP_PerkTooltip_C_Update::K2Node_DynamicCast_AsTexture_2D' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_PerkTooltip_C_Update::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, CallFunc_IsValid_ReturnValue) == 0x000051, "Member 'BP_PerkTooltip_C_Update::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, Temp_byte_Variable) == 0x000052, "Member 'BP_PerkTooltip_C_Update::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, Temp_byte_Variable_1) == 0x000053, "Member 'BP_PerkTooltip_C_Update::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, Temp_bool_Variable_1) == 0x000054, "Member 'BP_PerkTooltip_C_Update::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, K2Node_Select_Default) == 0x000055, "Member 'BP_PerkTooltip_C_Update::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, Temp_byte_Variable_2) == 0x000056, "Member 'BP_PerkTooltip_C_Update::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, Temp_byte_Variable_3) == 0x000057, "Member 'BP_PerkTooltip_C_Update::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, Temp_bool_Variable_2) == 0x000058, "Member 'BP_PerkTooltip_C_Update::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, K2Node_Select_Default_1) == 0x000059, "Member 'BP_PerkTooltip_C_Update::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, Temp_byte_Variable_4) == 0x00005A, "Member 'BP_PerkTooltip_C_Update::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, Temp_byte_Variable_5) == 0x00005B, "Member 'BP_PerkTooltip_C_Update::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, Temp_bool_Variable_3) == 0x00005C, "Member 'BP_PerkTooltip_C_Update::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, K2Node_Select_Default_2) == 0x00005D, "Member 'BP_PerkTooltip_C_Update::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, Temp_byte_Variable_6) == 0x00005E, "Member 'BP_PerkTooltip_C_Update::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, Temp_byte_Variable_7) == 0x00005F, "Member 'BP_PerkTooltip_C_Update::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_PerkTooltip_C_Update, K2Node_Select_Default_3) == 0x000060, "Member 'BP_PerkTooltip_C_Update::K2Node_Select_Default_3' has a wrong offset!");

}

