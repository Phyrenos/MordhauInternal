#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Crosshair

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "E_CrosshairMode_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BP_Crosshair.BP_Crosshair_C.ExecuteUbergraph_BP_Crosshair
// 0x0060 (0x0060 - 0x0000)
struct BP_Crosshair_C_ExecuteUbergraph_BP_Crosshair final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0010(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCameraManager*                  K2Node_DynamicCast_AsMordhau_Camera_Manager;       // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Crosshair_C_ExecuteUbergraph_BP_Crosshair) == 0x000008, "Wrong alignment on BP_Crosshair_C_ExecuteUbergraph_BP_Crosshair");
static_assert(sizeof(BP_Crosshair_C_ExecuteUbergraph_BP_Crosshair) == 0x000060, "Wrong size on BP_Crosshair_C_ExecuteUbergraph_BP_Crosshair");
static_assert(offsetof(BP_Crosshair_C_ExecuteUbergraph_BP_Crosshair, EntryPoint) == 0x000000, "Member 'BP_Crosshair_C_ExecuteUbergraph_BP_Crosshair::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ExecuteUbergraph_BP_Crosshair, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000008, "Member 'BP_Crosshair_C_ExecuteUbergraph_BP_Crosshair::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ExecuteUbergraph_BP_Crosshair, K2Node_Event_MyGeometry) == 0x000010, "Member 'BP_Crosshair_C_ExecuteUbergraph_BP_Crosshair::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ExecuteUbergraph_BP_Crosshair, K2Node_Event_InDeltaTime) == 0x000048, "Member 'BP_Crosshair_C_ExecuteUbergraph_BP_Crosshair::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ExecuteUbergraph_BP_Crosshair, K2Node_DynamicCast_AsMordhau_Camera_Manager) == 0x000050, "Member 'BP_Crosshair_C_ExecuteUbergraph_BP_Crosshair::K2Node_DynamicCast_AsMordhau_Camera_Manager' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ExecuteUbergraph_BP_Crosshair, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BP_Crosshair_C_ExecuteUbergraph_BP_Crosshair::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ExecuteUbergraph_BP_Crosshair, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000059, "Member 'BP_Crosshair_C_ExecuteUbergraph_BP_Crosshair::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");

// Function BP_Crosshair.BP_Crosshair_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_Crosshair_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Crosshair_C_Tick) == 0x000004, "Wrong alignment on BP_Crosshair_C_Tick");
static_assert(sizeof(BP_Crosshair_C_Tick) == 0x00003C, "Wrong size on BP_Crosshair_C_Tick");
static_assert(offsetof(BP_Crosshair_C_Tick, MyGeometry) == 0x000000, "Member 'BP_Crosshair_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_Crosshair_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_Crosshair.BP_Crosshair_C.Get_Crosshair_Visibility_0
// 0x0018 (0x0018 - 0x0000)
struct BP_Crosshair_C_Get_Crosshair_Visibility_0 final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActualCrosshairType_ReturnValue;       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Crosshair_C_Get_Crosshair_Visibility_0) == 0x000008, "Wrong alignment on BP_Crosshair_C_Get_Crosshair_Visibility_0");
static_assert(sizeof(BP_Crosshair_C_Get_Crosshair_Visibility_0) == 0x000018, "Wrong size on BP_Crosshair_C_Get_Crosshair_Visibility_0");
static_assert(offsetof(BP_Crosshair_C_Get_Crosshair_Visibility_0, ReturnValue) == 0x000000, "Member 'BP_Crosshair_C_Get_Crosshair_Visibility_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_Get_Crosshair_Visibility_0, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000008, "Member 'BP_Crosshair_C_Get_Crosshair_Visibility_0::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_Get_Crosshair_Visibility_0, CallFunc_GetActualCrosshairType_ReturnValue) == 0x000010, "Member 'BP_Crosshair_C_Get_Crosshair_Visibility_0::CallFunc_GetActualCrosshairType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_Get_Crosshair_Visibility_0, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000014, "Member 'BP_Crosshair_C_Get_Crosshair_Visibility_0::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_Crosshair.BP_Crosshair_C.ClampAngleToDirectionalZone
// 0x0014 (0x0014 - 0x0000)
struct BP_Crosshair_C_ClampAngleToDirectionalZone final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClampedAngle;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_2;            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Crosshair_C_ClampAngleToDirectionalZone) == 0x000004, "Wrong alignment on BP_Crosshair_C_ClampAngleToDirectionalZone");
static_assert(sizeof(BP_Crosshair_C_ClampAngleToDirectionalZone) == 0x000014, "Wrong size on BP_Crosshair_C_ClampAngleToDirectionalZone");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToDirectionalZone, Angle) == 0x000000, "Member 'BP_Crosshair_C_ClampAngleToDirectionalZone::Angle' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToDirectionalZone, ClampedAngle) == 0x000004, "Member 'BP_Crosshair_C_ClampAngleToDirectionalZone::ClampedAngle' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToDirectionalZone, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_Crosshair_C_ClampAngleToDirectionalZone::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToDirectionalZone, CallFunc_Less_FloatFloat_ReturnValue) == 0x000009, "Member 'BP_Crosshair_C_ClampAngleToDirectionalZone::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToDirectionalZone, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00000A, "Member 'BP_Crosshair_C_ClampAngleToDirectionalZone::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToDirectionalZone, CallFunc_BooleanAND_ReturnValue) == 0x00000B, "Member 'BP_Crosshair_C_ClampAngleToDirectionalZone::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToDirectionalZone, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x00000C, "Member 'BP_Crosshair_C_ClampAngleToDirectionalZone::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToDirectionalZone, CallFunc_BooleanAND_ReturnValue_1) == 0x00000D, "Member 'BP_Crosshair_C_ClampAngleToDirectionalZone::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToDirectionalZone, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x00000E, "Member 'BP_Crosshair_C_ClampAngleToDirectionalZone::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToDirectionalZone, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x00000F, "Member 'BP_Crosshair_C_ClampAngleToDirectionalZone::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToDirectionalZone, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_Crosshair_C_ClampAngleToDirectionalZone::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToDirectionalZone, CallFunc_BooleanAND_ReturnValue_2) == 0x000011, "Member 'BP_Crosshair_C_ClampAngleToDirectionalZone::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToDirectionalZone, CallFunc_Less_FloatFloat_ReturnValue_2) == 0x000012, "Member 'BP_Crosshair_C_ClampAngleToDirectionalZone::CallFunc_Less_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToDirectionalZone, CallFunc_BooleanAND_ReturnValue_3) == 0x000013, "Member 'BP_Crosshair_C_ClampAngleToDirectionalZone::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");

// Function BP_Crosshair.BP_Crosshair_C.ShowHitMarker
// 0x0018 (0x0018 - 0x0000)
struct BP_Crosshair_C_ShowHitMarker final
{
public:
	int32                                         HitZoneParam;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldShowHitMarker_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Crosshair_C_ShowHitMarker) == 0x000008, "Wrong alignment on BP_Crosshair_C_ShowHitMarker");
static_assert(sizeof(BP_Crosshair_C_ShowHitMarker) == 0x000018, "Wrong size on BP_Crosshair_C_ShowHitMarker");
static_assert(offsetof(BP_Crosshair_C_ShowHitMarker, HitZoneParam) == 0x000000, "Member 'BP_Crosshair_C_ShowHitMarker::HitZoneParam' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ShowHitMarker, K2Node_SwitchInteger_CmpSuccess) == 0x000004, "Member 'BP_Crosshair_C_ShowHitMarker::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ShowHitMarker, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000008, "Member 'BP_Crosshair_C_ShowHitMarker::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ShowHitMarker, CallFunc_ShouldShowHitMarker_ReturnValue) == 0x000010, "Member 'BP_Crosshair_C_ShowHitMarker::CallFunc_ShouldShowHitMarker_ReturnValue' has a wrong offset!");

// Function BP_Crosshair.BP_Crosshair_C.ClampAngleToSide
// 0x0014 (0x0014 - 0x0000)
struct BP_Crosshair_C_ClampAngleToSide final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isSideLeft;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClampedAngle;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Crosshair_C_ClampAngleToSide) == 0x000004, "Wrong alignment on BP_Crosshair_C_ClampAngleToSide");
static_assert(sizeof(BP_Crosshair_C_ClampAngleToSide) == 0x000014, "Wrong size on BP_Crosshair_C_ClampAngleToSide");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToSide, Angle) == 0x000000, "Member 'BP_Crosshair_C_ClampAngleToSide::Angle' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToSide, isSideLeft) == 0x000004, "Member 'BP_Crosshair_C_ClampAngleToSide::isSideLeft' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToSide, ClampedAngle) == 0x000008, "Member 'BP_Crosshair_C_ClampAngleToSide::ClampedAngle' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToSide, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_Crosshair_C_ClampAngleToSide::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToSide, CallFunc_Less_FloatFloat_ReturnValue) == 0x00000D, "Member 'BP_Crosshair_C_ClampAngleToSide::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToSide, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00000E, "Member 'BP_Crosshair_C_ClampAngleToSide::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToSide, CallFunc_BooleanAND_ReturnValue) == 0x00000F, "Member 'BP_Crosshair_C_ClampAngleToSide::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToSide, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000010, "Member 'BP_Crosshair_C_ClampAngleToSide::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_ClampAngleToSide, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000011, "Member 'BP_Crosshair_C_ClampAngleToSide::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_Crosshair.BP_Crosshair_C.PlayHitmarkerAnimation
// 0x0038 (0x0038 - 0x0000)
struct BP_Crosshair_C_PlayHitmarkerAnimation final
{
public:
	class UWidgetAnimation*                       Anim;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Crosshair_C_PlayHitmarkerAnimation) == 0x000008, "Wrong alignment on BP_Crosshair_C_PlayHitmarkerAnimation");
static_assert(sizeof(BP_Crosshair_C_PlayHitmarkerAnimation) == 0x000038, "Wrong size on BP_Crosshair_C_PlayHitmarkerAnimation");
static_assert(offsetof(BP_Crosshair_C_PlayHitmarkerAnimation, Anim) == 0x000000, "Member 'BP_Crosshair_C_PlayHitmarkerAnimation::Anim' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_PlayHitmarkerAnimation, Speed) == 0x000008, "Member 'BP_Crosshair_C_PlayHitmarkerAnimation::Speed' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_PlayHitmarkerAnimation, PlayMode) == 0x00000C, "Member 'BP_Crosshair_C_PlayHitmarkerAnimation::PlayMode' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_PlayHitmarkerAnimation, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BP_Crosshair_C_PlayHitmarkerAnimation::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_PlayHitmarkerAnimation, CallFunc_PlayAnimation_ReturnValue) == 0x000020, "Member 'BP_Crosshair_C_PlayHitmarkerAnimation::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_PlayHitmarkerAnimation, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000028, "Member 'BP_Crosshair_C_PlayHitmarkerAnimation::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_PlayHitmarkerAnimation, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x00002C, "Member 'BP_Crosshair_C_PlayHitmarkerAnimation::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_PlayHitmarkerAnimation, CallFunc_PlayAnimation_ReturnValue_1) == 0x000030, "Member 'BP_Crosshair_C_PlayHitmarkerAnimation::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function BP_Crosshair.BP_Crosshair_C.UpdateCrosshair
// 0x0298 (0x0298 - 0x0000)
struct BP_Crosshair_C_UpdateCrosshair final
{
public:
	int32                                         NewCrosshairTypeSettings;                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnglingAngle;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CrosshairMode                               NewMode;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauPlayerController*               Controller;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      Character;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue;   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetShowCombatHints_ReturnValue;           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauGameUserSettings*               CallFunc_GetMordhauGameUserSettings_ReturnValue_1; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActualCrosshairType_ReturnValue;       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MordhauGameState_C*                 K2Node_DynamicCast_AsBP_Mordhau_Game_State;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauPlayerState*                    K2Node_DynamicCast_AsMordhau_Player_State;         // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B[0x5];                                       // 0x006B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCharacter*                      CallFunc_GetViewTargetCharacter_ReturnValue;       // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauCameraManager*                  K2Node_DynamicCast_AsMordhau_Camera_Manager;       // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCameraStyleBP_ReturnValue;             // 0x008C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAnglingAngle_ReturnValue;              // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ClampAngleToDirectionalZone_ClampedAngle; // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauMotion*                         CallFunc_GetMotion_ReturnValue;                    // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttackMotion*                          K2Node_DynamicCast_AsAttack_Motion;                // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URangedDrawMotion*                      K2Node_DynamicCast_AsRanged_Draw_Motion;           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition; // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue; // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetDesiredSize_ReturnValue;               // 0x0114(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x011C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0124(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWidgetTransform                       K2Node_MakeStruct_WidgetTransform;                 // 0x0138(0x001C)(NoDestructor, UObjectWrapper)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0155(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_156[0x2];                                      // 0x0156(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_162[0x6];                                      // 0x0162(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauMotion*                         CallFunc_GetMotion_ReturnValue_1;                  // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStunMotion*                            K2Node_DynamicCast_AsStun_Motion;                  // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17A[0x6];                                      // 0x017A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPawnOwner_ReturnValue;                 // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Ballista_C*                         K2Node_DynamicCast_AsBP_Ballista;                  // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_DeployableBallista_C*               K2Node_DynamicCast_AsBP_Deployable_Ballista;       // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDisarmedMotion*                        K2Node_DynamicCast_AsDisarmed_Motion;              // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlockedMotion*                         K2Node_DynamicCast_AsBlocked_Motion;               // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URangedDrawMotion*                      K2Node_DynamicCast_AsRanged_Draw_Motion_1;         // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFlinchMotion*                          K2Node_DynamicCast_AsFlinch_Motion;                // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E1[0x7];                                      // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttackMotion*                          K2Node_DynamicCast_AsAttack_Motion_1;              // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_12;                    // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x01F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x01F3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x01F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x01F6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F7[0x1];                                      // 0x01F7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UParryMotion*                           K2Node_DynamicCast_AsParry_Motion;                 // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_13;                    // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCouchedAttackMotion*                   K2Node_DynamicCast_AsCouched_Attack_Motion;        // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_14;                    // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CouchedAttackMotion_C*              K2Node_DynamicCast_AsBP_Couched_Attack_Motion;     // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_15;                    // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_ByteByte_ReturnValue;             // 0x0222(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_223[0x5];                                      // 0x0223(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UFeintedMotion*                         K2Node_DynamicCast_AsFeinted_Motion;               // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_16;                    // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0232(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_233[0x5];                                      // 0x0233(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauWeapon*                         K2Node_DynamicCast_AsMordhau_Weapon;               // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_17;                    // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMordhauVehicleComponent*               CallFunc_GetComponentByClass_ReturnValue;          // 0x0248(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0251(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_252[0x6];                                      // 0x0252(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue;                    // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauWeapon*                         K2Node_DynamicCast_AsMordhau_Weapon_1;             // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_18;                    // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauCharacter*                      K2Node_DynamicCast_AsMordhau_Character;            // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_19;                    // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMordhauPlayerController*               K2Node_DynamicCast_AsMordhau_Player_Controller;    // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_20;                    // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Crosshair_C_UpdateCrosshair) == 0x000008, "Wrong alignment on BP_Crosshair_C_UpdateCrosshair");
static_assert(sizeof(BP_Crosshair_C_UpdateCrosshair) == 0x000298, "Wrong size on BP_Crosshair_C_UpdateCrosshair");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, NewCrosshairTypeSettings) == 0x000000, "Member 'BP_Crosshair_C_UpdateCrosshair::NewCrosshairTypeSettings' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, AnglingAngle) == 0x000004, "Member 'BP_Crosshair_C_UpdateCrosshair::AnglingAngle' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, NewMode) == 0x000008, "Member 'BP_Crosshair_C_UpdateCrosshair::NewMode' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, Controller) == 0x000010, "Member 'BP_Crosshair_C_UpdateCrosshair::Controller' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, Character) == 0x000018, "Member 'BP_Crosshair_C_UpdateCrosshair::Character' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_GetMordhauGameUserSettings_ReturnValue) == 0x000020, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_GetMordhauGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_GetShowCombatHints_ReturnValue) == 0x000028, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_GetShowCombatHints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00002C, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_GetMordhauGameUserSettings_ReturnValue_1) == 0x000030, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_GetMordhauGameUserSettings_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000038, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_GetActualCrosshairType_ReturnValue) == 0x00003C, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_GetActualCrosshairType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_GetGameState_ReturnValue) == 0x000040, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_AsBP_Mordhau_Game_State) == 0x000048, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_AsBP_Mordhau_Game_State' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_GetPlayerController_ReturnValue) == 0x000058, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_AsMordhau_Player_State) == 0x000060, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_AsMordhau_Player_State' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_bSuccess_1) == 0x000068, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_IsValid_ReturnValue) == 0x000069, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x00006A, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000070, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_GetViewTargetCharacter_ReturnValue) == 0x000078, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_GetViewTargetCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_AsMordhau_Camera_Manager) == 0x000080, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_AsMordhau_Camera_Manager' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_bSuccess_2) == 0x000088, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_GetCameraStyleBP_ReturnValue) == 0x00008C, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_GetCameraStyleBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000094, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_GetAnglingAngle_ReturnValue) == 0x000098, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_GetAnglingAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_ClampAngleToDirectionalZone_ClampedAngle) == 0x00009C, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_ClampAngleToDirectionalZone_ClampedAngle' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_SwitchInteger_CmpSuccess) == 0x0000A0, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_SwitchEnum_CmpSuccess) == 0x0000A1, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_GetMotion_ReturnValue) == 0x0000A8, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_GetMotion_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_AsAttack_Motion) == 0x0000B0, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_AsAttack_Motion' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_bSuccess_3) == 0x0000B8, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_AsRanged_Draw_Motion) == 0x0000C0, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_AsRanged_Draw_Motion' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_bSuccess_4) == 0x0000C8, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000CC, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000D0, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000D1, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_SwitchEnum_CmpSuccess_1) == 0x0000D2, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_BooleanOR_ReturnValue) == 0x0000D3, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x0000D4, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000D8, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000DC, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_ComposeRotators_ReturnValue) == 0x0000E0, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0000EC, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0000F0, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_Add_VectorVector_ReturnValue) == 0x0000FC, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition) == 0x000108, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue) == 0x000110, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_GetDesiredSize_ReturnValue) == 0x000114, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_GetDesiredSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x00011C, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000124, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_PlayAnimation_ReturnValue) == 0x000130, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_MakeStruct_WidgetTransform) == 0x000138, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_MakeStruct_WidgetTransform' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000154, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_BooleanOR_ReturnValue_1) == 0x000155, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_K2_GetPawn_ReturnValue) == 0x000158, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_IsValid_ReturnValue_1) == 0x000160, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_IsValid_ReturnValue_2) == 0x000161, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_GetMotion_ReturnValue_1) == 0x000168, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_GetMotion_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_AsStun_Motion) == 0x000170, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_AsStun_Motion' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_bSuccess_5) == 0x000178, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_IsValid_ReturnValue_3) == 0x000179, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_GetPawnOwner_ReturnValue) == 0x000180, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_GetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_AsBP_Ballista) == 0x000188, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_AsBP_Ballista' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_bSuccess_6) == 0x000190, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_AsBP_Deployable_Ballista) == 0x000198, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_AsBP_Deployable_Ballista' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_bSuccess_7) == 0x0001A0, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_AsDisarmed_Motion) == 0x0001A8, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_AsDisarmed_Motion' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_bSuccess_8) == 0x0001B0, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_AsBlocked_Motion) == 0x0001B8, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_AsBlocked_Motion' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_bSuccess_9) == 0x0001C0, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_AsRanged_Draw_Motion_1) == 0x0001C8, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_AsRanged_Draw_Motion_1' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_bSuccess_10) == 0x0001D0, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_AsFlinch_Motion) == 0x0001D8, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_AsFlinch_Motion' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_bSuccess_11) == 0x0001E0, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_AsAttack_Motion_1) == 0x0001E8, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_AsAttack_Motion_1' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_bSuccess_12) == 0x0001F0, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_bSuccess_12' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0001F1, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x0001F2, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x0001F3, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_BooleanAND_ReturnValue) == 0x0001F4, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_SwitchEnum_CmpSuccess_2) == 0x0001F5, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_SwitchEnum_CmpSuccess_3) == 0x0001F6, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_AsParry_Motion) == 0x0001F8, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_AsParry_Motion' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_bSuccess_13) == 0x000200, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_bSuccess_13' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_AsCouched_Attack_Motion) == 0x000208, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_AsCouched_Attack_Motion' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_bSuccess_14) == 0x000210, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_bSuccess_14' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_AsBP_Couched_Attack_Motion) == 0x000218, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_AsBP_Couched_Attack_Motion' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_bSuccess_15) == 0x000220, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_bSuccess_15' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000221, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_Greater_ByteByte_ReturnValue) == 0x000222, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_Greater_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_AsFeinted_Motion) == 0x000228, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_AsFeinted_Motion' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_bSuccess_16) == 0x000230, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_bSuccess_16' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x000231, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_IsValid_ReturnValue_4) == 0x000232, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_AsMordhau_Weapon) == 0x000238, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_AsMordhau_Weapon' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_bSuccess_17) == 0x000240, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_bSuccess_17' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_GetComponentByClass_ReturnValue) == 0x000248, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_IsValid_ReturnValue_5) == 0x000250, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_IsValid_ReturnValue_6) == 0x000251, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_GetDriver_ReturnValue) == 0x000258, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_GetDriver_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_AsMordhau_Weapon_1) == 0x000260, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_AsMordhau_Weapon_1' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_bSuccess_18) == 0x000268, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_bSuccess_18' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_AsMordhau_Character) == 0x000270, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_AsMordhau_Character' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_bSuccess_19) == 0x000278, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_bSuccess_19' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, CallFunc_GetPlayerController_ReturnValue_1) == 0x000280, "Member 'BP_Crosshair_C_UpdateCrosshair::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_AsMordhau_Player_Controller) == 0x000288, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_AsMordhau_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_UpdateCrosshair, K2Node_DynamicCast_bSuccess_20) == 0x000290, "Member 'BP_Crosshair_C_UpdateCrosshair::K2Node_DynamicCast_bSuccess_20' has a wrong offset!");

// Function BP_Crosshair.BP_Crosshair_C.TriggerDamageIndicator
// 0x0010 (0x0010 - 0x0000)
struct BP_Crosshair_C_TriggerDamageIndicator final
{
public:
	float                                         Render_Angle;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Crosshair_C_TriggerDamageIndicator) == 0x000008, "Wrong alignment on BP_Crosshair_C_TriggerDamageIndicator");
static_assert(sizeof(BP_Crosshair_C_TriggerDamageIndicator) == 0x000010, "Wrong size on BP_Crosshair_C_TriggerDamageIndicator");
static_assert(offsetof(BP_Crosshair_C_TriggerDamageIndicator, Render_Angle) == 0x000000, "Member 'BP_Crosshair_C_TriggerDamageIndicator::Render_Angle' has a wrong offset!");
static_assert(offsetof(BP_Crosshair_C_TriggerDamageIndicator, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'BP_Crosshair_C_TriggerDamageIndicator::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

}

