#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FloatingCapPointWidget

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Mordhau_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_FloatingCapPointWidget.BP_FloatingCapPointWidget_C
// 0x00C8 (0x0330 - 0x0268)
class UBP_FloatingCapPointWidget_C final : public UMordhauUserWidget
{
public:
	class UWidgetAnimation*                       PulseAnim;                                         // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Cap;                                               // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CapProgressBarBack;                                // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Distance;                                          // 0x0280(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Fill;                                              // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon;                                              // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Outline;                                           // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Pulse;                                             // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FSlateBrush                            Brush;                                             // 0x02A8(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void Initialize(class ABP_CapturePoint_C* InPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FloatingCapPointWidget_C">();
	}
	static class UBP_FloatingCapPointWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_FloatingCapPointWidget_C>();
	}
};
static_assert(alignof(UBP_FloatingCapPointWidget_C) == 0x000008, "Wrong alignment on UBP_FloatingCapPointWidget_C");
static_assert(sizeof(UBP_FloatingCapPointWidget_C) == 0x000330, "Wrong size on UBP_FloatingCapPointWidget_C");
static_assert(offsetof(UBP_FloatingCapPointWidget_C, PulseAnim) == 0x000268, "Member 'UBP_FloatingCapPointWidget_C::PulseAnim' has a wrong offset!");
static_assert(offsetof(UBP_FloatingCapPointWidget_C, Cap) == 0x000270, "Member 'UBP_FloatingCapPointWidget_C::Cap' has a wrong offset!");
static_assert(offsetof(UBP_FloatingCapPointWidget_C, CapProgressBarBack) == 0x000278, "Member 'UBP_FloatingCapPointWidget_C::CapProgressBarBack' has a wrong offset!");
static_assert(offsetof(UBP_FloatingCapPointWidget_C, Distance) == 0x000280, "Member 'UBP_FloatingCapPointWidget_C::Distance' has a wrong offset!");
static_assert(offsetof(UBP_FloatingCapPointWidget_C, Fill) == 0x000288, "Member 'UBP_FloatingCapPointWidget_C::Fill' has a wrong offset!");
static_assert(offsetof(UBP_FloatingCapPointWidget_C, Icon) == 0x000290, "Member 'UBP_FloatingCapPointWidget_C::Icon' has a wrong offset!");
static_assert(offsetof(UBP_FloatingCapPointWidget_C, Outline) == 0x000298, "Member 'UBP_FloatingCapPointWidget_C::Outline' has a wrong offset!");
static_assert(offsetof(UBP_FloatingCapPointWidget_C, Pulse) == 0x0002A0, "Member 'UBP_FloatingCapPointWidget_C::Pulse' has a wrong offset!");
static_assert(offsetof(UBP_FloatingCapPointWidget_C, Brush) == 0x0002A8, "Member 'UBP_FloatingCapPointWidget_C::Brush' has a wrong offset!");

}

