#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DemonHordeCharacter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Mordhau_structs.hpp"
#include "BP_HordeCharacter_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DemonHordeCharacter.BP_DemonHordeCharacter_C
// 0x0090 (0x1410 - 0x1380)
class ABP_DemonHordeCharacter_C final : public ABP_HordeCharacter_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_DemonHordeCharacter_C;           // 0x1378(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UPointLightComponent*                   PointLight;                                        // 0x1380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UArrowComponent*                        GremlinAttach;                                     // 0x1388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UPostProcessComponent*                  FrenzyPP;                                          // 0x1390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(EAttackMove Direction, float Angle, EAttackType Type)> OnMeleeReleaseStartedStrike;                       // 0x1398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(EAttackMove Direction, float Angle, EAttackType Type)> OnMeleeReleaseStartedStab;                         // 0x13A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnDealDamageMelee;                                 // 0x13B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnDealDamageRanged;                                // 0x13C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          BlessedFists;                                      // 0x13D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13D9[0x7];                                     // 0x13D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FHitResult& HitResult, class AMordhauCharacter* Attacker)> OnBlockedMeleeAttack;                              // 0x13E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          SpecialDamageCooldown;                             // 0x13F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13F1[0x7];                                     // 0x13F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AttachedGremlin;                                   // 0x13F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PukeSlowActive;                                    // 0x1400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1401[0x3];                                     // 0x1401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SafeGraveLocation;                                 // 0x1404(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DemonHordeCharacter(int32 EntryPoint);
	void StageComplete();
	void DelayedLaunch(float Delay, const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void BloatedPukeLoop();
	void GremlinStealLoop();
	void StartSpecialDamageCooldown();
	void OnBlockedMelee(const struct FHitResult& HitResult, class AMordhauCharacter* Attacker);
	void FrenzyEffectsMulti();
	void EnableFrenzyPP();
	void ReceiveMordhauDamage(float Damage, const struct FHitResult& HitResult, EMordhauDamageType DamageType, uint8 SubDamageType, class AActor* Source, class AActor* Agent, class AController* EventInstigator);
	void BlessedFistLoop();
	void MeleeReleaseStarted();
	void OnAttackStarted();
	void UpdateRespawnCrossLocation();
	void OnKilled(class AController* EventInstigator);
	void ModifyOutgoingDamage(class AActor* Receiver, EMordhauDamageType DamageType, struct FHitResult& HitInfo, class AActor* Agent, float InDamage, float* OutDamage);
	float ModifyDamage(float DamageAmount, const struct FMordhauDamageInfo& DamageInfo, class AController* EventInstigator);
	void OnKilledEnemy(class ABP_HordeEnemy_C* Enemy);
	void ReceiveBeginPlay();
	void OnDied(float Angle, EMordhauDamageType Type, uint8 SubType, class FName bone, const struct FVector& Point, class AActor* Source, class AActor* Agent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DemonHordeCharacter_C">();
	}
	static class ABP_DemonHordeCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DemonHordeCharacter_C>();
	}
};
static_assert(alignof(ABP_DemonHordeCharacter_C) == 0x000010, "Wrong alignment on ABP_DemonHordeCharacter_C");
static_assert(sizeof(ABP_DemonHordeCharacter_C) == 0x001410, "Wrong size on ABP_DemonHordeCharacter_C");
static_assert(offsetof(ABP_DemonHordeCharacter_C, UberGraphFrame_BP_DemonHordeCharacter_C) == 0x001378, "Member 'ABP_DemonHordeCharacter_C::UberGraphFrame_BP_DemonHordeCharacter_C' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeCharacter_C, PointLight) == 0x001380, "Member 'ABP_DemonHordeCharacter_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeCharacter_C, GremlinAttach) == 0x001388, "Member 'ABP_DemonHordeCharacter_C::GremlinAttach' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeCharacter_C, FrenzyPP) == 0x001390, "Member 'ABP_DemonHordeCharacter_C::FrenzyPP' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeCharacter_C, OnMeleeReleaseStartedStrike) == 0x001398, "Member 'ABP_DemonHordeCharacter_C::OnMeleeReleaseStartedStrike' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeCharacter_C, OnMeleeReleaseStartedStab) == 0x0013A8, "Member 'ABP_DemonHordeCharacter_C::OnMeleeReleaseStartedStab' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeCharacter_C, OnDealDamageMelee) == 0x0013B8, "Member 'ABP_DemonHordeCharacter_C::OnDealDamageMelee' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeCharacter_C, OnDealDamageRanged) == 0x0013C8, "Member 'ABP_DemonHordeCharacter_C::OnDealDamageRanged' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeCharacter_C, BlessedFists) == 0x0013D8, "Member 'ABP_DemonHordeCharacter_C::BlessedFists' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeCharacter_C, OnBlockedMeleeAttack) == 0x0013E0, "Member 'ABP_DemonHordeCharacter_C::OnBlockedMeleeAttack' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeCharacter_C, SpecialDamageCooldown) == 0x0013F0, "Member 'ABP_DemonHordeCharacter_C::SpecialDamageCooldown' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeCharacter_C, AttachedGremlin) == 0x0013F8, "Member 'ABP_DemonHordeCharacter_C::AttachedGremlin' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeCharacter_C, PukeSlowActive) == 0x001400, "Member 'ABP_DemonHordeCharacter_C::PukeSlowActive' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeCharacter_C, SafeGraveLocation) == 0x001404, "Member 'ABP_DemonHordeCharacter_C::SafeGraveLocation' has a wrong offset!");

}

