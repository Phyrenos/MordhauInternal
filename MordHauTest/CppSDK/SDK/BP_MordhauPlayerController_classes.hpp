#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MordhauPlayerController

#include "Basic.hpp"

#include "Mordhau_structs.hpp"
#include "Mordhau_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MordhauPlayerController.BP_MordhauPlayerController_C
// 0x01E8 (0x0DD0 - 0x0BE8)
class ABP_MordhauPlayerController_C : public AMordhauPlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0BE8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0BF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               BloodOverlayMI;                                    // 0x0BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MordhauHUD_C*                       HUD;                                               // 0x0C00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeToBlackCounter;                                // 0x0C08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C0C[0x4];                                      // 0x0C0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            FadeToBlackCurve;                                  // 0x0C10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      OutlineMI;                                         // 0x0C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DeathMI;                                           // 0x0C20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WantsFadeToBlack;                                  // 0x0C28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C29[0x3];                                      // 0x0C29(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BloodOverlayTarget;                                // 0x0C2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 LastAnnouncement;                                  // 0x0C30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         LowStaminaVignetteExtra;                           // 0x0C40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StaminaOverlayTarget;                              // 0x0C44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseVignetteAmount;                                // 0x0C48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StaminaOverlay;                                    // 0x0C4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            LowStaminaOverlayCurve;                            // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LowStaminaGrainExtra;                              // 0x0C58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SaturationTarget;                                  // 0x0C5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Saturation;                                        // 0x0C60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          QueueShowTeamSelect;                               // 0x0C64(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C65[0x3];                                      // 0x0C65(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_ChoiceMenu_C*>               ChoiceMenuStack;                                   // 0x0C68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         SmokeOverlay;                                      // 0x0C78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C7C[0x4];                                      // 0x0C7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               SmokeOverlayMI;                                    // 0x0C80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmokeOverlayTarget;                                // 0x0C88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C8C[0x4];                                      // 0x0C8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               OnFireOverlayMI;                                   // 0x0C90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OnFireTarget;                                      // 0x0C98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NearFireTarget;                                    // 0x0C9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OnFire;                                            // 0x0CA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NearFire;                                          // 0x0CA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnedWithToolbox;                                // 0x0CA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA9[0x7];                                      // 0x0CA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauPlayerState*                    QueuedKiller;                                      // 0x0CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         QueuedKillerTime;                                  // 0x0CB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CBC[0x4];                                      // 0x0CBC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_AmmoBox_C*>                  Ammoboxes;                                         // 0x0CC0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	uint8                                         ReplicatedAmmoBoxCooldown;                         // 0x0CD0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          AmmoBoxesOnCooldown;                               // 0x0CD1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD2[0x2];                                      // 0x0CD2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NextAmmoBoxAvailableTime;                          // 0x0CD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableTeamSelection;                              // 0x0CD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD9[0x7];                                      // 0x0CD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMordhauPlayerState*                    LastForgiveCandidate;                              // 0x0CE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LastForgiveWasFilteredKill;                        // 0x0CE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CE9[0x3];                                      // 0x0CE9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastForgiveDamage;                                 // 0x0CEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOnMainMenuMap;                                   // 0x0CF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CF1[0x7];                                      // 0x0CF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FArrayOfActor>       PlaceableArrays;                                   // 0x0CF8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         BloodOverlaySineTime;                              // 0x0D48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4C[0x4];                                      // 0x0D4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, uint8>                      PlaceablesMap;                                     // 0x0D50(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              EventOnPlaceablesUpdate;                           // 0x0DA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIsUsingController;                                // 0x0DB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsTeamSelectAvailable;                            // 0x0DB1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DB2[0x6];                                      // 0x0DB2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 RandomBehaviorProfile;                             // 0x0DB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxMessageLength;                                  // 0x0DC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastMessageTimestamp;                              // 0x0DC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SpamCounter;                                       // 0x0DC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_MordhauPlayerController(int32 EntryPoint);
	void GiveChickenator();
	void OnGiveChickenator(const TArray<class FString>& Params_0);
	void GiveBlunderbuss();
	void OnGiveBlunderbuss(const TArray<class FString>& Params_0);
	void AddRandomCharacters(int32 Num);
	void OnAddRandomBots(int32 Num);
	void WipePlaceablesOnClient();
	void UpdatePlaceablesOnClient(class FName PlaceableName, uint8 PlaceableAmount);
	void DisplayAnnouncement(const class FString& Text, const class FString& Subtext, float Duration);
	void HandleShowProfileSelect();
	void ServerGiveGuns();
	void ParryThis();
	void DoBattlecry();
	void ReceiveOfferToForgive(class AMordhauPlayerState* Candidate);
	void ForgivePlayer();
	void HandleTeamSelect();
	void ServerVoteKickVote(bool VotedYes);
	void ServerRequestCancelVoteKick();
	void OnRequestCancelVoteKick();
	void ServerRequestVoteKick(class AMordhauPlayerState* Player_0);
	void OnRequestVoteKick(class AMordhauPlayerState* TargetPlayer);
	void OnAmmoChanged(class AMordhauEquipment* Equipment, int32 AmmoDifference);
	void PerformAFKKick();
	void OnAFKTimeExceededMaximum();
	void OnIsAnythingRestockableChanged();
	void OnSpectatorCmd(const class FString& Cmd, const class FString& Param);
	void OnMordhauCharacterSpawned(class AMordhauCharacter* SpawnedCharacter);
	void ReceiveDestroyed();
	void OnActionFailed(const class FName& Reason);
	void OnAfterPossess(class APawn* APawn);
	void ClientReceiveScoreBP(EScoreFeedReason Reason, uint8 ReasonParam, float ScoreAmount, class AMordhauPlayerState* AssociatedPlayer);
	void ChoiceMenuOptionSelected(int32 Choice);
	void ShowTips();
	void ShowEquipment();
	void DisplayMessage(class APlayerState* SenderPlayerState, const class FString& S, class FName Type, float MsgLifeTime);
	void OnSpectatorAction(uint8 Action);
	void OnHighlightEnd(class AActor* Actor);
	void OnHighlightStart(class AActor* Actor);
	void RequestChatMessage(const class FString& Message, bool Team);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void InpActEvt_Scoreboard_Interact_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Toggle_UI_Markers_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Vote_No_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_Vote_Yes_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_Mute_Target_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_Battlecry_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_Show_Voice_Menu_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_Show_Team_Chat_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_Show_Emote_Menu_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_Show_Emote_Menu_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_Show_Team_Select_K2Node_InputActionEvent_10(const struct FKey& Key);
	void InpActEvt_Show_Profile_Select_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_Show_Scoreboard_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_Show_Scoreboard_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_Show_Chat_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_Show_Main_Menu_K2Node_InputActionEvent_15(const struct FKey& Key);
	void ChangeFadeToBlackCounter(float NewValue);
	void UpdateViewTargetEffects();
	void ChangeSmokeOverlay(float NewValue);
	void ChangeFireOverlay(float NewOnFireValue, float NewNearFireValue);
	void PlaceInPlaceableArray(class FName NameKey, class AActor* ToPlace, int32 MaxOfSame, class AActor** RemovedActor);
	void RemoveFromPlaceableArray(class FName NameKey, class AActor* Object);
	void WipePlaceables(class FName Key);
	void OnRep_ReplicatedAmmoBoxCooldown();
	void HandleTeamKill(class AMordhauPlayerState* KilledBy, class AActor* Agent, float Damage);
	void OnBuilt(class AActor* Structure);
	void OnWhisperReceived(class UBP_ChatBox_C* ChatBox, const class FString& WhisperMessage, class APlayerState* Sender);
	void OnAdminWhisperReceived(class UBP_ChatBox_C* ChatBox, const class FString& Message, class APlayerState* Sender);
	void OnAdminPopupReceived(class UBP_ChatBox_C* ChatBox, const class FString& Message, class APlayerState* Sender);
	void OnAdminSayReceived(class UBP_ChatBox_C* ChatBox, const class FString& Message, class APlayerState* Sender);
	void OnAdminAnnouncementReceived(class UBP_ChatBox_C* ChatBox, const class FString& Message, class APlayerState* Sender);
	void OnAdminChatReceived(class UBP_ChatBox_C* ChatBox, const class FString& Message, class APlayerState* Sender);
	void OnHelpMessageReceived(class UBP_ChatBox_C* ChatBox, class APlayerState* Sender);
	void OnCommandFailedReceived(class UBP_ChatBox_C* ChatBox, const class FString& FailureType, class APlayerState* Sender);
	void UpdateBloodOverlaySineTime(float DeltaTime, float Period);
	void Get_Blood_Overlay_Sine_Value(float BloodOverlayIntensity, float* BloodOverlaySineValue);
	void UpdateBloodOverlayPostProcess(float DeltaTime, float BloodOverlayIntensity);
	void OnUpdatePlaceablesClient(class FName PlaceableName, uint8 PlaceableAmount);
	void OnWipePlaceablesClient();
	void Update_button_prompts_();
	void IsVotePopupVisible(bool* IsVisible);
	void GetTeamSelectionDisabledTime(int32* DisabledTime);
	void RefreshIsTeamSelectAvailable();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MordhauPlayerController_C">();
	}
	static class ABP_MordhauPlayerController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MordhauPlayerController_C>();
	}
};
static_assert(alignof(ABP_MordhauPlayerController_C) == 0x000008, "Wrong alignment on ABP_MordhauPlayerController_C");
static_assert(sizeof(ABP_MordhauPlayerController_C) == 0x000DD0, "Wrong size on ABP_MordhauPlayerController_C");
static_assert(offsetof(ABP_MordhauPlayerController_C, UberGraphFrame) == 0x000BE8, "Member 'ABP_MordhauPlayerController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, PostProcess) == 0x000BF0, "Member 'ABP_MordhauPlayerController_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, BloodOverlayMI) == 0x000BF8, "Member 'ABP_MordhauPlayerController_C::BloodOverlayMI' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, HUD) == 0x000C00, "Member 'ABP_MordhauPlayerController_C::HUD' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, FadeToBlackCounter) == 0x000C08, "Member 'ABP_MordhauPlayerController_C::FadeToBlackCounter' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, FadeToBlackCurve) == 0x000C10, "Member 'ABP_MordhauPlayerController_C::FadeToBlackCurve' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, OutlineMI) == 0x000C18, "Member 'ABP_MordhauPlayerController_C::OutlineMI' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, DeathMI) == 0x000C20, "Member 'ABP_MordhauPlayerController_C::DeathMI' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, WantsFadeToBlack) == 0x000C28, "Member 'ABP_MordhauPlayerController_C::WantsFadeToBlack' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, BloodOverlayTarget) == 0x000C2C, "Member 'ABP_MordhauPlayerController_C::BloodOverlayTarget' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, LastAnnouncement) == 0x000C30, "Member 'ABP_MordhauPlayerController_C::LastAnnouncement' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, LowStaminaVignetteExtra) == 0x000C40, "Member 'ABP_MordhauPlayerController_C::LowStaminaVignetteExtra' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, StaminaOverlayTarget) == 0x000C44, "Member 'ABP_MordhauPlayerController_C::StaminaOverlayTarget' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, BaseVignetteAmount) == 0x000C48, "Member 'ABP_MordhauPlayerController_C::BaseVignetteAmount' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, StaminaOverlay) == 0x000C4C, "Member 'ABP_MordhauPlayerController_C::StaminaOverlay' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, LowStaminaOverlayCurve) == 0x000C50, "Member 'ABP_MordhauPlayerController_C::LowStaminaOverlayCurve' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, LowStaminaGrainExtra) == 0x000C58, "Member 'ABP_MordhauPlayerController_C::LowStaminaGrainExtra' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, SaturationTarget) == 0x000C5C, "Member 'ABP_MordhauPlayerController_C::SaturationTarget' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, Saturation) == 0x000C60, "Member 'ABP_MordhauPlayerController_C::Saturation' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, QueueShowTeamSelect) == 0x000C64, "Member 'ABP_MordhauPlayerController_C::QueueShowTeamSelect' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, ChoiceMenuStack) == 0x000C68, "Member 'ABP_MordhauPlayerController_C::ChoiceMenuStack' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, SmokeOverlay) == 0x000C78, "Member 'ABP_MordhauPlayerController_C::SmokeOverlay' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, SmokeOverlayMI) == 0x000C80, "Member 'ABP_MordhauPlayerController_C::SmokeOverlayMI' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, SmokeOverlayTarget) == 0x000C88, "Member 'ABP_MordhauPlayerController_C::SmokeOverlayTarget' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, OnFireOverlayMI) == 0x000C90, "Member 'ABP_MordhauPlayerController_C::OnFireOverlayMI' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, OnFireTarget) == 0x000C98, "Member 'ABP_MordhauPlayerController_C::OnFireTarget' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, NearFireTarget) == 0x000C9C, "Member 'ABP_MordhauPlayerController_C::NearFireTarget' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, OnFire) == 0x000CA0, "Member 'ABP_MordhauPlayerController_C::OnFire' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, NearFire) == 0x000CA4, "Member 'ABP_MordhauPlayerController_C::NearFire' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, SpawnedWithToolbox) == 0x000CA8, "Member 'ABP_MordhauPlayerController_C::SpawnedWithToolbox' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, QueuedKiller) == 0x000CB0, "Member 'ABP_MordhauPlayerController_C::QueuedKiller' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, QueuedKillerTime) == 0x000CB8, "Member 'ABP_MordhauPlayerController_C::QueuedKillerTime' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, Ammoboxes) == 0x000CC0, "Member 'ABP_MordhauPlayerController_C::Ammoboxes' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, ReplicatedAmmoBoxCooldown) == 0x000CD0, "Member 'ABP_MordhauPlayerController_C::ReplicatedAmmoBoxCooldown' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, AmmoBoxesOnCooldown) == 0x000CD1, "Member 'ABP_MordhauPlayerController_C::AmmoBoxesOnCooldown' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, NextAmmoBoxAvailableTime) == 0x000CD4, "Member 'ABP_MordhauPlayerController_C::NextAmmoBoxAvailableTime' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, DisableTeamSelection) == 0x000CD8, "Member 'ABP_MordhauPlayerController_C::DisableTeamSelection' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, LastForgiveCandidate) == 0x000CE0, "Member 'ABP_MordhauPlayerController_C::LastForgiveCandidate' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, LastForgiveWasFilteredKill) == 0x000CE8, "Member 'ABP_MordhauPlayerController_C::LastForgiveWasFilteredKill' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, LastForgiveDamage) == 0x000CEC, "Member 'ABP_MordhauPlayerController_C::LastForgiveDamage' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, IsOnMainMenuMap) == 0x000CF0, "Member 'ABP_MordhauPlayerController_C::IsOnMainMenuMap' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, PlaceableArrays) == 0x000CF8, "Member 'ABP_MordhauPlayerController_C::PlaceableArrays' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, BloodOverlaySineTime) == 0x000D48, "Member 'ABP_MordhauPlayerController_C::BloodOverlaySineTime' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, PlaceablesMap) == 0x000D50, "Member 'ABP_MordhauPlayerController_C::PlaceablesMap' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, EventOnPlaceablesUpdate) == 0x000DA0, "Member 'ABP_MordhauPlayerController_C::EventOnPlaceablesUpdate' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, bIsUsingController) == 0x000DB0, "Member 'ABP_MordhauPlayerController_C::bIsUsingController' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, bIsTeamSelectAvailable) == 0x000DB1, "Member 'ABP_MordhauPlayerController_C::bIsTeamSelectAvailable' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, RandomBehaviorProfile) == 0x000DB8, "Member 'ABP_MordhauPlayerController_C::RandomBehaviorProfile' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, MaxMessageLength) == 0x000DC0, "Member 'ABP_MordhauPlayerController_C::MaxMessageLength' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, LastMessageTimestamp) == 0x000DC4, "Member 'ABP_MordhauPlayerController_C::LastMessageTimestamp' has a wrong offset!");
static_assert(offsetof(ABP_MordhauPlayerController_C, SpamCounter) == 0x000DC8, "Member 'ABP_MordhauPlayerController_C::SpamCounter' has a wrong offset!");

}

