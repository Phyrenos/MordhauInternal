#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HordeUpgradeVendorBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mordhau_structs.hpp"
#include "BP_MordhauActor_classes.hpp"
#include "S_WearableTier_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HordeUpgradeVendorBase.BP_HordeUpgradeVendorBase_C
// 0x0060 (0x0440 - 0x03E0)
class ABP_HordeUpgradeVendorBase_C final : public ABP_MordhauActor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class ULODSkeletalMeshComponent*              LODSkeletalMesh1;                                  // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class ULODSkeletalMeshComponent*              LODSkeletalMesh2;                                  // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class ULODSkeletalMeshComponent*              LODSkeletalMesh3;                                  // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UMordhauWidgetComponent*                UpgradeWidget;                                     // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          IsAvailable;                                       // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_409[0x3];                                      // 0x0409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DisplayName;                                       // 0x040C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMainWearableSlot                             SlotType;                                          // 0x0414(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_415[0x3];                                      // 0x0415(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_WearableTier>                WearableTiers;                                     // 0x0418(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UTexture2D*                             IndicatorTexture;                                  // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HordePlayerState_C*                 NewVar_0;                                          // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_HordeUpgradeVendorBase(int32 EntryPoint);
	void ReceiveBeginPlay();
	void OnHeldInteractionStart(class AMordhauCharacter* Character);
	void UpdateVisuals();

	void Get_Equipped_Armor(class AMordhauCharacter* Character, int32* WearableIndex, struct FS_WearableTier* EquippedArmor) const;
	void GetNextArmorUpgrade(class AMordhauCharacter* Character, bool* IsMaxedOut, struct FS_WearableTier* ArmorToEquip) const;
	void CanAffordUpgrade(class AMordhauCharacter* Character, const struct FS_WearableTier& ArmorUpgrade, bool* CanAfford) const;
	bool CanHeldInteract(class AMordhauCharacter* Character) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HordeUpgradeVendorBase_C">();
	}
	static class ABP_HordeUpgradeVendorBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HordeUpgradeVendorBase_C>();
	}
};
static_assert(alignof(ABP_HordeUpgradeVendorBase_C) == 0x000010, "Wrong alignment on ABP_HordeUpgradeVendorBase_C");
static_assert(sizeof(ABP_HordeUpgradeVendorBase_C) == 0x000440, "Wrong size on ABP_HordeUpgradeVendorBase_C");
static_assert(offsetof(ABP_HordeUpgradeVendorBase_C, UberGraphFrame) == 0x0003E0, "Member 'ABP_HordeUpgradeVendorBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HordeUpgradeVendorBase_C, LODSkeletalMesh1) == 0x0003E8, "Member 'ABP_HordeUpgradeVendorBase_C::LODSkeletalMesh1' has a wrong offset!");
static_assert(offsetof(ABP_HordeUpgradeVendorBase_C, LODSkeletalMesh2) == 0x0003F0, "Member 'ABP_HordeUpgradeVendorBase_C::LODSkeletalMesh2' has a wrong offset!");
static_assert(offsetof(ABP_HordeUpgradeVendorBase_C, LODSkeletalMesh3) == 0x0003F8, "Member 'ABP_HordeUpgradeVendorBase_C::LODSkeletalMesh3' has a wrong offset!");
static_assert(offsetof(ABP_HordeUpgradeVendorBase_C, UpgradeWidget) == 0x000400, "Member 'ABP_HordeUpgradeVendorBase_C::UpgradeWidget' has a wrong offset!");
static_assert(offsetof(ABP_HordeUpgradeVendorBase_C, IsAvailable) == 0x000408, "Member 'ABP_HordeUpgradeVendorBase_C::IsAvailable' has a wrong offset!");
static_assert(offsetof(ABP_HordeUpgradeVendorBase_C, DisplayName) == 0x00040C, "Member 'ABP_HordeUpgradeVendorBase_C::DisplayName' has a wrong offset!");
static_assert(offsetof(ABP_HordeUpgradeVendorBase_C, SlotType) == 0x000414, "Member 'ABP_HordeUpgradeVendorBase_C::SlotType' has a wrong offset!");
static_assert(offsetof(ABP_HordeUpgradeVendorBase_C, WearableTiers) == 0x000418, "Member 'ABP_HordeUpgradeVendorBase_C::WearableTiers' has a wrong offset!");
static_assert(offsetof(ABP_HordeUpgradeVendorBase_C, IndicatorTexture) == 0x000428, "Member 'ABP_HordeUpgradeVendorBase_C::IndicatorTexture' has a wrong offset!");
static_assert(offsetof(ABP_HordeUpgradeVendorBase_C, NewVar_0) == 0x000430, "Member 'ABP_HordeUpgradeVendorBase_C::NewVar_0' has a wrong offset!");

}

