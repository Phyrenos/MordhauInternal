#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Catapult

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mordhau_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function BP_Catapult.BP_Catapult_C.ExecuteUbergraph_BP_Catapult
// 0x0268 (0x0268 - 0x0000)
struct BP_Catapult_C_ExecuteUbergraph_BP_Catapult final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable; // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_1; // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsUsingController_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsUsingController_ReturnValue_1;       // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key;                       // 0x0010(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_1;                     // 0x0030(0x0018)(HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_2;                     // 0x0050(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable;                              // 0x0068(0x0018)(HasGetValueTypeHash)
	class AController*                            K2Node_Event_OldController;                        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Angle;                                // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMordhauDamageType                            K2Node_Event_Type;                                 // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Event_SubType_1;                            // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_Bone;                                 // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Point;                                // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Source;                               // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Agent_1;                              // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMordhauDamageType                            K2Node_Event_DamageType;                           // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Event_SubType;                              // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA[0x2];                                       // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_Event_Hit;                                  // 0x00BC(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 K2Node_Event_Agent;                                // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_152[0x2];                                      // 0x0152(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ComputeRagdollForce_Force;                // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ComputeRagdollForce_Force_1;              // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x01E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_2;                 // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_1;                 // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue;                   // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_3;                     // 0x0228(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_4;                     // 0x0240(0x0018)(HasGetValueTypeHash)
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue;                    // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnFirePressed_ReturnValue;                // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0261(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult) == 0x000008, "Wrong alignment on BP_Catapult_C_ExecuteUbergraph_BP_Catapult");
static_assert(sizeof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult) == 0x000268, "Wrong size on BP_Catapult_C_ExecuteUbergraph_BP_Catapult");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, EntryPoint) == 0x000000, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, Temp_bool_Has_Been_Initd_Variable) == 0x000004, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable) == 0x000005, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, Temp_bool_IsClosed_Variable) == 0x000006, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_1) == 0x000007, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_GetIsUsingController_ReturnValue) == 0x000008, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_GetIsUsingController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_GetIsUsingController_ReturnValue_1) == 0x000009, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_GetIsUsingController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, K2Node_InputActionEvent_Key) == 0x000010, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::K2Node_InputActionEvent_Key' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_IsDedicatedServer_ReturnValue) == 0x000028, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, K2Node_InputActionEvent_Key_1) == 0x000030, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::K2Node_InputActionEvent_Key_1' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, Temp_bool_Has_Been_Initd_Variable_1) == 0x000048, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, K2Node_InputActionEvent_Key_2) == 0x000050, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::K2Node_InputActionEvent_Key_2' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, Temp_struct_Variable) == 0x000068, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, K2Node_Event_OldController) == 0x000080, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::K2Node_Event_OldController' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, K2Node_Event_Angle) == 0x000088, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::K2Node_Event_Angle' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, K2Node_Event_Type) == 0x00008C, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::K2Node_Event_Type' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, K2Node_Event_SubType_1) == 0x00008D, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::K2Node_Event_SubType_1' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, K2Node_Event_Bone) == 0x000090, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::K2Node_Event_Bone' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, K2Node_Event_Point) == 0x000098, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::K2Node_Event_Point' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, K2Node_Event_Source) == 0x0000A8, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::K2Node_Event_Source' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, K2Node_Event_Agent_1) == 0x0000B0, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::K2Node_Event_Agent_1' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, K2Node_Event_DamageType) == 0x0000B8, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::K2Node_Event_DamageType' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, K2Node_Event_SubType) == 0x0000B9, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::K2Node_Event_SubType' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, K2Node_Event_Hit) == 0x0000BC, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::K2Node_Event_Hit' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, K2Node_Event_Agent) == 0x000148, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::K2Node_Event_Agent' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_BreakHitResult_bBlockingHit) == 0x000150, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_BreakHitResult_bInitialOverlap) == 0x000151, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_BreakHitResult_Time) == 0x000154, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_BreakHitResult_Distance) == 0x000158, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_BreakHitResult_Location) == 0x00015C, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_BreakHitResult_ImpactPoint) == 0x000168, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_BreakHitResult_Normal) == 0x000174, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_BreakHitResult_ImpactNormal) == 0x000180, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_BreakHitResult_PhysMat) == 0x000190, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_BreakHitResult_HitActor) == 0x000198, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_BreakHitResult_HitComponent) == 0x0001A0, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_BreakHitResult_HitBoneName) == 0x0001A8, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_BreakHitResult_HitItem) == 0x0001B0, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_BreakHitResult_FaceIndex) == 0x0001B4, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_BreakHitResult_TraceStart) == 0x0001B8, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_BreakHitResult_TraceEnd) == 0x0001C4, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_ComputeRagdollForce_Force) == 0x0001D0, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_ComputeRagdollForce_Force' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_ComputeRagdollForce_Force_1) == 0x0001DC, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_ComputeRagdollForce_Force_1' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0001E8, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0001F4, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, K2Node_InputAxisEvent_AxisValue_2) == 0x000200, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::K2Node_InputAxisEvent_AxisValue_2' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, K2Node_InputAxisEvent_AxisValue_1) == 0x000204, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::K2Node_InputAxisEvent_AxisValue_1' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_FClamp_ReturnValue) == 0x000208, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, K2Node_InputAxisEvent_AxisValue) == 0x00020C, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::K2Node_InputAxisEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_GetMaterial_ReturnValue) == 0x000210, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000218, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, Temp_bool_IsClosed_Variable_1) == 0x000220, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, K2Node_InputActionEvent_Key_3) == 0x000228, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::K2Node_InputActionEvent_Key_3' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, K2Node_InputActionEvent_Key_4) == 0x000240, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::K2Node_InputActionEvent_Key_4' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_GetDriver_ReturnValue) == 0x000258, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_GetDriver_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_OnFirePressed_ReturnValue) == 0x000260, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_OnFirePressed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_ExecuteUbergraph_BP_Catapult, CallFunc_IsValid_ReturnValue) == 0x000261, "Member 'BP_Catapult_C_ExecuteUbergraph_BP_Catapult::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Catapult.BP_Catapult_C.InpAxisEvt_Turn Right_K2Node_InputAxisEvent_6
// 0x0004 (0x0004 - 0x0000)
struct BP_Catapult_C_InpAxisEvt_Turn_Right_K2Node_InputAxisEvent_6 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Catapult_C_InpAxisEvt_Turn_Right_K2Node_InputAxisEvent_6) == 0x000004, "Wrong alignment on BP_Catapult_C_InpAxisEvt_Turn_Right_K2Node_InputAxisEvent_6");
static_assert(sizeof(BP_Catapult_C_InpAxisEvt_Turn_Right_K2Node_InputAxisEvent_6) == 0x000004, "Wrong size on BP_Catapult_C_InpAxisEvt_Turn_Right_K2Node_InputAxisEvent_6");
static_assert(offsetof(BP_Catapult_C_InpAxisEvt_Turn_Right_K2Node_InputAxisEvent_6, AxisValue) == 0x000000, "Member 'BP_Catapult_C_InpAxisEvt_Turn_Right_K2Node_InputAxisEvent_6::AxisValue' has a wrong offset!");

// Function BP_Catapult.BP_Catapult_C.InpAxisEvt_Look Up_K2Node_InputAxisEvent_35
// 0x0004 (0x0004 - 0x0000)
struct BP_Catapult_C_InpAxisEvt_Look_Up_K2Node_InputAxisEvent_35 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Catapult_C_InpAxisEvt_Look_Up_K2Node_InputAxisEvent_35) == 0x000004, "Wrong alignment on BP_Catapult_C_InpAxisEvt_Look_Up_K2Node_InputAxisEvent_35");
static_assert(sizeof(BP_Catapult_C_InpAxisEvt_Look_Up_K2Node_InputAxisEvent_35) == 0x000004, "Wrong size on BP_Catapult_C_InpAxisEvt_Look_Up_K2Node_InputAxisEvent_35");
static_assert(offsetof(BP_Catapult_C_InpAxisEvt_Look_Up_K2Node_InputAxisEvent_35, AxisValue) == 0x000000, "Member 'BP_Catapult_C_InpAxisEvt_Look_Up_K2Node_InputAxisEvent_35::AxisValue' has a wrong offset!");

// Function BP_Catapult.BP_Catapult_C.InpAxisEvt_Move Right_K2Node_InputAxisEvent_20
// 0x0004 (0x0004 - 0x0000)
struct BP_Catapult_C_InpAxisEvt_Move_Right_K2Node_InputAxisEvent_20 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Catapult_C_InpAxisEvt_Move_Right_K2Node_InputAxisEvent_20) == 0x000004, "Wrong alignment on BP_Catapult_C_InpAxisEvt_Move_Right_K2Node_InputAxisEvent_20");
static_assert(sizeof(BP_Catapult_C_InpAxisEvt_Move_Right_K2Node_InputAxisEvent_20) == 0x000004, "Wrong size on BP_Catapult_C_InpAxisEvt_Move_Right_K2Node_InputAxisEvent_20");
static_assert(offsetof(BP_Catapult_C_InpAxisEvt_Move_Right_K2Node_InputAxisEvent_20, AxisValue) == 0x000000, "Member 'BP_Catapult_C_InpAxisEvt_Move_Right_K2Node_InputAxisEvent_20::AxisValue' has a wrong offset!");

// Function BP_Catapult.BP_Catapult_C.OnCosmeticHit
// 0x0098 (0x0098 - 0x0000)
struct BP_Catapult_C_OnCosmeticHit final
{
public:
	EMordhauDamageType                            DamageType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         SubType;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0004(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 Agent;                                             // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Catapult_C_OnCosmeticHit) == 0x000008, "Wrong alignment on BP_Catapult_C_OnCosmeticHit");
static_assert(sizeof(BP_Catapult_C_OnCosmeticHit) == 0x000098, "Wrong size on BP_Catapult_C_OnCosmeticHit");
static_assert(offsetof(BP_Catapult_C_OnCosmeticHit, DamageType) == 0x000000, "Member 'BP_Catapult_C_OnCosmeticHit::DamageType' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_OnCosmeticHit, SubType) == 0x000001, "Member 'BP_Catapult_C_OnCosmeticHit::SubType' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_OnCosmeticHit, Hit) == 0x000004, "Member 'BP_Catapult_C_OnCosmeticHit::Hit' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_OnCosmeticHit, Agent) == 0x000090, "Member 'BP_Catapult_C_OnCosmeticHit::Agent' has a wrong offset!");

// Function BP_Catapult.BP_Catapult_C.OnDied
// 0x0030 (0x0030 - 0x0000)
struct BP_Catapult_C_OnDied final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMordhauDamageType                            Type;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         SubType;                                           // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   bone;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Point;                                             // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Source;                                            // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Agent;                                             // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Catapult_C_OnDied) == 0x000008, "Wrong alignment on BP_Catapult_C_OnDied");
static_assert(sizeof(BP_Catapult_C_OnDied) == 0x000030, "Wrong size on BP_Catapult_C_OnDied");
static_assert(offsetof(BP_Catapult_C_OnDied, Angle) == 0x000000, "Member 'BP_Catapult_C_OnDied::Angle' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_OnDied, Type) == 0x000004, "Member 'BP_Catapult_C_OnDied::Type' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_OnDied, SubType) == 0x000005, "Member 'BP_Catapult_C_OnDied::SubType' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_OnDied, bone) == 0x000008, "Member 'BP_Catapult_C_OnDied::bone' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_OnDied, Point) == 0x000010, "Member 'BP_Catapult_C_OnDied::Point' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_OnDied, Source) == 0x000020, "Member 'BP_Catapult_C_OnDied::Source' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_OnDied, Agent) == 0x000028, "Member 'BP_Catapult_C_OnDied::Agent' has a wrong offset!");

// Function BP_Catapult.BP_Catapult_C.ReceiveUnpossessed
// 0x0008 (0x0008 - 0x0000)
struct BP_Catapult_C_ReceiveUnpossessed final
{
public:
	class AController*                            OldController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Catapult_C_ReceiveUnpossessed) == 0x000008, "Wrong alignment on BP_Catapult_C_ReceiveUnpossessed");
static_assert(sizeof(BP_Catapult_C_ReceiveUnpossessed) == 0x000008, "Wrong size on BP_Catapult_C_ReceiveUnpossessed");
static_assert(offsetof(BP_Catapult_C_ReceiveUnpossessed, OldController) == 0x000000, "Member 'BP_Catapult_C_ReceiveUnpossessed::OldController' has a wrong offset!");

// Function BP_Catapult.BP_Catapult_C.InpActEvt_Lower Catapult Arm_K2Node_InputActionEvent_0
// 0x0018 (0x0018 - 0x0000)
struct BP_Catapult_C_InpActEvt_Lower_Catapult_Arm_K2Node_InputActionEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Catapult_C_InpActEvt_Lower_Catapult_Arm_K2Node_InputActionEvent_0) == 0x000008, "Wrong alignment on BP_Catapult_C_InpActEvt_Lower_Catapult_Arm_K2Node_InputActionEvent_0");
static_assert(sizeof(BP_Catapult_C_InpActEvt_Lower_Catapult_Arm_K2Node_InputActionEvent_0) == 0x000018, "Wrong size on BP_Catapult_C_InpActEvt_Lower_Catapult_Arm_K2Node_InputActionEvent_0");
static_assert(offsetof(BP_Catapult_C_InpActEvt_Lower_Catapult_Arm_K2Node_InputActionEvent_0, Key) == 0x000000, "Member 'BP_Catapult_C_InpActEvt_Lower_Catapult_Arm_K2Node_InputActionEvent_0::Key' has a wrong offset!");

// Function BP_Catapult.BP_Catapult_C.InpActEvt_Raise Catapult Arm_K2Node_InputActionEvent_1
// 0x0018 (0x0018 - 0x0000)
struct BP_Catapult_C_InpActEvt_Raise_Catapult_Arm_K2Node_InputActionEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Catapult_C_InpActEvt_Raise_Catapult_Arm_K2Node_InputActionEvent_1) == 0x000008, "Wrong alignment on BP_Catapult_C_InpActEvt_Raise_Catapult_Arm_K2Node_InputActionEvent_1");
static_assert(sizeof(BP_Catapult_C_InpActEvt_Raise_Catapult_Arm_K2Node_InputActionEvent_1) == 0x000018, "Wrong size on BP_Catapult_C_InpActEvt_Raise_Catapult_Arm_K2Node_InputActionEvent_1");
static_assert(offsetof(BP_Catapult_C_InpActEvt_Raise_Catapult_Arm_K2Node_InputActionEvent_1, Key) == 0x000000, "Member 'BP_Catapult_C_InpActEvt_Raise_Catapult_Arm_K2Node_InputActionEvent_1::Key' has a wrong offset!");

// Function BP_Catapult.BP_Catapult_C.InpActEvt_Fire_K2Node_InputActionEvent_2
// 0x0018 (0x0018 - 0x0000)
struct BP_Catapult_C_InpActEvt_Fire_K2Node_InputActionEvent_2 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Catapult_C_InpActEvt_Fire_K2Node_InputActionEvent_2) == 0x000008, "Wrong alignment on BP_Catapult_C_InpActEvt_Fire_K2Node_InputActionEvent_2");
static_assert(sizeof(BP_Catapult_C_InpActEvt_Fire_K2Node_InputActionEvent_2) == 0x000018, "Wrong size on BP_Catapult_C_InpActEvt_Fire_K2Node_InputActionEvent_2");
static_assert(offsetof(BP_Catapult_C_InpActEvt_Fire_K2Node_InputActionEvent_2, Key) == 0x000000, "Member 'BP_Catapult_C_InpActEvt_Fire_K2Node_InputActionEvent_2::Key' has a wrong offset!");

// Function BP_Catapult.BP_Catapult_C.InpActEvt_Cycle Camera_K2Node_InputActionEvent_3
// 0x0018 (0x0018 - 0x0000)
struct BP_Catapult_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_3 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Catapult_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_3) == 0x000008, "Wrong alignment on BP_Catapult_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_3");
static_assert(sizeof(BP_Catapult_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_3) == 0x000018, "Wrong size on BP_Catapult_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_3");
static_assert(offsetof(BP_Catapult_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_3, Key) == 0x000000, "Member 'BP_Catapult_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_3::Key' has a wrong offset!");

// Function BP_Catapult.BP_Catapult_C.InpActEvt_Cycle Camera_K2Node_InputActionEvent_4
// 0x0018 (0x0018 - 0x0000)
struct BP_Catapult_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_4 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Catapult_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_4) == 0x000008, "Wrong alignment on BP_Catapult_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_4");
static_assert(sizeof(BP_Catapult_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_4) == 0x000018, "Wrong size on BP_Catapult_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_4");
static_assert(offsetof(BP_Catapult_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_4, Key) == 0x000000, "Member 'BP_Catapult_C_InpActEvt_Cycle_Camera_K2Node_InputActionEvent_4::Key' has a wrong offset!");

// Function BP_Catapult.BP_Catapult_C.UserConstructionScript
// 0x0038 (0x0038 - 0x0000)
struct BP_Catapult_C_UserConstructionScript final
{
public:
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UPrimitiveComponent*>            K2Node_MakeArray_Array_1;                          // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UPseudoVehicleMovementComponent*        K2Node_DynamicCast_AsPseudo_Vehicle_Movement_Component; // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Catapult_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_Catapult_C_UserConstructionScript");
static_assert(sizeof(BP_Catapult_C_UserConstructionScript) == 0x000038, "Wrong size on BP_Catapult_C_UserConstructionScript");
static_assert(offsetof(BP_Catapult_C_UserConstructionScript, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000000, "Member 'BP_Catapult_C_UserConstructionScript::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_UserConstructionScript, K2Node_MakeArray_Array) == 0x000008, "Member 'BP_Catapult_C_UserConstructionScript::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_UserConstructionScript, K2Node_MakeArray_Array_1) == 0x000018, "Member 'BP_Catapult_C_UserConstructionScript::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_UserConstructionScript, K2Node_DynamicCast_AsPseudo_Vehicle_Movement_Component) == 0x000028, "Member 'BP_Catapult_C_UserConstructionScript::K2Node_DynamicCast_AsPseudo_Vehicle_Movement_Component' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_UserConstructionScript, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_Catapult_C_UserConstructionScript::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Catapult.BP_Catapult_C.PostProcessCameraPOV
// 0x00C0 (0x00C0 - 0x0000)
struct BP_Catapult_C_PostProcessCameraPOV final
{
public:
	struct FPOV                                   InPOV;                                             // 0x0000(0x001C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FPOV                                   ReturnValue;                                       // 0x001C(0x001C)(Parm, OutParm, ReturnParm, NoDestructor)
	class AMordhauCharacter*                      CallFunc_GetDriver_ReturnValue;                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPOV                                   K2Node_MakeStruct_POV;                             // 0x00A4(0x001C)(NoDestructor)
};
static_assert(alignof(BP_Catapult_C_PostProcessCameraPOV) == 0x000010, "Wrong alignment on BP_Catapult_C_PostProcessCameraPOV");
static_assert(sizeof(BP_Catapult_C_PostProcessCameraPOV) == 0x0000C0, "Wrong size on BP_Catapult_C_PostProcessCameraPOV");
static_assert(offsetof(BP_Catapult_C_PostProcessCameraPOV, InPOV) == 0x000000, "Member 'BP_Catapult_C_PostProcessCameraPOV::InPOV' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_PostProcessCameraPOV, ReturnValue) == 0x00001C, "Member 'BP_Catapult_C_PostProcessCameraPOV::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_PostProcessCameraPOV, CallFunc_GetDriver_ReturnValue) == 0x000038, "Member 'BP_Catapult_C_PostProcessCameraPOV::CallFunc_GetDriver_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_PostProcessCameraPOV, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BP_Catapult_C_PostProcessCameraPOV::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_PostProcessCameraPOV, CallFunc_GetSocketTransform_ReturnValue) == 0x000050, "Member 'BP_Catapult_C_PostProcessCameraPOV::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_PostProcessCameraPOV, CallFunc_BreakTransform_Location) == 0x000080, "Member 'BP_Catapult_C_PostProcessCameraPOV::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_PostProcessCameraPOV, CallFunc_BreakTransform_Rotation) == 0x00008C, "Member 'BP_Catapult_C_PostProcessCameraPOV::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_PostProcessCameraPOV, CallFunc_BreakTransform_Scale) == 0x000098, "Member 'BP_Catapult_C_PostProcessCameraPOV::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_Catapult_C_PostProcessCameraPOV, K2Node_MakeStruct_POV) == 0x0000A4, "Member 'BP_Catapult_C_PostProcessCameraPOV::K2Node_MakeStruct_POV' has a wrong offset!");

}

