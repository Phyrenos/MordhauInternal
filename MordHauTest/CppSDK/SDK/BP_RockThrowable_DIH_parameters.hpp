#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RockThrowable_DIH

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_RockThrowable_DIH.BP_RockThrowable_DIH_C.ExecuteUbergraph_BP_RockThrowable_DIH
// 0x0040 (0x0040 - 0x0000)
struct BP_RockThrowable_DIH_C_ExecuteUbergraph_BP_RockThrowable_DIH final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetCurrentMaxAmmo_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_Origin;                               // 0x0008(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_Orientation;                          // 0x0014(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class AController*                            K2Node_Event_OwningController;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ExpectedDelay;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_BlessingComponent_C*                CallFunc_GetComponentByClass_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RockThrowable_DIH_C_ExecuteUbergraph_BP_RockThrowable_DIH) == 0x000008, "Wrong alignment on BP_RockThrowable_DIH_C_ExecuteUbergraph_BP_RockThrowable_DIH");
static_assert(sizeof(BP_RockThrowable_DIH_C_ExecuteUbergraph_BP_RockThrowable_DIH) == 0x000040, "Wrong size on BP_RockThrowable_DIH_C_ExecuteUbergraph_BP_RockThrowable_DIH");
static_assert(offsetof(BP_RockThrowable_DIH_C_ExecuteUbergraph_BP_RockThrowable_DIH, EntryPoint) == 0x000000, "Member 'BP_RockThrowable_DIH_C_ExecuteUbergraph_BP_RockThrowable_DIH::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_RockThrowable_DIH_C_ExecuteUbergraph_BP_RockThrowable_DIH, CallFunc_GetCurrentMaxAmmo_ReturnValue) == 0x000004, "Member 'BP_RockThrowable_DIH_C_ExecuteUbergraph_BP_RockThrowable_DIH::CallFunc_GetCurrentMaxAmmo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RockThrowable_DIH_C_ExecuteUbergraph_BP_RockThrowable_DIH, K2Node_Event_Origin) == 0x000008, "Member 'BP_RockThrowable_DIH_C_ExecuteUbergraph_BP_RockThrowable_DIH::K2Node_Event_Origin' has a wrong offset!");
static_assert(offsetof(BP_RockThrowable_DIH_C_ExecuteUbergraph_BP_RockThrowable_DIH, K2Node_Event_Orientation) == 0x000014, "Member 'BP_RockThrowable_DIH_C_ExecuteUbergraph_BP_RockThrowable_DIH::K2Node_Event_Orientation' has a wrong offset!");
static_assert(offsetof(BP_RockThrowable_DIH_C_ExecuteUbergraph_BP_RockThrowable_DIH, K2Node_Event_OwningController) == 0x000020, "Member 'BP_RockThrowable_DIH_C_ExecuteUbergraph_BP_RockThrowable_DIH::K2Node_Event_OwningController' has a wrong offset!");
static_assert(offsetof(BP_RockThrowable_DIH_C_ExecuteUbergraph_BP_RockThrowable_DIH, K2Node_Event_ExpectedDelay) == 0x000028, "Member 'BP_RockThrowable_DIH_C_ExecuteUbergraph_BP_RockThrowable_DIH::K2Node_Event_ExpectedDelay' has a wrong offset!");
static_assert(offsetof(BP_RockThrowable_DIH_C_ExecuteUbergraph_BP_RockThrowable_DIH, CallFunc_GetComponentByClass_ReturnValue) == 0x000030, "Member 'BP_RockThrowable_DIH_C_ExecuteUbergraph_BP_RockThrowable_DIH::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RockThrowable_DIH_C_ExecuteUbergraph_BP_RockThrowable_DIH, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_RockThrowable_DIH_C_ExecuteUbergraph_BP_RockThrowable_DIH::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_RockThrowable_DIH.BP_RockThrowable_DIH_C.FireProjectile
// 0x0028 (0x0028 - 0x0000)
struct BP_RockThrowable_DIH_C_FireProjectile final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Orientation;                                       // 0x000C(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	class AController*                            OwningController;                                  // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExpectedDelay;                                     // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RockThrowable_DIH_C_FireProjectile) == 0x000008, "Wrong alignment on BP_RockThrowable_DIH_C_FireProjectile");
static_assert(sizeof(BP_RockThrowable_DIH_C_FireProjectile) == 0x000028, "Wrong size on BP_RockThrowable_DIH_C_FireProjectile");
static_assert(offsetof(BP_RockThrowable_DIH_C_FireProjectile, Origin) == 0x000000, "Member 'BP_RockThrowable_DIH_C_FireProjectile::Origin' has a wrong offset!");
static_assert(offsetof(BP_RockThrowable_DIH_C_FireProjectile, Orientation) == 0x00000C, "Member 'BP_RockThrowable_DIH_C_FireProjectile::Orientation' has a wrong offset!");
static_assert(offsetof(BP_RockThrowable_DIH_C_FireProjectile, OwningController) == 0x000018, "Member 'BP_RockThrowable_DIH_C_FireProjectile::OwningController' has a wrong offset!");
static_assert(offsetof(BP_RockThrowable_DIH_C_FireProjectile, ExpectedDelay) == 0x000020, "Member 'BP_RockThrowable_DIH_C_FireProjectile::ExpectedDelay' has a wrong offset!");

}

