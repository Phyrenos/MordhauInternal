#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MordhauGameState

#include "Basic.hpp"

#include "STRUCT_VoteKickInfo_structs.hpp"
#include "Engine_structs.hpp"
#include "E_VoteKickResult_structs.hpp"
#include "STRUCT_MatchEndInfo_structs.hpp"
#include "E_ScoreboardEntryTypes_structs.hpp"
#include "Mordhau_structs.hpp"
#include "Mordhau_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MordhauGameState.BP_MordhauGameState_C
// 0x0108 (0x08B8 - 0x07B0)
class ABP_MordhauGameState_C : public AMordhauGameState
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x07B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FSTRUCT_MatchEndInfo                   MatchEndInfo;                                      // 0x07C0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_VoteKickInfo                   VoteKickInfo;                                      // 0x07D8(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          MatchEndInfoReplicated;                            // 0x07F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UsesSpawnSelectScreen;                             // 0x07F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoAmmoBoxes;                                       // 0x07F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoPreplacedEquipment;                              // 0x07F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HideTargetNamesIfAlive;                            // 0x07F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OnlyLivingPlayersInScoreboard;                     // 0x07F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NoScoreInScoreboard;                               // 0x07F6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsVoteOngoing;                                     // 0x07F7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         VoteYesVotes;                                      // 0x07F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         VoteNoVotes;                                       // 0x07FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSet<class APlayerController*>                Voters;                                            // 0x0800(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          UsesCompetitiveRank;                               // 0x0850(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_ScoreboardEntryTypes                        Scoreboard_Entry_Type;                             // 0x0851(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_852[0x6];                                      // 0x0852(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, float>                    LastVoteKickRequestTime;                           // 0x0858(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              SaveLoadoutDispatcher;                             // 0x08A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_BP_MordhauGameState(int32 EntryPoint);
	void OnVoteKickVote(class APlayerController* Controller, bool VotedYes);
	void OnRequestedVoteCancel(class AMordhauPlayerState* Initiator);
	void TallyVoteKickVotes();
	void OnRequestedVoteKick(class AMordhauPlayerState* Initiator, class AMordhauPlayerState* Target);
	void ShowScoreboardDelayed();
	void ReplicatedKillNotify(class APlayerState* Killer, class APlayerState* Killed, class UClass* Weapon, uint8 Flags_0);
	void ReceiveTick(float DeltaSeconds);
	void GetScoreboardTime(struct FTimespan* Time);
	void GetScoreboardTimeInProgress(struct FTimespan* Time);
	void GetScoreboardObjectiveName(class FText* NewParam);
	void GetScoreboardTeamObjectiveValue(int32 Team, class FString* Output);
	void OnRep_MatchEndInfo();
	void HandleMatchEndInfo();
	void GetKillfeedColor(class APlayerState* PlayerState, struct FLinearColor* Color);
	void GetChatColor(class APlayerState* PlayerState, struct FLinearColor* Color);
	void AddKillNotify(class APlayerState* Killer, class APlayerState* Killed, class AActor* Weapon, EMordhauDamageType DamageType);
	void ReceiveKillNotify(class APlayerState* Killer, class APlayerState* Killed, class UClass* Weapon, uint8 Flags_0);
	void ShouldHideSpawnInfoText(bool* Hide);
	void OnRep_VoteKickInfo();
	void FinishVoteKick(E_VoteKickResult Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MordhauGameState_C">();
	}
	static class ABP_MordhauGameState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MordhauGameState_C>();
	}
};
static_assert(alignof(ABP_MordhauGameState_C) == 0x000008, "Wrong alignment on ABP_MordhauGameState_C");
static_assert(sizeof(ABP_MordhauGameState_C) == 0x0008B8, "Wrong size on ABP_MordhauGameState_C");
static_assert(offsetof(ABP_MordhauGameState_C, UberGraphFrame) == 0x0007B0, "Member 'ABP_MordhauGameState_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MordhauGameState_C, DefaultSceneRoot) == 0x0007B8, "Member 'ABP_MordhauGameState_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_MordhauGameState_C, MatchEndInfo) == 0x0007C0, "Member 'ABP_MordhauGameState_C::MatchEndInfo' has a wrong offset!");
static_assert(offsetof(ABP_MordhauGameState_C, VoteKickInfo) == 0x0007D8, "Member 'ABP_MordhauGameState_C::VoteKickInfo' has a wrong offset!");
static_assert(offsetof(ABP_MordhauGameState_C, MatchEndInfoReplicated) == 0x0007F0, "Member 'ABP_MordhauGameState_C::MatchEndInfoReplicated' has a wrong offset!");
static_assert(offsetof(ABP_MordhauGameState_C, UsesSpawnSelectScreen) == 0x0007F1, "Member 'ABP_MordhauGameState_C::UsesSpawnSelectScreen' has a wrong offset!");
static_assert(offsetof(ABP_MordhauGameState_C, NoAmmoBoxes) == 0x0007F2, "Member 'ABP_MordhauGameState_C::NoAmmoBoxes' has a wrong offset!");
static_assert(offsetof(ABP_MordhauGameState_C, NoPreplacedEquipment) == 0x0007F3, "Member 'ABP_MordhauGameState_C::NoPreplacedEquipment' has a wrong offset!");
static_assert(offsetof(ABP_MordhauGameState_C, HideTargetNamesIfAlive) == 0x0007F4, "Member 'ABP_MordhauGameState_C::HideTargetNamesIfAlive' has a wrong offset!");
static_assert(offsetof(ABP_MordhauGameState_C, OnlyLivingPlayersInScoreboard) == 0x0007F5, "Member 'ABP_MordhauGameState_C::OnlyLivingPlayersInScoreboard' has a wrong offset!");
static_assert(offsetof(ABP_MordhauGameState_C, NoScoreInScoreboard) == 0x0007F6, "Member 'ABP_MordhauGameState_C::NoScoreInScoreboard' has a wrong offset!");
static_assert(offsetof(ABP_MordhauGameState_C, IsVoteOngoing) == 0x0007F7, "Member 'ABP_MordhauGameState_C::IsVoteOngoing' has a wrong offset!");
static_assert(offsetof(ABP_MordhauGameState_C, VoteYesVotes) == 0x0007F8, "Member 'ABP_MordhauGameState_C::VoteYesVotes' has a wrong offset!");
static_assert(offsetof(ABP_MordhauGameState_C, VoteNoVotes) == 0x0007FC, "Member 'ABP_MordhauGameState_C::VoteNoVotes' has a wrong offset!");
static_assert(offsetof(ABP_MordhauGameState_C, Voters) == 0x000800, "Member 'ABP_MordhauGameState_C::Voters' has a wrong offset!");
static_assert(offsetof(ABP_MordhauGameState_C, UsesCompetitiveRank) == 0x000850, "Member 'ABP_MordhauGameState_C::UsesCompetitiveRank' has a wrong offset!");
static_assert(offsetof(ABP_MordhauGameState_C, Scoreboard_Entry_Type) == 0x000851, "Member 'ABP_MordhauGameState_C::Scoreboard_Entry_Type' has a wrong offset!");
static_assert(offsetof(ABP_MordhauGameState_C, LastVoteKickRequestTime) == 0x000858, "Member 'ABP_MordhauGameState_C::LastVoteKickRequestTime' has a wrong offset!");
static_assert(offsetof(ABP_MordhauGameState_C, SaveLoadoutDispatcher) == 0x0008A8, "Member 'ABP_MordhauGameState_C::SaveLoadoutDispatcher' has a wrong offset!");

}

