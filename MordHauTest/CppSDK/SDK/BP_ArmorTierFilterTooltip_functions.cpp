#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ArmorTierFilterTooltip

#include "Basic.hpp"

#include "BP_ArmorTierFilterTooltip_classes.hpp"
#include "BP_ArmorTierFilterTooltip_parameters.hpp"


namespace SDK
{

// Function BP_ArmorTierFilterTooltip.BP_ArmorTierFilterTooltip_C.Update Tooltip
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   Armor_Class                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bCanAfford                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bHasSelectedItem                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FText                             Description                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    bIsUnavailableAsPeasant                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ItemCost                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ArmorTierFilterTooltip_C::Update_Tooltip(uint8 Armor_Class, bool bCanAfford, bool bHasSelectedItem, const class FText& Description, bool bIsUnavailableAsPeasant, int32 ItemCost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ArmorTierFilterTooltip_C", "Update Tooltip");

	Params::BP_ArmorTierFilterTooltip_C_Update_Tooltip Parms{};

	Parms.Armor_Class = Armor_Class;
	Parms.bCanAfford = bCanAfford;
	Parms.bHasSelectedItem = bHasSelectedItem;
	Parms.Description = std::move(Description);
	Parms.bIsUnavailableAsPeasant = bIsUnavailableAsPeasant;
	Parms.ItemCost = ItemCost;

	UObject::ProcessEvent(Func, &Parms);
}

}

