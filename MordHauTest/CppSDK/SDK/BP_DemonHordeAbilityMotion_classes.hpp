#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DemonHordeAbilityMotion

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mordhau_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DemonHordeAbilityMotion.BP_DemonHordeAbilityMotion_C
// 0x0068 (0x0108 - 0x00A0)
class UBP_DemonHordeAbilityMotion_C : public UMordhauMotion
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class FText                                   Ability_Display_Name;                              // 0x00A8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Ability_Description;                               // 0x00C0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UTexture2D*                             Ability_Icon;                                      // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Motion_Turncap;                                    // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Motion_Use_Montage_Duration;                       // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Motion_Custom_Duration;                            // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Motion_Commit_Delay;                               // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           OnePP_Montage;                                     // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ThreePP_Montage;                                   // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DemonHordeAbilityMotion(int32 EntryPoint);
	void On_Commit_Successful();
	void OnEnded();
	void OnBegin();
	void CommitAbilityCost(bool* Return_Value);
	void CanAffordAbilityCost(bool* Return_Value);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DemonHordeAbilityMotion_C">();
	}
	static class UBP_DemonHordeAbilityMotion_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_DemonHordeAbilityMotion_C>();
	}
};
static_assert(alignof(UBP_DemonHordeAbilityMotion_C) == 0x000008, "Wrong alignment on UBP_DemonHordeAbilityMotion_C");
static_assert(sizeof(UBP_DemonHordeAbilityMotion_C) == 0x000108, "Wrong size on UBP_DemonHordeAbilityMotion_C");
static_assert(offsetof(UBP_DemonHordeAbilityMotion_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_DemonHordeAbilityMotion_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_DemonHordeAbilityMotion_C, Ability_Display_Name) == 0x0000A8, "Member 'UBP_DemonHordeAbilityMotion_C::Ability_Display_Name' has a wrong offset!");
static_assert(offsetof(UBP_DemonHordeAbilityMotion_C, Ability_Description) == 0x0000C0, "Member 'UBP_DemonHordeAbilityMotion_C::Ability_Description' has a wrong offset!");
static_assert(offsetof(UBP_DemonHordeAbilityMotion_C, Ability_Icon) == 0x0000D8, "Member 'UBP_DemonHordeAbilityMotion_C::Ability_Icon' has a wrong offset!");
static_assert(offsetof(UBP_DemonHordeAbilityMotion_C, Motion_Turncap) == 0x0000E0, "Member 'UBP_DemonHordeAbilityMotion_C::Motion_Turncap' has a wrong offset!");
static_assert(offsetof(UBP_DemonHordeAbilityMotion_C, Motion_Use_Montage_Duration) == 0x0000E8, "Member 'UBP_DemonHordeAbilityMotion_C::Motion_Use_Montage_Duration' has a wrong offset!");
static_assert(offsetof(UBP_DemonHordeAbilityMotion_C, Motion_Custom_Duration) == 0x0000EC, "Member 'UBP_DemonHordeAbilityMotion_C::Motion_Custom_Duration' has a wrong offset!");
static_assert(offsetof(UBP_DemonHordeAbilityMotion_C, Motion_Commit_Delay) == 0x0000F0, "Member 'UBP_DemonHordeAbilityMotion_C::Motion_Commit_Delay' has a wrong offset!");
static_assert(offsetof(UBP_DemonHordeAbilityMotion_C, OnePP_Montage) == 0x0000F8, "Member 'UBP_DemonHordeAbilityMotion_C::OnePP_Montage' has a wrong offset!");
static_assert(offsetof(UBP_DemonHordeAbilityMotion_C, ThreePP_Montage) == 0x000100, "Member 'UBP_DemonHordeAbilityMotion_C::ThreePP_Montage' has a wrong offset!");

}

