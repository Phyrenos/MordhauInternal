#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DemonHordeEnemy_Special

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mordhau_structs.hpp"
#include "BP_DemonHordeEnemy_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DemonHordeEnemy_Special.BP_DemonHordeEnemy_Special_C
// 0x0120 (0x1530 - 0x1410)
class ABP_DemonHordeEnemy_Special_C : public ABP_DemonHordeEnemy_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_DemonHordeEnemy_Special_C;       // 0x1410(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class USphereComponent*                       ForceAttackSphere;                                 // 0x1418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DetectionSphere;                                   // 0x1420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         PrimaryEquipment;                                  // 0x1428(0x0010)(Edit, BlueprintVisible)
	TArray<class UClass*>                         SecondaryEquipment;                                // 0x1438(0x0010)(Edit, BlueprintVisible)
	bool                                          DismembersOnHit;                                   // 0x1448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DismemberOnDeath;                                  // 0x1449(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ForceAttacks;                                      // 0x144A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DisableForceStabs;                                 // 0x144B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         EquipmentSpawnDelay;                               // 0x144C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ProfileVoice;                                      // 0x1450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1451[0x7];                                     // 0x1451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharacterProfile                      BlankProfile;                                      // 0x1458(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           DismemberedBones;                                  // 0x1510(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         LimpWalkSpeed;                                     // 0x1520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1524[0x4];                                     // 0x1524(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DelayedDamageSource;                               // 0x1528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DemonHordeEnemy_Special(int32 EntryPoint);
	void DelayedDeath();
	void ForceAttackLoop();
	void DismemberMulti(class FName bone);
	void OnTookDamage(bool bWillKill, EMordhauDamageType Type, uint8 SubType, const class FName& bone, const struct FVector& Point, class AActor* Source, class AActor* Agent);
	void GetClosestPlayer(class AActor** ClosestPlayer, int32* NearbyPlayerCount);
	void SetProfileVoice();
	void OnDied(float Angle, EMordhauDamageType Type, uint8 SubType, class FName bone, const struct FVector& Point, class AActor* Source, class AActor* Agent);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DemonHordeEnemy_Special_C">();
	}
	static class ABP_DemonHordeEnemy_Special_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DemonHordeEnemy_Special_C>();
	}
};
static_assert(alignof(ABP_DemonHordeEnemy_Special_C) == 0x000010, "Wrong alignment on ABP_DemonHordeEnemy_Special_C");
static_assert(sizeof(ABP_DemonHordeEnemy_Special_C) == 0x001530, "Wrong size on ABP_DemonHordeEnemy_Special_C");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_C, UberGraphFrame_BP_DemonHordeEnemy_Special_C) == 0x001410, "Member 'ABP_DemonHordeEnemy_Special_C::UberGraphFrame_BP_DemonHordeEnemy_Special_C' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_C, ForceAttackSphere) == 0x001418, "Member 'ABP_DemonHordeEnemy_Special_C::ForceAttackSphere' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_C, DetectionSphere) == 0x001420, "Member 'ABP_DemonHordeEnemy_Special_C::DetectionSphere' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_C, PrimaryEquipment) == 0x001428, "Member 'ABP_DemonHordeEnemy_Special_C::PrimaryEquipment' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_C, SecondaryEquipment) == 0x001438, "Member 'ABP_DemonHordeEnemy_Special_C::SecondaryEquipment' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_C, DismembersOnHit) == 0x001448, "Member 'ABP_DemonHordeEnemy_Special_C::DismembersOnHit' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_C, DismemberOnDeath) == 0x001449, "Member 'ABP_DemonHordeEnemy_Special_C::DismemberOnDeath' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_C, ForceAttacks) == 0x00144A, "Member 'ABP_DemonHordeEnemy_Special_C::ForceAttacks' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_C, DisableForceStabs) == 0x00144B, "Member 'ABP_DemonHordeEnemy_Special_C::DisableForceStabs' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_C, EquipmentSpawnDelay) == 0x00144C, "Member 'ABP_DemonHordeEnemy_Special_C::EquipmentSpawnDelay' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_C, ProfileVoice) == 0x001450, "Member 'ABP_DemonHordeEnemy_Special_C::ProfileVoice' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_C, BlankProfile) == 0x001458, "Member 'ABP_DemonHordeEnemy_Special_C::BlankProfile' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_C, DismemberedBones) == 0x001510, "Member 'ABP_DemonHordeEnemy_Special_C::DismemberedBones' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_C, LimpWalkSpeed) == 0x001520, "Member 'ABP_DemonHordeEnemy_Special_C::LimpWalkSpeed' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordeEnemy_Special_C, DelayedDamageSource) == 0x001528, "Member 'ABP_DemonHordeEnemy_Special_C::DelayedDamageSource' has a wrong offset!");

}

