#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MordhauOnlineSubsystem

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "MordhauOnlineSubsystem_structs.hpp"


namespace SDK
{

// Class MordhauOnlineSubsystem.OnlineUtilities
// 0x0000 (0x0028 - 0x0028)
class UOnlineUtilities final : public UObject
{
public:
	static bool CanCrossplayWith(EPlatform OtherPlatform);
	static int32 GetBuildVersion();
	static class FString GetCurrentPlatformName();
	static class FString GetEnumKey(const class FString& EnumName, const int32 EnumValue);
	static int32 GetEnumValue(const class FString& EnumName, const class FString& EnumKey);
	static int32 GetGameServerGamePort();
	static uint32 GetLocalNetworkVersion();
	static EServerLocation GetLocation(const class FString& LocationName);
	static class FText GetLocationDisplayName(EServerLocation Location);
	static class FString GetLocationName(EServerLocation Location);
	static class FString GetOSVersion();
	static int32 GetPerforceRevision();
	static int32 GetPerforceRevisionEnforced();
	static EPlatform GetPlatform();
	static EPlatform GetPlatformByName(const class FString& PlatformName);
	static class FString GetPlatformName(EPlatform Platform);
	static EPlatformSpecific GetPlatformSpecific();
	static class FString GetPlatformSpecificName(EPlatformSpecific Platform);
	static class UPlayFabAPI* GetPlayFabAPI();
	static struct FPlayFabPlayer GetPlayFabPlayer();
	static struct FPlayFabServer GetPlayFabServer();
	static EServerRegion GetRegion(const class FString& RegionName);
	static class FText GetRegionDisplayName(EServerRegion Region);
	static class FString GetRegionName(EServerRegion Region);
	static int32 GetReleaseVersion();
	static bool GetUseLegacyPakMounting();
	static bool IsDedicatedServer();
	static bool IsDevelopmentBranch();
	static bool IsDevelopmentBuild();
	static bool IsDevelopmentEnvironment();
	static bool IsOfficialServer();
	static bool IsPlayInEditor();
	static bool IsPrivateIPAddress(const class FString& IPAddress);
	static bool IsPublicIPAddress(const class FString& IPAddress);
	static bool IsValidIPAddress(const class FString& IPAddress);
	static bool IsWindowsVersionOrGreater(int32 MajorVersion, int32 MinorVersion, int32 ServicePackMajor);
	static bool MountPak(const class FString& PakPath);
	static int32 RandomRangeExclude(int32 Min, int32 Max, int32 Exclude);
	static bool ReportError(EReportErrorType ErrorType, const class FString& ErrorMessage);
	static void ReportUser(EPlayerReportType PlayerReportType, const class FString& Platform, const class FString& ReporterId, const class FString& OffenderId, const class FString& ErrorMessage, const class FString& ServerId);
	static class FString SanitizePlayerName(const class FString& InName, const class FString& InFallback);
	static bool UnmountPak(const class FString& PakPath);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnlineUtilities">();
	}
	static class UOnlineUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnlineUtilities>();
	}
};
static_assert(alignof(UOnlineUtilities) == 0x000008, "Wrong alignment on UOnlineUtilities");
static_assert(sizeof(UOnlineUtilities) == 0x000028, "Wrong size on UOnlineUtilities");

// Class MordhauOnlineSubsystem.PlayFabAPI
// 0x0828 (0x0850 - 0x0028)
class alignas(0x10) UPlayFabAPI final : public UObject
{
public:
	uint8                                         Pad_28[0x4B8];                                     // 0x0028(0x04B8)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bWasSuccessful, struct FPlayFabApiError& Error, const class FString& LeaderboardName, TArray<struct FLeaderboardEntry>& Entries, struct FLeaderboardEntry& SelfEntry)> OnGetLeaderboardComplete;                          // 0x04E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4F0[0x360];                                    // 0x04F0(0x0360)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetLeaderboard(const class FString& LeaderboardName);
	void GetPlayerByShortId(const TArray<class FString>& ShortId, const EPlatform PlatformFilter);
	class FString GetShortID();
	bool IsPlayerLoggedIn();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayFabAPI">();
	}
	static class UPlayFabAPI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayFabAPI>();
	}
};
static_assert(alignof(UPlayFabAPI) == 0x000010, "Wrong alignment on UPlayFabAPI");
static_assert(sizeof(UPlayFabAPI) == 0x000850, "Wrong size on UPlayFabAPI");
static_assert(offsetof(UPlayFabAPI, OnGetLeaderboardComplete) == 0x0004E0, "Member 'UPlayFabAPI::OnGetLeaderboardComplete' has a wrong offset!");

}

