#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DemonHordePlayerController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_HordePlayerController_classes.hpp"
#include "Mordhau_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DemonHordePlayerController.BP_DemonHordePlayerController_C
// 0x0010 (0x0F30 - 0x0F20)
class ABP_DemonHordePlayerController_C final : public ABP_HordePlayerController_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_DemonHordePlayerController_C;    // 0x0F20(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	bool                                          FirstPawnPossessed;                                // 0x0F28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_DemonHordePlayerController(int32 EntryPoint);
	void AdminGiveSpecialWeapon(int32 Type);
	void AdminBlessCurrentWeapon();
	void ReceivePossess(class APawn* PossessedPawn);
	void RequestGetDifficultyClient(const class FString& String);
	void RequestGetDifficulty();
	void GetDifficulty(const TArray<class FString>& Params_0);
	void RequestGetPresitgeClient(const class FString& String);
	void RequestGetPrestige();
	void GetPrestige(const TArray<class FString>& Params_0);
	void RequestSetPrestige(float DifficultyMod);
	void SetPrestige(const TArray<class FString>& Params_0);
	void ObjectiveSkillPointServer();
	void ClientReceiveScoreBP(EScoreFeedReason Reason, uint8 ReasonParam, float ScoreAmount, class AMordhauPlayerState* AssociatedPlayer);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DemonHordePlayerController_C">();
	}
	static class ABP_DemonHordePlayerController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DemonHordePlayerController_C>();
	}
};
static_assert(alignof(ABP_DemonHordePlayerController_C) == 0x000008, "Wrong alignment on ABP_DemonHordePlayerController_C");
static_assert(sizeof(ABP_DemonHordePlayerController_C) == 0x000F30, "Wrong size on ABP_DemonHordePlayerController_C");
static_assert(offsetof(ABP_DemonHordePlayerController_C, UberGraphFrame_BP_DemonHordePlayerController_C) == 0x000F20, "Member 'ABP_DemonHordePlayerController_C::UberGraphFrame_BP_DemonHordePlayerController_C' has a wrong offset!");
static_assert(offsetof(ABP_DemonHordePlayerController_C, FirstPawnPossessed) == 0x000F28, "Member 'ABP_DemonHordePlayerController_C::FirstPawnPossessed' has a wrong offset!");

}

