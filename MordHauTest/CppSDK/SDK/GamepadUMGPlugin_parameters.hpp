#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GamepadUMGPlugin

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.DisableVirtualCursor
// 0x0008 (0x0008 - 0x0000)
struct VirtualCursorFunctionLibrary_DisableVirtualCursor final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCursorFunctionLibrary_DisableVirtualCursor) == 0x000008, "Wrong alignment on VirtualCursorFunctionLibrary_DisableVirtualCursor");
static_assert(sizeof(VirtualCursorFunctionLibrary_DisableVirtualCursor) == 0x000008, "Wrong size on VirtualCursorFunctionLibrary_DisableVirtualCursor");
static_assert(offsetof(VirtualCursorFunctionLibrary_DisableVirtualCursor, PC) == 0x000000, "Member 'VirtualCursorFunctionLibrary_DisableVirtualCursor::PC' has a wrong offset!");

// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.EnableVirtualCursor
// 0x0010 (0x0010 - 0x0000)
struct VirtualCursorFunctionLibrary_EnableVirtualCursor final
{
public:
	bool                                          bIsInputModeGame;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PC;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCursorFunctionLibrary_EnableVirtualCursor) == 0x000008, "Wrong alignment on VirtualCursorFunctionLibrary_EnableVirtualCursor");
static_assert(sizeof(VirtualCursorFunctionLibrary_EnableVirtualCursor) == 0x000010, "Wrong size on VirtualCursorFunctionLibrary_EnableVirtualCursor");
static_assert(offsetof(VirtualCursorFunctionLibrary_EnableVirtualCursor, bIsInputModeGame) == 0x000000, "Member 'VirtualCursorFunctionLibrary_EnableVirtualCursor::bIsInputModeGame' has a wrong offset!");
static_assert(offsetof(VirtualCursorFunctionLibrary_EnableVirtualCursor, PC) == 0x000008, "Member 'VirtualCursorFunctionLibrary_EnableVirtualCursor::PC' has a wrong offset!");

// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.GetCursorViewportPosition
// 0x000C (0x000C - 0x0000)
struct VirtualCursorFunctionLibrary_GetCursorViewportPosition final
{
public:
	struct FVector2D                              position;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VirtualCursorFunctionLibrary_GetCursorViewportPosition) == 0x000004, "Wrong alignment on VirtualCursorFunctionLibrary_GetCursorViewportPosition");
static_assert(sizeof(VirtualCursorFunctionLibrary_GetCursorViewportPosition) == 0x00000C, "Wrong size on VirtualCursorFunctionLibrary_GetCursorViewportPosition");
static_assert(offsetof(VirtualCursorFunctionLibrary_GetCursorViewportPosition, position) == 0x000000, "Member 'VirtualCursorFunctionLibrary_GetCursorViewportPosition::position' has a wrong offset!");
static_assert(offsetof(VirtualCursorFunctionLibrary_GetCursorViewportPosition, ReturnValue) == 0x000008, "Member 'VirtualCursorFunctionLibrary_GetCursorViewportPosition::ReturnValue' has a wrong offset!");

// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.GetHoveredWidgetName
// 0x0008 (0x0008 - 0x0000)
struct VirtualCursorFunctionLibrary_GetHoveredWidgetName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCursorFunctionLibrary_GetHoveredWidgetName) == 0x000004, "Wrong alignment on VirtualCursorFunctionLibrary_GetHoveredWidgetName");
static_assert(sizeof(VirtualCursorFunctionLibrary_GetHoveredWidgetName) == 0x000008, "Wrong size on VirtualCursorFunctionLibrary_GetHoveredWidgetName");
static_assert(offsetof(VirtualCursorFunctionLibrary_GetHoveredWidgetName, ReturnValue) == 0x000000, "Member 'VirtualCursorFunctionLibrary_GetHoveredWidgetName::ReturnValue' has a wrong offset!");

// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.GetHoveredWidgetPosition
// 0x000C (0x000C - 0x0000)
struct VirtualCursorFunctionLibrary_GetHoveredWidgetPosition final
{
public:
	struct FVector2D                              position;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VirtualCursorFunctionLibrary_GetHoveredWidgetPosition) == 0x000004, "Wrong alignment on VirtualCursorFunctionLibrary_GetHoveredWidgetPosition");
static_assert(sizeof(VirtualCursorFunctionLibrary_GetHoveredWidgetPosition) == 0x00000C, "Wrong size on VirtualCursorFunctionLibrary_GetHoveredWidgetPosition");
static_assert(offsetof(VirtualCursorFunctionLibrary_GetHoveredWidgetPosition, position) == 0x000000, "Member 'VirtualCursorFunctionLibrary_GetHoveredWidgetPosition::position' has a wrong offset!");
static_assert(offsetof(VirtualCursorFunctionLibrary_GetHoveredWidgetPosition, ReturnValue) == 0x000008, "Member 'VirtualCursorFunctionLibrary_GetHoveredWidgetPosition::ReturnValue' has a wrong offset!");

// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.GetLastKeyPressed
// 0x0018 (0x0018 - 0x0000)
struct VirtualCursorFunctionLibrary_GetLastKeyPressed final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCursorFunctionLibrary_GetLastKeyPressed) == 0x000008, "Wrong alignment on VirtualCursorFunctionLibrary_GetLastKeyPressed");
static_assert(sizeof(VirtualCursorFunctionLibrary_GetLastKeyPressed) == 0x000018, "Wrong size on VirtualCursorFunctionLibrary_GetLastKeyPressed");
static_assert(offsetof(VirtualCursorFunctionLibrary_GetLastKeyPressed, ReturnValue) == 0x000000, "Member 'VirtualCursorFunctionLibrary_GetLastKeyPressed::ReturnValue' has a wrong offset!");

// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.IsAnalogCursorEnabled
// 0x0010 (0x0010 - 0x0000)
struct VirtualCursorFunctionLibrary_IsAnalogCursorEnabled final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VirtualCursorFunctionLibrary_IsAnalogCursorEnabled) == 0x000008, "Wrong alignment on VirtualCursorFunctionLibrary_IsAnalogCursorEnabled");
static_assert(sizeof(VirtualCursorFunctionLibrary_IsAnalogCursorEnabled) == 0x000010, "Wrong size on VirtualCursorFunctionLibrary_IsAnalogCursorEnabled");
static_assert(offsetof(VirtualCursorFunctionLibrary_IsAnalogCursorEnabled, PC) == 0x000000, "Member 'VirtualCursorFunctionLibrary_IsAnalogCursorEnabled::PC' has a wrong offset!");
static_assert(offsetof(VirtualCursorFunctionLibrary_IsAnalogCursorEnabled, ReturnValue) == 0x000008, "Member 'VirtualCursorFunctionLibrary_IsAnalogCursorEnabled::ReturnValue' has a wrong offset!");

// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.IsCursorOverInteractableWidget
// 0x0001 (0x0001 - 0x0000)
struct VirtualCursorFunctionLibrary_IsCursorOverInteractableWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCursorFunctionLibrary_IsCursorOverInteractableWidget) == 0x000001, "Wrong alignment on VirtualCursorFunctionLibrary_IsCursorOverInteractableWidget");
static_assert(sizeof(VirtualCursorFunctionLibrary_IsCursorOverInteractableWidget) == 0x000001, "Wrong size on VirtualCursorFunctionLibrary_IsCursorOverInteractableWidget");
static_assert(offsetof(VirtualCursorFunctionLibrary_IsCursorOverInteractableWidget, ReturnValue) == 0x000000, "Member 'VirtualCursorFunctionLibrary_IsCursorOverInteractableWidget::ReturnValue' has a wrong offset!");

// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.IsHoveringNewWidget
// 0x0001 (0x0001 - 0x0000)
struct VirtualCursorFunctionLibrary_IsHoveringNewWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCursorFunctionLibrary_IsHoveringNewWidget) == 0x000001, "Wrong alignment on VirtualCursorFunctionLibrary_IsHoveringNewWidget");
static_assert(sizeof(VirtualCursorFunctionLibrary_IsHoveringNewWidget) == 0x000001, "Wrong size on VirtualCursorFunctionLibrary_IsHoveringNewWidget");
static_assert(offsetof(VirtualCursorFunctionLibrary_IsHoveringNewWidget, ReturnValue) == 0x000000, "Member 'VirtualCursorFunctionLibrary_IsHoveringNewWidget::ReturnValue' has a wrong offset!");

// Function GamepadUMGPlugin.VirtualCursorFunctionLibrary.IsHoveringSnapWidget
// 0x0001 (0x0001 - 0x0000)
struct VirtualCursorFunctionLibrary_IsHoveringSnapWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VirtualCursorFunctionLibrary_IsHoveringSnapWidget) == 0x000001, "Wrong alignment on VirtualCursorFunctionLibrary_IsHoveringSnapWidget");
static_assert(sizeof(VirtualCursorFunctionLibrary_IsHoveringSnapWidget) == 0x000001, "Wrong size on VirtualCursorFunctionLibrary_IsHoveringSnapWidget");
static_assert(offsetof(VirtualCursorFunctionLibrary_IsHoveringSnapWidget, ReturnValue) == 0x000000, "Member 'VirtualCursorFunctionLibrary_IsHoveringSnapWidget::ReturnValue' has a wrong offset!");

}

