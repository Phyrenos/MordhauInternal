#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_StatsPanel

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "Mordhau_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_StatsPanel.BP_StatsPanel_C
// 0x0018 (0x0278 - 0x0260)
class UBP_StatsPanel_C : public UUserWidget
{
public:
	class AMordhauEquipment*                      Equipment;                                         // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class AMordhauEquipment* Equipment)> Update;                                            // 0x0268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void Get_Weapon_Values(EAttackMove Attack_Move, float* Windup, float* Combo_Windup, float* Release, float* MissRecovery, int32* FeintCost, int32* MorphCost, float* StaminaDrain, float* MissStaminaCost, float* WoodDamage, float* StoneDamage, bool* bCanCombo, bool* bStopOnHit, float* T0_Head, float* T0_Torso, float* T0_Legs, float* T1_Head, float* T1Torso, float* T1_Legs, float* T2_Head, float* T2_Torso, float* T2_Legs, float* T3_Head, float* T3_Torso, float* T3_Legs, float* X, float* Y, float* Parry_Stamina_Negation, uint8* Block_Movement_Restriction, bool* Is_Parry_Held, float* Hit_Knockback, bool* ShouldFlinch, const struct FAttackInfo* Attack_Info);
	void Get_Ranged_Weapon_Values(float* WoodDamage, float* StoneDamage, float* T0_Head, float* T0_Torso, float* T0_Legs, float* T1_Head, float* T1Torso, float* T1_Legs, float* T2_Head, float* T2_Torso, float* T2_Legs, float* T3_Head, float* T3_Torso, float* T3_Legs, bool* Should_Flinch, float* Reload_Time, float* Auto_Reload_Time, uint8* Max_Ammo, float* Ranged_Draw_Time);
	void Get_Melee_Attack_Info(class AMordhauEquipment* Equipment_, EAttackMove Move, const struct FAttackInfo* Attack_Info, class AMordhauWeapon** AsMordhau_Weapon);
	float Get_Average_Damage(const struct FAttackInfo& Attack_Info);
	float Get_Average_Projectile_Damage(class UClass* Attack_Info);
	void Get_Range_Attack_Info(class AMordhauEquipment* Equipment_, class AMordhauWeapon** AsMordhau_Weapon, class UClass** ProjectileClass);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_StatsPanel_C">();
	}
	static class UBP_StatsPanel_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_StatsPanel_C>();
	}
};
static_assert(alignof(UBP_StatsPanel_C) == 0x000008, "Wrong alignment on UBP_StatsPanel_C");
static_assert(sizeof(UBP_StatsPanel_C) == 0x000278, "Wrong size on UBP_StatsPanel_C");
static_assert(offsetof(UBP_StatsPanel_C, Equipment) == 0x000260, "Member 'UBP_StatsPanel_C::Equipment' has a wrong offset!");
static_assert(offsetof(UBP_StatsPanel_C, Update) == 0x000268, "Member 'UBP_StatsPanel_C::Update' has a wrong offset!");

}

