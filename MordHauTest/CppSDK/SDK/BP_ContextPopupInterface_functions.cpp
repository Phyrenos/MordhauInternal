#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ContextPopupInterface

#include "Basic.hpp"

#include "BP_ContextPopupInterface_classes.hpp"
#include "BP_ContextPopupInterface_parameters.hpp"


namespace SDK
{

// Function BP_ContextPopupInterface.BP_ContextPopupInterface_C.OptionSelected
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Option                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IBP_ContextPopupInterface_C::OptionSelected(const class FString& Option)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ContextPopupInterface_C", "OptionSelected");

	Params::BP_ContextPopupInterface_C_OptionSelected Parms{};

	Parms.Option = std::move(Option);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ContextPopupInterface.BP_ContextPopupInterface_C.InitializeOptions
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FString, class FText>        OptionsMap                                             (Parm, OutParm)

void IBP_ContextPopupInterface_C::InitializeOptions(TMap<class FString, class FText>* OptionsMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ContextPopupInterface_C", "InitializeOptions");

	Params::BP_ContextPopupInterface_C_InitializeOptions Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OptionsMap != nullptr)
		*OptionsMap = std::move(Parms.OptionsMap);
}


// Function BP_ContextPopupInterface.BP_ContextPopupInterface_C.CreateWrapper
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FString, class FText>        InOptions                                              (BlueprintVisible, BlueprintReadOnly, Parm)

void IBP_ContextPopupInterface_C::CreateWrapper(const TMap<class FString, class FText>& InOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ContextPopupInterface_C", "CreateWrapper");

	Params::BP_ContextPopupInterface_C_CreateWrapper Parms{};

	Parms.InOptions = std::move(InOptions);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ContextPopupInterface.BP_ContextPopupInterface_C.CreateWrapper_Complex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FString, class FText>        InOptions                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// TArray<class UTexture2D*>               Icons                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FLinearColor>             Colors                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FText                             Title                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void IBP_ContextPopupInterface_C::CreateWrapper_Complex(const TMap<class FString, class FText>& InOptions, const TArray<class UTexture2D*>& Icons, const TArray<struct FLinearColor>& Colors, const class FText& Title)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ContextPopupInterface_C", "CreateWrapper_Complex");

	Params::BP_ContextPopupInterface_C_CreateWrapper_Complex Parms{};

	Parms.InOptions = std::move(InOptions);
	Parms.Icons = std::move(Icons);
	Parms.Colors = std::move(Colors);
	Parms.Title = std::move(Title);

	UObject::ProcessEvent(Func, &Parms);
}

}

