#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UnlockInfoTooltip

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_UnlockInfoTooltip.BP_UnlockInfoTooltip_C
// 0x0048 (0x02A8 - 0x0260)
class UBP_UnlockInfoTooltip_C final : public UUserWidget
{
public:
	class UBP_CasualRankDiamond_C*                BP_CasualRankDiamond;                              // 0x0260(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_DLCIndicator_C*                     BP_DLCIndicator_1;                                 // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_ItemGoldCost_C*                     BP_ItemGoldCost;                                   // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ic_locked;                                         // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image;                                             // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock;                                         // 0x0288(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_1;                                       // 0x0290(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_2;                                       // 0x0298(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          Can_Unlock;                                        // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsSelected;                                       // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCanAffordGold;                                    // 0x02A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsRankRequirementMet;                             // 0x02A3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void Update(int32 Gold_Requirement, int32 Rank_Requirement, bool bIsDLC);
	ESlateVisibility GetVisibility_0();
	ESlateVisibility GetVisibility_1();
	ESlateVisibility GetVisibility_2();
	class FText GetText_0();
	struct FSlateColor GetColorAndOpacity_0();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UnlockInfoTooltip_C">();
	}
	static class UBP_UnlockInfoTooltip_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_UnlockInfoTooltip_C>();
	}
};
static_assert(alignof(UBP_UnlockInfoTooltip_C) == 0x000008, "Wrong alignment on UBP_UnlockInfoTooltip_C");
static_assert(sizeof(UBP_UnlockInfoTooltip_C) == 0x0002A8, "Wrong size on UBP_UnlockInfoTooltip_C");
static_assert(offsetof(UBP_UnlockInfoTooltip_C, BP_CasualRankDiamond) == 0x000260, "Member 'UBP_UnlockInfoTooltip_C::BP_CasualRankDiamond' has a wrong offset!");
static_assert(offsetof(UBP_UnlockInfoTooltip_C, BP_DLCIndicator_1) == 0x000268, "Member 'UBP_UnlockInfoTooltip_C::BP_DLCIndicator_1' has a wrong offset!");
static_assert(offsetof(UBP_UnlockInfoTooltip_C, BP_ItemGoldCost) == 0x000270, "Member 'UBP_UnlockInfoTooltip_C::BP_ItemGoldCost' has a wrong offset!");
static_assert(offsetof(UBP_UnlockInfoTooltip_C, ic_locked) == 0x000278, "Member 'UBP_UnlockInfoTooltip_C::ic_locked' has a wrong offset!");
static_assert(offsetof(UBP_UnlockInfoTooltip_C, Image) == 0x000280, "Member 'UBP_UnlockInfoTooltip_C::Image' has a wrong offset!");
static_assert(offsetof(UBP_UnlockInfoTooltip_C, TextBlock) == 0x000288, "Member 'UBP_UnlockInfoTooltip_C::TextBlock' has a wrong offset!");
static_assert(offsetof(UBP_UnlockInfoTooltip_C, TextBlock_1) == 0x000290, "Member 'UBP_UnlockInfoTooltip_C::TextBlock_1' has a wrong offset!");
static_assert(offsetof(UBP_UnlockInfoTooltip_C, TextBlock_2) == 0x000298, "Member 'UBP_UnlockInfoTooltip_C::TextBlock_2' has a wrong offset!");
static_assert(offsetof(UBP_UnlockInfoTooltip_C, Can_Unlock) == 0x0002A0, "Member 'UBP_UnlockInfoTooltip_C::Can_Unlock' has a wrong offset!");
static_assert(offsetof(UBP_UnlockInfoTooltip_C, bIsSelected) == 0x0002A1, "Member 'UBP_UnlockInfoTooltip_C::bIsSelected' has a wrong offset!");
static_assert(offsetof(UBP_UnlockInfoTooltip_C, bCanAffordGold) == 0x0002A2, "Member 'UBP_UnlockInfoTooltip_C::bCanAffordGold' has a wrong offset!");
static_assert(offsetof(UBP_UnlockInfoTooltip_C, bIsRankRequirementMet) == 0x0002A3, "Member 'UBP_UnlockInfoTooltip_C::bIsRankRequirementMet' has a wrong offset!");

}

