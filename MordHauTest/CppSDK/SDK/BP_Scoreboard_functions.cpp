#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Scoreboard

#include "Basic.hpp"

#include "BP_Scoreboard_classes.hpp"
#include "BP_Scoreboard_parameters.hpp"


namespace SDK
{

// Function BP_Scoreboard.BP_Scoreboard_C.ExecuteUbergraph_BP_Scoreboard
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Scoreboard_C::ExecuteUbergraph_BP_Scoreboard(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "ExecuteUbergraph_BP_Scoreboard");

	Params::BP_Scoreboard_C_ExecuteUbergraph_BP_Scoreboard Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Scoreboard.BP_Scoreboard_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UBP_Scoreboard_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scoreboard.BP_Scoreboard_C.Refresh Players Array
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_Scoreboard_C::Refresh_Players_Array()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "Refresh Players Array");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scoreboard.BP_Scoreboard_C.Show
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_Scoreboard_C::Show()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "Show");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scoreboard.BP_Scoreboard_C.Hide
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_Scoreboard_C::Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "Hide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scoreboard.BP_Scoreboard_C.GetScoreboardTime
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Time                                                   (Parm, OutParm)

void UBP_Scoreboard_C::GetScoreboardTime(class FText* Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "GetScoreboardTime");

	Params::BP_Scoreboard_C_GetScoreboardTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Time != nullptr)
		*Time = std::move(Parms.Time);
}


// Function BP_Scoreboard.BP_Scoreboard_C.GetTeam1Name
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Text                                                   (Parm, OutParm)

void UBP_Scoreboard_C::GetTeam1Name(class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "GetTeam1Name");

	Params::BP_Scoreboard_C_GetTeam1Name Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BP_Scoreboard.BP_Scoreboard_C.GetTeamName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Text                                                   (Parm, OutParm)

void UBP_Scoreboard_C::GetTeamName(int32 Team, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "GetTeamName");

	Params::BP_Scoreboard_C_GetTeamName Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BP_Scoreboard.BP_Scoreboard_C.GetTeam2Name
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Text                                                   (Parm, OutParm)

void UBP_Scoreboard_C::GetTeam2Name(class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "GetTeam2Name");

	Params::BP_Scoreboard_C_GetTeam2Name Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BP_Scoreboard.BP_Scoreboard_C.GetTeamPlayers
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Text                                                   (Parm, OutParm)

void UBP_Scoreboard_C::GetTeamPlayers(int32 Team, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "GetTeamPlayers");

	Params::BP_Scoreboard_C_GetTeamPlayers Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BP_Scoreboard.BP_Scoreboard_C.GetTeam1Players
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Text                                                   (Parm, OutParm)

void UBP_Scoreboard_C::GetTeam1Players(class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "GetTeam1Players");

	Params::BP_Scoreboard_C_GetTeam1Players Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BP_Scoreboard.BP_Scoreboard_C.GetTeam2Players
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Text                                                   (Parm, OutParm)

void UBP_Scoreboard_C::GetTeam2Players(class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "GetTeam2Players");

	Params::BP_Scoreboard_C_GetTeam2Players Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BP_Scoreboard.BP_Scoreboard_C.GetGameModeName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Text                                                   (Parm, OutParm)

void UBP_Scoreboard_C::GetGameModeName(class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "GetGameModeName");

	Params::BP_Scoreboard_C_GetGameModeName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BP_Scoreboard.BP_Scoreboard_C.GetObjectiveName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Text                                                   (Parm, OutParm)

void UBP_Scoreboard_C::GetObjectiveName(class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "GetObjectiveName");

	Params::BP_Scoreboard_C_GetObjectiveName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BP_Scoreboard.BP_Scoreboard_C.GetTeam1ObjectiveValue
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Text                                                   (Parm, OutParm)

void UBP_Scoreboard_C::GetTeam1ObjectiveValue(class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "GetTeam1ObjectiveValue");

	Params::BP_Scoreboard_C_GetTeam1ObjectiveValue Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BP_Scoreboard.BP_Scoreboard_C.GetTeam2ObjectiveValue
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Text                                                   (Parm, OutParm)

void UBP_Scoreboard_C::GetTeam2ObjectiveValue(class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "GetTeam2ObjectiveValue");

	Params::BP_Scoreboard_C_GetTeam2ObjectiveValue Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BP_Scoreboard.BP_Scoreboard_C.GetTeamObjectiveValue
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Text                                                   (Parm, OutParm)

void UBP_Scoreboard_C::GetTeamObjectiveValue(int32 Team, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "GetTeamObjectiveValue");

	Params::BP_Scoreboard_C_GetTeamObjectiveValue Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BP_Scoreboard.BP_Scoreboard_C.GetMapName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Text                                                   (Parm, OutParm)

void UBP_Scoreboard_C::GetMapName(class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "GetMapName");

	Params::BP_Scoreboard_C_GetMapName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BP_Scoreboard.BP_Scoreboard_C.GetServerName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Text                                                   (Parm, OutParm)

void UBP_Scoreboard_C::GetServerName(class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "GetServerName");

	Params::BP_Scoreboard_C_GetServerName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BP_Scoreboard.BP_Scoreboard_C.GetMaxPlayers
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   DivideBy                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Text                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Scoreboard_C::GetMaxPlayers(int32 DivideBy, int32* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "GetMaxPlayers");

	Params::BP_Scoreboard_C_GetMaxPlayers Parms{};

	Parms.DivideBy = DivideBy;

	UObject::ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = Parms.Text;
}


// Function BP_Scoreboard.BP_Scoreboard_C.Refresh
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMordhauPlayerState*              PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Scoreboard_C::Refresh(class AMordhauPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "Refresh");

	Params::BP_Scoreboard_C_Refresh Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Scoreboard.BP_Scoreboard_C.Update
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_Scoreboard_C::Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "Update");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scoreboard.BP_Scoreboard_C.Get Team Color
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Output__Linear_                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      Output__Slate_                                         (Parm, OutParm)

void UBP_Scoreboard_C::Get_Team_Color(int32 Team, struct FLinearColor* Output__Linear_, struct FSlateColor* Output__Slate_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoreboard_C", "Get Team Color");

	Params::BP_Scoreboard_C_Get_Team_Color Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);

	if (Output__Linear_ != nullptr)
		*Output__Linear_ = std::move(Parms.Output__Linear_);

	if (Output__Slate_ != nullptr)
		*Output__Slate_ = std::move(Parms.Output__Slate_);
}

}

